{"result": {"(not finished)": 0, "ERROR": 2, "FAIL": 2, "INFO": 7, "PASS": 175, "SKIP": 38, "WARN": 14}, "sections": [{"checks": [{"description": "Check hhea.caretSlopeRise and hhea.caretSlopeRun", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/caret_slope>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "opentype.caret_slope", "proposal": ["https://github.com/fonttools/fontbakery/issues/3670"], "rationale": "\n        Checks whether hhea.caretSlopeRise and hhea.caretSlopeRun\n        match with post.italicAngle.\n\n        For Upright fonts, you can set hhea.caretSlopeRise to 1\n        and hhea.caretSlopeRun to 0.\n\n        For Italic fonts, you can set hhea.caretSlopeRise to head.unitsPerEm\n        and calculate hhea.caretSlopeRun like this:\n        round(math.tan(\n          math.radians(-1 * font[\"post\"].italicAngle)) * font[\"head\"].unitsPerEm)\n\n        This check allows for a 0.1\u00b0 rounding difference between the Italic angle\n        as calculated by the caret slope and post.italicAngle\n    ", "result": "PASS", "severity": null}, {"description": "Is the CFF2 subr/gsubr call depth > 10?", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/cff2_call_depth>", [["font", 0]]], "logs": [{"message": {"code": "unfulfilled-conditions", "message": "Unfulfilled Conditions: is_cff2"}, "status": "SKIP"}], "module": "opentype.cff2_call_depth", "proposal": ["https://github.com/fonttools/fontbakery/pull/2425"], "rationale": "\n        Per \"The CFF2 CharString Format\", the \"Subr nesting, stack limit\" is 10.\n    ", "result": "SKIP", "severity": null}, {"description": "Does the font's CFF table top dict strings fit into the ASCII range?", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/cff_ascii_strings>", [["font", 0]]], "logs": [{"message": {"code": "unfulfilled-conditions", "message": "Unfulfilled Conditions: is_cff"}, "status": "SKIP"}], "module": "opentype.cff_ascii_strings", "proposal": ["https://github.com/fonttools/fontbakery/issues/4619"], "rationale": "\n        All CFF Table top dict string chars should fit into the ASCII range.\n    ", "result": "SKIP", "severity": null}, {"description": "Is the CFF subr/gsubr call depth > 10?", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/cff_call_depth>", [["font", 0]]], "logs": [{"message": {"code": "unfulfilled-conditions", "message": "Unfulfilled Conditions: is_cff"}, "status": "SKIP"}], "module": "opentype.cff_call_depth", "proposal": ["https://github.com/fonttools/fontbakery/pull/2425"], "rationale": "\n        Per \"The Type 2 Charstring Format, Technical Note #5177\",\n        the \"Subr nesting, stack limit\" is 10.\n    ", "result": "SKIP", "severity": null}, {"description": "Does the font use deprecated CFF operators or operations?", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/cff_deprecated_operators>", [["font", 0]]], "logs": [{"message": {"code": "unfulfilled-conditions", "message": "Unfulfilled Conditions: is_cff"}, "status": "SKIP"}], "module": "opentype.cff_deprecated_operators", "proposal": ["https://github.com/fonttools/fontbakery/pull/3033"], "rationale": "\n        The 'dotsection' operator and the use of 'endchar' to build accented characters\n        from the Adobe Standard Encoding Character Set (\"seac\") are deprecated in CFF.\n        Adobe recommends repairing any fonts that use these, especially endchar-as-seac,\n        because a rendering issue was discovered in Microsoft Word with a font that\n        makes use of this operation. The check treats that usage as a FAIL.\n        There are no known ill effects of using dotsection, so that check is a WARN.\n    ", "result": "SKIP", "severity": null}, {"description": "Check code page character ranges", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/code_pages>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "opentype.code_pages", "proposal": ["https://github.com/fonttools/fontbakery/issues/2474"], "rationale": "\n        At least some programs (such as Word and Sublime Text) under Windows 7\n        do not recognize fonts unless code page bits are properly set on the\n        ulCodePageRange1 (and/or ulCodePageRange2) fields of the OS/2 table.\n\n        More specifically, the fonts are selectable in the font menu, but whichever\n        Windows API these applications use considers them unsuitable for any\n        character set, so anything set in these fonts is rendered with Arial as a\n        fallback font.\n\n        This check currently does not identify which code pages should be set.\n        Auto-detecting coverage is not trivial since the OpenType specification\n        leaves the interpretation of whether a given code page is \"functional\"\n        or not open to the font developer to decide.\n\n        So here we simply detect as a FAIL when a given font has no code page\n        declared at all.\n    ", "result": "PASS", "severity": null}, {"description": "Check that OS/2.fsSelection bold & italic settings are unique for each NameID1", "documentation": null, "experimental": false, "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/family/bold_italic_unique_for_nameid1>", []], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "opentype.family.bold_italic_unique_for_nameid1", "proposal": ["https://github.com/fonttools/fontbakery/pull/2388"], "rationale": "\n        Per the OpenType spec: name ID 1 'is used in combination with Font Subfamily\n        name (name ID 2), and should be shared among at most four fonts that differ\n        only in weight or style.\n\n        This four-way distinction should also be reflected in the OS/2.fsSelection\n        field, using bits 0 and 5.\n    ", "result": "PASS", "severity": null}, {"description": "Verify that family names in the name table are consistent across all fonts in the family. Checks Typographic Family name (nameID 16) if present, otherwise uses Font Family name (nameID 1)", "documentation": null, "experimental": false, "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/family/consistent_family_name>", []], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "opentype.family.consistent_family_name", "proposal": ["https://github.com/fonttools/fontbakery/issues/4112"], "rationale": "\n        Per the OpenType spec:\n\n            * \"...many existing applications that use this pair of names assume that a\n              Font Family name is shared by at most four fonts that form a font\n              style-linking group\"\n\n            * \"For extended typographic families that includes fonts other than the\n              four basic styles(regular, italic, bold, bold italic), it is strongly\n              recommended that name IDs 16 and 17 be used in fonts to create an\n              extended, typographic grouping.\"\n\n            * \"If name ID 16 is absent, then name ID 1 is considered to be the\n              typographic family name.\"\n\n        https://learn.microsoft.com/en-us/typography/opentype/spec/name\n\n        Fonts within a font family all must have consistent names\n        in the Typographic Family name (nameID 16)\n        or Font Family name (nameID 1), depending on which it uses.\n\n        Inconsistent font/typographic family names across fonts in a family\n        can result in unexpected behaviors, such as broken style linking.\n    ", "result": "PASS", "severity": null}, {"description": "Make sure all font files have the same version value.", "documentation": null, "experimental": false, "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/family/equal_font_versions>", []], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "opentype.family.equal_font_versions", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        Within a family released at the same time, all members of the family\n        should have the same version number in the head table.\n    ", "result": "PASS", "severity": null}, {"description": "Verify that each group of fonts with the same nameID 1 has maximum of 4 fonts.", "documentation": null, "experimental": false, "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/family/max_4_fonts_per_family_name>", []], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "opentype.family.max_4_fonts_per_family_name", "proposal": ["https://github.com/fonttools/fontbakery/pull/2372"], "rationale": "\n        Per the OpenType spec:\n\n        'The Font Family name [...] should be shared among at most four fonts that\n        differ only in weight or style [...]'\n    ", "result": "PASS", "severity": null}, {"description": "Font follows the family naming recommendations?", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/family_naming_recommendations>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "opentype.family_naming_recommendations", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        This check ensures that the length of various family name and style\n        name strings in the name table are within the maximum length\n        recommended by the OpenType specification.\n    ", "result": "PASS", "severity": null}, {"description": "Fonts have consistent PANOSE family type?", "documentation": null, "experimental": false, "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/family/panose_familytype>", []], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "opentype.family.panose_familytype", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        The [PANOSE value](https://monotype.github.io/panose/) in the OS/2 table is a\n        way of classifying a font based on its visual appearance and characteristics.\n\n        The first field in the PANOSE classification is the family type: 2 means Latin\n        Text, 3 means Latin Script, 4 means Latin Decorative, 5 means Latin Symbol.\n        This check ensures that within a family, all fonts have the same family type.\n    ", "result": "PASS", "severity": null}, {"description": "Fonts have consistent underline thickness?", "documentation": null, "experimental": false, "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/family/underline_thickness>", []], "logs": [{"message": {"code": null, "message": "Fonts have consistent underline thickness."}, "status": "PASS"}], "module": "opentype.family.underline_thickness", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        Dave C Lemon (Adobe Type Team) recommends setting the underline thickness to be\n        consistent across the family.\n\n        If thicknesses are not family consistent, words set on the same line which have\n        different styles look strange.\n    ", "result": "PASS", "severity": null}, {"description": "Checking font version fields (head and name table).", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/font_version>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "opentype.font_version", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n            The OpenType specification provides for two fields which contain\n            the version number of the font: fontRevision in the head table,\n            and nameID 5 in the name table. If these fields do not match,\n            different applications will report different version numbers for\n            the font.\n        ", "result": "PASS", "severity": null}, {"description": "Checking OS/2 fsSelection value.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/fsselection>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "opentype.fsselection", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829", "https://github.com/fonttools/fontbakery/pull/2382"], "rationale": "\n        The OS/2.fsSelection field is a bit field used to specify the stylistic\n        qualities of the font - in particular, it specifies to some operating\n        systems whether the font is italic (bit 0), bold (bit 5) or regular\n        (bit 6).\n\n        This check verifies that the fsSelection field is set correctly for the\n        font style. For a family of static fonts created in GlyphsApp, this is\n        set by using the style linking checkboxes in the exports settings.\n\n        Additionally, the bold and italic bits in OS/2.fsSelection must match the\n        bold and italic bits in head.macStyle per the OpenType spec.\n    ", "result": "PASS", "severity": null}, {"description": "Axes and named instances fall within correct ranges?", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/fvar/axis_ranges_correct>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "opentype.fvar.axis_ranges_correct", "proposal": ["https://github.com/fonttools/fontbakery/issues/2264", "https://github.com/fonttools/fontbakery/pull/2520", "https://github.com/fonttools/fontbakery/issues/2572"], "rationale": "\n        According to the OpenType spec's registered design-variation tags, instances in\n        a variable font should have certain prescribed values.\n        If a variable font has a 'wght' (Weight) axis, the valid coordinate range is 1-1000.\n        If a variable font has a 'wdth' (Width) axis, the valid numeric range is strictly greater than zero.\n        If a variable font has a 'slnt' (Slant) axis, then the coordinate of its 'Regular' instance is required to be 0.\n        If a variable font has a 'ital' (Slant) axis, then the coordinate of its 'Regular' instance is required to be 0.\n    ", "result": "PASS", "severity": null}, {"description": "Axes and named instances fall within correct ranges?", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/fvar/regular_coords_correct>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "opentype.fvar.regular_coords_correct", "proposal": ["https://github.com/fonttools/fontbakery/issues/1707", "https://github.com/fonttools/fontbakery/issues/2572"], "rationale": "\n        According to the Open-Type spec's registered design-variation tags,instances in a variable font should have certain prescribed values.\n        If a variable font has a 'wght' (Weight) axis, the valid coordinate range is 1-1000.\n        If a variable font has a 'wdth' (Width) axis, the valid numeric range is strictly greater than zero.\n        If a variable font has a 'slnt' (Slant) axis, then the coordinate of its 'Regular' instance is required to be 0.\n        If a variable font has a 'ital' (Slant) axis, then the coordinate of its 'Regular' instance is required to be 0.\n    ", "result": "PASS", "severity": null}, {"description": "Check mark characters are in GDEF mark glyph class.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/gdef_mark_chars>", [["font", 0]]], "logs": [{"message": {"code": "mark-chars", "message": "The following mark characters could be in the GDEF mark glyph class:\n\t ginsularcomb (U+1ACC), rinsularcomb (U+1ACD), tinsularcomb (U+1ACE), uni031A (U+031A), uni0488 (U+0488), uni0489 (U+0489), uni1ABE (U+1ABE), uniA670 (U+A670), uniA671 (U+A671) and uniA672 (U+A672)"}, "status": "WARN"}], "module": "opentype.gdef_mark_chars", "proposal": ["https://github.com/fonttools/fontbakery/issues/2877"], "rationale": "\n        Mark characters should be in the GDEF mark glyph class.\n    ", "result": "WARN", "severity": null}, {"description": "Check GDEF mark glyph class doesn't have characters that are not marks.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/gdef_non_mark_chars>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "opentype.gdef_non_mark_chars", "proposal": ["https://github.com/fonttools/fontbakery/issues/2877"], "rationale": "\n        Glyphs in the GDEF mark glyph class become non-spacing and may be repositioned\n        if they have mark anchors.\n\n        Only combining mark glyphs should be in that class. Any non-mark glyph\n        must not be in that class, in particular spacing glyphs.\n    ", "result": "PASS", "severity": null}, {"description": "Check glyphs in mark glyph class are non-spacing.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/gdef_spacing_marks>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "opentype.gdef_spacing_marks", "proposal": ["https://github.com/fonttools/fontbakery/issues/2877"], "rationale": "\n        Glyphs in the GDEF mark glyph class should be non-spacing.\n\n        Spacing glyphs in the GDEF mark glyph class may have incorrect anchor\n        positioning that was only intended for building composite glyphs during design.\n    ", "result": "PASS", "severity": null}, {"description": "Check glyphs do not have duplicate components which have the same x,y coordinates.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/glyf_non_transformed_duplicate_components>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "opentype.glyf_non_transformed_duplicate_components", "proposal": ["https://github.com/fonttools/fontbakery/pull/2709"], "rationale": "\n        There have been cases in which fonts had faulty double quote marks, with each\n        of them containing two single quote marks as components with the same\n        x, y coordinates which makes them visually look like single quote marks.\n\n        This check ensures that glyphs do not contain duplicate components\n        which have the same x,y coordinates.\n    ", "result": "PASS", "severity": null}, {"description": "Is there any unused data at the end of the glyf table?", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/glyf_unused_data>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "There is no unused data at the end of the glyf table."}, "status": "PASS"}], "module": "opentype.glyf_unused_data", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        This check validates the structural integrity of the glyf table,\n        by checking that all glyphs referenced in the loca table are\n        actually present in the glyf table and that there is no unused\n        data at the end of the glyf table. A failure here indicates a\n        problem with the font compiler.\n    ", "result": "PASS", "severity": null}, {"description": "Checking post.italicAngle value.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/italic_angle>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "Value of post.italicAngle is 0.0 with style=\"Regular\"."}, "status": "PASS"}], "module": "opentype.italic_angle", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        The 'post' table italicAngle property should be a reasonable amount, likely\n        not more than 30\u00b0. Note that in the OpenType specification, the value is\n        negative for a rightward lean.\n\n        https://docs.microsoft.com/en-us/typography/opentype/spec/post\n    ", "result": "PASS", "severity": null}, {"description": "Is there a usable \"kern\" table declared in the font?", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/kern_table>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "Font does not declare an optional \"kern\" table."}, "status": "PASS"}], "module": "opentype.kern_table", "proposal": ["https://github.com/fonttools/fontbakery/issues/1675", "https://github.com/fonttools/fontbakery/issues/3148", "https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        Even though all fonts should have their kerning implemented in the GPOS table,\n        there may be kerning info at the kern table as well.\n\n        Some applications such as MS PowerPoint require kerning info on the kern table.\n        More specifically, they require a format 0 kern subtable from a kern table\n        version 0 with only glyphs defined in the cmap table, which is the only one\n        that Windows understands (and which is also the simplest and more limited\n        of all the kern subtables).\n\n        Google Fonts ingests fonts made for download and use on desktops, and does\n        all web font optimizations in the serving pipeline (using libre libraries\n        that anyone can replicate.)\n\n        Ideally, TTFs intended for desktop users (and thus the ones intended for\n        Google Fonts) should have both KERN and GPOS tables.\n\n        Given all of the above, we currently treat kerning on a v0 kern table\n        as a good-to-have (but optional) feature.\n    ", "result": "PASS", "severity": null}, {"description": "Does the font have any invalid feature tags?", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/layout_valid_feature_tags>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "opentype.layout_valid_feature_tags", "proposal": ["https://github.com/fonttools/fontbakery/issues/3355"], "rationale": "\n        Incorrect tags can be indications of typos, leftover debugging code or\n        questionable approaches, or user error in the font editor. Such typos can\n        cause features and language support to fail to work as intended.\n\n        Font vendors may use private tags to identify private features. These tags\n        must be four uppercase letters (A-Z) with no punctuation, spaces, or numbers.\n    ", "result": "PASS", "severity": 8}, {"description": "Does the font have any invalid language tags?", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/layout_valid_language_tags>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "opentype.layout_valid_language_tags", "proposal": ["https://github.com/fonttools/fontbakery/issues/3355"], "rationale": "\n        Incorrect language tags can be indications of typos, leftover debugging code\n        or questionable approaches, or user error in the font editor. Such typos can\n        cause features and language support to fail to work as intended.\n    ", "result": "PASS", "severity": 8}, {"description": "Does the font have any invalid script tags?", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/layout_valid_script_tags>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "opentype.layout_valid_script_tags", "proposal": ["https://github.com/fonttools/fontbakery/issues/3355"], "rationale": "\n        Incorrect script tags can be indications of typos, leftover debugging code\n        or questionable approaches, or user error in the font editor. Such typos can\n        cause features and language support to fail to work as intended.\n    ", "result": "PASS", "severity": 8}, {"description": "Does the number of glyphs in the loca table match the maxp table?", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/loca/maxp_num_glyphs>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "opentype.loca.maxp_num_glyphs", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        The 'maxp' table contains various statistics about the font, including the\n        number of glyphs in the font. The 'loca' table contains the offsets to the\n        locations of the glyphs in the font. The number of offsets in the 'loca' table\n        should match the number of glyphs in the 'maxp' table. A failure here indicates\n        a problem with the font compiler.\n    ", "result": "PASS", "severity": null}, {"description": "Checking head.macStyle value.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/mac_style>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "head macStyle ITALIC bit is properly set."}, "status": "PASS"}, {"message": {"code": null, "message": "head macStyle BOLD bit is properly set."}, "status": "PASS"}], "module": "opentype.mac_style", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        The values of the flags on the macStyle entry on the 'head' OpenType table\n        that describe whether a font is bold and/or italic must be coherent with the\n        actual style of the font as inferred by its filename.\n    ", "result": "PASS", "severity": null}, {"description": "MaxAdvanceWidth is consistent with values in the Hmtx and Hhea tables?", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/maxadvancewidth>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "opentype.maxadvancewidth", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        The 'hhea' table contains a field which specifies the maximum\n        advance width. This value should be consistent with the maximum\n        advance width of all glyphs specified in the 'hmtx' table.\n    ", "result": "PASS", "severity": null}, {"description": "Checking correctness of monospaced metadata.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/monospace>", [["font", 0]]], "logs": [{"message": {"code": "bad-numberOfHMetrics", "message": "The OpenType spec recommends at https://learn.microsoft.com/en-us/typography/opentype/spec/recom#hhea-table that hhea.numberOfHMetrics be set to 3 but this font has 3890 instead.\nPlease read https://github.com/fonttools/fonttools/issues/3014 to decide whether this makes sense for your font."}, "status": "WARN"}, {"message": {"code": "mono-outliers", "message": "Font is monospaced but 252 glyphs (6.43%) have a different width. You should check the widths of: ['oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'uniFFFC', 'uniFFFD', 'uni0468', 'uni046C', 'uni046D', 'uni0478', 'uni0479', 'uni01A2', 'uni01C4', 'uni01C5', 'uni01C6', 'uni01C7', 'uni01C8', 'uni01C9', 'uni01CA', 'uni01CB', 'uni01CC', 'uni01F1', 'uni01F2', 'uni01F3', 'uni02A5', 'uni02A8', 'uni1D7A', 'uni1F0A', 'uni1F0B', 'uni1F0C', 'uni1F0D', 'uni1F0E', 'uni1F0F', 'uni1F1A', 'uni1F1B', 'uni1F1C', 'uni1F1D', 'uni1F2A', 'uni1F2B', 'uni1F2C', 'uni1F2D', 'uni1F2E', 'uni1F2F', 'uni1F4A', 'uni1F4B', 'uni1F4C', 'uni1F4D', 'uni1F5B', 'uni1F5D', 'uni1F5F', 'uni1F6A', 'uni1F6B', 'uni1F6C', 'uni1F6D', 'uni1F6E', 'uni1F6F', 'uni1F88', 'uni1F89', 'uni1F8A', 'uni1F8B', 'uni1F8C', 'uni1F8D', 'uni1F8E', 'uni1F8F', 'uni1F98', 'uni1F99', 'uni1F9A', 'uni1F9B', 'uni1F9C', 'uni1F9D', 'uni1F9E', 'uni1F9F', 'uni1FA8', 'uni1FA9', 'uni1FAA', 'uni1FAB', 'uni1FAC', 'uni1FAD', 'uni1FAE', 'uni1FAF', 'uni1FBC', 'uni1FCC', 'uni1FFC', 'uni20A8', 'uni2153', 'uni2154', 'uni0518', 'uni0520', 'uni0521', 'uni0522', 'uni0523', 'uniA728', 'uniA732', 'uniA734', 'uniA736', 'uniA738', 'uniA73A', 'uniA73C', 'uniA74E', 'uniA729', 'uniA74F', 'uniA773', 'uniA7FF', 'Iotifiedacy', 'Yusiotifiedclosedlittlecy', 'Emsoftcy', 'Odoublemonocularcy', 'uniA684', 'Odoublecy', 'uni052A', 'uniA657', 'yusiotifiedclosedlittlecy', 'emsoftcy', 'odoublemonocularcy', 'odoublecy', 'uni052B', 'uni211C', 'uni212C', 'uni210B', 'uni2110', 'uni2112', 'uni211B', 'uni2131', 'uni2133', 'uni2474', 'uni2475', 'uni2189', 'uni2155', 'uni2156', 'uni2157', 'uni2158', 'uni2159', 'uni215A', 'uni2150', 'uni2151', 'uni2152', 'uni2042', 'uni2E0E', 'uni2047', 'uni203B', 'uni2053', 'uniFF5B', 'uniFF5D', 'uni2E3B', 'uni2E3A', 'uni2057', 'uni20B7', 'uni23DF', 'uni23DD', 'uni23E1', 'uni27D7', 'uni27D5', 'uni2A00', 'emptyset', 'uni2031', 'uni27D6', 'uni23DE', 'uni23DC', 'uni23E0', 'uni229B', 'uni229C', 'uni2298', 'uni2296', 'circlemultiply', 'uni2299', 'circleplus', 'uni29B8', 'uni229A', 'uni219C', 'uni219D', 'uni219E', 'uni21A0', 'uni21A2', 'uni21A3', 'uni21A4', 'uni21A6', 'arrowdblright', 'arrowdblleft', 'arrowdblboth', 'uni21DA', 'uni21DB', 'uni21E8', 'uni21E6', 'uni27F5', 'uni27F6', 'uni25EF', 'uni25CD', 'uni25C6', 'uni25C7', 'uni25C8', 'uni25B0', 'uni25B1', 'uni25AD', 'uni25A2', 'uni25A3', 'uni25A4', 'uni25A5', 'uni25A6', 'uni25A7', 'uni25A8', 'uni25A9', 'uni25E7', 'uni25E8', 'uni25E9', 'uni25EA', 'uni25EB', 'uni25F0', 'uni25F1', 'uni25F2', 'uni25F3', 'uni25B6', 'uni25C0', 'uni25B3', 'uni25B7', 'uni25BD', 'uni25C1', 'uni25EC', 'uni25ED', 'uni25EE', 'uni25BB', 'uni25C5', 'uni25E5', 'uni25E2', 'uni25E3', 'uni25E4', 'uni2349', 'uni2365', 'uni233E', 'uni235F', 'uni233D', 'uni235C', 'uni236B', 'uni235A', 'uni2371', 'uni2366', 'uni2367', 'uni236D', 'uni2372', 'uni235D', 'uni236C', 'uni2736', 'uni213A', 'uni2103', 'u1F67C', 'u1F67D', 'u1F67E', 'u1F67F', 'uni2109', 'uni2114', 'uni214F', 'weierstrass', 'uni1DF00']"}, "status": "WARN"}], "module": "opentype.monospace", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        There are various metadata in the OpenType spec to specify if a font is\n        monospaced or not. If the font is not truly monospaced, then no monospaced\n        metadata should be set (as sometimes they mistakenly are...)\n\n        Requirements for monospace fonts:\n\n        * post.isFixedPitch - \"Set to 0 if the font is proportionally spaced,\n          non-zero if the font is not proportionally spaced (monospaced)\"\n          (https://www.microsoft.com/typography/otspec/post.htm)\n\n        * hhea.advanceWidthMax must be correct, meaning no glyph's width value\n          is greater. (https://www.microsoft.com/typography/otspec/hhea.htm)\n\n        * OS/2.panose.bProportion must be set to 9 (monospace) on latin text fonts.\n\n        * OS/2.panose.bSpacing must be set to 3 (monospace) on latin hand written\n          or latin symbol fonts.\n\n        * Spec says: \"The PANOSE definition contains ten digits each of which currently\n          describes up to sixteen variations. Windows uses bFamilyType, bSerifStyle\n          and bProportion in the font mapper to determine family type. It also uses\n          bProportion to determine if the font is monospaced.\"\n          (https://www.microsoft.com/typography/otspec/os2.htm#pan\n           https://monotypecom-test.monotype.de/services/pan2)\n\n        * OS/2.xAvgCharWidth must be set accurately.\n          \"OS/2.xAvgCharWidth is used when rendering monospaced fonts,\n          at least by Windows GDI\"\n          (http://typedrawers.com/discussion/comment/15397/#Comment_15397)\n\n        Also we should report an error for glyphs not of average width.\n\n\n        Please also note:\n\n        Thomas Phinney told us that a few years ago (as of December 2019), if you gave\n        a font a monospace flag in Panose, Microsoft Word would ignore the actual\n        advance widths and treat it as monospaced.\n\n        Source: https://typedrawers.com/discussion/comment/45140/#Comment_45140\n    ", "result": "WARN", "severity": null}, {"description": "Check name table for empty records.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/name/empty_records>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "opentype.name.empty_records", "proposal": ["https://github.com/fonttools/fontbakery/pull/2369"], "rationale": "\n        Check the name table for empty records,\n        as this can cause problems in Adobe apps.\n    ", "result": "PASS", "severity": null}, {"description": "Does full font name begin with the font family name?", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/name/match_familyname_fullfont>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "opentype.name.match_familyname_fullfont", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        The FULL_FONT_NAME entry in the \u2018name\u2019 table should start with the same string\n        as the Family Name (FONT_FAMILY_NAME, TYPOGRAPHIC_FAMILY_NAME or\n        WWS_FAMILY_NAME).\n\n        If the Family Name is not included as the first part of the Full Font Name, and\n        the user embeds the font in a document using a Microsoft Office app, the app\n        will fail to render the font when it opens the document again.\n\n        NOTE: Up until version 1.5, the OpenType spec included the following exception\n        in the definition of Full Font Name:\n\n            \"An exception to the [above] definition of Full font name is for Microsoft\n            platform strings for CFF OpenType fonts: in this case, the Full font name\n            string must be identical to the PostScript FontName in the CFF Name INDEX.\"\n\n        https://docs.microsoft.com/en-us/typography/opentype/otspec150/name#name-ids\n    ", "result": "PASS", "severity": null}, {"description": "Name table ID 6 (PostScript name) must be consistent across platforms.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/name/postscript_name_consistency>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "opentype.name.postscript_name_consistency", "proposal": ["https://github.com/fonttools/fontbakery/pull/2394"], "rationale": "\n        The PostScript name entries in the font's 'name' table should be\n        consistent across platforms.\n\n        This is the TTF/CFF2 equivalent of the CFF 'name/postscript_vs_cff' check.\n    ", "result": "PASS", "severity": null}, {"description": "CFF table FontName must match name table ID 6 (PostScript name).", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/name/postscript_vs_cff>", [["font", 0]]], "logs": [{"message": {"code": "unfulfilled-conditions", "message": "Unfulfilled Conditions: is_cff"}, "status": "SKIP"}], "module": "opentype.name.postscript_vs_cff", "proposal": ["https://github.com/fonttools/fontbakery/pull/2229"], "rationale": "\n        The PostScript name entries in the font's 'name' table should match\n        the FontName string in the 'CFF ' table.\n\n        The 'CFF ' table has a lot of information that is duplicated in other tables.\n        This information should be consistent across tables, because there's\n        no guarantee which table an app will get the data from.\n    ", "result": "SKIP", "severity": null}, {"description": "Check for points out of bounds.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/points_out_of_bounds>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "opentype.points_out_of_bounds", "proposal": ["https://github.com/fonttools/fontbakery/issues/735"], "rationale": "\n        The glyf table specifies a bounding box for each glyph. This check\n        ensures that all points in all glyph paths are within the bounding\n        box. Glyphs with out-of-bounds points can cause rendering issues in\n        some software, and should be corrected.\n    ", "result": "PASS", "severity": null}, {"description": "PostScript name follows OpenType specification requirements?", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/postscript_name>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "opentype.postscript_name", "proposal": ["https://github.com/miguelsousa/openbakery/issues/62"], "rationale": "\n        The PostScript name is used by some applications to identify the font.\n        It should only consist of characters from the set A-Z, a-z, 0-9, and hyphen.\n\n    ", "result": "PASS", "severity": null}, {"description": "Font has correct post table version?", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/post_table_version>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "Font has an acceptable post format 2.0 table version."}, "status": "PASS"}], "module": "opentype.post_table_version", "proposal": ["https://github.com/google/fonts/issues/215", "https://github.com/fonttools/fontbakery/issues/2638", "https://github.com/fonttools/fontbakery/issues/3635", "https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        Format 2.5 of the 'post' table was deprecated in OpenType 1.3 and\n        should not be used.\n\n        According to Thomas Phinney, the possible problem with post format 3\n        is that under the right combination of circumstances, one can generate\n        PDF from a font with a post format 3 table, and not have accurate backing\n        store for any text that has non-default glyphs for a given codepoint.\n\n        It will look fine but not be searchable. This can affect Latin text with\n        high-end typography, and some complex script writing systems, especially\n        with higher-quality fonts. Those circumstances generally involve creating\n        a PDF by first printing a PostScript stream to disk, and then creating a\n        PDF from that stream without reference to the original source document.\n        There are some workflows where this applies,but these are not common\n        use cases.\n\n        Apple recommends against use of post format version 4 as \"no longer\n        necessary and should be avoided\". Please see the Apple TrueType reference\n        documentation for additional details.\n\n        https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6post.html\n\n        Acceptable post format versions are 2 and 3 for TTF and OTF CFF2 builds,\n        and post format 3 for CFF builds.\n    ", "result": "PASS", "severity": null}, {"description": "Checking direction of slnt axis angles.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/slant_direction>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "Font has no slnt axis"}, "status": "PASS"}], "module": "opentype.slant_direction", "proposal": ["https://github.com/fonttools/fontbakery/pull/3910"], "rationale": "\n        The 'slnt' axis values are defined as negative values for a clockwise (right)\n        lean, and positive values for counter-clockwise lean. This is counter-intuitive\n        for many designers who are used to think of a positive slant as a lean to\n        the right.\n\n        This check ensures that the slant axis direction is consistent with the specs.\n\n        https://docs.microsoft.com/en-us/typography/opentype/spec/dvaraxistag_slnt\n    ", "result": "PASS", "severity": null}, {"description": "Ensure VFs have 'ital' STAT axis.", "documentation": null, "experimental": false, "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/STAT/ital_axis>", []], "logs": [{"message": {"code": null, "message": "Font {font.file} doesn't have an ital axis"}, "status": "SKIP"}], "module": "opentype.STAT.ital_axis", "proposal": ["https://github.com/fonttools/fontbakery/issues/2934", "https://github.com/fonttools/fontbakery/issues/3668", "https://github.com/fonttools/fontbakery/issues/3669"], "rationale": "\n        Check that related Upright and Italic VFs have an\n        'ital' axis in the STAT table.\n\n        Since the STAT table can be used to create new instances, it is\n        important to ensure that such an 'ital' axis be the last one\n        declared in the STAT table so that the eventual naming of new\n        instances follows the subfamily traditional scheme (RIBBI / WWS)\n        where \"Italic\" is always last.\n\n        The 'ital' axis should also be strictly boolean, only accepting\n        values of 0 (for Uprights) or 1 (for Italics). This usually works\n        as a mechanism for selecting between two linked variable font files.\n\n        Also, the axis value name for uprights must be set as elidable.\n    ", "result": "SKIP", "severity": null}, {"description": "Checking unitsPerEm value is reasonable.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/unitsperem>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "opentype.unitsperem", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        According to the OpenType spec:\n\n        The value of unitsPerEm at the head table must be a value\n        between 16 and 16384. Any value in this range is valid.\n\n        In fonts that have TrueType outlines, a power of 2 is recommended\n        as this allows performance optimizations in some rasterizers.\n\n        But 1000 is a commonly used value. And 2000 may become\n        increasingly more common on Variable Fonts.\n    ", "result": "PASS", "severity": null}, {"description": "Validates that all of the instance records in a given font have distinct data.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/varfont/distinct_instance_records>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "opentype.varfont.distinct_instance_records", "proposal": ["https://github.com/fonttools/fontbakery/issues/3706"], "rationale": "\n        According to the 'fvar' documentation in OpenType spec v1.9\n        https://docs.microsoft.com/en-us/typography/opentype/spec/fvar\n\n        All of the instance records in a font should have distinct coordinates\n        and distinct subfamilyNameID and postScriptName ID values. If two or more\n        records share the same coordinates, the same nameID values or the same\n        postScriptNameID values, then all but the first can be ignored.\n    ", "result": "PASS", "severity": null}, {"description": "Check that family axis ranges are indentical", "documentation": null, "experimental": false, "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/varfont/family_axis_ranges>", []], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "opentype.varfont.family_axis_ranges", "proposal": ["https://github.com/fonttools/fontbakery/issues/4445"], "rationale": "\n        Between members of a family (such as Roman & Italic),\n        the ranges of variable axes must be identical.\n    ", "result": "PASS", "severity": null}, {"description": "Validate foundry-defined design-variation axis tag names.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/varfont/foundry_defined_tag_name>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "opentype.varfont.foundry_defined_tag_name", "proposal": ["https://github.com/fonttools/fontbakery/issues/4043"], "rationale": "\n        According to the OpenType spec's syntactic requirements for\n        foundry-defined design-variation axis tags available at\n        https://learn.microsoft.com/en-us/typography/opentype/spec/dvaraxisreg\n\n        Foundry-defined tags must begin with an uppercase letter\n        and must use only uppercase letters or digits.\n    ", "result": "PASS", "severity": null}, {"description": "Validates that all of the instance records in a given font have the same size.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/varfont/same_size_instance_records>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "opentype.varfont.same_size_instance_records", "proposal": ["https://github.com/fonttools/fontbakery/issues/3705"], "rationale": "\n        According to the 'fvar' documentation in OpenType spec v1.9\n        https://docs.microsoft.com/en-us/typography/opentype/spec/fvar\n\n        All of the instance records in a given font must be the same size, with\n        all either including or omitting the postScriptNameID field. [...]\n        If the value is 0xFFFF, then the value is ignored, and no PostScript name\n        equivalent is provided for the instance.\n    ", "result": "PASS", "severity": null}, {"description": "All fvar axes have a correspondent Axis Record on STAT table?", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/varfont/STAT_axis_record_for_each_axis>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "STAT table has all necessary Axis Records."}, "status": "PASS"}], "module": "opentype.varfont.STAT_axis_record_for_each_axis", "proposal": ["https://github.com/fonttools/fontbakery/pull/3017"], "rationale": "\n        According to the OpenType spec, there must be an Axis Record\n        for every axis defined in the fvar table.\n\n        https://docs.microsoft.com/en-us/typography/opentype/spec/stat#axis-records\n    ", "result": "PASS", "severity": null}, {"description": "Validates subfamilyNameID and postScriptNameID for the default instance record", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/varfont/valid_default_instance_nameids>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "opentype.varfont.valid_default_instance_nameids", "proposal": ["https://github.com/fonttools/fontbakery/issues/3708"], "rationale": "\n        According to the 'fvar' documentation in OpenType spec v1.9.1\n        https://docs.microsoft.com/en-us/typography/opentype/spec/fvar\n\n        The default instance of a font is that instance for which the coordinate\n        value of each axis is the defaultValue specified in the corresponding\n        variation axis record. An instance record is not required for the default\n        instance, though an instance record can be provided. When enumerating named\n        instances, the default instance should be enumerated even if there is no\n        corresponding instance record. If an instance record is included for the\n        default instance (that is, an instance record has coordinates set to default\n        values), then the nameID value should be set to either 2 or 17 or to a\n        name ID with the same value as name ID 2 or 17. Also, if a postScriptNameID is\n        included in instance records, and the postScriptNameID value should be set\n        to 6 or to a name ID with the same value as name ID 6.\n    ", "result": "PASS", "severity": null}, {"description": "Validates that all of the name IDs in an instance record are within the correct range", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/varfont/valid_nameids>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "opentype.varfont.valid_nameids", "proposal": ["https://github.com/fonttools/fontbakery/issues/3702", "https://github.com/fonttools/fontbakery/issues/3703"], "rationale": "\n        According to the 'fvar' documentation in OpenType spec v1.9\n        https://docs.microsoft.com/en-us/typography/opentype/spec/fvar\n\n        The axisNameID field provides a name ID that can be used to obtain strings\n        from the 'name' table that can be used to refer to the axis in application\n        user interfaces. The name ID must be greater than 255 and less than 32768.\n\n        The postScriptNameID field provides a name ID that can be used to obtain\n        strings from the 'name' table that can be treated as equivalent to name\n        ID 6 (PostScript name) strings for the given instance. Values of 6 and\n        \"undefined\" can be used; otherwise, values must be greater than 255 and\n        less than 32768.\n\n        The subfamilyNameID field provides a name ID that can be used to obtain\n        strings from the 'name' table that can be treated as equivalent to name\n        ID 17 (typographic subfamily) strings for the given instance. Values of\n        2 or 17 can be used; otherwise, values must be greater than 255 and less\n        than 32768.\n    ", "result": "PASS", "severity": null}, {"description": "Checking OS/2 achVendID against configuration.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/vendor_id>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "Add the `vendor_id` key to a `fontbakery.yaml` file on your font project directory to enable this check.\nYou'll also need to use the `--configuration` flag when invoking fontbakery."}, "status": "SKIP"}], "module": "opentype.vendor_id", "proposal": ["https://github.com/fonttools/fontbakery/pull/3941"], "rationale": "\n        When a font project's Vendor ID is specified explicitly on FontBakery's\n        configuration file, all binaries must have a matching vendor identifier\n        value in the OS/2 table.\n    ", "result": "SKIP", "severity": null}, {"description": "Checking if OS/2 usWeightClass matches fvar.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/weight_class_fvar>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "opentype.weight_class_fvar", "proposal": ["https://github.com/googlefonts/gftools/issues/477"], "rationale": "\n        According to Microsoft's OT Spec the OS/2 usWeightClass\n        should match the fvar default value.\n    ", "result": "PASS", "severity": null}, {"description": "Check if OS/2 xAvgCharWidth is correct.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/xavgcharwidth>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "OS/2 xAvgCharWidth value is correct."}, "status": "PASS"}], "module": "opentype.xavgcharwidth", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        The OS/2.xAvgCharWidth field is used to calculate the width of a string of\n        characters. It is the average width of all non-zero width glyphs in the font.\n\n        This check ensures that the value is correct. A failure here may indicate\n        a bug in the font compiler, rather than something that the designer can\n        do anything about.\n    ", "result": "PASS", "severity": null}], "key": ["OpenType Specification Checks", null, null], "result": {"PASS": 42, "SKIP": 7, "WARN": 2}}, {"checks": [{"description": "List all superfamily filepaths", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Superfamily Checks>", "<FontBakeryCheck:superfamily/list>", [["font", 0]]], "logs": [{"message": {"code": "family-path", "message": "/Users/simon/others-repos/fonts//ofl/notosansmono"}, "status": "INFO"}], "module": "superfamily.list", "proposal": ["https://github.com/fonttools/fontbakery/issues/1487"], "rationale": "\n        This is a merely informative check that lists all sibling families\n        detected by fontbakery.\n\n        Only the fontfiles in these directories will be considered in\n        superfamily-level checks.\n    ", "result": "INFO", "severity": null}, {"description": "Each font in set of sibling families must have the same set of vertical metrics values.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Superfamily Checks>", "<FontBakeryCheck:superfamily/vertical_metrics>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "Sibling families were not detected."}, "status": "SKIP"}], "module": "superfamily.vertical_metrics", "proposal": ["https://github.com/fonttools/fontbakery/issues/1487"], "rationale": "\n        We may want all fonts within a super-family (all sibling families) to have\n        the same vertical metrics so their line spacing is consistent\n        across the super-family.\n\n        This is an experimental extended version of the\n        `family/vertical_metrics` check and for now it will only result in WARNs.\n    ", "result": "SKIP", "severity": null}], "key": ["Superfamily Checks", null, null], "result": {"INFO": 1, "SKIP": 1}}, {"checks": [{"description": "Check accent of Lcaron, dcaron, lcaron, tcaron", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:alt_caron>", [["font", 0]]], "logs": [{"message": {"code": "decomposed-outline", "message": "dcaron is decomposed and therefore could not be checked. Please check manually."}, "status": "WARN"}, {"message": {"code": "decomposed-outline", "message": "Lcaron is decomposed and therefore could not be checked. Please check manually."}, "status": "WARN"}, {"message": {"code": "decomposed-outline", "message": "lcaron is decomposed and therefore could not be checked. Please check manually."}, "status": "WARN"}, {"message": {"code": "decomposed-outline", "message": "tcaron is decomposed and therefore could not be checked. Please check manually."}, "status": "WARN"}, {"message": {"code": null, "message": "Looks good!"}, "status": "PASS"}], "module": "alt_caron", "proposal": ["https://github.com/fonttools/fontbakery/issues/3308"], "rationale": "\n        Lcaron, dcaron, lcaron, tcaron should NOT be composed with quoteright\n        or quotesingle or comma or caron(comb). It should be composed with a\n        distinctive glyph which doesn't look like an apostrophe.\n\n        Source:\n        https://ilovetypography.com/2009/01/24/on-diacritics/\n        http://diacritics.typo.cz/index.php?id=5\n        https://www.typotheque.com/articles/lcaron\n    ", "result": "WARN", "severity": null}, {"description": "Check that glyph for U+0675 ARABIC LETTER HIGH HAMZA is not a mark.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:arabic_high_hamza>", [["font", 0]]], "logs": [{"message": {"code": "glyphs-missing", "message": "This check will only run on fonts that have both glyphs U+0621 and U+0675"}, "status": "SKIP"}], "module": "arabic_high_hamza", "proposal": ["https://github.com/googlefonts/fontbakery/issues/4290"], "rationale": "\n        Many fonts incorrectly treat ARABIC LETTER HIGH HAMZA (U+0675) as a variant of\n        ARABIC HAMZA ABOVE (U+0654) and make it a combining mark of the same size.\n\n        But U+0675 is a base letter and should be a variant of ARABIC LETTER HAMZA\n        (U+0621) but raised slightly above baseline.\n\n        Not doing so effectively makes the font useless for Jawi and\n        possibly Kazakh as well.\n    ", "result": "SKIP", "severity": 4}, {"description": "Check that Arabic spacing symbols U+FBB2\u2013FBC1 aren't classified as marks.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:arabic_spacing_symbols>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "arabic_spacing_symbols", "proposal": ["https://github.com/googlefonts/fontbakery/issues/4295"], "rationale": "\n        Unicode has a few spacing symbols representing Arabic dots and other marks,\n        but they are purposefully not classified as marks.\n\n        Many fonts mistakenly classify them as marks, making them unsuitable\n        for their original purpose as stand-alone symbols to used in pedagogical\n        contexts discussing Arabic consonantal marks.\n    ", "result": "PASS", "severity": 4}, {"description": "Check base characters have non-zero advance width.", "documentation": null, "experimental": "Since 2024/12/28", "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:base_has_width>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "base_has_width", "proposal": ["https://github.com/fonttools/fontbakery/issues/4906"], "rationale": "\n        Base characters should have non-zero advance width.\n    ", "result": "PASS", "severity": null}, {"description": "Check if uppercase glyphs are vertically centered.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:caps_vertically_centered>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "Uppercase glyphs are vertically centered in the em box."}, "status": "PASS"}], "module": "caps_vertically_centered", "proposal": ["https://github.com/fonttools/fontbakery/issues/4139"], "rationale": "\n        This check suggests one possible approach to designing vertical metrics,\n        but can be ingnored if you follow a different approach.\n        In order to center text in buttons, lists, and grid systems\n        with minimal additional CSS work, the uppercase glyphs should be\n        vertically centered in the em box.\n        This check mainly applies to Latin, Greek, Cyrillic, and other similar scripts.\n        For non-latin scripts like Arabic, this check might not be applicable.\n        There is a detailed description of this subject at:\n        https://x.com/romanshamin_en/status/1562801657691672576\n    ", "result": "PASS", "severity": null}, {"description": "Ensure the font supports case swapping for all its glyphs.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:case_mapping>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "case_mapping", "proposal": ["https://github.com/googlefonts/fontbakery/issues/3230"], "rationale": "\n        Ensure that no glyph lacks its corresponding upper or lower counterpart\n        (but only when unicode supports case-mapping).\n    ", "result": "PASS", "severity": 10}, {"description": "Does the font contain chws and vchw features?", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:cjk_chws_feature>", [["font", 0]]], "logs": [{"message": {"code": "unfulfilled-conditions", "message": "Unfulfilled Conditions: is_cjk_font"}, "status": "SKIP"}], "module": "cjk_chws_feature", "proposal": ["https://github.com/fonttools/fontbakery/issues/3363"], "rationale": "\n        The W3C recommends the addition of chws and vchw features to CJK fonts\n        to enhance the spacing of glyphs in environments which do not fully support\n        JLREQ layout rules.\n\n        The chws_tool utility (https://github.com/googlefonts/chws_tool) can be used\n        to add these features automatically.\n    ", "result": "SKIP", "severity": null}, {"description": "Any CJK font should contain at least a minimal set of 150 CJK characters.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:cjk_not_enough_glyphs>", [["font", 0]]], "logs": [{"message": {"code": "unfulfilled-conditions", "message": "Unfulfilled Conditions: is_claiming_to_be_cjk_font"}, "status": "SKIP"}], "module": "cjk_not_enough_glyphs", "proposal": ["https://github.com/fonttools/fontbakery/pull/3214"], "rationale": "\n        Kana has 150 characters and it's the smallest CJK writing system.\n\n        If a font contains less CJK glyphs than this writing system, we inform the\n        user that some glyphs may be encoded incorrectly.\n    ", "result": "SKIP", "severity": null}, {"description": "Color layers should have a minimum brightness.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:color_cpal_brightness>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "color_cpal_brightness", "proposal": ["https://github.com/fonttools/fontbakery/pull/3908"], "rationale": "\n        Layers of a COLRv0 font should not be too dark or too bright. When layer colors\n        are set explicitly, they can't be changed and they may turn out illegible\n        against dark or bright backgrounds.\n\n        While traditional color-less fonts can be colored in design apps or CSS, a\n        black color definition in a COLRv0 font actually means that that layer will be\n        rendered in black regardless of the background color. This leads to text\n        becoming invisible against a dark background, for instance when using a dark\n        theme in a web browser or operating system.\n\n        This check ensures that layer colors are at least 10% bright and at most 90%\n        bright, when not already set to the current color (0xFFFF).\n    ", "result": "PASS", "severity": null}, {"description": "Check if each glyph has the recommended amount of contours.", "documentation": "This check is useful to assure glyphs aren't incorrectly constructed.\n\nThe desired_glyph_data module contains the 'recommended' countour count\nfor encoded glyphs. The contour counts are derived from fonts which were\nchosen for their quality and unique design decisions for particular glyphs.\n\nIn the future, additional glyph data can be included. A good addition would\nbe the 'recommended' anchor counts for each glyph.", "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:contour_count>", [["font", 0]]], "logs": [{"message": {"code": "unfulfilled-conditions", "message": "Unfulfilled Conditions: not is_variable_font"}, "status": "SKIP"}], "module": "contour_count", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ", "result": "SKIP", "severity": null}, {"description": "Does font file include unacceptable control character glyphs?", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:control_chars>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "control_chars", "proposal": ["https://github.com/fonttools/fontbakery/pull/2430"], "rationale": "\n        Use of some unacceptable control characters in the U+0000 - U+001F range can\n        lead to rendering issues on some platforms.\n\n        Acceptable control characters are defined as .null (U+0000) and\n        CR (U+000D) for this check.\n    ", "result": "PASS", "severity": null}, {"description": "Put an empty glyph on GID 1 right after the .notdef glyph for COLRv0 fonts.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:empty_glyph_on_gid1_for_colrv0>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "empty_glyph_on_gid1_for_colrv0", "proposal": ["https://github.com/googlefonts/gftools/issues/609", "https://github.com/fonttools/fontbakery/pull/3905"], "rationale": "\n        A rendering bug in Windows 10 paints whichever glyph is on GID 1 on top of\n        some glyphs, colored or not. This only occurs for COLR version 0 fonts.\n\n        Having a glyph with no contours on GID 1 is a practical workaround for that.\n\n        See https://github.com/googlefonts/gftools/issues/609\n    ", "result": "PASS", "severity": null}, {"description": "Checking all files are in the same directory.", "documentation": null, "experimental": false, "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:family/single_directory>", []], "logs": [{"message": {"code": null, "message": "All files are in the same directory."}, "status": "PASS"}], "module": "family.single_directory", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        If the set of font files passed in the command line is not all in the\n        same directory, then we warn the user since the tool will interpret the\n        set of files as belonging to a single family (and it is unlikely that\n        the user would store the files from a single family spreaded\n        in several separate directories).\n    ", "result": "PASS", "severity": null}, {"description": "Each font in a family must have the same set of vertical metrics values.", "documentation": null, "experimental": false, "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:family/vertical_metrics>", []], "logs": [{"message": {"code": null, "message": "Vertical metrics are the same across the family."}, "status": "PASS"}], "module": "family.vertical_metrics", "proposal": ["https://github.com/fonttools/fontbakery/issues/1487"], "rationale": "\n        We want all fonts within a family to have the same vertical metrics so\n        their line spacing is consistent across the family.\n    ", "result": "PASS", "severity": null}, {"description": "Checking OS/2 usWinAscent & usWinDescent.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:family/win_ascent_and_descent>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "OS/2 usWinAscent & usWinDescent values look good!"}, "status": "PASS"}], "module": "family.win_ascent_and_descent", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        A font's winAscent and winDescent values should be greater than or equal to\n        the head table's yMax, abs(yMin) values. If they are less than these values,\n        clipping can occur on Windows platforms\n        (https://github.com/RedHatBrand/Overpass/issues/33).\n\n        If the font includes tall/deep writing systems such as Arabic or Devanagari,\n        the winAscent and winDescent can be greater than the yMax and absolute yMin\n        values to accommodate vowel marks.\n\n        When the 'win' Metrics are significantly greater than the UPM, the linespacing\n        can appear too loose. To counteract this, enabling the OS/2 fsSelection\n        bit 7 (Use_Typo_Metrics), will force Windows to use the OS/2 'typo' values\n        instead. This means the font developer can control the linespacing with\n        the 'typo' values, whilst avoiding clipping by setting the 'win' values to\n        values greater than the yMax and absolute yMin.\n    ", "result": "PASS", "severity": null}, {"description": "All name entries referenced by fvar instances exist on the name table?", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:fvar_name_entries>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "fvar_name_entries", "proposal": ["https://github.com/fonttools/fontbakery/issues/2069"], "rationale": "\n        The purpose of this check is to make sure that all name entries referenced\n        by variable font instances do exist in the name table.\n    ", "result": "PASS", "severity": null}, {"description": "Ensure files are not too large.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:file_size>", [["font", 0]]], "logs": [{"message": {"code": "large-font", "message": "Font file is 1.6Mb; ideally it should be less than 1.0Mb"}, "status": "WARN"}], "module": "file_size", "proposal": ["https://github.com/fonttools/fontbakery/issues/3320"], "rationale": "\n        Serving extremely large font files causes usability issues.\n        This check ensures that file sizes are reasonable.\n    ", "result": "WARN", "severity": 10}, {"description": "Do we have the latest version of FontBakery installed?", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:fontbakery_version>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "FontBakery is up-to-date."}, "status": "PASS"}], "module": "fontbakery_version", "proposal": ["https://github.com/fonttools/fontbakery/issues/2093"], "rationale": "\n        Running old versions of FontBakery can lead to a poor report which may\n        include false WARNs and FAILs due do bugs, as well as outdated\n        quality assurance criteria.\n\n        Older versions will also not report problems that are detected by new checks\n        added to the tool in more recent updates.\n    ", "result": "PASS", "severity": null}, {"description": "Familyname must be unique according to namecheck.fontdata.com", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:fontdata_namecheck>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "Font familyname seems to be unique."}, "status": "PASS"}], "module": "fontdata_namecheck", "proposal": ["https://github.com/fonttools/fontbakery/issues/494"], "rationale": "\n        We need to check names are not already used, and today the best place to check\n        that is http://namecheck.fontdata.com\n    ", "result": "PASS", "severity": null}, {"description": "Ensure that the font can be rasterized by FreeType.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:freetype_rasterizer>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "Font can be rasterized by FreeType."}, "status": "PASS"}], "module": "freetype_rasterizer", "proposal": ["https://github.com/fonttools/fontbakery/issues/3642"], "rationale": "\n        Malformed fonts can cause FreeType to crash.\n    ", "result": "PASS", "severity": 10}, {"description": "Ensure no GPOS7 lookups are present.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:gpos7>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "Font has no GPOS7 lookups"}, "status": "PASS"}], "module": "gpos7", "proposal": ["https://github.com/fonttools/fontbakery/issues/3643"], "rationale": "\n        Versions of fonttools >=4.14.0 (19 August 2020) perform an optimisation on\n        chained contextual lookups, expressing GSUB6 as GSUB5 and GPOS8 and GPOS7\n        where possible (when there are no suffixes/prefixes for all rules in\n        the lookup).\n\n        However, makeotf has never generated these lookup types and they are rare\n        in practice. Perhaps because of this, Mac's CoreText shaper does not correctly\n        interpret GPOS7, meaning that these lookups will be ignored by the shaper,\n        and fonts containing these lookups will have unintended positioning errors.\n\n        To fix this warning, rebuild the font with a recent version of fonttools.\n    ", "result": "PASS", "severity": 9}, {"description": "Does GPOS table have kerning information? This check skips monospaced fonts as defined by post.isFixedPitch value", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:gpos_kerning_info>", [["font", 0]]], "logs": [{"message": {"code": "lacks-kern-info", "message": "GPOS table lacks kerning information."}, "status": "WARN"}], "module": "gpos_kerning_info", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        Well-designed fonts use kerning to improve the spacing between\n        specific pairs of glyphs. This check ensures that the font has\n        kerning information in the GPOS table. It can be ignored if the\n        design or writing system does not require kerning.\n    ", "result": "WARN", "severity": null}, {"description": "Show hinting filesize impact.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:hinting_impact>", [["font", 0]]], "logs": [{"message": {"code": "size-impact", "message": "Hinting filesize impact:\n\n |               | /Users/simon/others-repos/fonts//ofl/notosansmono/NotoSansMono[wdth,wght].ttf     |\n |:------------- | ---------------:|\n | Dehinted Size | 1.6Mb |\n | Hinted Size   | 1.6Mb   |\n | Increase      | 24 bytes      |\n | Change        | 0.0 %  |\n"}, "status": "INFO"}], "module": "hinting_impact", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        This check is merely informative, displaying an useful comparison of filesizes\n        of hinted versus unhinted font files.\n    ", "result": "INFO", "severity": null}, {"description": "PPEM must be an integer on hinted fonts.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:integer_ppem_if_hinted>", [["font", 0]]], "logs": [{"message": {"code": "unfulfilled-conditions", "message": "Unfulfilled Conditions: is_hinted"}, "status": "SKIP"}], "module": "integer_ppem_if_hinted", "proposal": ["https://github.com/fonttools/fontbakery/issues/2338"], "rationale": "\n        Hinted fonts must have head table flag bit 3 set.\n\n        Per https://docs.microsoft.com/en-us/typography/opentype/spec/head,\n        bit 3 of Head::flags decides whether PPEM should be rounded. This bit should\n        always be set for hinted fonts.\n\n        Note:\n        Bit 3 = Force ppem to integer values for all internal scaler math;\n                May use fractional ppem sizes if this bit is clear;\n    ", "result": "SKIP", "severity": null}, {"description": "Detect any interpolation issues in the font.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:interpolation_issues>", [["font", 0]]], "logs": [{"message": {"code": "interpolation-issues", "message": "Interpolation issues were found in the font:\n\n\t- Contour 0 start point differs in glyph 'Bbarredmod' between location wght=704,wdth=62 and location wght=900,wdth=62\n\n\t- Contour 0 in glyph 'Bbarredmod': becomes underweight between wght=704,wdth=62 and wght=900,wdth=62."}, "status": "WARN"}], "module": "interpolation_issues", "proposal": ["https://github.com/fonttools/fontbakery/issues/3930"], "rationale": "\n        When creating a variable font, the designer must make sure that corresponding\n        paths have the same start points across masters, as well as that corresponding\n        component shapes are placed in the same order within a glyph across masters.\n        If this is not done, the glyph will not interpolate correctly.\n\n        Here we check for the presence of potential interpolation errors using the\n        fontTools.varLib.interpolatable module.\n    ", "result": "WARN", "severity": 4}, {"description": "Check that legacy accents aren't used in composite glyphs.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:legacy_accents>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "Looks good!"}, "status": "PASS"}], "module": "legacy_accents", "proposal": ["https://github.com/googlefonts/fontbakery/issues/4310"], "rationale": "\n        Legacy accents should not have anchors and should have positive width.\n        They are often used independently of a letter, either as a placeholder\n        for an expected combined mark+letter combination in MacOS, or separately.\n        For instance, U+00B4 (ACUTE ACCENT) is often mistakenly used as an apostrophe,\n        U+0060 (GRAVE ACCENT) is used in Markdown to notify code blocks,\n        and ^ is used as an exponential operator in maths.\n    ", "result": "PASS", "severity": null}, {"description": "Are there caret positions declared for every ligature?", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:ligature_carets>", [["font", 0]]], "logs": [{"message": {"code": "no-ligatures", "message": "No ligature glyphs found."}, "status": "SKIP"}], "module": "ligature_carets", "proposal": ["https://github.com/fonttools/fontbakery/issues/1225"], "rationale": "\n        All ligatures in a font must have corresponding caret (text cursor) positions\n        defined in the GDEF table, otherwhise, users may experience issues with\n        caret rendering.\n\n        If using GlyphsApp or UFOs, ligature carets can be defined as anchors with\n        names starting with `caret_`. These can be compiled with fontmake as of\n        version v2.4.0.\n    ", "result": "SKIP", "severity": null}, {"description": "Checking Vertical Metric Linegaps.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:linegaps>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "OS/2 sTypoLineGap and hhea lineGap are both 0."}, "status": "PASS"}], "module": "linegaps", "proposal": ["https://github.com/fonttools/fontbakery/issues/4133", "https://googlefonts.github.io/gf-guide/metrics.html"], "rationale": "\n        The LineGap value is a space added to the line height created by the union\n        of the (typo/hhea)Ascender and (typo/hhea)Descender. It is handled differently\n        according to the environment.\n\n        This leading value will be added above the text line in most desktop apps.\n        It will be shared above and under in web browsers, and ignored in Windows\n        if Use_Typo_Metrics is disabled.\n\n        For better linespacing consistency across platforms,\n        (typo/hhea)LineGap values must be 0.\n    ", "result": "PASS", "severity": null}, {"description": "Ensure variable fonts include an avar table.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:mandatory_avar_table>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "mandatory_avar_table", "proposal": ["https://github.com/fonttools/fontbakery/issues/3100"], "rationale": "\n        Most variable fonts should include an avar table to correctly define\n        axes progression rates.\n\n        For example, a weight axis from 0% to 100% doesn't map directly to 100 to 1000,\n        because a 10% progression from 0% may be too much to define the 200,\n        while 90% may be too little to define the 900.\n\n        If the progression rates of axes is linear, this check can be ignored.\n        Fontmake will also skip adding an avar table if the progression rates\n        are linear. However, it is still recommended that designers visually proof\n        each instance is at the expected weight, width etc.\n    ", "result": "PASS", "severity": null}, {"description": "Font contains '.notdef' as its first glyph?", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:mandatory_glyphs>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "mandatory_glyphs", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        The OpenType specification v1.8.2 recommends that the first glyph is the\n        '.notdef' glyph without a codepoint assigned and with a drawing:\n\n        The .notdef glyph is very important for providing the user feedback\n        that a glyph is not found in the font. This glyph should not be left\n        without an outline as the user will only see what looks like a space\n        if a glyph is missing and not be aware of the active font\u2019s limitation.\n\n        https://docs.microsoft.com/en-us/typography/opentype/spec/recom#glyph-0-the-notdef-glyph\n\n        Pre-v1.8, it was recommended that fonts should also contain 'space', 'CR'\n        and '.null' glyphs. This might have been relevant for MacOS 9 applications.\n    ", "result": "PASS", "severity": null}, {"description": "Check math signs have the same width.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:math_signs_width>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "Looks good."}, "status": "PASS"}], "module": "math_signs_width", "proposal": ["https://github.com/fonttools/fontbakery/issues/3832"], "rationale": "\n        It is a common practice to have math signs sharing the same width\n        (preferably the same width as tabular figures accross the entire font family).\n\n        This probably comes from the will to avoid additional tabular math signs\n        knowing that their design can easily share the same width.\n    ", "result": "PASS", "severity": null}, {"description": "Ensure small caps glyphs are available.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:missing_small_caps_glyphs>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "missing_small_caps_glyphs", "proposal": ["https://github.com/fonttools/fontbakery/issues/3154"], "rationale": "\n        Ensure small caps glyphs are available if\n        a font declares smcp or c2sc OT features.\n    ", "result": "PASS", "severity": null}, {"description": "Are there disallowed characters in the NAME table?", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:name/char_restrictions>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "name.char_restrictions", "proposal": ["https://github.com/fonttools/fontbakery/issues/1718", "https://github.com/fonttools/fontbakery/issues/1663", "https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        The OpenType spec requires a subset of ASCII\n        (any printable characters except \"[]{}()<>/%\") for\n        POSTSCRIPT_NAME (nameID 6),\n        POSTSCRIPT_CID_NAME (nameID 20), and\n        an even smaller subset (\"a-zA-Z0-9\") for\n        VARIATIONS_POSTSCRIPT_NAME_PREFIX (nameID 25).\n    ", "result": "PASS", "severity": null}, {"description": "Combined length of family and style must not exceed 32 characters.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:name/family_and_style_max_length>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "name.family_and_style_max_length", "proposal": ["https://github.com/fonttools/fontbakery/issues/1488", "https://github.com/fonttools/fontbakery/issues/2179"], "rationale": "\n        This check ensures that the length of name table entries is not\n        too long, as this causes problems in some environments.\n    ", "result": "PASS", "severity": null}, {"description": "Name table records must not have trailing spaces.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:name/trailing_spaces>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "No trailing spaces on name table entries."}, "status": "PASS"}], "module": "name.trailing_spaces", "proposal": ["https://github.com/fonttools/fontbakery/issues/2417"], "rationale": "\n        This check ensures that no entries in the name table end in\n        spaces; trailing spaces, particularly in font names, can be\n        confusing to users. In most cases this can be fixed by\n        removing trailing spaces from the metadata fields in the font\n        editor.\n    ", "result": "PASS", "severity": null}, {"description": "Description strings in the name table must not contain copyright info.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:name/no_copyright_on_description>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "name.no_copyright_on_description", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        The name table in a font file contains strings about the font;\n        there are entries for a copyright field and a description. If the\n        copyright entry is being used correctly, then there should not\n        be any copyright information in the description entry.\n    ", "result": "PASS", "severity": null}, {"description": "Check name table IDs 1, 2, 16, 17 to conform to Italic style.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:name/italic_names>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "Font is not Italic."}, "status": "SKIP"}], "module": "name.italic_names", "proposal": ["https://github.com/fonttools/fontbakery/issues/3666"], "rationale": "\n        This check ensures that several entries in the name table\n        conform to the font's Upright or Italic style,\n        namely IDs 1 & 2 as well as 16 & 17 if they're present.\n    ", "result": "SKIP", "severity": null}, {"description": "Ensure glyphs do not have components which are themselves components.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:nested_components>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "nested_components", "proposal": ["https://github.com/fonttools/fontbakery/issues/2961"], "rationale": "\n        There have been bugs rendering variable fonts with nested components.\n        Additionally, some static fonts with nested components have been reported\n        to have rendering and printing issues.\n\n        For more info, see:\n        * https://github.com/fonttools/fontbakery/issues/2961\n        * https://github.com/arrowtype/recursive/issues/412\n    ", "result": "PASS", "severity": null}, {"description": "Checking OS/2 Metrics match hhea Metrics.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:os2_metrics_match_hhea>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "OS/2.sTypoAscender/Descender values match hhea.ascent/descent."}, "status": "PASS"}], "module": "os2_metrics_match_hhea", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        OS/2 and hhea vertical metric values should match. This will produce the\n        same linespacing on Mac, GNU+Linux and Windows.\n\n        - Mac OS X uses the hhea values.\n        - Windows uses OS/2 or Win, depending on the OS or fsSelection bit value.\n\n        When OS/2 and hhea vertical metrics match, the same linespacing results on\n        macOS, GNU+Linux and Windows. Note that fixing this issue in a previously\n        released font may cause reflow in user documents and unhappy users.\n    ", "result": "PASS", "severity": null}, {"description": "Checking with ots-sanitize.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:ots>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "ots", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n       The OpenType Sanitizer (OTS) is a tool that checks that the font is\n       structually well-formed and passes various sanity checks. It is used by\n       many web browsers to check web fonts before using them; fonts which fail\n       such checks are blocked by browsers.\n\n       This check runs OTS on the font and reports any errors or warnings that\n       it finds.\n       ", "result": "PASS", "severity": null}, {"description": "Check there are no overlapping path segments", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:overlapping_path_segments>", [["font", 0]]], "logs": [{"message": {"code": "overlapping-path-segments", "message": "The following glyphs have overlapping path segments:\n\n\t* uniA73C (U+A73C): L<<798.0,0.0>--<701.0,0.0>> has the same coordinates as a previous segment.\n\n\t* uni2E3B (U+2E3B): L<<1200.0,310.0>--<1200.0,230.0>> has the same coordinates as a previous segment.\n\n\t* uni2E3B (U+2E3B): L<<600.0,310.0>--<600.0,230.0>> has the same coordinates as a previous segment.\n\n\t* uni2E3A (U+2E3A): L<<600.0,310.0>--<600.0,230.0>> has the same coordinates as a previous segment."}, "status": "WARN"}], "module": "overlapping_path_segments", "proposal": ["https://github.com/google/fonts/issues/7594#issuecomment-2401909084"], "rationale": "\n        Some rasterizers encounter difficulties when rendering glyphs with\n        overlapping path segments.\n\n        A path segment is a section of a path defined by two on-curve points.\n        When two segments share the same coordinates, they are considered\n        overlapping.\n    ", "result": "WARN", "severity": null}, {"description": "Font contains all required tables?", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:required_tables>", [["font", 0]]], "logs": [{"message": {"code": "optional-tables", "message": "This font contains the following optional tables:\n\n\t- loca\n\n\t- prep\n\n\t- GPOS\n\n\t- GSUB\n\n\t- gasp"}, "status": "INFO"}, {"message": {"code": null, "message": "Font contains all required tables."}, "status": "PASS"}], "module": "required_tables", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        According to the OpenType spec\n        https://docs.microsoft.com/en-us/typography/opentype/spec/otff#required-tables\n\n        Whether TrueType or CFF outlines are used in an OpenType font, the following\n        tables are required for the font to function correctly:\n\n        - cmap (Character to glyph mapping)\u23ce\n        - head (Font header)\u23ce\n        - hhea (Horizontal header)\u23ce\n        - hmtx (Horizontal metrics)\u23ce\n        - maxp (Maximum profile)\u23ce\n        - name (Naming table)\u23ce\n        - OS/2 (OS/2 and Windows specific metrics)\u23ce\n        - post (PostScript information)\n\n        The spec also documents that variable fonts require the following table:\n\n        - STAT (Style attributes)\n\n        Depending on the typeface and coverage of a font, certain tables are\n        recommended for optimum quality.\n\n        For example:\u23ce\n        - the performance of a non-linear font is improved if the VDMX, LTSH,\n          and hdmx tables are present.\u23ce\n        - Non-monospaced Latin fonts should have a kern table.\u23ce\n        - A gasp table is necessary if a designer wants to influence the sizes\n          at which grayscaling is used under Windows. Etc.\n    ", "result": "INFO", "severity": null}, {"description": "Ensure indic fonts have the Indian Rupee Sign glyph.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:rupee>", [["font", 0]]], "logs": [{"message": {"code": "unfulfilled-conditions", "message": "Unfulfilled Conditions: is_indic_font"}, "status": "SKIP"}], "module": "rupee", "proposal": ["https://github.com/fonttools/fontbakery/issues/2967"], "rationale": "\n        Per Bureau of Indian Standards every font supporting one of the\n        official Indian languages needs to include Unicode Character\n        \u201c\u20b9\u201d (U+20B9) Indian Rupee Sign.\n    ", "result": "SKIP", "severity": null}, {"description": "Font has the proper sfntVersion value?", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:sfnt_version>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "Font has the correct sfntVersion value."}, "status": "PASS"}], "module": "sfnt_version", "proposal": ["https://github.com/fonttools/fontbakery/issues/3388"], "rationale": "\n        OpenType fonts that contain TrueType outlines should use the value of 0x00010000\n        for the sfntVersion. OpenType fonts containing CFF data (version 1 or 2) should\n        use 0x4F54544F ('OTTO', when re-interpreted as a Tag) for sfntVersion.\n\n        Fonts with the wrong sfntVersion value are rejected by FreeType.\n\n        https://docs.microsoft.com/en-us/typography/opentype/spec/otff#table-directory\n    ", "result": "PASS", "severity": 10}, {"description": "Ensure 'smcp' (small caps) lookups are defined before ligature lookups in the 'GSUB' table.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:smallcaps_before_ligatures>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "Font lacks 'smcp' or 'liga' features."}, "status": "SKIP"}], "module": "smallcaps_before_ligatures", "proposal": ["https://github.com/fonttools/fontbakery/issues/3020"], "rationale": "\n        OpenType small caps should be defined before ligature lookups to ensure\n        proper functionality.\n\n        Rainer Erich Scheichelbauer (a.k.a. MekkaBlue) pointed out in a tweet\n        (https://twitter.com/mekkablue/status/1297486769668132865) that the ordering\n        of small caps and ligature lookups can lead to bad results such as the example\n        he provided of the word \"WAFFLES\" in small caps, but with an unfortunate\n        lowercase ffl ligature substitution.\n\t\n        This check attempts to detect this kind of mistake.\n    ", "result": "SKIP", "severity": null}, {"description": "Ensure smart dropout control is enabled in \"prep\" table instructions.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:smart_dropout>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "smart_dropout", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        This setup is meant to ensure consistent rendering quality for fonts across\n        all devices (with different rendering/hinting capabilities).\n\n        Below is the snippet of instructions we expect to see in the fonts:\n        B8 01 FF    PUSHW 0x01FF\n        85          SCANCTRL (unconditinally turn on\n                              dropout control mode)\n        B0 04       PUSHB 0x04\n        8D          SCANTYPE (enable smart dropout control)\n\n        \"Smart dropout control\" means activating rules 1, 2 and 5:\n        Rule 1: If a pixel's center falls within the glyph outline,\n                that pixel is turned on.\n        Rule 2: If a contour falls exactly on a pixel's center,\n                that pixel is turned on.\n        Rule 5: If a scan line between two adjacent pixel centers\n                (either vertical or horizontal) is intersected\n                by both an on-Transition contour and an off-Transition\n                contour and neither of the pixels was already turned on\n                by rules 1 and 2, turn on the pixel which is closer to\n                the midpoint between the on-Transition contour and\n                off-Transition contour. This is \"Smart\" dropout control.\n\n        For more detailed info (such as other rules not enabled in this snippet),\n        please refer to the TrueType Instruction Set documentation.\n\n        Generally this occurs with unhinted fonts; if you are not using autohinting,\n        use gftools-fix-nonhinting (or just gftools-fix-font) to fix this issue.\n    ", "result": "PASS", "severity": null}, {"description": "Does the font contain a soft hyphen?", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:soft_hyphen>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "Looks good!"}, "status": "PASS"}], "module": "soft_hyphen", "proposal": ["https://github.com/fonttools/fontbakery/issues/4046", "https://github.com/fonttools/fontbakery/issues/3486"], "rationale": "\n        The 'Soft Hyphen' character (codepoint 0x00AD) is used to mark\n        a hyphenation possibility within a word in the absence of or\n        overriding dictionary hyphenation.\n\n        It is sometimes designed empty with no width (such as a control character),\n        sometimes the same as the traditional hyphen, sometimes double encoded with\n        the hyphen.\n\n        That being said, it is recommended to not include it in the font at all,\n        because discretionary hyphenation should be handled at the level of the\n        shaping engine, not the font. Also, even if present, the software would\n        not display that character.\n\n        More discussion at:\n        https://typedrawers.com/discussion/2046/special-dash-things-softhyphen-horizontalbar\n    ", "result": "PASS", "severity": null}, {"description": "Checking STAT table entries in static fonts.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:STAT_in_statics>", [["font", 0]]], "logs": [{"message": {"code": "unfulfilled-conditions", "message": "Unfulfilled Conditions: not is_variable_font"}, "status": "SKIP"}], "module": "STAT_in_statics", "proposal": ["https://github.com/fonttools/fontbakery/issues/4149"], "rationale": "\n        Adobe feature syntax allows for the definition of a STAT table. Fonts built\n        with a hand-coded STAT table in feature syntax may be built either as static\n        or variable, but will end up with the same STAT table.\n\n        This is a problem, because a STAT table which works on variable fonts\n        will not be appropriate for static instances. The examples in the OpenType spec\n        of non-variable fonts with a STAT table show that the table entries must be\n        restricted to those entries which refer to the static font's position in\n        the designspace. i.e. a Regular weight static should only have the following\n        entry for the weight axis:\n\n        <AxisIndex value=\"0\"/>\n        <Flags value=\"2\"/>  <!-- ElidableAxisValueName -->\n        <ValueNameID value=\"265\"/>  <!-- Regular -->\n        <Value value=\"400.0\"/>\n\n        However, if the STAT table intended for a variable font is compiled into a\n        static, it will have many entries for this axis. In this case, Windows will\n        read the first entry only, causing all instances to report themselves\n        as \"Thin Condensed\".\n    ", "result": "SKIP", "severity": null}, {"description": "Check correctness of STAT table strings", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:STAT_strings>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "STAT_strings", "proposal": ["https://github.com/fonttools/fontbakery/issues/2863"], "rationale": "\n        On the STAT table, the \"Italic\" keyword must not be used on AxisValues\n        for variation axes other than 'ital'.\n    ", "result": "PASS", "severity": null}, {"description": "Ensure Stylistic Sets have description.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:stylisticset_description>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "stylisticset_description", "proposal": ["https://github.com/fonttools/fontbakery/issues/3155"], "rationale": "\n        Stylistic sets should provide description text. Programs such as InDesign,\n        TextEdit and Inkscape use that info to display to the users so that they know\n        what a given stylistic set offers.\n    ", "result": "PASS", "severity": null}, {"description": "Check tabular widths don't have kerning.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:tabular_kerning>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "tabular_kerning", "proposal": ["https://github.com/fonttools/fontbakery/issues/4440"], "rationale": "\n        Tabular glyphs should not have kerning, as they are meant to be used in tables.\n\n        This check looks for kerning in:\n        - all glyphs in a font in combination with tabular numerals;\n        - tabular symbols in combination with tabular numerals.\n\n        \"Tabular symbols\" is defined as:\n        - for fonts with a \"tnum\" feature, all \"tnum\" substitution target glyphs;\n        - for fonts without a \"tnum\" feature, all glyphs that have the same width\n        as the tabular numerals, but limited to numbers, math and currency symbols.\n\n        This check may produce false positives for fonts with no \"tnum\" feature\n        and with equal-width numerals (and other same-width symbols) that are\n        not intended to be used as tabular numerals.\n    ", "result": "PASS", "severity": null}, {"description": "Ensure component transforms do not perform scaling or rotation.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:transformed_components>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "No glyphs had components with scaling or rotation"}, "status": "PASS"}], "module": "transformed_components", "proposal": ["https://github.com/fonttools/fontbakery/issues/2011"], "rationale": "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ", "result": "PASS", "severity": null}, {"description": "Checking with fontTools.ttx", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:ttx_roundtrip>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "ttx_roundtrip", "proposal": ["https://github.com/fonttools/fontbakery/issues/1763"], "rationale": "\n        One way of testing whether or not fonts are well-formed at the\n        binary level is to convert them to TTX and then back to binary. Structural\n        problems within the binary font will show up as errors during conversion.\n        This is not necessarily something that a designer will be able to address\n        but is evidence of a potential bug in the font compiler used to generate\n        the binary.", "result": "PASS", "severity": null}, {"description": "Checking that the typoAscender exceeds the yMax of the /Agrave.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:typoascender_exceeds_Agrave>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "OS/2.sTypoAscender value is greater than the yMax of /Agrave."}, "status": "PASS"}], "module": "typoascender_exceeds_Agrave", "proposal": ["https://github.com/fonttools/fontbakery/issues/3170"], "rationale": "\n        MacOS uses OS/2.sTypoAscender/Descender values to determine the line height\n        of a font. If the sTypoAscender value is smaller than the maximum height of\n        the uppercase /Agrave, the font\u2019s sTypoAscender value is ignored, and a very\n        tall line height is used instead.\n\n        This happens on a per-font, per-style basis, so it\u2019s possible for a font to\n        have a good sTypoAscender value in one style but not in another. This can\n        lead to inconsistent line heights across a typeface family.\n\n        So, it is important to ensure that the sTypoAscender value is greater than\n        the maximum height of the uppercase /Agrave in all styles of a type family.\n    ", "result": "PASS", "severity": null}, {"description": "Font contains unique glyph names?", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:unique_glyphnames>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "Glyph names are all unique."}, "status": "PASS"}], "module": "unique_glyphnames", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        Duplicate glyph names prevent font installation on Mac OS X.\n    ", "result": "PASS", "severity": null}, {"description": "Check font contains no unreachable glyphs", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:unreachable_glyphs>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "Font did not contain any unreachable glyphs"}, "status": "PASS"}], "module": "unreachable_glyphs", "proposal": ["https://github.com/fonttools/fontbakery/issues/3160"], "rationale": "\n        Glyphs are either accessible directly through Unicode codepoints or through\n        substitution rules.\n\n        In Color Fonts, glyphs are also referenced by the COLR table. And mathematical\n        fonts also reference glyphs via the MATH table.\n\n        Any glyphs not accessible by these means are redundant and serve only\n        to increase the font's file size.\n    ", "result": "PASS", "severity": null}, {"description": "Are there unwanted Apple tables?", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:unwanted_aat_tables>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "unwanted_aat_tables", "proposal": ["https://github.com/fonttools/fontbakery/pull/2190"], "rationale": "\n        Apple's TrueType reference manual [1] describes SFNT tables not in the\n        Microsoft OpenType specification [2] and these can sometimes sneak into final\n        release files.\n\n        This check ensures fonts only have OpenType tables.\n\n        [1] https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6.html\n        [2] https://docs.microsoft.com/en-us/typography/opentype/spec/\n    ", "result": "PASS", "severity": null}, {"description": "Are there unwanted tables?", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:unwanted_tables>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "There are no unwanted tables."}, "status": "PASS"}], "module": "unwanted_tables", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        Some font editors store source data in their own SFNT tables, and these\n        can sometimes sneak into final release files, which should only have\n        OpenType spec tables.\n    ", "result": "PASS", "severity": null}, {"description": "Glyph names are all valid?", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:valid_glyphnames>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "Glyph names are all valid."}, "status": "PASS"}], "module": "valid_glyphnames", "proposal": ["https://github.com/fonttools/fontbakery/issues/2832", "https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        Microsoft's recommendations for OpenType Fonts states the following:\n\n        'NOTE: The PostScript glyph name must be no longer than 31 characters,\n        include only uppercase or lowercase English letters, European digits,\n        the period or the underscore, i.e. from the set `[A-Za-z0-9_.]` and\n        should start with a letter, except the special glyph name `.notdef`\n        which starts with a period.'\n\n        https://learn.microsoft.com/en-us/typography/opentype/otspec181/recom#-post--table\n\n\n        In practice, though, particularly in modern environments, glyph names\n        can be as long as 63 characters.\n\n        According to the \"Adobe Glyph List Specification\" available at:\n\n        https://github.com/adobe-type-tools/agl-specification\n    ", "result": "PASS", "severity": null}, {"description": "The variable font 'wght' (Weight) axis coordinate must be 700 on the 'Bold' instance.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:varfont/bold_wght_coord>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "Bold:wght is 700."}, "status": "PASS"}], "module": "varfont.bold_wght_coord", "proposal": ["https://github.com/fonttools/fontbakery/issues/1707"], "rationale": "\n        The OpenType spec's registered\n        design-variation tag 'wght' available at\n        https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_wght\n        does not specify a required value for the 'Bold' instance of a variable font.\n\n        But Dave Crossland suggested that a required value of 700 should be enforced \n        in this case (NOTE: a distinction is made between \"no bold instance present\"\n        vs \"bold instance is present but its wght coordinate is not == 700\").\n    ", "result": "PASS", "severity": null}, {"description": "Ensure that all variable font files have the same set of axes and axis ranges.", "documentation": null, "experimental": false, "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:varfont/consistent_axes>", []], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "varfont.consistent_axes", "proposal": ["https://github.com/fonttools/fontbakery/issues/2810"], "rationale": "\n        In order to facilitate the construction of intuitive and friendly user\n        interfaces, all variable font files in a given family should have the same set\n        of variation axes. Also, each axis must have a consistent setting of min/max\n        value ranges accross all the files.\n    ", "result": "PASS", "severity": null}, {"description": "Ensure VFs with duplexed axes do not vary horizontal advance.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:varfont/duplexed_axis_reflow>", [["font", 0]]], "logs": [{"message": {"code": "no-relevant-axes", "message": "This font has no duplexed axes"}, "status": "SKIP"}], "module": "varfont.duplexed_axis_reflow", "proposal": ["https://github.com/fonttools/fontbakery/issues/3187"], "rationale": "\n        Certain axes, such as grade (GRAD) or roundness (ROND), should not\n        change any advanceWidth or kerning data across the font's design space.\n        This is because altering the advance width of glyphs can cause text reflow.\n    ", "result": "SKIP", "severity": null}, {"description": "Check variable font instances don't have duplicate names", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:varfont/duplicate_instance_names>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "varfont.duplicate_instance_names", "proposal": ["https://github.com/fonttools/fontbakery/issues/2986"], "rationale": "\n        This check's purpose is to detect duplicate named instances names in a\n        given variable font.\n\n        Repeating instance names may be the result of instances for several VF axes\n        defined in `fvar`, but in some setups only weight+italic tokens are used\n        in instance names, so they end up repeating.\n\n        Only a base set of fonts for the most default representation of the\n        family can be defined through instances in the `fvar` table, all other\n        instances will have to be left to access through the `STAT` table.\n    ", "result": "PASS", "severity": null}, {"description": "Ensure the font's instances are in the correct order.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:varfont/instances_in_order>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "varfont.instances_in_order", "proposal": ["https://github.com/googlefonts/fontbakery/issues/3334"], "rationale": "\n        Ensure that the fvar table instances are in ascending order of weight.\n        Some software, such as Canva, displays the instances in the order they\n        are defined in the fvar table, which can lead to confusion if the\n        instances are not in order of weight.\n    ", "result": "PASS", "severity": 2}, {"description": "Ensure VFs do not contain (yet) the ital axis.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:varfont/unsupported_axes>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "varfont.unsupported_axes", "proposal": ["https://github.com/fonttools/fontbakery/issues/2866"], "rationale": "\n        The 'ital' axis is not supported yet in Google Chrome.\n\n        For the time being, we need to ensure that VFs do not contain this axis.\n        Once browser support is better, we can deprecate this check.\n\n        For more info regarding browser support, see:\n        https://arrowtype.github.io/vf-slnt-test/\n    ", "result": "PASS", "severity": null}, {"description": "Font contains glyphs for whitespace characters?", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:whitespace_glyphs>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "Font contains glyphs for whitespace characters."}, "status": "PASS"}], "module": "whitespace_glyphs", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        The OpenType specification recommends that fonts should contain\n        glyphs for the following whitespace characters:\n\n        - U+0020 SPACE\n        - U+00A0 NO-BREAK SPACE\n\n        The space character is required for text processing, and the no-break\n        space is useful to prevent line breaks at its position. It is also\n        recommended to have a glyph for the tab character (U+0009) and the\n        soft hyphen (U+00AD), but these are not mandatory.\n    ", "result": "PASS", "severity": null}, {"description": "Whitespace glyphs have ink?", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:whitespace_ink>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "There is no whitespace glyph with ink."}, "status": "PASS"}], "module": "whitespace_ink", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n           This check ensures that certain whitespace glyphs are empty.\n           Certain text layout engines will assume that these glyphs are empty,\n           and will not draw them; if they were in fact not designed to be\n           empty, the result will be text layout that is not as expected.\n       ", "result": "PASS", "severity": null}, {"description": "Space and non-breaking space have the same width?", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:whitespace_widths>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "Space and non-breaking space have the same width."}, "status": "PASS"}], "module": "whitespace_widths", "proposal": ["https://github.com/fonttools/fontbakery/issues/3843", "https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations in\n        documents; such as the space before punctuation in languages that do that. It\n        avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It's also used\n        by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ", "result": "PASS", "severity": null}], "key": ["Universal Profile Checks", null, null], "result": {"INFO": 2, "PASS": 50, "SKIP": 11, "WARN": 5}}, {"checks": [{"description": "Validate size, and resolution of article images, and ensure article page has minimum length and includes visual assets.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Article Checks>", "<FontBakeryCheck:googlefonts/article/images>", [["font", 0]]], "logs": [{"message": {"code": "missing-visual-asset", "message": "Article page lacks visual assets."}, "status": "WARN"}, {"message": {"code": null, "message": "ok"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.article.images", "proposal": ["https://github.com/fonttools/fontbakery/issues/4594"], "rationale": "\n        The purpose of this check is to ensure images (either raster or vector files)\n        are not excessively large in filesize and resolution.\n\n        These constraints are loosely based on infrastructure limitations under\n        default configurations.\n\n        It also ensures that the article page has a minimum length and includes\n        at least one visual asset.\n    ", "result": "WARN", "severity": null}], "key": ["Article Checks", null, null], "result": {"WARN": 1}}, {"checks": [{"description": "Validate METADATA.pb axes values are within gf_axisregistry bounds.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/axisregistry_bounds>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.axisregistry_bounds", "proposal": ["https://github.com/fonttools/fontbakery/issues/3010"], "rationale": "\n        Each axis range in a METADATA.pb file must be registered, and within the bounds\n        of the axis definition in the Google Fonts Axis Registry, available at\n        https://github.com/google/fonts/tree/main/axisregistry\n    ", "result": "PASS", "severity": null}, {"description": "Validate METADATA.pb axes tags are defined in gf_axisregistry.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/axisregistry_valid_tags>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.axisregistry_valid_tags", "proposal": ["https://github.com/fonttools/fontbakery/issues/3022"], "rationale": "\n        Ensure all axes in a METADATA.pb file are registered in the\n        Google Fonts Axis Registry, available at\n        https://github.com/google/fonts/tree/main/axisregistry\n\n        Why does Google Fonts have its own Axis Registry?\n\n        We support a superset of the OpenType axis registry axis set, and use\n        additional metadata for each axis. Axes present in a font file but not in this\n        registry will not function via our API. No variable font is expected to\n        support all of the axes here.\n\n        Any font foundry or distributor library that offers variable fonts has a\n        implicit, latent, de-facto axis registry, which can be extracted by scanning\n        the library for axes' tags, labels, and min/def/max values. While in 2016\n        Microsoft originally offered to include more axes in the OpenType 1.8\n        specification (github.com/microsoft/OpenTypeDesignVariationAxisTags), as of\n        August 2020, this effort has stalled. We hope more foundries and distributors\n        will publish documents like this that make their axes explicit, to encourage\n        of adoption of variable fonts throughout the industry, and provide source\n        material for a future update to the OpenType specification's axis registry.\n    ", "result": "PASS", "severity": null}, {"description": "Does METADATA.pb copyright field contain broken links?", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/broken_links>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.broken_links", "proposal": ["https://github.com/fonttools/fontbakery/issues/2550", "https://github.com/fonttools/fontbakery/issues/4110"], "rationale": "\n        This check ensures that any URLs found within the copyright\n        field of the METADATA.pb file are valid.\n    ", "result": "PASS", "severity": null}, {"description": "METADATA.pb: Font styles are named canonically?", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/canonical_style_names>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.canonical_style_names", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        If the style is set to 'normal' in the METADATA.pb file, we expect a\n        non-italic font - i.e. the font's macStyle bit 1 should be set to 0,\n        and the font's fullname should not end with \"Italic\"; similarly if\n        the style is set to 'italic', we expect a font with the macStyle bit 1\n        set to 1, and the font's fullname ending with \"Italic\". If this is\n        not the case, it can indicate an italic font was incorrectly marked\n        as 'normal' in the METADATA.pb file or vice versa.\n    ", "result": "PASS", "severity": null}, {"description": "METADATA.pb: Check that font weight has a canonical value.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/canonical_weight_value>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.canonical_weight_value", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        This check ensures that the font weight declared in the METADATA.pb file\n        has a canonical value. The canonical values are multiples of 100 between\n        100 and 900.\n    ", "result": "PASS", "severity": null}, {"description": "Check samples can be rendered.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/can_render_samples>", [["font", 0]]], "logs": [{"message": {"code": "no-sample-string", "message": "Aparently there's no sample strings for 'adl_Latn' in the gflanguages package."}, "status": "WARN"}, {"message": {"code": "no-sample-string", "message": "Aparently there's no sample strings for 'ak_Latn' in the gflanguages package."}, "status": "WARN"}, {"message": {"code": "no-sample-string", "message": "Aparently there's no sample strings for 'bwy_Latn' in the gflanguages package."}, "status": "WARN"}, {"message": {"code": "no-sample-string", "message": "Aparently there's no sample strings for 'ku_Cyrl' in the gflanguages package."}, "status": "WARN"}, {"message": {"code": "no-sample-string", "message": "Aparently there's no sample strings for 'ms_Latn' in the gflanguages package."}, "status": "WARN"}], "module": "vendorspecific.googlefonts.metadata.can_render_samples", "proposal": ["https://github.com/fonttools/fontbakery/issues/3419", "https://github.com/fonttools/fontbakery/issues/3605"], "rationale": "\n        In order to prevent tofu from being seen on fonts.google.com, this check\n        verifies that all samples specified by METADATA.pb can be properly\n        rendered by the font.\n    ", "result": "WARN", "severity": null}, {"description": "Ensure METADATA.pb category field is valid.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/category>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.category", "proposal": ["https://github.com/fonttools/fontbakery/issues/2972"], "rationale": "\n        There are only five acceptable values for the category field in a METADATA.pb\n        file:\n\n        - MONOSPACE\n\n        - SANS_SERIF\n\n        - SERIF\n\n        - DISPLAY\n\n        - HANDWRITING\n\n        This check is meant to avoid typos in this field.\n    ", "result": "PASS", "severity": null}, {"description": "Check if category on METADATA.pb matches what can be inferred from the family name.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/category_hints>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.category_hints", "proposal": ["https://github.com/fonttools/fontbakery/issues/3624"], "rationale": "\n        Sometimes the font familyname contains words that hint at which is the most\n        likely correct category to be declared on METADATA.pb\n    ", "result": "PASS", "severity": null}, {"description": "Validate VF axes match the ones declared on METADATA.pb.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/consistent_axis_enumeration>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.consistent_axis_enumeration", "proposal": ["https://github.com/fonttools/fontbakery/issues/3051"], "rationale": "\n        All font variation axes present in the font files must be properly declared\n        on METADATA.pb so that they can be served by the GFonts API.\n    ", "result": "PASS", "severity": null}, {"description": "METADATA.pb: Check URL on copyright string is the same as in repository_url field.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/consistent_repo_urls>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.consistent_repo_urls", "proposal": ["https://github.com/fonttools/fontbakery/issues/4056"], "rationale": "\n        Sometimes, perhaps due to copy-pasting, projects may declare different URLs\n        between the font.coyright and the family.sources.repository_url fields.\n    ", "result": "PASS", "severity": null}, {"description": "Validate 'date_added' field on METADATA.pb.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/date_added>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.date_added", "proposal": ["https://github.com/fonttools/fontbakery/issues/4729"], "rationale": "\n        The date_added field must not be empty or malformed.\n\n        Expected format is \"YYYY-MM-DD\"\n    ", "result": "PASS", "severity": null}, {"description": "METADATA.pb: Designers are listed correctly on the Google Fonts catalog?", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/designer_profiles>", [["font", 0]]], "logs": [{"message": {"code": "unfulfilled-conditions", "message": "Unfulfilled Conditions: not is_noto"}, "status": "SKIP"}], "module": "vendorspecific.googlefonts.metadata.designer_profiles", "proposal": ["https://github.com/fonttools/fontbakery/issues/3083"], "rationale": "\n        Google Fonts has a catalog of designers.\n\n        This check ensures that the online entries of the catalog can be found based\n        on the designer names listed on the METADATA.pb file.\n\n        It also validates the URLs and file formats are all correctly set.\n    ", "result": "SKIP", "severity": null}, {"description": "Multiple values in font designer field in METADATA.pb must be separated by commas.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/designer_values>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.designer_values", "proposal": ["https://github.com/fonttools/fontbakery/issues/2479"], "rationale": "\n        We must use commas instead of forward slashes because the server-side code\n        at the fonts.google.com directory will segment the string on the commas into\n        a list of names and display the first item in the list as the\n        \"principal designer\" while the remaining names are identified as \"contributors\".\n\n        See eg https://fonts.google.com/specimen/Rubik\n    ", "result": "PASS", "severity": null}, {"description": "At least one designer is declared in METADATA.pb", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/empty_designer>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.empty_designer", "proposal": ["https://github.com/fonttools/fontbakery/issues/3961"], "rationale": "\n        Any font published on Google Fonts must credit one or several authors,\n        foundry and/or individuals.\n\n        Ideally, all authors listed in the upstream repository's AUTHORS.txt should\n        be mentioned in the designer field.\n    ", "result": "PASS", "severity": null}, {"description": "Ensure METADATA.pb does not use escaped strings.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/escaped_strings>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.escaped_strings", "proposal": ["https://github.com/fonttools/fontbakery/issues/2932"], "rationale": "\n        In some cases we've seen designer names and other fields with escaped strings\n        in METADATA files (such as \"Juli\\303\\241n\").\n\n        Nowadays the strings can be full unicode strings (such as \"Juli\u00e1n\") and do\n        not need escaping.\n\n        Escaping quotes or double-quotes is fine, though.\n    ", "result": "PASS", "severity": null}, {"description": "Check font family directory name.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/family_directory_name>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.family_directory_name", "proposal": ["https://github.com/fonttools/fontbakery/issues/3421"], "rationale": "\n        We want the directory name of a font family to be predictable and directly\n        derived from the family name, all lowercased and removing spaces.\n    ", "result": "PASS", "severity": null}, {"description": "Check that METADATA.pb family values are all the same.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/familyname>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.familyname", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        The METADATA.pb file includes a family name field for each font\n        file in the family. The value of this field should be the same\n        for all fonts in the family.\n    ", "result": "PASS", "severity": null}, {"description": "METADATA.pb: Font filenames match font.filename entries?", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/filenames>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.filenames", "proposal": ["https://github.com/fonttools/fontbakery/issues/2597"], "rationale": "\n        Note:\n        This check only looks for files in the current directory.\n\n        Font files in subdirectories are checked by these other two checks:\n         - googlefonts/metadata/undeclared_fonts\n         - googlefonts/repo/vf_has_static_fonts\n\n        We may want to merge them all into a single check.\n    ", "result": "PASS", "severity": null}, {"description": "Ensure there is a regular style defined in METADATA.pb.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/has_regular>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.has_regular", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        According to Google Fonts standards, families should have a Regular\n        style.\n    ", "result": "PASS", "severity": null}, {"description": "Check METADATA.pb includes production subsets.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/includes_production_subsets>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.includes_production_subsets", "proposal": ["https://github.com/fonttools/fontbakery/issues/2989"], "rationale": "\n        Check METADATA.pb file includes the same subsets as the family in production.\n    ", "result": "PASS", "severity": null}, {"description": "METADATA.pb font.filename and font.post_script_name fields have equivalent values?", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/match_filename_postscript>", [["font", 0]]], "logs": [{"message": {"code": "unfulfilled-conditions", "message": "Unfulfilled Conditions: not is_variable_font"}, "status": "SKIP"}], "module": "vendorspecific.googlefonts.metadata.match_filename_postscript", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        For static fonts, this checks that the font filename as declared in\n        the METADATA.pb file matches the post_script_name field. i.e.\n        SomeFont-Regular.ttf should have a PostScript name of SomeFont-Regular.\n    ", "result": "SKIP", "severity": null}, {"description": "METADATA.pb font.full_name and font.post_script_name fields have equivalent values ?", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/match_fullname_postscript>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.match_fullname_postscript", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        The font.full_name and font.post_script_name fields in the\n        METADATA.pb file should be consistent - i.e. when all non-alphabetic\n        characters are removed, they should be the same. This is to\n        prevent inconsistencies when one or the other value has been\n        manually edited in the METADATA.pb file.\n    ", "result": "PASS", "severity": null}, {"description": "METADATA.pb: Check font name is the same as family name.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/match_name_familyname>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.match_name_familyname", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        This check ensures that the 'name' field in each font's entry in\n        the METADATA.pb file matches the 'name' field at the top level of\n        the METADATA.pb.\n    ", "result": "PASS", "severity": null}, {"description": "METADATA.pb weight matches postScriptName for static fonts.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/match_weight_postscript>", [["font", 0]]], "logs": [{"message": {"code": "unfulfilled-conditions", "message": "Unfulfilled Conditions: not is_variable_font"}, "status": "SKIP"}], "module": "vendorspecific.googlefonts.metadata.match_weight_postscript", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        The METADATA.pb file has a field for each font file called 'weight',\n        with a numeric value from 100 to 900. This check ensures that the\n        weight value seems appropriate given the style name in the font's\n        postScriptName. For example, a font with a postScriptName ending in\n        'Bold' should have a weight value of 700.\n    ", "result": "SKIP", "severity": null}, {"description": "METADATA.pb should contain at least \"menu\" and \"latin\" subsets.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/menu_and_latin>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.menu_and_latin", "proposal": ["https://github.com/fonttools/fontbakery/issues/912#issuecomment-237935444", "https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        The 'menu' and 'latin' subsets are mandatory in METADATA.pb for the\n        font to display correctly on the Google Fonts website.\n    ", "result": "PASS", "severity": null}, {"description": "METADATA.pb: Validate family.minisite_url field.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/minisite_url>", [["font", 0]]], "logs": [{"message": {"code": "lacks-minisite-url", "message": "Please consider adding a family.minisite_url entry."}, "status": "INFO"}], "module": "vendorspecific.googlefonts.metadata.minisite_url", "proposal": ["https://github.com/fonttools/fontbakery/issues/4504"], "rationale": "\n        Validate family.minisite_url field.\n    ", "result": "INFO", "severity": null}, {"description": "METADATA.pb font.name and font.full_name fields match the values declared on the name table?", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/nameid/family_and_full_names>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.nameid.family_and_full_names", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        This check ensures that the family name declared in the METADATA.pb file\n        matches the family name declared in the name table of the font file,\n        and that the font full name declared in the METADATA.pb file\n        matches the font full name declared in the name table of the font file.\n        If the font was uploaded by the packager, this should always be the\n        case. But if there were manual changes to the METADATA.pb file, a mismatch\n        could occur.\n    ", "result": "PASS", "severity": null}, {"description": "METADATA.pb font.name value should be same as the family name declared on the name table.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/nameid/font_name>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.nameid.font_name", "proposal": ["https://github.com/fonttools/fontbakery/issues/4086", "https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        This check ensures consistency between the font name declared on the name table\n        and the contents of the METADATA.pb file.\n    ", "result": "PASS", "severity": null}, {"description": "Checks METADATA.pb font.post_script_name matches postscript name declared on the name table.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/nameid/post_script_name>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.nameid.post_script_name", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        This check ensures that the PostScript name declared in the METADATA.pb file\n        matches the PostScript name declared in the name table of the font file.\n        If the font was uploaded by the packager, this should always be the\n        case. But if there were manual changes to the METADATA.pb file, a mismatch\n        could occur.\n    ", "result": "PASS", "severity": null}, {"description": "Check METADATA.pb parse correctly.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/parses>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "METADATA.pb parsed successfuly."}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.parses", "proposal": ["https://github.com/fonttools/fontbakery/issues/2248"], "rationale": "\n        The purpose of this check is to ensure that the METADATA.pb file is not\n        malformed.\n    ", "result": "PASS", "severity": null}, {"description": "METADATA.pb: Check for primary_script", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/primary_script>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.primary_script", "proposal": ["https://github.com/fonttools/fontbakery/issues/4109"], "rationale": "\n        Try to guess font's primary script and see if that's set in METADATA.pb.\n        This is an educated guess based on the number of glyphs per script in the font\n        and should be taken with caution.\n    ", "result": "PASS", "severity": null}, {"description": "METADATA.pb: Regular should be 400.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/regular_is_400>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.regular_is_400", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        The weight of the regular style should be set to 400.\n    ", "result": "PASS", "severity": null}, {"description": "Check METADATA.pb file only contains a single CJK subset.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/single_cjk_subset>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.single_cjk_subset", "proposal": ["https://github.com/fonttools/fontbakery/issues/4779"], "rationale": "\n        Check METADATA.pb file only contains a single CJK subset since the Google Fonts\n        backend doesn't support multiple CJK subsets.\n    ", "result": "PASS", "severity": null}, {"description": "METADATA.pb subsets should be alphabetically ordered.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/subsets_order>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.subsets_order", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        The subsets listed in the METADATA.pb file should be sorted in\n        alphabetical order.\n    ", "result": "PASS", "severity": null}, {"description": "Ensure METADATA.pb lists all font binaries.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/undeclared_fonts>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.undeclared_fonts", "proposal": ["https://github.com/fonttools/fontbakery/issues/2575"], "rationale": "\n        The set of font binaries available, except the ones on a \"static\" subdir,\n        must match exactly those declared on the METADATA.pb file.\n\n        Also, to avoid confusion, we expect that font files (other than statics)\n        are not placed on subdirectories.\n    ", "result": "PASS", "severity": null}, {"description": "METADATA.pb: check if fonts field only has unique \"full_name\" values.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/unique_full_name_values>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.unique_full_name_values", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        Each font field in the METADATA.pb file should have a unique\n        \"full_name\" value. If this is not the case, it may indicate that\n        the font files have been incorrectly named, or that the METADATA.pb\n        file has been incorrectly edited.\n    ", "result": "PASS", "severity": null}, {"description": "METADATA.pb: check if fonts field only contains unique style:weight pairs.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/unique_weight_style_pairs>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.unique_weight_style_pairs", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        Each font field in the METADATA.pb file should have a unique\n        style and weight. If there are duplications, it may indicate that\n        that the METADATA.pb file has been incorrectly edited.\n    ", "result": "PASS", "severity": null}, {"description": "Check for codepoints not covered by METADATA subsets.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/unreachable_subsetting>", [["font", 0]]], "logs": [{"message": {"code": "unreachable-subsetting", "message": "The following codepoints supported by the font are not covered by\n    any subsets defined in the font's metadata file, and will never\n    be served. You can solve this by either manually adding additional\n    subset declarations to METADATA.pb, or by editing the glyphset\n    definitions.\n\n * U+02CD MODIFIER LETTER LOW MACRON: try adding lisu\n * U+02D8 BREVE: try adding one of: yi, canadian-aboriginal\n * U+02D9 DOT ABOVE: try adding one of: yi, canadian-aboriginal\n * U+02DB OGONEK: try adding one of: yi, canadian-aboriginal\n * U+0302 COMBINING CIRCUMFLEX ACCENT: try adding one of: tifinagh, coptic, math, cherokee\n * U+0305 COMBINING OVERLINE: try adding one of: elbasan, glagolitic, coptic, math, gothic\n * U+0306 COMBINING BREVE: try adding one of: tifinagh, old-permic\n * U+0307 COMBINING DOT ABOVE: try adding one of: canadian-aboriginal, tifinagh, old-permic, tai-le, malayalam, todhri, syriac, duployan, coptic, hebrew, math\n * U+030A COMBINING RING ABOVE: try adding one of: syriac, duployan\n * U+030B COMBINING DOUBLE ACUTE ACCENT: try adding one of: osage, cherokee\n * U+030C COMBINING CARON: try adding one of: tai-le, cherokee\n * U+030D COMBINING VERTICAL LINE ABOVE: try adding sunuwar\n * U+030E COMBINING DOUBLE VERTICAL LINE ABOVE: try adding ethiopic\n * U+030F COMBINING DOUBLE GRAVE ACCENT: not included in any glyphset definition\n * U+0310 COMBINING CANDRABINDU: try adding one of: sunuwar, math\n * U+0311 COMBINING INVERTED BREVE: try adding one of: coptic, todhri\n * U+0312 COMBINING TURNED COMMA ABOVE: try adding math\n * U+0313 COMBINING COMMA ABOVE: try adding one of: todhri, old-permic\n * U+0314 COMBINING REVERSED COMMA ABOVE: not included in any glyphset definition\n * U+0315 COMBINING COMMA ABOVE RIGHT: try adding math\n * U+0316 COMBINING GRAVE ACCENT BELOW: not included in any glyphset definition\n * U+0317 COMBINING ACUTE ACCENT BELOW: not included in any glyphset definition\n * U+0318 COMBINING LEFT TACK BELOW: not included in any glyphset definition\n * U+0319 COMBINING RIGHT TACK BELOW: not included in any glyphset definition\n * U+031A COMBINING LEFT ANGLE ABOVE: try adding math\n * U+031B COMBINING HORN: not included in any glyphset definition\n * U+031C COMBINING LEFT HALF RING BELOW: not included in any glyphset definition\n * U+031D COMBINING UP TACK BELOW: not included in any glyphset definition\n * U+031E COMBINING DOWN TACK BELOW: not included in any glyphset definition\n * U+031F COMBINING PLUS SIGN BELOW: not included in any glyphset definition\n * U+0320 COMBINING MINUS SIGN BELOW: try adding syriac\n * U+0321 COMBINING PALATALIZED HOOK BELOW: not included in any glyphset definition\n * U+0322 COMBINING RETROFLEX HOOK BELOW: not included in any glyphset definition\n * U+0324 COMBINING DIAERESIS BELOW: try adding one of: syriac, duployan, cherokee\n * U+0325 COMBINING RING BELOW: try adding syriac\n * U+0326 COMBINING COMMA BELOW: try adding math\n * U+0327 COMBINING CEDILLA: try adding math\n * U+0328 COMBINING OGONEK: not included in any glyphset definition\n * U+032A COMBINING BRIDGE BELOW: not included in any glyphset definition\n * U+032B COMBINING INVERTED DOUBLE ARCH BELOW: not included in any glyphset definition\n * U+032C COMBINING CARON BELOW: try adding math\n * U+032D COMBINING CIRCUMFLEX ACCENT BELOW: try adding one of: syriac, sunuwar\n * U+032E COMBINING BREVE BELOW: try adding syriac\n * U+032F COMBINING INVERTED BREVE BELOW: try adding math\n * U+0330 COMBINING TILDE BELOW: try adding one of: syriac, math, cherokee\n * U+0331 COMBINING MACRON BELOW: try adding one of: tifinagh, caucasian-albanian, cherokee, syriac, sunuwar, thai, gothic\n * U+0332 COMBINING LOW LINE: try adding math\n * U+0333 COMBINING DOUBLE LOW LINE: try adding math\n * U+0334 COMBINING TILDE OVERLAY: not included in any glyphset definition\n * U+0335 COMBINING SHORT STROKE OVERLAY: not included in any glyphset definition\n * U+0336 COMBINING LONG STROKE OVERLAY: not included in any glyphset definition\n * U+0337 COMBINING SHORT SOLIDUS OVERLAY: not included in any glyphset definition\n * U+0338 COMBINING LONG SOLIDUS OVERLAY: try adding math\n * U+0339 COMBINING RIGHT HALF RING BELOW: not included in any glyphset definition\n * U+033A COMBINING INVERTED BRIDGE BELOW: try adding math\n * U+033B COMBINING SQUARE BELOW: not included in any glyphset definition\n * U+033C COMBINING SEAGULL BELOW: not included in any glyphset definition\n * U+033D COMBINING X ABOVE: not included in any glyphset definition\n * U+033E COMBINING VERTICAL TILDE: not included in any glyphset definition\n * U+033F COMBINING DOUBLE OVERLINE: try adding coptic\n * U+0340 COMBINING GRAVE TONE MARK: not included in any glyphset definition\n * U+0341 COMBINING ACUTE TONE MARK: not included in any glyphset definition\n * U+0342 COMBINING GREEK PERISPOMENI: not included in any glyphset definition\n * U+0343 COMBINING GREEK KORONIS: not included in any glyphset definition\n * U+0344 COMBINING GREEK DIALYTIKA TONOS: not included in any glyphset definition\n * U+0345 COMBINING GREEK YPOGEGRAMMENI: not included in any glyphset definition\n * U+0346 COMBINING BRIDGE ABOVE: try adding math\n * U+0347 COMBINING EQUALS SIGN BELOW: not included in any glyphset definition\n * U+0348 COMBINING DOUBLE VERTICAL LINE BELOW: not included in any glyphset definition\n * U+0349 COMBINING LEFT ANGLE BELOW: not included in any glyphset definition\n * U+034A COMBINING NOT TILDE ABOVE: not included in any glyphset definition\n * U+034B COMBINING HOMOTHETIC ABOVE: not included in any glyphset definition\n * U+034C COMBINING ALMOST EQUAL TO ABOVE: not included in any glyphset definition\n * U+034D COMBINING LEFT RIGHT ARROW BELOW: try adding math\n * U+034E COMBINING UPWARDS ARROW BELOW: not included in any glyphset definition\n * U+034F COMBINING GRAPHEME JOINER: not included in any glyphset definition\n * U+0350 COMBINING RIGHT ARROWHEAD ABOVE: not included in any glyphset definition\n * U+0351 COMBINING LEFT HALF RING ABOVE: not included in any glyphset definition\n * U+0352 COMBINING FERMATA: not included in any glyphset definition\n * U+0353 COMBINING X BELOW: not included in any glyphset definition\n * U+0354 COMBINING LEFT ARROWHEAD BELOW: not included in any glyphset definition\n * U+0355 COMBINING RIGHT ARROWHEAD BELOW: not included in any glyphset definition\n * U+0356 COMBINING RIGHT ARROWHEAD AND UP ARROWHEAD BELOW: not included in any glyphset definition\n * U+0357 COMBINING RIGHT HALF RING ABOVE: not included in any glyphset definition\n * U+0358 COMBINING DOT ABOVE RIGHT: try adding osage\n * U+0359 COMBINING ASTERISK BELOW: not included in any glyphset definition\n * U+035A COMBINING DOUBLE RING BELOW: not included in any glyphset definition\n * U+035B COMBINING ZIGZAG ABOVE: not included in any glyphset definition\n * U+035C COMBINING DOUBLE BREVE BELOW: not included in any glyphset definition\n * U+035D COMBINING DOUBLE BREVE: not included in any glyphset definition\n * U+035E COMBINING DOUBLE MACRON: try adding one of: coptic, caucasian-albanian, todhri\n * U+035F COMBINING DOUBLE MACRON BELOW: not included in any glyphset definition\n * U+0360 COMBINING DOUBLE TILDE: not included in any glyphset definition\n * U+0361 COMBINING DOUBLE INVERTED BREVE: try adding coptic\n * U+0362 COMBINING DOUBLE RIGHTWARDS ARROW BELOW: not included in any glyphset definition\n * U+0363 COMBINING LATIN SMALL LETTER A: not included in any glyphset definition\n * U+0364 COMBINING LATIN SMALL LETTER E: not included in any glyphset definition\n * U+0365 COMBINING LATIN SMALL LETTER I: not included in any glyphset definition\n * U+0366 COMBINING LATIN SMALL LETTER O: not included in any glyphset definition\n * U+0367 COMBINING LATIN SMALL LETTER U: not included in any glyphset definition\n * U+0368 COMBINING LATIN SMALL LETTER C: not included in any glyphset definition\n * U+0369 COMBINING LATIN SMALL LETTER D: not included in any glyphset definition\n * U+036A COMBINING LATIN SMALL LETTER H: not included in any glyphset definition\n * U+036B COMBINING LATIN SMALL LETTER M: not included in any glyphset definition\n * U+036C COMBINING LATIN SMALL LETTER R: not included in any glyphset definition\n * U+036D COMBINING LATIN SMALL LETTER T: not included in any glyphset definition\n * U+036E COMBINING LATIN SMALL LETTER V: not included in any glyphset definition\n * U+036F COMBINING LATIN SMALL LETTER X: not included in any glyphset definition\n * U+10FB GEORGIAN PARAGRAPH SEPARATOR: try adding one of: georgian, glagolitic\n * U+1AB0 COMBINING DOUBLED CIRCUMFLEX ACCENT: not included in any glyphset definition\n * U+1AB1 COMBINING DIAERESIS-RING: not included in any glyphset definition\n * U+1AB2 COMBINING INFINITY: not included in any glyphset definition\n * U+1AB3 COMBINING DOWNWARDS ARROW: not included in any glyphset definition\n * U+1AB4 COMBINING TRIPLE DOT: not included in any glyphset definition\n * U+1AB5 COMBINING X-X BELOW: not included in any glyphset definition\n * U+1AB6 COMBINING WIGGLY LINE BELOW: not included in any glyphset definition\n * U+1AB7 COMBINING OPEN MARK BELOW: not included in any glyphset definition\n * U+1AB8 COMBINING DOUBLE OPEN MARK BELOW: not included in any glyphset definition\n * U+1AB9 COMBINING LIGHT CENTRALIZATION STROKE BELOW: not included in any glyphset definition\n * U+1ABA COMBINING STRONG CENTRALIZATION STROKE BELOW: not included in any glyphset definition\n * U+1ABB COMBINING PARENTHESES ABOVE: not included in any glyphset definition\n * U+1ABC COMBINING DOUBLE PARENTHESES ABOVE: not included in any glyphset definition\n * U+1ABD COMBINING PARENTHESES BELOW: not included in any glyphset definition\n * U+1ABE COMBINING PARENTHESES OVERLAY: not included in any glyphset definition\n * U+1ABF COMBINING LATIN SMALL LETTER W BELOW: not included in any glyphset definition\n * U+1AC0 COMBINING LATIN SMALL LETTER TURNED W BELOW: not included in any glyphset definition\n * U+1AC5 COMBINING SQUARE BRACKETS ABOVE: not included in any glyphset definition\n * U+1AC7 COMBINING INVERTED DOUBLE ARCH ABOVE: not included in any glyphset definition\n * U+1AC8 COMBINING PLUS SIGN ABOVE: not included in any glyphset definition\n * U+1AC9 COMBINING DOUBLE PLUS SIGN ABOVE: not included in any glyphset definition\n * U+1ACA COMBINING DOUBLE PLUS SIGN BELOW: not included in any glyphset definition\n * U+1ACB COMBINING TRIPLE ACUTE ACCENT: not included in any glyphset definition\n * U+1ACC COMBINING LATIN SMALL LETTER INSULAR G: not included in any glyphset definition\n * U+1ACD COMBINING LATIN SMALL LETTER INSULAR R: not included in any glyphset definition\n * U+1ACE COMBINING LATIN SMALL LETTER INSULAR T: not included in any glyphset definition\n * U+1DC0 COMBINING DOTTED GRAVE ACCENT: not included in any glyphset definition\n * U+1DC1 COMBINING DOTTED ACUTE ACCENT: not included in any glyphset definition\n * U+1DC2 COMBINING SNAKE BELOW: not included in any glyphset definition\n * U+1DC3 COMBINING SUSPENSION MARK: not included in any glyphset definition\n * U+1DC4 COMBINING MACRON-ACUTE: not included in any glyphset definition\n * U+1DC5 COMBINING GRAVE-MACRON: not included in any glyphset definition\n * U+1DC6 COMBINING MACRON-GRAVE: not included in any glyphset definition\n * U+1DC7 COMBINING ACUTE-MACRON: not included in any glyphset definition\n * U+1DC8 COMBINING GRAVE-ACUTE-GRAVE: not included in any glyphset definition\n * U+1DC9 COMBINING ACUTE-GRAVE-ACUTE: not included in any glyphset definition\n * U+1DCA COMBINING LATIN SMALL LETTER R BELOW: not included in any glyphset definition\n * U+1DCB COMBINING BREVE-MACRON: not included in any glyphset definition\n * U+1DCC COMBINING MACRON-BREVE: not included in any glyphset definition\n * U+1DCD COMBINING DOUBLE CIRCUMFLEX ABOVE: try adding coptic\n * U+1DCE COMBINING OGONEK ABOVE: not included in any glyphset definition\n * U+1DCF COMBINING ZIGZAG BELOW: not included in any glyphset definition\n * U+1DD0 COMBINING IS BELOW: not included in any glyphset definition\n * U+1DD1 COMBINING UR ABOVE: not included in any glyphset definition\n * U+1DD2 COMBINING US ABOVE: not included in any glyphset definition\n * U+1DD3 COMBINING LATIN SMALL LETTER FLATTENED OPEN A ABOVE: not included in any glyphset definition\n * U+1DD4 COMBINING LATIN SMALL LETTER AE: not included in any glyphset definition\n * U+1DD5 COMBINING LATIN SMALL LETTER AO: not included in any glyphset definition\n * U+1DD6 COMBINING LATIN SMALL LETTER AV: not included in any glyphset definition\n * U+1DD7 COMBINING LATIN SMALL LETTER C CEDILLA: not included in any glyphset definition\n * U+1DD8 COMBINING LATIN SMALL LETTER INSULAR D: not included in any glyphset definition\n * U+1DD9 COMBINING LATIN SMALL LETTER ETH: not included in any glyphset definition\n * U+1DDA COMBINING LATIN SMALL LETTER G: not included in any glyphset definition\n * U+1DDB COMBINING LATIN LETTER SMALL CAPITAL G: not included in any glyphset definition\n * U+1DDC COMBINING LATIN SMALL LETTER K: not included in any glyphset definition\n * U+1DDD COMBINING LATIN SMALL LETTER L: not included in any glyphset definition\n * U+1DDE COMBINING LATIN LETTER SMALL CAPITAL L: not included in any glyphset definition\n * U+1DDF COMBINING LATIN LETTER SMALL CAPITAL M: not included in any glyphset definition\n * U+1DE0 COMBINING LATIN SMALL LETTER N: not included in any glyphset definition\n * U+1DE1 COMBINING LATIN LETTER SMALL CAPITAL N: not included in any glyphset definition\n * U+1DE2 COMBINING LATIN LETTER SMALL CAPITAL R: not included in any glyphset definition\n * U+1DE3 COMBINING LATIN SMALL LETTER R ROTUNDA: not included in any glyphset definition\n * U+1DE4 COMBINING LATIN SMALL LETTER S: not included in any glyphset definition\n * U+1DE5 COMBINING LATIN SMALL LETTER LONG S: not included in any glyphset definition\n * U+1DE6 COMBINING LATIN SMALL LETTER Z: not included in any glyphset definition\n * U+1DE7 COMBINING LATIN SMALL LETTER ALPHA: not included in any glyphset definition\n * U+1DE8 COMBINING LATIN SMALL LETTER B: not included in any glyphset definition\n * U+1DE9 COMBINING LATIN SMALL LETTER BETA: not included in any glyphset definition\n * U+1DEA COMBINING LATIN SMALL LETTER SCHWA: not included in any glyphset definition\n * U+1DEB COMBINING LATIN SMALL LETTER F: not included in any glyphset definition\n * U+1DEC COMBINING LATIN SMALL LETTER L WITH DOUBLE MIDDLE TILDE: not included in any glyphset definition\n * U+1DED COMBINING LATIN SMALL LETTER O WITH LIGHT CENTRALIZATION STROKE: not included in any glyphset definition\n * U+1DEE COMBINING LATIN SMALL LETTER P: not included in any glyphset definition\n * U+1DEF COMBINING LATIN SMALL LETTER ESH: not included in any glyphset definition\n * U+1DF0 COMBINING LATIN SMALL LETTER U WITH LIGHT CENTRALIZATION STROKE: not included in any glyphset definition\n * U+1DF1 COMBINING LATIN SMALL LETTER W: not included in any glyphset definition\n * U+1DF2 COMBINING LATIN SMALL LETTER A WITH DIAERESIS: not included in any glyphset definition\n * U+1DF3 COMBINING LATIN SMALL LETTER O WITH DIAERESIS: not included in any glyphset definition\n * U+1DF4 COMBINING LATIN SMALL LETTER U WITH DIAERESIS: not included in any glyphset definition\n * U+1DF5 COMBINING UP TACK ABOVE: not included in any glyphset definition\n * U+1DF6 COMBINING KAVYKA ABOVE RIGHT: not included in any glyphset definition\n * U+1DF7 COMBINING KAVYKA ABOVE LEFT: not included in any glyphset definition\n * U+1DF8 COMBINING DOT ABOVE LEFT: try adding syriac\n * U+1DF9 COMBINING WIDE INVERTED BRIDGE BELOW: not included in any glyphset definition\n * U+1DFB COMBINING DELETION MARK: try adding newa\n * U+1DFC COMBINING DOUBLE INVERTED BREVE BELOW: not included in any glyphset definition\n * U+1DFD COMBINING ALMOST EQUAL TO BELOW: not included in any glyphset definition\n * U+1DFE COMBINING LEFT ARROWHEAD ABOVE: not included in any glyphset definition\n * U+1DFF COMBINING RIGHT ARROWHEAD AND DOWN ARROWHEAD BELOW: not included in any glyphset definition\n * U+2000 EN QUAD: try adding symbols2\n * U+2001 EM QUAD: try adding symbols2\n * U+2003 EM SPACE: try adding nushu\n * U+2004 THREE-PER-EM SPACE: try adding symbols2\n * U+2005 FOUR-PER-EM SPACE: try adding symbols2\n * U+2006 SIX-PER-EM SPACE: try adding symbols2\n * U+2007 FIGURE SPACE: try adding symbols2\n * U+2008 PUNCTUATION SPACE: try adding symbols2\n * U+200A HAIR SPACE: try adding symbols2\n * U+200C ZERO WIDTH NON-JOINER: try adding one of: kayah-li, brahmi, phags-pa, balinese, lepcha, tai-viet, buginese, tifinagh, sinhala, chakma, psalter-pahlavi, newa, tagalog, gunjala-gondi, sundanese, thaana, bhaiksuki, gujarati, limbu, yi, tamil, tibetan, tai-le, hanifi-rohingya, syriac, javanese, khmer, tirhuta, dogra, avestan, arabic, takri, thai, masaram-gondi, siddham, devanagari, batak, bengali, kannada, meetei-mayek, tai-tham, saurashtra, cham, khojki, sogdian, nko, hanunoo, kaithi, sharada, myanmar, zanabazar-square, hebrew, modi, pahawh-hmong, hatran, buhid, mongolian, syloti-nagri, malayalam, grantha, tagbanwa, khudawadi, warang-citi, lao, gurmukhi, new-tai-lue, kharoshthi, duployan, mahajani, mandaic, telugu, manichaean, oriya, rejang\n * U+200D ZERO WIDTH JOINER: try adding one of: kayah-li, brahmi, phags-pa, balinese, lepcha, tai-viet, buginese, tifinagh, sinhala, chakma, psalter-pahlavi, newa, tagalog, gunjala-gondi, sundanese, thaana, bhaiksuki, gujarati, limbu, yi, tamil, tibetan, tai-le, hanifi-rohingya, syriac, javanese, khmer, tirhuta, dogra, avestan, arabic, takri, thai, masaram-gondi, siddham, devanagari, batak, bengali, kannada, meetei-mayek, tai-tham, saurashtra, cham, khojki, old-hungarian, sogdian, nko, hanunoo, kaithi, sharada, myanmar, zanabazar-square, hebrew, modi, pahawh-hmong, buhid, mongolian, syloti-nagri, malayalam, grantha, tagbanwa, khudawadi, warang-citi, lao, gurmukhi, new-tai-lue, kharoshthi, duployan, mahajani, mandaic, telugu, manichaean, oriya, rejang\n * U+200E LEFT-TO-RIGHT MARK: try adding one of: phags-pa, syriac, nko, thaana, arabic, hebrew\n * U+200F RIGHT-TO-LEFT MARK: try adding one of: phags-pa, syriac, nko, thaana, hebrew\n * U+2010 HYPHEN: try adding one of: kayah-li, sora-sompeng, yi, syloti-nagri, cham, armenian, kharoshthi, kaithi, sundanese, arabic, coptic, hebrew, lisu\n * U+2011 NON-BREAKING HYPHEN: try adding one of: arabic, yi, syloti-nagri\n * U+2012 FIGURE DASH: not included in any glyphset definition\n * U+2015 HORIZONTAL BAR: try adding adlam\n * U+2016 DOUBLE VERTICAL LINE: try adding math\n * U+2017 DOUBLE LOW LINE: try adding math\n * U+201B SINGLE HIGH-REVERSED-9 QUOTATION MARK: try adding adlam\n * U+201F DOUBLE HIGH-REVERSED-9 QUOTATION MARK: not included in any glyphset definition\n * U+2021 DOUBLE DAGGER: try adding adlam\n * U+2023 TRIANGULAR BULLET: not included in any glyphset definition\n * U+2024 ONE DOT LEADER: try adding armenian\n * U+2025 TWO DOT LEADER: try adding phags-pa\n * U+2027 HYPHENATION POINT: not included in any glyphset definition\n * U+2028 LINE SEPARATOR: not included in any glyphset definition\n * U+2029 PARAGRAPH SEPARATOR: not included in any glyphset definition\n * U+202A LEFT-TO-RIGHT EMBEDDING: not included in any glyphset definition\n * U+202B RIGHT-TO-LEFT EMBEDDING: not included in any glyphset definition\n * U+202C POP DIRECTIONAL FORMATTING: not included in any glyphset definition\n * U+202D LEFT-TO-RIGHT OVERRIDE: not included in any glyphset definition\n * U+202E RIGHT-TO-LEFT OVERRIDE: try adding tifinagh\n * U+202F NARROW NO-BREAK SPACE: try adding one of: phags-pa, mongolian, yi\n * U+2030 PER MILLE SIGN: try adding adlam\n * U+2031 PER TEN THOUSAND SIGN: not included in any glyphset definition\n * U+2034 TRIPLE PRIME: try adding math\n * U+2035 REVERSED PRIME: try adding math\n * U+2036 REVERSED DOUBLE PRIME: try adding math\n * U+2037 REVERSED TRIPLE PRIME: try adding math\n * U+2038 CARET: try adding math\n * U+203B REFERENCE MARK: not included in any glyphset definition\n * U+203C DOUBLE EXCLAMATION MARK: try adding math\n * U+203D INTERROBANG: not included in any glyphset definition\n * U+203E OVERLINE: not included in any glyphset definition\n * U+203F UNDERTIE: not included in any glyphset definition\n * U+2040 CHARACTER TIE: try adding math\n * U+2041 CARET INSERTION POINT: not included in any glyphset definition\n * U+2042 ASTERISM: not included in any glyphset definition\n * U+2043 HYPHEN BULLET: try adding math\n * U+2045 LEFT SQUARE BRACKET WITH QUILL: not included in any glyphset definition\n * U+2046 RIGHT SQUARE BRACKET WITH QUILL: not included in any glyphset definition\n * U+2047 DOUBLE QUESTION MARK: try adding math\n * U+2048 QUESTION EXCLAMATION MARK: try adding mongolian\n * U+2049 EXCLAMATION QUESTION MARK: try adding mongolian\n * U+204A TIRONIAN SIGN ET: not included in any glyphset definition\n * U+204B REVERSED PILCROW SIGN: not included in any glyphset definition\n * U+204C BLACK LEFTWARDS BULLET: not included in any glyphset definition\n * U+204D BLACK RIGHTWARDS BULLET: not included in any glyphset definition\n * U+204E LOW ASTERISK: not included in any glyphset definition\n * U+204F REVERSED SEMICOLON: try adding one of: arabic, adlam\n * U+2050 CLOSE UP: try adding math\n * U+2051 TWO ASTERISKS ALIGNED VERTICALLY: not included in any glyphset definition\n * U+2052 COMMERCIAL MINUS SIGN: not included in any glyphset definition\n * U+2053 SWUNG DASH: try adding coptic\n * U+2054 INVERTED UNDERTIE: not included in any glyphset definition\n * U+2055 FLOWER PUNCTUATION MARK: try adding syloti-nagri\n * U+2056 THREE DOT PUNCTUATION: try adding coptic\n * U+2057 QUADRUPLE PRIME: try adding math\n * U+2058 FOUR DOT PUNCTUATION: try adding coptic\n * U+2059 FIVE DOT PUNCTUATION: try adding coptic\n * U+205A TWO DOT PUNCTUATION: try adding one of: carian, old-turkic, georgian, old-hungarian, glagolitic, lycian\n * U+205B FOUR DOT MARK: not included in any glyphset definition\n * U+205C DOTTED CROSS: not included in any glyphset definition\n * U+205D TRICOLON: try adding one of: carian, meroitic-hieroglyphs, meroitic, old-hungarian\n * U+205E VERTICAL FOUR DOTS: try adding old-hungarian\n * U+205F MEDIUM MATHEMATICAL SPACE: try adding math\n * U+2060 WORD JOINER: not included in any glyphset definition\n * U+2061 FUNCTION APPLICATION: not included in any glyphset definition\n * U+2062 INVISIBLE TIMES: not included in any glyphset definition\n * U+2063 INVISIBLE SEPARATOR: not included in any glyphset definition\n * U+2064 INVISIBLE PLUS: not included in any glyphset definition\n * U+2066 LEFT-TO-RIGHT ISOLATE: not included in any glyphset definition\n * U+2067 RIGHT-TO-LEFT ISOLATE: not included in any glyphset definition\n * U+2068 FIRST STRONG ISOLATE: not included in any glyphset definition\n * U+2069 POP DIRECTIONAL ISOLATE: not included in any glyphset definition\n * U+206A INHIBIT SYMMETRIC SWAPPING: not included in any glyphset definition\n * U+206B ACTIVATE SYMMETRIC SWAPPING: not included in any glyphset definition\n * U+206C INHIBIT ARABIC FORM SHAPING: not included in any glyphset definition\n * U+206D ACTIVATE ARABIC FORM SHAPING: not included in any glyphset definition\n * U+206E NATIONAL DIGIT SHAPES: not included in any glyphset definition\n * U+206F NOMINAL DIGIT SHAPES: not included in any glyphset definition\n * U+2070 SUPERSCRIPT ZERO: try adding math\n * U+2071 SUPERSCRIPT LATIN SMALL LETTER I: try adding math\n * U+2074 SUPERSCRIPT FOUR: try adding math\n * U+2075 SUPERSCRIPT FIVE: try adding math\n * U+2076 SUPERSCRIPT SIX: try adding math\n * U+2077 SUPERSCRIPT SEVEN: try adding math\n * U+2078 SUPERSCRIPT EIGHT: try adding math\n * U+2079 SUPERSCRIPT NINE: try adding math\n * U+207A SUPERSCRIPT PLUS SIGN: try adding math\n * U+207B SUPERSCRIPT MINUS: try adding math\n * U+207C SUPERSCRIPT EQUALS SIGN: try adding math\n * U+207D SUPERSCRIPT LEFT PARENTHESIS: try adding math\n * U+207E SUPERSCRIPT RIGHT PARENTHESIS: try adding math\n * U+207F SUPERSCRIPT LATIN SMALL LETTER N: try adding math\n * U+2080 SUBSCRIPT ZERO: try adding math\n * U+2081 SUBSCRIPT ONE: try adding math\n * U+2082 SUBSCRIPT TWO: try adding math\n * U+2083 SUBSCRIPT THREE: try adding math\n * U+2084 SUBSCRIPT FOUR: try adding math\n * U+2085 SUBSCRIPT FIVE: try adding math\n * U+2086 SUBSCRIPT SIX: try adding math\n * U+2087 SUBSCRIPT SEVEN: try adding math\n * U+2088 SUBSCRIPT EIGHT: try adding math\n * U+2089 SUBSCRIPT NINE: try adding math\n * U+208A SUBSCRIPT PLUS SIGN: try adding math\n * U+208B SUBSCRIPT MINUS: try adding math\n * U+208C SUBSCRIPT EQUALS SIGN: try adding math\n * U+208D SUBSCRIPT LEFT PARENTHESIS: try adding math\n * U+208E SUBSCRIPT RIGHT PARENTHESIS: try adding math\n * U+2090 LATIN SUBSCRIPT SMALL LETTER A: try adding math\n * U+2091 LATIN SUBSCRIPT SMALL LETTER E: try adding math\n * U+2092 LATIN SUBSCRIPT SMALL LETTER O: try adding math\n * U+2093 LATIN SUBSCRIPT SMALL LETTER X: try adding math\n * U+2094 LATIN SUBSCRIPT SMALL LETTER SCHWA: try adding math\n * U+2095 LATIN SUBSCRIPT SMALL LETTER H: try adding math\n * U+2096 LATIN SUBSCRIPT SMALL LETTER K: try adding math\n * U+2097 LATIN SUBSCRIPT SMALL LETTER L: try adding math\n * U+2098 LATIN SUBSCRIPT SMALL LETTER M: try adding math\n * U+2099 LATIN SUBSCRIPT SMALL LETTER N: try adding math\n * U+209A LATIN SUBSCRIPT SMALL LETTER P: try adding math\n * U+209B LATIN SUBSCRIPT SMALL LETTER S: try adding math\n * U+209C LATIN SUBSCRIPT SMALL LETTER T: try adding math\n * U+20F0 COMBINING ASTERISK ABOVE: try adding one of: grantha, devanagari\n * U+2100 ACCOUNT OF: try adding math\n * U+2101 ADDRESSED TO THE SUBJECT: try adding math\n * U+2102 DOUBLE-STRUCK CAPITAL C: try adding math\n * U+2103 DEGREE CELSIUS: try adding math\n * U+2104 CENTRE LINE SYMBOL: try adding math\n * U+2105 CARE OF: try adding math\n * U+2106 CADA UNA: try adding math\n * U+2107 EULER CONSTANT: try adding math\n * U+2108 SCRUPLE: try adding math\n * U+2109 DEGREE FAHRENHEIT: try adding math\n * U+210A SCRIPT SMALL G: try adding math\n * U+210B SCRIPT CAPITAL H: try adding math\n * U+210C BLACK-LETTER CAPITAL H: try adding math\n * U+210D DOUBLE-STRUCK CAPITAL H: try adding math\n * U+210E PLANCK CONSTANT: try adding math\n * U+210F PLANCK CONSTANT OVER TWO PI: try adding math\n * U+2110 SCRIPT CAPITAL I: try adding math\n * U+2111 BLACK-LETTER CAPITAL I: try adding math\n * U+2112 SCRIPT CAPITAL L: try adding math\n * U+2114 L B BAR SYMBOL: try adding math\n * U+2115 DOUBLE-STRUCK CAPITAL N: try adding math\n * U+2117 SOUND RECORDING COPYRIGHT: try adding math\n * U+2118 SCRIPT CAPITAL P: try adding math\n * U+2119 DOUBLE-STRUCK CAPITAL P: try adding math\n * U+211A DOUBLE-STRUCK CAPITAL Q: try adding math\n * U+211B SCRIPT CAPITAL R: try adding math\n * U+211C BLACK-LETTER CAPITAL R: try adding math\n * U+211D DOUBLE-STRUCK CAPITAL R: try adding math\n * U+211E PRESCRIPTION TAKE: try adding math\n * U+211F RESPONSE: try adding math\n * U+2120 SERVICE MARK: try adding math\n * U+2121 TELEPHONE SIGN: try adding math\n * U+2123 VERSICLE: try adding math\n * U+2124 DOUBLE-STRUCK CAPITAL Z: try adding math\n * U+2125 OUNCE SIGN: try adding math\n * U+2126 OHM SIGN: try adding math\n * U+2127 INVERTED OHM SIGN: try adding math\n * U+2128 BLACK-LETTER CAPITAL Z: try adding math\n * U+2129 TURNED GREEK SMALL LETTER IOTA: try adding math\n * U+212A KELVIN SIGN: try adding math\n * U+212B ANGSTROM SIGN: try adding math\n * U+212C SCRIPT CAPITAL B: try adding math\n * U+212D BLACK-LETTER CAPITAL C: try adding math\n * U+212E ESTIMATED SYMBOL: try adding math\n * U+212F SCRIPT SMALL E: try adding math\n * U+2130 SCRIPT CAPITAL E: try adding math\n * U+2131 SCRIPT CAPITAL F: try adding math\n * U+2132 TURNED CAPITAL F: try adding math\n * U+2133 SCRIPT CAPITAL M: try adding math\n * U+2134 SCRIPT SMALL O: try adding math\n * U+2135 ALEF SYMBOL: try adding math\n * U+2136 BET SYMBOL: try adding math\n * U+2137 GIMEL SYMBOL: try adding math\n * U+2138 DALET SYMBOL: try adding math\n * U+2139 INFORMATION SOURCE: try adding math\n * U+213A ROTATED CAPITAL Q: try adding math\n * U+213B FACSIMILE SIGN: try adding math\n * U+213C DOUBLE-STRUCK SMALL PI: try adding math\n * U+213D DOUBLE-STRUCK SMALL GAMMA: try adding math\n * U+213E DOUBLE-STRUCK CAPITAL GAMMA: try adding math\n * U+213F DOUBLE-STRUCK CAPITAL PI: try adding math\n * U+2140 DOUBLE-STRUCK N-ARY SUMMATION: try adding math\n * U+2141 TURNED SANS-SERIF CAPITAL G: try adding math\n * U+2142 TURNED SANS-SERIF CAPITAL L: try adding math\n * U+2143 REVERSED SANS-SERIF CAPITAL L: try adding math\n * U+2144 TURNED SANS-SERIF CAPITAL Y: try adding math\n * U+2145 DOUBLE-STRUCK ITALIC CAPITAL D: try adding math\n * U+2146 DOUBLE-STRUCK ITALIC SMALL D: try adding math\n * U+2147 DOUBLE-STRUCK ITALIC SMALL E: try adding math\n * U+2148 DOUBLE-STRUCK ITALIC SMALL I: try adding math\n * U+2149 DOUBLE-STRUCK ITALIC SMALL J: try adding math\n * U+214A PROPERTY LINE: try adding math\n * U+214B TURNED AMPERSAND: try adding math\n * U+214C PER SIGN: try adding math\n * U+214D AKTIESELSKAB: try adding math\n * U+214E TURNED SMALL F: try adding math\n * U+214F SYMBOL FOR SAMARITAN SOURCE: try adding math\n * U+2150 VULGAR FRACTION ONE SEVENTH: try adding symbols\n * U+2151 VULGAR FRACTION ONE NINTH: try adding symbols\n * U+2152 VULGAR FRACTION ONE TENTH: try adding symbols\n * U+2153 VULGAR FRACTION ONE THIRD: try adding symbols\n * U+2154 VULGAR FRACTION TWO THIRDS: try adding symbols\n * U+2155 VULGAR FRACTION ONE FIFTH: try adding symbols\n * U+2156 VULGAR FRACTION TWO FIFTHS: try adding symbols\n * U+2157 VULGAR FRACTION THREE FIFTHS: try adding symbols\n * U+2158 VULGAR FRACTION FOUR FIFTHS: try adding symbols\n * U+2159 VULGAR FRACTION ONE SIXTH: try adding symbols\n * U+215A VULGAR FRACTION FIVE SIXTHS: try adding symbols\n * U+215B VULGAR FRACTION ONE EIGHTH: try adding symbols\n * U+215C VULGAR FRACTION THREE EIGHTHS: try adding symbols\n * U+215D VULGAR FRACTION FIVE EIGHTHS: try adding symbols\n * U+215E VULGAR FRACTION SEVEN EIGHTHS: try adding symbols\n * U+215F FRACTION NUMERATOR ONE: try adding symbols\n * U+2183 ROMAN NUMERAL REVERSED ONE HUNDRED: try adding symbols\n * U+2184 LATIN SMALL LETTER REVERSED C: not included in any glyphset definition\n * U+2189 VULGAR FRACTION ZERO THIRDS: try adding symbols\n * U+2190 LEFTWARDS ARROW: try adding one of: symbols, math\n * U+2192 RIGHTWARDS ARROW: try adding one of: symbols, math\n * U+2194 LEFT RIGHT ARROW: try adding one of: symbols, math\n * U+2195 UP DOWN ARROW: try adding one of: symbols, math\n * U+219C LEFTWARDS WAVE ARROW: try adding math\n * U+219D RIGHTWARDS WAVE ARROW: try adding math\n * U+219E LEFTWARDS TWO HEADED ARROW: try adding math\n * U+21A0 RIGHTWARDS TWO HEADED ARROW: try adding math\n * U+21A2 LEFTWARDS ARROW WITH TAIL: try adding math\n * U+21A3 RIGHTWARDS ARROW WITH TAIL: try adding math\n * U+21A4 LEFTWARDS ARROW FROM BAR: try adding math\n * U+21A6 RIGHTWARDS ARROW FROM BAR: try adding math\n * U+21D0 LEFTWARDS DOUBLE ARROW: try adding math\n * U+21D1 UPWARDS DOUBLE ARROW: try adding math\n * U+21D2 RIGHTWARDS DOUBLE ARROW: try adding math\n * U+21D3 DOWNWARDS DOUBLE ARROW: try adding math\n * U+21D4 LEFT RIGHT DOUBLE ARROW: try adding math\n * U+21DA LEFTWARDS TRIPLE ARROW: try adding math\n * U+21DB RIGHTWARDS TRIPLE ARROW: try adding math\n * U+21E6 LEFTWARDS WHITE ARROW: try adding symbols\n * U+21E8 RIGHTWARDS WHITE ARROW: try adding symbols\n * U+2200 FOR ALL: try adding math\n * U+2201 COMPLEMENT: try adding math\n * U+2202 PARTIAL DIFFERENTIAL: try adding math\n * U+2203 THERE EXISTS: try adding math\n * U+2204 THERE DOES NOT EXIST: try adding math\n * U+2205 EMPTY SET: try adding math\n * U+2206 INCREMENT: try adding math\n * U+2207 NABLA: try adding math\n * U+2208 ELEMENT OF: try adding math\n * U+2209 NOT AN ELEMENT OF: try adding math\n * U+220A SMALL ELEMENT OF: try adding math\n * U+220B CONTAINS AS MEMBER: try adding math\n * U+220C DOES NOT CONTAIN AS MEMBER: try adding math\n * U+220D SMALL CONTAINS AS MEMBER: try adding math\n * U+220E END OF PROOF: try adding math\n * U+2210 N-ARY COPRODUCT: try adding math\n * U+2218 RING OPERATOR: try adding one of: symbols, math\n * U+2219 BULLET OPERATOR: try adding one of: symbols, yi, math, tai-tham\n * U+221A SQUARE ROOT: try adding math\n * U+221E INFINITY: try adding math\n * U+2220 ANGLE: try adding math\n * U+2223 DIVIDES: try adding math\n * U+2227 LOGICAL AND: try adding math\n * U+2228 LOGICAL OR: try adding math\n * U+2229 INTERSECTION: try adding math\n * U+222A UNION: try adding math\n * U+2234 THEREFORE: try adding math\n * U+2235 BECAUSE: try adding math\n * U+2236 RATIO: try adding math\n * U+2237 PROPORTION: try adding math\n * U+2238 DOT MINUS: try adding math\n * U+223C TILDE OPERATOR: try adding math\n * U+223D REVERSED TILDE: try adding math\n * U+2241 NOT TILDE: try adding math\n * U+2243 ASYMPTOTICALLY EQUAL TO: try adding math\n * U+2245 APPROXIMATELY EQUAL TO: try adding math\n * U+2247 NEITHER APPROXIMATELY NOR ACTUALLY EQUAL TO: try adding math\n * U+2248 ALMOST EQUAL TO: try adding math\n * U+2249 NOT ALMOST EQUAL TO: try adding math\n * U+224A ALMOST EQUAL OR EQUAL TO: try adding math\n * U+224B TRIPLE TILDE: try adding math\n * U+224C ALL EQUAL TO: try adding math\n * U+2254 COLON EQUALS: try adding math\n * U+2255 EQUALS COLON: try adding math\n * U+2257 RING EQUAL TO: try adding math\n * U+225F QUESTIONED EQUAL TO: try adding math\n * U+2260 NOT EQUAL TO: try adding math\n * U+2261 IDENTICAL TO: try adding math\n * U+2262 NOT IDENTICAL TO: try adding math\n * U+2264 LESS-THAN OR EQUAL TO: try adding math\n * U+2265 GREATER-THAN OR EQUAL TO: try adding math\n * U+226C BETWEEN: try adding math\n * U+226E NOT LESS-THAN: try adding math\n * U+226F NOT GREATER-THAN: try adding math\n * U+2270 NEITHER LESS-THAN NOR EQUAL TO: try adding math\n * U+2271 NEITHER GREATER-THAN NOR EQUAL TO: try adding math\n * U+2272 LESS-THAN OR EQUIVALENT TO: try adding math\n * U+2273 GREATER-THAN OR EQUIVALENT TO: try adding math\n * U+2274 NEITHER LESS-THAN NOR EQUIVALENT TO: try adding math\n * U+2275 NEITHER GREATER-THAN NOR EQUIVALENT TO: try adding math\n * U+227A PRECEDES: try adding math\n * U+227B SUCCEEDS: try adding math\n * U+2282 SUBSET OF: try adding math\n * U+2283 SUPERSET OF: try adding math\n * U+2284 NOT A SUBSET OF: try adding math\n * U+2285 NOT A SUPERSET OF: try adding math\n * U+2286 SUBSET OF OR EQUAL TO: try adding math\n * U+2287 SUPERSET OF OR EQUAL TO: try adding math\n * U+2288 NEITHER A SUBSET OF NOR EQUAL TO: try adding math\n * U+2289 NEITHER A SUPERSET OF NOR EQUAL TO: try adding math\n * U+228E MULTISET UNION: try adding math\n * U+2291 SQUARE IMAGE OF OR EQUAL TO: try adding math\n * U+2292 SQUARE ORIGINAL OF OR EQUAL TO: try adding math\n * U+2293 SQUARE CAP: try adding math\n * U+2294 SQUARE CUP: try adding math\n * U+2295 CIRCLED PLUS: try adding math\n * U+2296 CIRCLED MINUS: try adding math\n * U+2297 CIRCLED TIMES: try adding math\n * U+2298 CIRCLED DIVISION SLASH: try adding math\n * U+2299 CIRCLED DOT OPERATOR: try adding one of: symbols, math\n * U+229A CIRCLED RING OPERATOR: try adding math\n * U+229B CIRCLED ASTERISK OPERATOR: try adding math\n * U+229C CIRCLED EQUALS: try adding math\n * U+22A2 RIGHT TACK: try adding math\n * U+22A3 LEFT TACK: try adding math\n * U+22A4 DOWN TACK: try adding math\n * U+22A5 UP TACK: try adding math\n * U+22B4 NORMAL SUBGROUP OF OR EQUAL TO: try adding math\n * U+22B5 CONTAINS AS NORMAL SUBGROUP OR EQUAL TO: try adding math\n * U+22B8 MULTIMAP: try adding math\n * U+22C2 N-ARY INTERSECTION: try adding math\n * U+22C3 N-ARY UNION: try adding math\n * U+22C4 DIAMOND OPERATOR: try adding one of: symbols, math\n * U+22C6 STAR OPERATOR: try adding one of: symbols, math\n * U+22C8 BOWTIE: try adding math\n * U+22C9 LEFT NORMAL FACTOR SEMIDIRECT PRODUCT: try adding math\n * U+22CA RIGHT NORMAL FACTOR SEMIDIRECT PRODUCT: try adding math\n * U+22CD REVERSED TILDE EQUALS: try adding math\n * U+22CE CURLY LOGICAL OR: try adding math\n * U+22D0 DOUBLE SUBSET: try adding math\n * U+22D1 DOUBLE SUPERSET: try adding math\n * U+22E2 NOT SQUARE IMAGE OF OR EQUAL TO: try adding math\n * U+22E3 NOT SQUARE ORIGINAL OF OR EQUAL TO: try adding math\n * U+2308 LEFT CEILING: try adding one of: symbols, math\n * U+2309 RIGHT CEILING: try adding one of: symbols, math\n * U+230A LEFT FLOOR: try adding one of: symbols, math\n * U+230B RIGHT FLOOR: try adding one of: symbols, math\n * U+2310 REVERSED NOT SIGN: try adding math\n * U+2319 TURNED NOT SIGN: try adding math\n * U+2320 TOP HALF INTEGRAL: try adding math\n * U+2321 BOTTOM HALF INTEGRAL: try adding math\n * U+2336 APL FUNCTIONAL SYMBOL I-BEAM: try adding math\n * U+2337 APL FUNCTIONAL SYMBOL SQUISH QUAD: try adding math\n * U+2338 APL FUNCTIONAL SYMBOL QUAD EQUAL: try adding math\n * U+2339 APL FUNCTIONAL SYMBOL QUAD DIVIDE: try adding math\n * U+233A APL FUNCTIONAL SYMBOL QUAD DIAMOND: try adding math\n * U+233B APL FUNCTIONAL SYMBOL QUAD JOT: try adding math\n * U+233C APL FUNCTIONAL SYMBOL QUAD CIRCLE: try adding math\n * U+233D APL FUNCTIONAL SYMBOL CIRCLE STILE: try adding math\n * U+233E APL FUNCTIONAL SYMBOL CIRCLE JOT: try adding math\n * U+233F APL FUNCTIONAL SYMBOL SLASH BAR: try adding math\n * U+2340 APL FUNCTIONAL SYMBOL BACKSLASH BAR: try adding math\n * U+2341 APL FUNCTIONAL SYMBOL QUAD SLASH: try adding math\n * U+2342 APL FUNCTIONAL SYMBOL QUAD BACKSLASH: try adding math\n * U+2343 APL FUNCTIONAL SYMBOL QUAD LESS-THAN: try adding math\n * U+2344 APL FUNCTIONAL SYMBOL QUAD GREATER-THAN: try adding math\n * U+2345 APL FUNCTIONAL SYMBOL LEFTWARDS VANE: try adding math\n * U+2346 APL FUNCTIONAL SYMBOL RIGHTWARDS VANE: try adding math\n * U+2347 APL FUNCTIONAL SYMBOL QUAD LEFTWARDS ARROW: try adding math\n * U+2348 APL FUNCTIONAL SYMBOL QUAD RIGHTWARDS ARROW: try adding math\n * U+2349 APL FUNCTIONAL SYMBOL CIRCLE BACKSLASH: try adding math\n * U+234A APL FUNCTIONAL SYMBOL DOWN TACK UNDERBAR: try adding math\n * U+234B APL FUNCTIONAL SYMBOL DELTA STILE: try adding math\n * U+234C APL FUNCTIONAL SYMBOL QUAD DOWN CARET: try adding math\n * U+234D APL FUNCTIONAL SYMBOL QUAD DELTA: try adding math\n * U+234E APL FUNCTIONAL SYMBOL DOWN TACK JOT: try adding math\n * U+234F APL FUNCTIONAL SYMBOL UPWARDS VANE: try adding math\n * U+2350 APL FUNCTIONAL SYMBOL QUAD UPWARDS ARROW: try adding math\n * U+2351 APL FUNCTIONAL SYMBOL UP TACK OVERBAR: try adding math\n * U+2352 APL FUNCTIONAL SYMBOL DEL STILE: try adding math\n * U+2353 APL FUNCTIONAL SYMBOL QUAD UP CARET: try adding math\n * U+2354 APL FUNCTIONAL SYMBOL QUAD DEL: try adding math\n * U+2355 APL FUNCTIONAL SYMBOL UP TACK JOT: try adding math\n * U+2356 APL FUNCTIONAL SYMBOL DOWNWARDS VANE: try adding math\n * U+2357 APL FUNCTIONAL SYMBOL QUAD DOWNWARDS ARROW: try adding math\n * U+2358 APL FUNCTIONAL SYMBOL QUOTE UNDERBAR: try adding math\n * U+2359 APL FUNCTIONAL SYMBOL DELTA UNDERBAR: try adding math\n * U+235A APL FUNCTIONAL SYMBOL DIAMOND UNDERBAR: try adding math\n * U+235B APL FUNCTIONAL SYMBOL JOT UNDERBAR: try adding math\n * U+235C APL FUNCTIONAL SYMBOL CIRCLE UNDERBAR: try adding math\n * U+235D APL FUNCTIONAL SYMBOL UP SHOE JOT: try adding math\n * U+235E APL FUNCTIONAL SYMBOL QUOTE QUAD: try adding math\n * U+235F APL FUNCTIONAL SYMBOL CIRCLE STAR: try adding math\n * U+2360 APL FUNCTIONAL SYMBOL QUAD COLON: try adding math\n * U+2361 APL FUNCTIONAL SYMBOL UP TACK DIAERESIS: try adding math\n * U+2362 APL FUNCTIONAL SYMBOL DEL DIAERESIS: try adding math\n * U+2363 APL FUNCTIONAL SYMBOL STAR DIAERESIS: try adding math\n * U+2364 APL FUNCTIONAL SYMBOL JOT DIAERESIS: try adding math\n * U+2365 APL FUNCTIONAL SYMBOL CIRCLE DIAERESIS: try adding math\n * U+2366 APL FUNCTIONAL SYMBOL DOWN SHOE STILE: try adding math\n * U+2367 APL FUNCTIONAL SYMBOL LEFT SHOE STILE: try adding math\n * U+2368 APL FUNCTIONAL SYMBOL TILDE DIAERESIS: try adding math\n * U+2369 APL FUNCTIONAL SYMBOL GREATER-THAN DIAERESIS: try adding math\n * U+236A APL FUNCTIONAL SYMBOL COMMA BAR: try adding math\n * U+236B APL FUNCTIONAL SYMBOL DEL TILDE: try adding math\n * U+236C APL FUNCTIONAL SYMBOL ZILDE: try adding math\n * U+236D APL FUNCTIONAL SYMBOL STILE TILDE: try adding math\n * U+236E APL FUNCTIONAL SYMBOL SEMICOLON UNDERBAR: try adding math\n * U+236F APL FUNCTIONAL SYMBOL QUAD NOT EQUAL: try adding math\n * U+2370 APL FUNCTIONAL SYMBOL QUAD QUESTION: try adding math\n * U+2371 APL FUNCTIONAL SYMBOL DOWN CARET TILDE: try adding math\n * U+2372 APL FUNCTIONAL SYMBOL UP CARET TILDE: try adding math\n * U+2373 APL FUNCTIONAL SYMBOL IOTA: try adding math\n * U+2374 APL FUNCTIONAL SYMBOL RHO: try adding math\n * U+2375 APL FUNCTIONAL SYMBOL OMEGA: try adding math\n * U+2376 APL FUNCTIONAL SYMBOL ALPHA UNDERBAR: try adding math\n * U+2377 APL FUNCTIONAL SYMBOL EPSILON UNDERBAR: try adding math\n * U+2378 APL FUNCTIONAL SYMBOL IOTA UNDERBAR: try adding math\n * U+2379 APL FUNCTIONAL SYMBOL OMEGA UNDERBAR: try adding math\n * U+237A APL FUNCTIONAL SYMBOL ALPHA: try adding math\n * U+2395 APL FUNCTIONAL SYMBOL QUAD: try adding math\n * U+239B LEFT PARENTHESIS UPPER HOOK: try adding math\n * U+239C LEFT PARENTHESIS EXTENSION: try adding math\n * U+239D LEFT PARENTHESIS LOWER HOOK: try adding math\n * U+239E RIGHT PARENTHESIS UPPER HOOK: try adding math\n * U+239F RIGHT PARENTHESIS EXTENSION: try adding math\n * U+23A0 RIGHT PARENTHESIS LOWER HOOK: try adding math\n * U+23A1 LEFT SQUARE BRACKET UPPER CORNER: try adding math\n * U+23A2 LEFT SQUARE BRACKET EXTENSION: try adding math\n * U+23A3 LEFT SQUARE BRACKET LOWER CORNER: try adding math\n * U+23A4 RIGHT SQUARE BRACKET UPPER CORNER: try adding math\n * U+23A5 RIGHT SQUARE BRACKET EXTENSION: try adding math\n * U+23A6 RIGHT SQUARE BRACKET LOWER CORNER: try adding math\n * U+23A7 LEFT CURLY BRACKET UPPER HOOK: try adding math\n * U+23A8 LEFT CURLY BRACKET MIDDLE PIECE: try adding math\n * U+23A9 LEFT CURLY BRACKET LOWER HOOK: try adding math\n * U+23AA CURLY BRACKET EXTENSION: try adding math\n * U+23AB RIGHT CURLY BRACKET UPPER HOOK: try adding math\n * U+23AC RIGHT CURLY BRACKET MIDDLE PIECE: try adding math\n * U+23AD RIGHT CURLY BRACKET LOWER HOOK: try adding math\n * U+23AE INTEGRAL EXTENSION: try adding math\n * U+23B0 UPPER LEFT OR LOWER RIGHT CURLY BRACKET SECTION: try adding math\n * U+23B1 UPPER RIGHT OR LOWER LEFT CURLY BRACKET SECTION: try adding math\n * U+23B2 SUMMATION TOP: try adding math\n * U+23B3 SUMMATION BOTTOM: try adding math\n * U+23B4 TOP SQUARE BRACKET: try adding math\n * U+23B5 BOTTOM SQUARE BRACKET: try adding math\n * U+23B6 BOTTOM SQUARE BRACKET OVER TOP SQUARE BRACKET: try adding math\n * U+23B7 RADICAL SYMBOL BOTTOM: try adding math\n * U+23B8 LEFT VERTICAL BOX LINE: try adding symbols2\n * U+23B9 RIGHT VERTICAL BOX LINE: try adding symbols2\n * U+23BA HORIZONTAL SCAN LINE-1: try adding symbols2\n * U+23BB HORIZONTAL SCAN LINE-3: try adding symbols2\n * U+23BC HORIZONTAL SCAN LINE-7: try adding symbols2\n * U+23BD HORIZONTAL SCAN LINE-9: try adding symbols2\n * U+23DC TOP PARENTHESIS: try adding math\n * U+23DD BOTTOM PARENTHESIS: try adding math\n * U+23DE TOP CURLY BRACKET: try adding math\n * U+23DF BOTTOM CURLY BRACKET: try adding math\n * U+23E0 TOP TORTOISE SHELL BRACKET: try adding math\n * U+23E1 BOTTOM TORTOISE SHELL BRACKET: try adding math\n * U+2474 PARENTHESIZED DIGIT ONE: try adding one of: symbols, math\n * U+2475 PARENTHESIZED DIGIT TWO: try adding one of: symbols, math\n * U+2500 BOX DRAWINGS LIGHT HORIZONTAL: try adding symbols2\n * U+2501 BOX DRAWINGS HEAVY HORIZONTAL: try adding symbols2\n * U+2502 BOX DRAWINGS LIGHT VERTICAL: try adding symbols2\n * U+2503 BOX DRAWINGS HEAVY VERTICAL: try adding symbols2\n * U+2504 BOX DRAWINGS LIGHT TRIPLE DASH HORIZONTAL: try adding symbols2\n * U+2505 BOX DRAWINGS HEAVY TRIPLE DASH HORIZONTAL: try adding symbols2\n * U+2506 BOX DRAWINGS LIGHT TRIPLE DASH VERTICAL: try adding symbols2\n * U+2507 BOX DRAWINGS HEAVY TRIPLE DASH VERTICAL: try adding symbols2\n * U+2508 BOX DRAWINGS LIGHT QUADRUPLE DASH HORIZONTAL: try adding symbols2\n * U+2509 BOX DRAWINGS HEAVY QUADRUPLE DASH HORIZONTAL: try adding symbols2\n * U+250A BOX DRAWINGS LIGHT QUADRUPLE DASH VERTICAL: try adding symbols2\n * U+250B BOX DRAWINGS HEAVY QUADRUPLE DASH VERTICAL: try adding symbols2\n * U+250C BOX DRAWINGS LIGHT DOWN AND RIGHT: try adding symbols2\n * U+250D BOX DRAWINGS DOWN LIGHT AND RIGHT HEAVY: try adding symbols2\n * U+250E BOX DRAWINGS DOWN HEAVY AND RIGHT LIGHT: try adding symbols2\n * U+250F BOX DRAWINGS HEAVY DOWN AND RIGHT: try adding symbols2\n * U+2510 BOX DRAWINGS LIGHT DOWN AND LEFT: try adding symbols2\n * U+2511 BOX DRAWINGS DOWN LIGHT AND LEFT HEAVY: try adding symbols2\n * U+2512 BOX DRAWINGS DOWN HEAVY AND LEFT LIGHT: try adding symbols2\n * U+2513 BOX DRAWINGS HEAVY DOWN AND LEFT: try adding symbols2\n * U+2514 BOX DRAWINGS LIGHT UP AND RIGHT: try adding symbols2\n * U+2515 BOX DRAWINGS UP LIGHT AND RIGHT HEAVY: try adding symbols2\n * U+2516 BOX DRAWINGS UP HEAVY AND RIGHT LIGHT: try adding symbols2\n * U+2517 BOX DRAWINGS HEAVY UP AND RIGHT: try adding symbols2\n * U+2518 BOX DRAWINGS LIGHT UP AND LEFT: try adding symbols2\n * U+2519 BOX DRAWINGS UP LIGHT AND LEFT HEAVY: try adding symbols2\n * U+251A BOX DRAWINGS UP HEAVY AND LEFT LIGHT: try adding symbols2\n * U+251B BOX DRAWINGS HEAVY UP AND LEFT: try adding symbols2\n * U+251C BOX DRAWINGS LIGHT VERTICAL AND RIGHT: try adding symbols2\n * U+251D BOX DRAWINGS VERTICAL LIGHT AND RIGHT HEAVY: try adding symbols2\n * U+251E BOX DRAWINGS UP HEAVY AND RIGHT DOWN LIGHT: try adding symbols2\n * U+251F BOX DRAWINGS DOWN HEAVY AND RIGHT UP LIGHT: try adding symbols2\n * U+2520 BOX DRAWINGS VERTICAL HEAVY AND RIGHT LIGHT: try adding symbols2\n * U+2521 BOX DRAWINGS DOWN LIGHT AND RIGHT UP HEAVY: try adding symbols2\n * U+2522 BOX DRAWINGS UP LIGHT AND RIGHT DOWN HEAVY: try adding symbols2\n * U+2523 BOX DRAWINGS HEAVY VERTICAL AND RIGHT: try adding symbols2\n * U+2524 BOX DRAWINGS LIGHT VERTICAL AND LEFT: try adding symbols2\n * U+2525 BOX DRAWINGS VERTICAL LIGHT AND LEFT HEAVY: try adding symbols2\n * U+2526 BOX DRAWINGS UP HEAVY AND LEFT DOWN LIGHT: try adding symbols2\n * U+2527 BOX DRAWINGS DOWN HEAVY AND LEFT UP LIGHT: try adding symbols2\n * U+2528 BOX DRAWINGS VERTICAL HEAVY AND LEFT LIGHT: try adding symbols2\n * U+2529 BOX DRAWINGS DOWN LIGHT AND LEFT UP HEAVY: try adding symbols2\n * U+252A BOX DRAWINGS UP LIGHT AND LEFT DOWN HEAVY: try adding symbols2\n * U+252B BOX DRAWINGS HEAVY VERTICAL AND LEFT: try adding symbols2\n * U+252C BOX DRAWINGS LIGHT DOWN AND HORIZONTAL: try adding symbols2\n * U+252D BOX DRAWINGS LEFT HEAVY AND RIGHT DOWN LIGHT: try adding symbols2\n * U+252E BOX DRAWINGS RIGHT HEAVY AND LEFT DOWN LIGHT: try adding symbols2\n * U+252F BOX DRAWINGS DOWN LIGHT AND HORIZONTAL HEAVY: try adding symbols2\n * U+2530 BOX DRAWINGS DOWN HEAVY AND HORIZONTAL LIGHT: try adding symbols2\n * U+2531 BOX DRAWINGS RIGHT LIGHT AND LEFT DOWN HEAVY: try adding symbols2\n * U+2532 BOX DRAWINGS LEFT LIGHT AND RIGHT DOWN HEAVY: try adding symbols2\n * U+2533 BOX DRAWINGS HEAVY DOWN AND HORIZONTAL: try adding symbols2\n * U+2534 BOX DRAWINGS LIGHT UP AND HORIZONTAL: try adding symbols2\n * U+2535 BOX DRAWINGS LEFT HEAVY AND RIGHT UP LIGHT: try adding symbols2\n * U+2536 BOX DRAWINGS RIGHT HEAVY AND LEFT UP LIGHT: try adding symbols2\n * U+2537 BOX DRAWINGS UP LIGHT AND HORIZONTAL HEAVY: try adding symbols2\n * U+2538 BOX DRAWINGS UP HEAVY AND HORIZONTAL LIGHT: try adding symbols2\n * U+2539 BOX DRAWINGS RIGHT LIGHT AND LEFT UP HEAVY: try adding symbols2\n * U+253A BOX DRAWINGS LEFT LIGHT AND RIGHT UP HEAVY: try adding symbols2\n * U+253B BOX DRAWINGS HEAVY UP AND HORIZONTAL: try adding symbols2\n * U+253C BOX DRAWINGS LIGHT VERTICAL AND HORIZONTAL: try adding symbols2\n * U+253D BOX DRAWINGS LEFT HEAVY AND RIGHT VERTICAL LIGHT: try adding symbols2\n * U+253E BOX DRAWINGS RIGHT HEAVY AND LEFT VERTICAL LIGHT: try adding symbols2\n * U+253F BOX DRAWINGS VERTICAL LIGHT AND HORIZONTAL HEAVY: try adding symbols2\n * U+2540 BOX DRAWINGS UP HEAVY AND DOWN HORIZONTAL LIGHT: try adding symbols2\n * U+2541 BOX DRAWINGS DOWN HEAVY AND UP HORIZONTAL LIGHT: try adding symbols2\n * U+2542 BOX DRAWINGS VERTICAL HEAVY AND HORIZONTAL LIGHT: try adding symbols2\n * U+2543 BOX DRAWINGS LEFT UP HEAVY AND RIGHT DOWN LIGHT: try adding symbols2\n * U+2544 BOX DRAWINGS RIGHT UP HEAVY AND LEFT DOWN LIGHT: try adding symbols2\n * U+2545 BOX DRAWINGS LEFT DOWN HEAVY AND RIGHT UP LIGHT: try adding symbols2\n * U+2546 BOX DRAWINGS RIGHT DOWN HEAVY AND LEFT UP LIGHT: try adding symbols2\n * U+2547 BOX DRAWINGS DOWN LIGHT AND UP HORIZONTAL HEAVY: try adding symbols2\n * U+2548 BOX DRAWINGS UP LIGHT AND DOWN HORIZONTAL HEAVY: try adding symbols2\n * U+2549 BOX DRAWINGS RIGHT LIGHT AND LEFT VERTICAL HEAVY: try adding symbols2\n * U+254A BOX DRAWINGS LEFT LIGHT AND RIGHT VERTICAL HEAVY: try adding symbols2\n * U+254B BOX DRAWINGS HEAVY VERTICAL AND HORIZONTAL: try adding symbols2\n * U+254C BOX DRAWINGS LIGHT DOUBLE DASH HORIZONTAL: try adding symbols2\n * U+254D BOX DRAWINGS HEAVY DOUBLE DASH HORIZONTAL: try adding symbols2\n * U+254E BOX DRAWINGS LIGHT DOUBLE DASH VERTICAL: try adding symbols2\n * U+254F BOX DRAWINGS HEAVY DOUBLE DASH VERTICAL: try adding symbols2\n * U+2550 BOX DRAWINGS DOUBLE HORIZONTAL: try adding symbols2\n * U+2551 BOX DRAWINGS DOUBLE VERTICAL: try adding symbols2\n * U+2552 BOX DRAWINGS DOWN SINGLE AND RIGHT DOUBLE: try adding symbols2\n * U+2553 BOX DRAWINGS DOWN DOUBLE AND RIGHT SINGLE: try adding symbols2\n * U+2554 BOX DRAWINGS DOUBLE DOWN AND RIGHT: try adding symbols2\n * U+2555 BOX DRAWINGS DOWN SINGLE AND LEFT DOUBLE: try adding symbols2\n * U+2556 BOX DRAWINGS DOWN DOUBLE AND LEFT SINGLE: try adding symbols2\n * U+2557 BOX DRAWINGS DOUBLE DOWN AND LEFT: try adding symbols2\n * U+2558 BOX DRAWINGS UP SINGLE AND RIGHT DOUBLE: try adding symbols2\n * U+2559 BOX DRAWINGS UP DOUBLE AND RIGHT SINGLE: try adding symbols2\n * U+255A BOX DRAWINGS DOUBLE UP AND RIGHT: try adding symbols2\n * U+255B BOX DRAWINGS UP SINGLE AND LEFT DOUBLE: try adding symbols2\n * U+255C BOX DRAWINGS UP DOUBLE AND LEFT SINGLE: try adding symbols2\n * U+255D BOX DRAWINGS DOUBLE UP AND LEFT: try adding symbols2\n * U+255E BOX DRAWINGS VERTICAL SINGLE AND RIGHT DOUBLE: try adding symbols2\n * U+255F BOX DRAWINGS VERTICAL DOUBLE AND RIGHT SINGLE: try adding symbols2\n * U+2560 BOX DRAWINGS DOUBLE VERTICAL AND RIGHT: try adding symbols2\n * U+2561 BOX DRAWINGS VERTICAL SINGLE AND LEFT DOUBLE: try adding symbols2\n * U+2562 BOX DRAWINGS VERTICAL DOUBLE AND LEFT SINGLE: try adding symbols2\n * U+2563 BOX DRAWINGS DOUBLE VERTICAL AND LEFT: try adding symbols2\n * U+2564 BOX DRAWINGS DOWN SINGLE AND HORIZONTAL DOUBLE: try adding symbols2\n * U+2565 BOX DRAWINGS DOWN DOUBLE AND HORIZONTAL SINGLE: try adding symbols2\n * U+2566 BOX DRAWINGS DOUBLE DOWN AND HORIZONTAL: try adding symbols2\n * U+2567 BOX DRAWINGS UP SINGLE AND HORIZONTAL DOUBLE: try adding symbols2\n * U+2568 BOX DRAWINGS UP DOUBLE AND HORIZONTAL SINGLE: try adding symbols2\n * U+2569 BOX DRAWINGS DOUBLE UP AND HORIZONTAL: try adding symbols2\n * U+256A BOX DRAWINGS VERTICAL SINGLE AND HORIZONTAL DOUBLE: try adding symbols2\n * U+256B BOX DRAWINGS VERTICAL DOUBLE AND HORIZONTAL SINGLE: try adding symbols2\n * U+256C BOX DRAWINGS DOUBLE VERTICAL AND HORIZONTAL: try adding symbols2\n * U+256D BOX DRAWINGS LIGHT ARC DOWN AND RIGHT: try adding symbols2\n * U+256E BOX DRAWINGS LIGHT ARC DOWN AND LEFT: try adding symbols2\n * U+256F BOX DRAWINGS LIGHT ARC UP AND LEFT: try adding symbols2\n * U+2570 BOX DRAWINGS LIGHT ARC UP AND RIGHT: try adding symbols2\n * U+2571 BOX DRAWINGS LIGHT DIAGONAL UPPER RIGHT TO LOWER LEFT: try adding symbols2\n * U+2572 BOX DRAWINGS LIGHT DIAGONAL UPPER LEFT TO LOWER RIGHT: try adding symbols2\n * U+2573 BOX DRAWINGS LIGHT DIAGONAL CROSS: try adding symbols2\n * U+2574 BOX DRAWINGS LIGHT LEFT: try adding symbols2\n * U+2575 BOX DRAWINGS LIGHT UP: try adding symbols2\n * U+2576 BOX DRAWINGS LIGHT RIGHT: try adding symbols2\n * U+2577 BOX DRAWINGS LIGHT DOWN: try adding symbols2\n * U+2578 BOX DRAWINGS HEAVY LEFT: try adding symbols2\n * U+2579 BOX DRAWINGS HEAVY UP: try adding symbols2\n * U+257A BOX DRAWINGS HEAVY RIGHT: try adding symbols2\n * U+257B BOX DRAWINGS HEAVY DOWN: try adding symbols2\n * U+257C BOX DRAWINGS LIGHT LEFT AND HEAVY RIGHT: try adding symbols2\n * U+257D BOX DRAWINGS LIGHT UP AND HEAVY DOWN: try adding symbols2\n * U+257E BOX DRAWINGS HEAVY LEFT AND LIGHT RIGHT: try adding symbols2\n * U+257F BOX DRAWINGS HEAVY UP AND LIGHT DOWN: try adding symbols2\n * U+2580 UPPER HALF BLOCK: try adding symbols2\n * U+2581 LOWER ONE EIGHTH BLOCK: try adding symbols2\n * U+2582 LOWER ONE QUARTER BLOCK: try adding symbols2\n * U+2583 LOWER THREE EIGHTHS BLOCK: try adding symbols2\n * U+2584 LOWER HALF BLOCK: try adding symbols2\n * U+2585 LOWER FIVE EIGHTHS BLOCK: try adding symbols2\n * U+2586 LOWER THREE QUARTERS BLOCK: try adding symbols2\n * U+2587 LOWER SEVEN EIGHTHS BLOCK: try adding symbols2\n * U+2588 FULL BLOCK: try adding symbols2\n * U+2589 LEFT SEVEN EIGHTHS BLOCK: try adding symbols2\n * U+258A LEFT THREE QUARTERS BLOCK: try adding symbols2\n * U+258B LEFT FIVE EIGHTHS BLOCK: try adding symbols2\n * U+258C LEFT HALF BLOCK: try adding symbols2\n * U+258D LEFT THREE EIGHTHS BLOCK: try adding symbols2\n * U+258E LEFT ONE QUARTER BLOCK: try adding symbols2\n * U+258F LEFT ONE EIGHTH BLOCK: try adding symbols2\n * U+2590 RIGHT HALF BLOCK: try adding symbols2\n * U+2591 LIGHT SHADE: try adding symbols2\n * U+2592 MEDIUM SHADE: try adding symbols2\n * U+2593 DARK SHADE: try adding symbols2\n * U+2594 UPPER ONE EIGHTH BLOCK: try adding symbols2\n * U+2595 RIGHT ONE EIGHTH BLOCK: try adding symbols2\n * U+2596 QUADRANT LOWER LEFT: try adding symbols2\n * U+2597 QUADRANT LOWER RIGHT: try adding symbols2\n * U+2598 QUADRANT UPPER LEFT: try adding symbols2\n * U+2599 QUADRANT UPPER LEFT AND LOWER LEFT AND LOWER RIGHT: try adding symbols2\n * U+259A QUADRANT UPPER LEFT AND LOWER RIGHT: try adding symbols2\n * U+259B QUADRANT UPPER LEFT AND UPPER RIGHT AND LOWER LEFT: try adding symbols2\n * U+259C QUADRANT UPPER LEFT AND UPPER RIGHT AND LOWER RIGHT: try adding symbols2\n * U+259D QUADRANT UPPER RIGHT: try adding symbols2\n * U+259E QUADRANT UPPER RIGHT AND LOWER LEFT: try adding symbols2\n * U+259F QUADRANT UPPER RIGHT AND LOWER LEFT AND LOWER RIGHT: try adding symbols2\n * U+25A0 BLACK SQUARE: try adding symbols\n * U+25A1 WHITE SQUARE: try adding symbols\n * U+25A2 WHITE SQUARE WITH ROUNDED CORNERS: try adding symbols\n * U+25A3 WHITE SQUARE CONTAINING BLACK SMALL SQUARE: try adding symbols\n * U+25A4 SQUARE WITH HORIZONTAL FILL: try adding symbols\n * U+25A5 SQUARE WITH VERTICAL FILL: try adding symbols\n * U+25A6 SQUARE WITH ORTHOGONAL CROSSHATCH FILL: try adding symbols\n * U+25A7 SQUARE WITH UPPER LEFT TO LOWER RIGHT FILL: try adding symbols\n * U+25A8 SQUARE WITH UPPER RIGHT TO LOWER LEFT FILL: try adding symbols\n * U+25A9 SQUARE WITH DIAGONAL CROSSHATCH FILL: try adding symbols\n * U+25AA BLACK SMALL SQUARE: try adding symbols\n * U+25AB WHITE SMALL SQUARE: try adding symbols\n * U+25AC BLACK RECTANGLE: try adding symbols\n * U+25AD WHITE RECTANGLE: try adding symbols\n * U+25AE BLACK VERTICAL RECTANGLE: try adding symbols\n * U+25AF WHITE VERTICAL RECTANGLE: try adding one of: symbols, math\n * U+25B0 BLACK PARALLELOGRAM: try adding symbols\n * U+25B1 WHITE PARALLELOGRAM: try adding symbols\n * U+25B2 BLACK UP-POINTING TRIANGLE: try adding symbols\n * U+25B3 WHITE UP-POINTING TRIANGLE: try adding one of: symbols, math\n * U+25B4 BLACK UP-POINTING SMALL TRIANGLE: try adding symbols\n * U+25B5 WHITE UP-POINTING SMALL TRIANGLE: try adding symbols\n * U+25B6 BLACK RIGHT-POINTING TRIANGLE: try adding symbols\n * U+25B7 WHITE RIGHT-POINTING TRIANGLE: try adding one of: symbols, math\n * U+25B8 BLACK RIGHT-POINTING SMALL TRIANGLE: try adding symbols\n * U+25B9 WHITE RIGHT-POINTING SMALL TRIANGLE: try adding symbols\n * U+25BA BLACK RIGHT-POINTING POINTER: try adding symbols\n * U+25BB WHITE RIGHT-POINTING POINTER: try adding symbols\n * U+25BC BLACK DOWN-POINTING TRIANGLE: try adding symbols\n * U+25BD WHITE DOWN-POINTING TRIANGLE: try adding one of: symbols, math\n * U+25BE BLACK DOWN-POINTING SMALL TRIANGLE: try adding symbols\n * U+25BF WHITE DOWN-POINTING SMALL TRIANGLE: try adding symbols\n * U+25C0 BLACK LEFT-POINTING TRIANGLE: try adding symbols\n * U+25C1 WHITE LEFT-POINTING TRIANGLE: try adding one of: symbols, math\n * U+25C2 BLACK LEFT-POINTING SMALL TRIANGLE: try adding symbols\n * U+25C3 WHITE LEFT-POINTING SMALL TRIANGLE: try adding symbols\n * U+25C4 BLACK LEFT-POINTING POINTER: try adding symbols\n * U+25C5 WHITE LEFT-POINTING POINTER: try adding symbols\n * U+25C6 BLACK DIAMOND: try adding symbols\n * U+25C7 WHITE DIAMOND: try adding symbols\n * U+25C8 WHITE DIAMOND CONTAINING BLACK SMALL DIAMOND: try adding symbols\n * U+25C9 FISHEYE: try adding symbols\n * U+25CA LOZENGE: try adding one of: symbols, math\n * U+25CB WHITE CIRCLE: try adding symbols\n * U+25CC DOTTED CIRCLE: try adding one of: lepcha, tai-viet, soyombo, gunjala-gondi, bhaiksuki, limbu, syriac, javanese, tirhuta, takri, masaram-gondi, saurashtra, miao, nko, warang-citi, khudawadi, lao, mahajani, mandaic, telugu, rejang, brahmi, music, caucasian-albanian, psalter-pahlavi, math, tai-le, devanagari, meetei-mayek, cham, marchen, sogdian, pahawh-hmong, elbasan, malayalam, grantha, ahom, gurmukhi, bassa-vah, duployan, tai-tham, kayah-li, phags-pa, tifinagh, buginese, chakma, tagalog, sundanese, thaana, gujarati, yi, old-permic, adlam, khmer, thai, siddham, kannada, bengali, armenian, wancho, hanunoo, kaithi, coptic, hebrew, modi, tagbanwa, new-tai-lue, kharoshthi, oriya, canadian-aboriginal, balinese, sinhala, newa, symbols, tamil, tibetan, hanifi-rohingya, mende-kikakui, dogra, batak, osage, khojki, sharada, myanmar, zanabazar-square, buhid, mongolian, syloti-nagri, manichaean\n * U+25CD CIRCLE WITH VERTICAL FILL: try adding symbols\n * U+25CE BULLSEYE: try adding symbols\n * U+25CF BLACK CIRCLE: try adding symbols\n * U+25D0 CIRCLE WITH LEFT HALF BLACK: try adding symbols\n * U+25D1 CIRCLE WITH RIGHT HALF BLACK: try adding symbols\n * U+25D2 CIRCLE WITH LOWER HALF BLACK: try adding symbols\n * U+25D3 CIRCLE WITH UPPER HALF BLACK: try adding symbols\n * U+25D4 CIRCLE WITH UPPER RIGHT QUADRANT BLACK: try adding symbols\n * U+25D5 CIRCLE WITH ALL BUT UPPER LEFT QUADRANT BLACK: try adding symbols\n * U+25D6 LEFT HALF BLACK CIRCLE: try adding symbols\n * U+25D7 RIGHT HALF BLACK CIRCLE: try adding symbols\n * U+25D8 INVERSE BULLET: try adding symbols\n * U+25D9 INVERSE WHITE CIRCLE: try adding symbols\n * U+25DA UPPER HALF INVERSE WHITE CIRCLE: try adding symbols\n * U+25DB LOWER HALF INVERSE WHITE CIRCLE: try adding symbols\n * U+25DC UPPER LEFT QUADRANT CIRCULAR ARC: try adding symbols\n * U+25DD UPPER RIGHT QUADRANT CIRCULAR ARC: try adding symbols\n * U+25DE LOWER RIGHT QUADRANT CIRCULAR ARC: try adding symbols\n * U+25DF LOWER LEFT QUADRANT CIRCULAR ARC: try adding symbols\n * U+25E0 UPPER HALF CIRCLE: try adding symbols\n * U+25E1 LOWER HALF CIRCLE: try adding symbols\n * U+25E2 BLACK LOWER RIGHT TRIANGLE: try adding symbols\n * U+25E3 BLACK LOWER LEFT TRIANGLE: try adding symbols\n * U+25E4 BLACK UPPER LEFT TRIANGLE: try adding symbols\n * U+25E5 BLACK UPPER RIGHT TRIANGLE: try adding symbols\n * U+25E6 WHITE BULLET: try adding symbols\n * U+25E7 SQUARE WITH LEFT HALF BLACK: try adding symbols\n * U+25E8 SQUARE WITH RIGHT HALF BLACK: try adding symbols\n * U+25E9 SQUARE WITH UPPER LEFT DIAGONAL HALF BLACK: try adding symbols\n * U+25EA SQUARE WITH LOWER RIGHT DIAGONAL HALF BLACK: try adding symbols\n * U+25EB WHITE SQUARE WITH VERTICAL BISECTING LINE: try adding symbols\n * U+25EC WHITE UP-POINTING TRIANGLE WITH DOT: try adding symbols\n * U+25ED UP-POINTING TRIANGLE WITH LEFT HALF BLACK: try adding symbols\n * U+25EE UP-POINTING TRIANGLE WITH RIGHT HALF BLACK: try adding symbols\n * U+25EF LARGE CIRCLE: try adding symbols\n * U+25F0 WHITE SQUARE WITH UPPER LEFT QUADRANT: try adding symbols\n * U+25F1 WHITE SQUARE WITH LOWER LEFT QUADRANT: try adding symbols\n * U+25F2 WHITE SQUARE WITH LOWER RIGHT QUADRANT: try adding symbols\n * U+25F3 WHITE SQUARE WITH UPPER RIGHT QUADRANT: try adding symbols\n * U+25F4 WHITE CIRCLE WITH UPPER LEFT QUADRANT: try adding symbols\n * U+25F5 WHITE CIRCLE WITH LOWER LEFT QUADRANT: try adding symbols\n * U+25F6 WHITE CIRCLE WITH LOWER RIGHT QUADRANT: try adding symbols\n * U+25F7 WHITE CIRCLE WITH UPPER RIGHT QUADRANT: try adding symbols\n * U+25F8 UPPER LEFT TRIANGLE: try adding symbols\n * U+25F9 UPPER RIGHT TRIANGLE: try adding symbols\n * U+25FA LOWER LEFT TRIANGLE: try adding symbols\n * U+25FB WHITE MEDIUM SQUARE: try adding one of: symbols, math\n * U+25FC BLACK MEDIUM SQUARE: try adding symbols\n * U+25FD WHITE MEDIUM SMALL SQUARE: try adding symbols\n * U+25FE BLACK MEDIUM SMALL SQUARE: try adding symbols\n * U+25FF LOWER RIGHT TRIANGLE: try adding symbols\n * U+266D MUSIC FLAT SIGN: try adding one of: symbols, math, music\n * U+266E MUSIC NATURAL SIGN: try adding one of: symbols, math, music\n * U+266F MUSIC SHARP SIGN: try adding one of: symbols, math, music\n * U+2736 SIX POINTED BLACK STAR: try adding symbols\n * U+2758 LIGHT VERTICAL BAR: try adding symbols\n * U+2759 MEDIUM VERTICAL BAR: try adding symbols\n * U+275A HEAVY VERTICAL BAR: try adding symbols\n * U+27D5 LEFT OUTER JOIN: try adding math\n * U+27D6 RIGHT OUTER JOIN: try adding math\n * U+27D7 FULL OUTER JOIN: try adding math\n * U+27DC LEFT MULTIMAP: try adding math\n * U+27E6 MATHEMATICAL LEFT WHITE SQUARE BRACKET: try adding math\n * U+27E7 MATHEMATICAL RIGHT WHITE SQUARE BRACKET: try adding math\n * U+27E8 MATHEMATICAL LEFT ANGLE BRACKET: try adding math\n * U+27E9 MATHEMATICAL RIGHT ANGLE BRACKET: try adding math\n * U+27EA MATHEMATICAL LEFT DOUBLE ANGLE BRACKET: try adding math\n * U+27EB MATHEMATICAL RIGHT DOUBLE ANGLE BRACKET: try adding math\n * U+27F5 LONG LEFTWARDS ARROW: try adding math\n * U+27F6 LONG RIGHTWARDS ARROW: try adding math\n * U+2987 Z NOTATION LEFT IMAGE BRACKET: try adding math\n * U+2988 Z NOTATION RIGHT IMAGE BRACKET: try adding math\n * U+29A3 REVERSED ANGLE: try adding math\n * U+29B8 CIRCLED REVERSE SOLIDUS: try adding math\n * U+2A00 N-ARY CIRCLED DOT OPERATOR: try adding math\n * U+2A05 N-ARY SQUARE INTERSECTION OPERATOR: try adding math\n * U+2A06 N-ARY SQUARE UNION OPERATOR: try adding math\n * U+2E00 RIGHT ANGLE SUBSTITUTION MARKER: not included in any glyphset definition\n * U+2E01 RIGHT ANGLE DOTTED SUBSTITUTION MARKER: not included in any glyphset definition\n * U+2E02 LEFT SUBSTITUTION BRACKET: not included in any glyphset definition\n * U+2E03 RIGHT SUBSTITUTION BRACKET: not included in any glyphset definition\n * U+2E04 LEFT DOTTED SUBSTITUTION BRACKET: not included in any glyphset definition\n * U+2E05 RIGHT DOTTED SUBSTITUTION BRACKET: not included in any glyphset definition\n * U+2E06 RAISED INTERPOLATION MARKER: not included in any glyphset definition\n * U+2E07 RAISED DOTTED INTERPOLATION MARKER: not included in any glyphset definition\n * U+2E08 DOTTED TRANSPOSITION MARKER: not included in any glyphset definition\n * U+2E09 LEFT TRANSPOSITION BRACKET: not included in any glyphset definition\n * U+2E0A RIGHT TRANSPOSITION BRACKET: not included in any glyphset definition\n * U+2E0B RAISED SQUARE: not included in any glyphset definition\n * U+2E0C LEFT RAISED OMISSION BRACKET: not included in any glyphset definition\n * U+2E0D RIGHT RAISED OMISSION BRACKET: not included in any glyphset definition\n * U+2E0E EDITORIAL CORONIS: not included in any glyphset definition\n * U+2E0F PARAGRAPHOS: not included in any glyphset definition\n * U+2E10 FORKED PARAGRAPHOS: not included in any glyphset definition\n * U+2E11 REVERSED FORKED PARAGRAPHOS: not included in any glyphset definition\n * U+2E12 HYPODIASTOLE: not included in any glyphset definition\n * U+2E13 DOTTED OBELOS: not included in any glyphset definition\n * U+2E14 DOWNWARDS ANCORA: not included in any glyphset definition\n * U+2E15 UPWARDS ANCORA: not included in any glyphset definition\n * U+2E16 DOTTED RIGHT-POINTING ANGLE: not included in any glyphset definition\n * U+2E17 DOUBLE OBLIQUE HYPHEN: try adding coptic\n * U+2E18 INVERTED INTERROBANG: not included in any glyphset definition\n * U+2E19 PALM BRANCH: not included in any glyphset definition\n * U+2E1A HYPHEN WITH DIAERESIS: not included in any glyphset definition\n * U+2E1B TILDE WITH RING ABOVE: not included in any glyphset definition\n * U+2E1C LEFT LOW PARAPHRASE BRACKET: try adding nko\n * U+2E1D RIGHT LOW PARAPHRASE BRACKET: try adding nko\n * U+2E1E TILDE WITH DOT ABOVE: not included in any glyphset definition\n * U+2E1F TILDE WITH DOT BELOW: not included in any glyphset definition\n * U+2E20 LEFT VERTICAL BAR WITH QUILL: not included in any glyphset definition\n * U+2E21 RIGHT VERTICAL BAR WITH QUILL: not included in any glyphset definition\n * U+2E22 TOP LEFT HALF BRACKET: not included in any glyphset definition\n * U+2E23 TOP RIGHT HALF BRACKET: not included in any glyphset definition\n * U+2E24 BOTTOM LEFT HALF BRACKET: not included in any glyphset definition\n * U+2E25 BOTTOM RIGHT HALF BRACKET: not included in any glyphset definition\n * U+2E26 LEFT SIDEWAYS U BRACKET: not included in any glyphset definition\n * U+2E27 RIGHT SIDEWAYS U BRACKET: not included in any glyphset definition\n * U+2E28 LEFT DOUBLE PARENTHESIS: try adding adlam\n * U+2E29 RIGHT DOUBLE PARENTHESIS: try adding adlam\n * U+2E2A TWO DOTS OVER ONE DOT PUNCTUATION: not included in any glyphset definition\n * U+2E2B ONE DOT OVER TWO DOTS PUNCTUATION: not included in any glyphset definition\n * U+2E2C SQUARED FOUR DOT PUNCTUATION: not included in any glyphset definition\n * U+2E2D FIVE DOT MARK: not included in any glyphset definition\n * U+2E2E REVERSED QUESTION MARK: not included in any glyphset definition\n * U+2E2F VERTICAL TILDE: not included in any glyphset definition\n * U+2E30 RING POINT: try adding one of: old-turkic, avestan\n * U+2E31 WORD SEPARATOR MIDDLE DOT: try adding one of: carian, samaritan, lydian, georgian, old-hungarian, kaithi, avestan\n * U+2E32 TURNED COMMA: not included in any glyphset definition\n * U+2E33 RAISED DOT: try adding coptic\n * U+2E34 RAISED COMMA: try adding coptic\n * U+2E35 TURNED SEMICOLON: not included in any glyphset definition\n * U+2E36 DAGGER WITH LEFT GUARD: not included in any glyphset definition\n * U+2E37 DAGGER WITH RIGHT GUARD: not included in any glyphset definition\n * U+2E38 TURNED DAGGER: not included in any glyphset definition\n * U+2E39 TOP HALF SECTION SIGN: not included in any glyphset definition\n * U+2E3A TWO-EM DASH: not included in any glyphset definition\n * U+2E3B THREE-EM DASH: not included in any glyphset definition\n * U+2E3C STENOGRAPHIC FULL STOP: try adding duployan\n * U+2E3D VERTICAL SIX DOTS: not included in any glyphset definition\n * U+2E3E WIGGLY VERTICAL LINE: not included in any glyphset definition\n * U+2E3F CAPITULUM: not included in any glyphset definition\n * U+2E40 DOUBLE HYPHEN: not included in any glyphset definition\n * U+2E41 REVERSED COMMA: try adding one of: arabic, adlam, old-hungarian\n * U+2E42 DOUBLE LOW-REVERSED-9 QUOTATION MARK: not included in any glyphset definition\n * U+2E43 DASH WITH LEFT UPTURN: try adding glagolitic\n * U+2E44 DOUBLE SUSPENSION MARK: not included in any glyphset definition\n * U+2E45 INVERTED LOW KAVYKA: not included in any glyphset definition\n * U+2E46 INVERTED LOW KAVYKA WITH KAVYKA ABOVE: not included in any glyphset definition\n * U+2E47 LOW KAVYKA: not included in any glyphset definition\n * U+2E48 LOW KAVYKA WITH DOT: not included in any glyphset definition\n * U+2E49 DOUBLE STACKED COMMA: not included in any glyphset definition\n * U+2E4A DOTTED SOLIDUS: not included in any glyphset definition\n * U+2E4B TRIPLE DAGGER: not included in any glyphset definition\n * U+2E4C MEDIEVAL COMMA: not included in any glyphset definition\n * U+2E4D PARAGRAPHUS MARK: not included in any glyphset definition\n * U+2E4E PUNCTUS ELEVATUS MARK: not included in any glyphset definition\n * U+2E4F CORNISH VERSE DIVIDER: not included in any glyphset definition\n * U+2E50 CROSS PATTY WITH RIGHT CROSSBAR: not included in any glyphset definition\n * U+2E51 CROSS PATTY WITH LEFT CROSSBAR: not included in any glyphset definition\n * U+2E52 TIRONIAN SIGN CAPITAL ET: not included in any glyphset definition\n * U+2E53 MEDIEVAL EXCLAMATION MARK: not included in any glyphset definition\n * U+2E54 MEDIEVAL QUESTION MARK: not included in any glyphset definition\n * U+2E55 LEFT SQUARE BRACKET WITH STROKE: not included in any glyphset definition\n * U+2E56 RIGHT SQUARE BRACKET WITH STROKE: not included in any glyphset definition\n * U+2E57 LEFT SQUARE BRACKET WITH DOUBLE STROKE: not included in any glyphset definition\n * U+2E58 RIGHT SQUARE BRACKET WITH DOUBLE STROKE: not included in any glyphset definition\n * U+2E59 TOP HALF LEFT PARENTHESIS: not included in any glyphset definition\n * U+2E5A TOP HALF RIGHT PARENTHESIS: not included in any glyphset definition\n * U+2E5B BOTTOM HALF LEFT PARENTHESIS: not included in any glyphset definition\n * U+2E5C BOTTOM HALF RIGHT PARENTHESIS: not included in any glyphset definition\n * U+2E5D OBLIQUE HYPHEN: not included in any glyphset definition\n * U+A700 MODIFIER LETTER CHINESE TONE YIN PING: not included in any glyphset definition\n * U+A701 MODIFIER LETTER CHINESE TONE YANG PING: not included in any glyphset definition\n * U+A702 MODIFIER LETTER CHINESE TONE YIN SHANG: not included in any glyphset definition\n * U+A703 MODIFIER LETTER CHINESE TONE YANG SHANG: not included in any glyphset definition\n * U+A704 MODIFIER LETTER CHINESE TONE YIN QU: not included in any glyphset definition\n * U+A705 MODIFIER LETTER CHINESE TONE YANG QU: not included in any glyphset definition\n * U+A706 MODIFIER LETTER CHINESE TONE YIN RU: not included in any glyphset definition\n * U+A707 MODIFIER LETTER CHINESE TONE YANG RU: not included in any glyphset definition\n * U+A708 MODIFIER LETTER EXTRA-HIGH DOTTED TONE BAR: not included in any glyphset definition\n * U+A709 MODIFIER LETTER HIGH DOTTED TONE BAR: not included in any glyphset definition\n * U+A70A MODIFIER LETTER MID DOTTED TONE BAR: not included in any glyphset definition\n * U+A70B MODIFIER LETTER LOW DOTTED TONE BAR: not included in any glyphset definition\n * U+A70C MODIFIER LETTER EXTRA-LOW DOTTED TONE BAR: not included in any glyphset definition\n * U+A70D MODIFIER LETTER EXTRA-HIGH DOTTED LEFT-STEM TONE BAR: not included in any glyphset definition\n * U+A70E MODIFIER LETTER HIGH DOTTED LEFT-STEM TONE BAR: not included in any glyphset definition\n * U+A70F MODIFIER LETTER MID DOTTED LEFT-STEM TONE BAR: not included in any glyphset definition\n * U+A710 MODIFIER LETTER LOW DOTTED LEFT-STEM TONE BAR: not included in any glyphset definition\n * U+A711 MODIFIER LETTER EXTRA-LOW DOTTED LEFT-STEM TONE BAR: not included in any glyphset definition\n * U+A712 MODIFIER LETTER EXTRA-HIGH LEFT-STEM TONE BAR: not included in any glyphset definition\n * U+A713 MODIFIER LETTER HIGH LEFT-STEM TONE BAR: not included in any glyphset definition\n * U+A714 MODIFIER LETTER MID LEFT-STEM TONE BAR: not included in any glyphset definition\n * U+A715 MODIFIER LETTER LOW LEFT-STEM TONE BAR: not included in any glyphset definition\n * U+A716 MODIFIER LETTER EXTRA-LOW LEFT-STEM TONE BAR: not included in any glyphset definition\n * U+A717 MODIFIER LETTER DOT VERTICAL BAR: not included in any glyphset definition\n * U+A718 MODIFIER LETTER DOT SLASH: not included in any glyphset definition\n * U+A719 MODIFIER LETTER DOT HORIZONTAL BAR: not included in any glyphset definition\n * U+A71A MODIFIER LETTER LOWER RIGHT CORNER ANGLE: not included in any glyphset definition\n * U+A71B MODIFIER LETTER RAISED UP ARROW: not included in any glyphset definition\n * U+A71C MODIFIER LETTER RAISED DOWN ARROW: not included in any glyphset definition\n * U+A71D MODIFIER LETTER RAISED EXCLAMATION MARK: not included in any glyphset definition\n * U+A71E MODIFIER LETTER RAISED INVERTED EXCLAMATION MARK: not included in any glyphset definition\n * U+A71F MODIFIER LETTER LOW INVERTED EXCLAMATION MARK: not included in any glyphset definition\n * U+A92E KAYAH LI SIGN CWI: try adding one of: kayah-li, myanmar\n * U+AB30 LATIN SMALL LETTER BARRED ALPHA: not included in any glyphset definition\n * U+AB31 LATIN SMALL LETTER A REVERSED-SCHWA: not included in any glyphset definition\n * U+AB32 LATIN SMALL LETTER BLACKLETTER E: not included in any glyphset definition\n * U+AB33 LATIN SMALL LETTER BARRED E: not included in any glyphset definition\n * U+AB34 LATIN SMALL LETTER E WITH FLOURISH: not included in any glyphset definition\n * U+AB35 LATIN SMALL LETTER LENIS F: not included in any glyphset definition\n * U+AB36 LATIN SMALL LETTER SCRIPT G WITH CROSSED-TAIL: not included in any glyphset definition\n * U+AB37 LATIN SMALL LETTER L WITH INVERTED LAZY S: not included in any glyphset definition\n * U+AB38 LATIN SMALL LETTER L WITH DOUBLE MIDDLE TILDE: not included in any glyphset definition\n * U+AB39 LATIN SMALL LETTER L WITH MIDDLE RING: not included in any glyphset definition\n * U+AB3A LATIN SMALL LETTER M WITH CROSSED-TAIL: not included in any glyphset definition\n * U+AB3B LATIN SMALL LETTER N WITH CROSSED-TAIL: not included in any glyphset definition\n * U+AB3C LATIN SMALL LETTER ENG WITH CROSSED-TAIL: not included in any glyphset definition\n * U+AB3D LATIN SMALL LETTER BLACKLETTER O: not included in any glyphset definition\n * U+AB3E LATIN SMALL LETTER BLACKLETTER O WITH STROKE: not included in any glyphset definition\n * U+AB3F LATIN SMALL LETTER OPEN O WITH STROKE: not included in any glyphset definition\n * U+AB40 LATIN SMALL LETTER INVERTED OE: not included in any glyphset definition\n * U+AB41 LATIN SMALL LETTER TURNED OE WITH STROKE: not included in any glyphset definition\n * U+AB42 LATIN SMALL LETTER TURNED OE WITH HORIZONTAL STROKE: not included in any glyphset definition\n * U+AB43 LATIN SMALL LETTER TURNED O OPEN-O: not included in any glyphset definition\n * U+AB44 LATIN SMALL LETTER TURNED O OPEN-O WITH STROKE: not included in any glyphset definition\n * U+AB45 LATIN SMALL LETTER STIRRUP R: not included in any glyphset definition\n * U+AB46 LATIN LETTER SMALL CAPITAL R WITH RIGHT LEG: not included in any glyphset definition\n * U+AB47 LATIN SMALL LETTER R WITHOUT HANDLE: not included in any glyphset definition\n * U+AB48 LATIN SMALL LETTER DOUBLE R: not included in any glyphset definition\n * U+AB49 LATIN SMALL LETTER R WITH CROSSED-TAIL: not included in any glyphset definition\n * U+AB4A LATIN SMALL LETTER DOUBLE R WITH CROSSED-TAIL: not included in any glyphset definition\n * U+AB4B LATIN SMALL LETTER SCRIPT R: not included in any glyphset definition\n * U+AB4C LATIN SMALL LETTER SCRIPT R WITH RING: not included in any glyphset definition\n * U+AB4D LATIN SMALL LETTER BASELINE ESH: not included in any glyphset definition\n * U+AB4E LATIN SMALL LETTER U WITH SHORT RIGHT LEG: not included in any glyphset definition\n * U+AB4F LATIN SMALL LETTER U BAR WITH SHORT RIGHT LEG: not included in any glyphset definition\n * U+AB50 LATIN SMALL LETTER UI: not included in any glyphset definition\n * U+AB51 LATIN SMALL LETTER TURNED UI: not included in any glyphset definition\n * U+AB52 LATIN SMALL LETTER U WITH LEFT HOOK: not included in any glyphset definition\n * U+AB53 LATIN SMALL LETTER CHI: not included in any glyphset definition\n * U+AB54 LATIN SMALL LETTER CHI WITH LOW RIGHT RING: not included in any glyphset definition\n * U+AB55 LATIN SMALL LETTER CHI WITH LOW LEFT SERIF: not included in any glyphset definition\n * U+AB56 LATIN SMALL LETTER X WITH LOW RIGHT RING: not included in any glyphset definition\n * U+AB57 LATIN SMALL LETTER X WITH LONG LEFT LEG: not included in any glyphset definition\n * U+AB58 LATIN SMALL LETTER X WITH LONG LEFT LEG AND LOW RIGHT RING: not included in any glyphset definition\n * U+AB59 LATIN SMALL LETTER X WITH LONG LEFT LEG WITH SERIF: not included in any glyphset definition\n * U+AB5A LATIN SMALL LETTER Y WITH SHORT RIGHT LEG: not included in any glyphset definition\n * U+AB5B MODIFIER BREVE WITH INVERTED BREVE: not included in any glyphset definition\n * U+AB5C MODIFIER LETTER SMALL HENG: not included in any glyphset definition\n * U+AB5D MODIFIER LETTER SMALL L WITH INVERTED LAZY S: not included in any glyphset definition\n * U+AB5E MODIFIER LETTER SMALL L WITH MIDDLE TILDE: not included in any glyphset definition\n * U+AB5F MODIFIER LETTER SMALL U WITH LEFT HOOK: not included in any glyphset definition\n * U+AB60 LATIN SMALL LETTER SAKHA YAT: not included in any glyphset definition\n * U+AB61 LATIN SMALL LETTER IOTIFIED E: not included in any glyphset definition\n * U+AB62 LATIN SMALL LETTER OPEN OE: not included in any glyphset definition\n * U+AB63 LATIN SMALL LETTER UO: not included in any glyphset definition\n * U+AB64 LATIN SMALL LETTER INVERTED ALPHA: not included in any glyphset definition\n * U+AB65 GREEK LETTER SMALL CAPITAL OMEGA: not included in any glyphset definition\n * U+AB66 LATIN SMALL LETTER DZ DIGRAPH WITH RETROFLEX HOOK: not included in any glyphset definition\n * U+AB67 LATIN SMALL LETTER TS DIGRAPH WITH RETROFLEX HOOK: not included in any glyphset definition\n * U+AB68 LATIN SMALL LETTER TURNED R WITH MIDDLE TILDE: not included in any glyphset definition\n * U+AB69 MODIFIER LETTER SMALL TURNED W: not included in any glyphset definition\n * U+AB6A MODIFIER LETTER LEFT TACK: not included in any glyphset definition\n * U+AB6B MODIFIER LETTER RIGHT TACK: not included in any glyphset definition\n * U+FE00 VARIATION SELECTOR-1: try adding one of: manichaean, phags-pa, yi\n * U+FE20 COMBINING LIGATURE LEFT HALF: try adding caucasian-albanian\n * U+FE21 COMBINING LIGATURE RIGHT HALF: try adding caucasian-albanian\n * U+FE22 COMBINING DOUBLE TILDE LEFT HALF: try adding caucasian-albanian\n * U+FE23 COMBINING DOUBLE TILDE RIGHT HALF: try adding caucasian-albanian\n * U+FE24 COMBINING MACRON LEFT HALF: try adding one of: coptic, caucasian-albanian\n * U+FE25 COMBINING MACRON RIGHT HALF: try adding one of: coptic, caucasian-albanian\n * U+FE26 COMBINING CONJOINING MACRON: try adding one of: coptic, caucasian-albanian\n * U+FE27 COMBINING LIGATURE LEFT HALF BELOW: try adding caucasian-albanian\n * U+FE28 COMBINING LIGATURE RIGHT HALF BELOW: try adding caucasian-albanian\n * U+FE29 COMBINING TILDE LEFT HALF BELOW: try adding caucasian-albanian\n * U+FE2A COMBINING TILDE RIGHT HALF BELOW: try adding caucasian-albanian\n * U+FE2B COMBINING MACRON LEFT HALF BELOW: try adding caucasian-albanian\n * U+FE2C COMBINING MACRON RIGHT HALF BELOW: try adding caucasian-albanian\n * U+FE2D COMBINING CONJOINING MACRON BELOW: try adding caucasian-albanian\n * U+FF5B FULLWIDTH LEFT CURLY BRACKET: try adding one of: yi, japanese, math, chinese-simplified\n * U+FF5D FULLWIDTH RIGHT CURLY BRACKET: try adding one of: yi, japanese, math, chinese-simplified\n * U+FFFC OBJECT REPLACEMENT CHARACTER: not included in any glyphset definition\n * U+10780 MODIFIER LETTER SMALL CAPITAL AA: not included in any glyphset definition\n * U+10781 MODIFIER LETTER SUPERSCRIPT TRIANGULAR COLON: not included in any glyphset definition\n * U+10782 MODIFIER LETTER SUPERSCRIPT HALF TRIANGULAR COLON: not included in any glyphset definition\n * U+10783 MODIFIER LETTER SMALL AE: not included in any glyphset definition\n * U+10784 MODIFIER LETTER SMALL CAPITAL B: not included in any glyphset definition\n * U+10785 MODIFIER LETTER SMALL B WITH HOOK: not included in any glyphset definition\n * U+10787 MODIFIER LETTER SMALL DZ DIGRAPH: not included in any glyphset definition\n * U+10788 MODIFIER LETTER SMALL DZ DIGRAPH WITH RETROFLEX HOOK: not included in any glyphset definition\n * U+10789 MODIFIER LETTER SMALL DZ DIGRAPH WITH CURL: not included in any glyphset definition\n * U+1078A MODIFIER LETTER SMALL DEZH DIGRAPH: not included in any glyphset definition\n * U+1078B MODIFIER LETTER SMALL D WITH TAIL: not included in any glyphset definition\n * U+1078C MODIFIER LETTER SMALL D WITH HOOK: not included in any glyphset definition\n * U+1078D MODIFIER LETTER SMALL D WITH HOOK AND TAIL: not included in any glyphset definition\n * U+1078E MODIFIER LETTER SMALL REVERSED E: not included in any glyphset definition\n * U+1078F MODIFIER LETTER SMALL CLOSED REVERSED OPEN E: not included in any glyphset definition\n * U+10790 MODIFIER LETTER SMALL FENG DIGRAPH: not included in any glyphset definition\n * U+10791 MODIFIER LETTER SMALL RAMS HORN: not included in any glyphset definition\n * U+10792 MODIFIER LETTER SMALL CAPITAL G: not included in any glyphset definition\n * U+10793 MODIFIER LETTER SMALL G WITH HOOK: not included in any glyphset definition\n * U+10794 MODIFIER LETTER SMALL CAPITAL G WITH HOOK: not included in any glyphset definition\n * U+10795 MODIFIER LETTER SMALL H WITH STROKE: not included in any glyphset definition\n * U+10796 MODIFIER LETTER SMALL CAPITAL H: not included in any glyphset definition\n * U+10797 MODIFIER LETTER SMALL HENG WITH HOOK: not included in any glyphset definition\n * U+10798 MODIFIER LETTER SMALL DOTLESS J WITH STROKE AND HOOK: not included in any glyphset definition\n * U+10799 MODIFIER LETTER SMALL LS DIGRAPH: not included in any glyphset definition\n * U+1079A MODIFIER LETTER SMALL LZ DIGRAPH: not included in any glyphset definition\n * U+1079B MODIFIER LETTER SMALL L WITH BELT: not included in any glyphset definition\n * U+1079C MODIFIER LETTER SMALL CAPITAL L WITH BELT: not included in any glyphset definition\n * U+1079D MODIFIER LETTER SMALL L WITH RETROFLEX HOOK AND BELT: not included in any glyphset definition\n * U+1079E MODIFIER LETTER SMALL LEZH: not included in any glyphset definition\n * U+1079F MODIFIER LETTER SMALL LEZH WITH RETROFLEX HOOK: not included in any glyphset definition\n * U+107A0 MODIFIER LETTER SMALL TURNED Y: not included in any glyphset definition\n * U+107A1 MODIFIER LETTER SMALL TURNED Y WITH BELT: not included in any glyphset definition\n * U+107A2 MODIFIER LETTER SMALL O WITH STROKE: not included in any glyphset definition\n * U+107A3 MODIFIER LETTER SMALL CAPITAL OE: not included in any glyphset definition\n * U+107A4 MODIFIER LETTER SMALL CLOSED OMEGA: not included in any glyphset definition\n * U+107A5 MODIFIER LETTER SMALL Q: not included in any glyphset definition\n * U+107A6 MODIFIER LETTER SMALL TURNED R WITH LONG LEG: not included in any glyphset definition\n * U+107A7 MODIFIER LETTER SMALL TURNED R WITH LONG LEG AND RETROFLEX HOOK: not included in any glyphset definition\n * U+107A8 MODIFIER LETTER SMALL R WITH TAIL: not included in any glyphset definition\n * U+107A9 MODIFIER LETTER SMALL R WITH FISHHOOK: not included in any glyphset definition\n * U+107AA MODIFIER LETTER SMALL CAPITAL R: not included in any glyphset definition\n * U+107AB MODIFIER LETTER SMALL TC DIGRAPH WITH CURL: not included in any glyphset definition\n * U+107AC MODIFIER LETTER SMALL TS DIGRAPH: not included in any glyphset definition\n * U+107AD MODIFIER LETTER SMALL TS DIGRAPH WITH RETROFLEX HOOK: not included in any glyphset definition\n * U+107AE MODIFIER LETTER SMALL TESH DIGRAPH: not included in any glyphset definition\n * U+107AF MODIFIER LETTER SMALL T WITH RETROFLEX HOOK: not included in any glyphset definition\n * U+107B0 MODIFIER LETTER SMALL V WITH RIGHT HOOK: not included in any glyphset definition\n * U+107B2 MODIFIER LETTER SMALL CAPITAL Y: not included in any glyphset definition\n * U+107B3 MODIFIER LETTER GLOTTAL STOP WITH STROKE: not included in any glyphset definition\n * U+107B4 MODIFIER LETTER REVERSED GLOTTAL STOP WITH STROKE: not included in any glyphset definition\n * U+107B5 MODIFIER LETTER BILABIAL CLICK: not included in any glyphset definition\n * U+107B6 MODIFIER LETTER DENTAL CLICK: not included in any glyphset definition\n * U+107B7 MODIFIER LETTER LATERAL CLICK: not included in any glyphset definition\n * U+107B8 MODIFIER LETTER ALVEOLAR CLICK: not included in any glyphset definition\n * U+107B9 MODIFIER LETTER RETROFLEX CLICK WITH RETROFLEX HOOK: not included in any glyphset definition\n * U+107BA MODIFIER LETTER SMALL S WITH CURL: not included in any glyphset definition\n * U+1DF00 LATIN SMALL LETTER FENG DIGRAPH WITH TRILL: not included in any glyphset definition\n * U+1DF01 LATIN SMALL LETTER REVERSED SCRIPT G: not included in any glyphset definition\n * U+1DF02 LATIN LETTER SMALL CAPITAL TURNED G: not included in any glyphset definition\n * U+1DF03 LATIN SMALL LETTER REVERSED K: not included in any glyphset definition\n * U+1DF04 LATIN LETTER SMALL CAPITAL L WITH BELT: not included in any glyphset definition\n * U+1DF05 LATIN SMALL LETTER LEZH WITH RETROFLEX HOOK: not included in any glyphset definition\n * U+1DF06 LATIN SMALL LETTER TURNED Y WITH BELT: not included in any glyphset definition\n * U+1DF07 LATIN SMALL LETTER REVERSED ENG: not included in any glyphset definition\n * U+1DF08 LATIN SMALL LETTER TURNED R WITH LONG LEG AND RETROFLEX HOOK: not included in any glyphset definition\n * U+1DF09 LATIN SMALL LETTER T WITH HOOK AND RETROFLEX HOOK: not included in any glyphset definition\n * U+1DF0A LATIN LETTER RETROFLEX CLICK WITH RETROFLEX HOOK: not included in any glyphset definition\n * U+1DF0B LATIN SMALL LETTER ESH WITH DOUBLE BAR: not included in any glyphset definition\n * U+1DF0C LATIN SMALL LETTER ESH WITH DOUBLE BAR AND CURL: not included in any glyphset definition\n * U+1DF0D LATIN SMALL LETTER TURNED T WITH CURL: not included in any glyphset definition\n * U+1DF0E LATIN LETTER INVERTED GLOTTAL STOP WITH CURL: not included in any glyphset definition\n * U+1DF0F LATIN LETTER STRETCHED C WITH CURL: not included in any glyphset definition\n * U+1DF10 LATIN LETTER SMALL CAPITAL TURNED K: not included in any glyphset definition\n * U+1DF11 LATIN SMALL LETTER L WITH FISHHOOK: not included in any glyphset definition\n * U+1DF12 LATIN SMALL LETTER DEZH DIGRAPH WITH PALATAL HOOK: not included in any glyphset definition\n * U+1DF13 LATIN SMALL LETTER L WITH BELT AND PALATAL HOOK: not included in any glyphset definition\n * U+1DF14 LATIN SMALL LETTER ENG WITH PALATAL HOOK: not included in any glyphset definition\n * U+1DF15 LATIN SMALL LETTER TURNED R WITH PALATAL HOOK: not included in any glyphset definition\n * U+1DF16 LATIN SMALL LETTER R WITH FISHHOOK AND PALATAL HOOK: not included in any glyphset definition\n * U+1DF17 LATIN SMALL LETTER TESH DIGRAPH WITH PALATAL HOOK: not included in any glyphset definition\n * U+1DF18 LATIN SMALL LETTER EZH WITH PALATAL HOOK: not included in any glyphset definition\n * U+1DF19 LATIN SMALL LETTER DEZH DIGRAPH WITH RETROFLEX HOOK: not included in any glyphset definition\n * U+1DF1A LATIN SMALL LETTER I WITH STROKE AND RETROFLEX HOOK: not included in any glyphset definition\n * U+1DF1B LATIN SMALL LETTER O WITH RETROFLEX HOOK: not included in any glyphset definition\n * U+1DF1C LATIN SMALL LETTER TESH DIGRAPH WITH RETROFLEX HOOK: not included in any glyphset definition\n * U+1DF1D LATIN SMALL LETTER C WITH RETROFLEX HOOK: not included in any glyphset definition\n * U+1DF1E LATIN SMALL LETTER S WITH CURL: not included in any glyphset definition\n * U+1F67C VERY HEAVY SOLIDUS: try adding symbols\n * U+1F67D VERY HEAVY REVERSE SOLIDUS: try adding symbols\n * U+1F67E CHECKER BOARD: try adding symbols\n * U+1F67F REVERSE CHECKER BOARD: try adding symbols\n\nOr you can add the above codepoints to one of the subsets supported by the font: `cyrillic`, `cyrillic-ext`, `greek`, `greek-ext`, `latin`, `latin-ext`, `menu`, `vietnamese`"}, "status": "WARN"}], "module": "vendorspecific.googlefonts.metadata.unreachable_subsetting", "proposal": ["https://github.com/fonttools/fontbakery/issues/4097", "https://github.com/fonttools/fontbakery/pull/4273"], "rationale": "\n        This check ensures that all encoded glyphs in the font are covered by a\n        subset declared in the METADATA.pb. Google Fonts splits the font into\n        a set of subset fonts based on the contents of the `subsets` field and\n        the subset definitions in the `glyphsets` repository.\n\n        Any encoded glyphs which are not by any of these subset definitions\n        will not be served in the subsetted fonts, and so will be unreachable to\n        the end user.\n    ", "result": "WARN", "severity": 2}, {"description": "Check for METADATA subsets with zero support.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/unsupported_subsets>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.unsupported_subsets", "proposal": ["https://github.com/fonttools/fontbakery/issues/3533"], "rationale": "\n        This check ensures that the subsets specified on a METADATA.pb file are\n        actually supported (even if only partially) by the font files.\n\n        Subsets for which none of the codepoints are supported will cause the\n        check to FAIL.\n    ", "result": "PASS", "severity": 10}, {"description": "METADATA.pb font.filename field contains font name in right format?", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/valid_filename_values>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.valid_filename_values", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        This check ensures that the font.filename field in the METADATA.pb\n        is correct and well-formatted; we check well-formatting because we\n        have a condition called 'style', and if that is true, then the font's\n        filename correctly reflects its style. If a correctly formatted\n        filename appears in the font.filename field in METADATA.pb, then all\n        is good.\n    ", "result": "PASS", "severity": null}, {"description": "METADATA.pb font.full_name field contains font name in right format?", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/valid_full_name_values>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.valid_full_name_values", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        This check ensures that the font.full_name field in the METADATA.pb\n        file contains the family name of the font.\n    ", "result": "PASS", "severity": null}, {"description": "Check name ID 25 to end with \"Italic\" for Italic VFs.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/valid_nameid25>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.valid_nameid25", "proposal": ["https://github.com/fonttools/fontbakery/issues/3024", "https://github.com/googlefonts/gftools/issues/297", "https://typo.social/@arrowtype/110430680157544757"], "rationale": "\n        Due to a bug in (at least) Adobe Indesign, name ID 25\n        needs to be different for Italic VFs than their Upright counterparts.\n        Google Fonts chooses to append \"Italic\" here.\n    ", "result": "PASS", "severity": null}, {"description": "METADATA.pb font.post_script_name field contains font name in right format?", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/valid_post_script_name_values>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.valid_post_script_name_values", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        Ensures that the postscript name in METADATA.pb contains the font's\n        family name (with no spaces) as detected from the font binary.\n    ", "result": "PASS", "severity": null}, {"description": "Check METADATA.pb font weights are correct.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/weightclass>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.weightclass", "proposal": ["https://github.com/fonttools/fontbakery/issues/2683", "https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        Check METADATA.pb font weights are correct.\n\n        For static fonts, the metadata weight should be the same as the static font's\n        OS/2 usWeightClass.\n\n        For variable fonts, the weight value should be 400 if the font's wght axis range\n        includes 400, otherwise it should be the value closest to 400.\n    ", "result": "PASS", "severity": null}], "key": ["Metadata Checks", null, null], "result": {"INFO": 1, "PASS": 38, "SKIP": 3, "WARN": 2}}, {"checks": [{"description": "Shapes languages in all GF glyphsets.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Glyphset Checks>", "<FontBakeryCheck:googlefonts/glyphsets/shape_languages>", [["font", 0]]], "logs": [{"message": {"code": "failed-check", "message": "Failed with ModuleNotFoundError: No module named 'shaperglot.checker'\n```\n  File \"/Users/simon/work/gf-dashboard/venv/lib/python3.13/site-packages/fontbakery/checkrunner.py\", line 222, in _run_check\n    subresults = list(subresults)\n  File \"/Users/simon/work/gf-dashboard/venv/lib/python3.13/site-packages/fontbakery/checks/vendorspecific/googlefonts/glyphsets/shape_languages.py\", line 19, in check_glyphsets_shape_languages\n    from shaperglot.checker import Checker\n\n```"}, "status": "ERROR"}], "module": "vendorspecific.googlefonts.glyphsets.shape_languages", "proposal": ["https://github.com/googlefonts/fontbakery/issues/4147"], "rationale": "\n        This check uses a heuristic to determine which GF glyphsets a font supports.\n        Then it checks the font for correct shaping behaviour for all languages in\n        those glyphsets.\n    ", "result": "ERROR", "severity": null}], "key": ["Glyphset Checks", null, null], "result": {"ERROR": 1}}, {"checks": [{"description": "Does DESCRIPTION file contain broken links?", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Description Checks>", "<FontBakeryCheck:googlefonts/description/broken_links>", [["font", 0]]], "logs": [{"message": {"code": "broken-links", "message": "The following links are broken in the article file:\n\thttps://scriptsource.org/scr/Latn (status code: 403)\n\thttps://scriptsource.org/scr/Cyrl (status code: 403)\n\thttps://scriptsource.org/scr/Grek (status code: 403)"}, "status": "FAIL"}], "module": "vendorspecific.googlefonts.description.broken_links", "proposal": ["https://github.com/fonttools/fontbakery/issues/4110", "https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        The snippet of HTML in the DESCRIPTION.en_us.html/ARTICLE.en_us.html file is\n        added to the font family webpage on the Google Fonts website. For that reason,\n        all hyperlinks in it must be properly working.\n    ", "result": "FAIL", "severity": null}, {"description": "DESCRIPTION.en_us.html should end in a linebreak.", "documentation": null, "experimental": false, "filename": "METADATA.pb", "key": ["<Section: Description Checks>", "<FontBakeryCheck:googlefonts/description/eof_linebreak>", [["metadata_pb", 0]]], "logs": [{"message": {"code": "missing-eof-linebreak", "message": "The last characther on DESCRIPTION.en_us.html is not a line-break. Please add it."}, "status": "WARN"}], "module": "vendorspecific.googlefonts.description.eof_linebreak", "proposal": ["https://github.com/fonttools/fontbakery/issues/2879"], "rationale": "\n        Some older text-handling tools sometimes misbehave if the last line of data\n        in a text file is not terminated with a newline character (also known as '\\n').\n\n        We know that this is a very small detail, but for the sake of keeping all\n        DESCRIPTION.en_us.html files uniformly formatted throughout the GFonts\n        collection, we chose to adopt the practice of placing this final linebreak\n        character on them.\n    ", "result": "WARN", "severity": null}, {"description": "DESCRIPTION.en_us.html should end in a linebreak.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Description Checks>", "<FontBakeryCheck:googlefonts/description/eof_linebreak>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.description.eof_linebreak", "proposal": ["https://github.com/fonttools/fontbakery/issues/2879"], "rationale": "\n        Some older text-handling tools sometimes misbehave if the last line of data\n        in a text file is not terminated with a newline character (also known as '\\n').\n\n        We know that this is a very small detail, but for the sake of keeping all\n        DESCRIPTION.en_us.html files uniformly formatted throughout the GFonts\n        collection, we chose to adopt the practice of placing this final linebreak\n        character on them.\n    ", "result": "PASS", "severity": null}, {"description": "On a family update, the DESCRIPTION.en_us.html file should ideally also be updated.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Description Checks>", "<FontBakeryCheck:googlefonts/description/family_update>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.description.family_update", "proposal": ["https://github.com/fonttools/fontbakery/issues/3182"], "rationale": "\n        We want to ensure that any significant changes to the font family are\n        properly mentioned in the DESCRIPTION file.\n\n        In general, it means that the contents of the DESCRIPTION.en_us.html file\n        will typically change if when font files are updated. Please treat this check\n        as a reminder to do so whenever appropriate!\n    ", "result": "PASS", "severity": null}, {"description": "Does DESCRIPTION file contain a upstream Git repo URL?", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Description Checks>", "<FontBakeryCheck:googlefonts/description/git_url>", [["font", 0]]], "logs": [{"message": {"code": "unfulfilled-conditions", "message": "Unfulfilled Conditions: not is_noto"}, "status": "SKIP"}], "module": "vendorspecific.googlefonts.description.git_url", "proposal": ["https://github.com/fonttools/fontbakery/issues/2523"], "rationale": "\n        The contents of the DESCRIPTION.en-us.html file are displayed on the\n        Google Fonts website in the about section of each font family specimen page.\n\n        Since all of the Google Fonts collection is composed of libre-licensed fonts,\n        this check enforces a policy that there must be a hypertext link in that page\n        directing users to the repository where the font project files are\n        made available.\n\n        Such hosting is typically done on sites like Github, Gitlab, GNU Savannah or\n        any other git-based version control service.\n    ", "result": "SKIP", "severity": null}, {"description": "Check for presence of an ARTICLE.en_us.html file", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Description Checks>", "<FontBakeryCheck:googlefonts/description/has_article>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.description.has_article", "proposal": ["https://github.com/fonttools/fontbakery/issues/3841", "https://github.com/fonttools/fontbakery/issues/4318", "https://github.com/fonttools/fontbakery/issues/4702"], "rationale": "\n        Fonts may have a longer article about them, or a description, but\n        not both - except for Noto fonts which should have both!\n    ", "result": "PASS", "severity": null}, {"description": "Check the description doesn't contain unsupported html elements", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Description Checks>", "<FontBakeryCheck:googlefonts/description/has_unsupported_elements>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.description.has_unsupported_elements", "proposal": ["https://github.com/fonttools/fontbakery/issues/2811#issuecomment-1907566857"], "rationale": "\n        The Google Fonts backend doesn't support the following html elements:\n        https://googlefonts.github.io/gf-guide/description.html#requirements\n    ", "result": "PASS", "severity": null}, {"description": "DESCRIPTION.en_us.html must have more than 200 bytes.", "documentation": null, "experimental": false, "filename": "METADATA.pb", "key": ["<Section: Description Checks>", "<FontBakeryCheck:googlefonts/description/min_length>", [["metadata_pb", 0]]], "logs": [{"message": {"code": "too-short", "message": "DESCRIPTION.en_us.html must have size larger than 200 bytes."}, "status": "FAIL"}], "module": "vendorspecific.googlefonts.description.min_length", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        The DESCRIPTION.en_us.html file is intended to provide a brief overview of\n        the font family. It should be long enough to be useful to users, but not so\n        long that it becomes overwhelming.\n\n        We chose 200 bytes as a minimum length because it suggests that someone has\n        taken the time to write \"something sensible\" about the font.\n    ", "result": "FAIL", "severity": null}, {"description": "DESCRIPTION.en_us.html must have more than 200 bytes.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Description Checks>", "<FontBakeryCheck:googlefonts/description/min_length>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.description.min_length", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        The DESCRIPTION.en_us.html file is intended to provide a brief overview of\n        the font family. It should be long enough to be useful to users, but not so\n        long that it becomes overwhelming.\n\n        We chose 200 bytes as a minimum length because it suggests that someone has\n        taken the time to write \"something sensible\" about the font.\n    ", "result": "PASS", "severity": null}, {"description": "URLs on DESCRIPTION file must not display http(s) prefix.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Description Checks>", "<FontBakeryCheck:googlefonts/description/urls>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.description.urls", "proposal": ["https://github.com/fonttools/fontbakery/issues/3497", "https://github.com/fonttools/fontbakery/issues/4283"], "rationale": "\n        The snippet of HTML in the DESCRIPTION.en_us.html file is added to the font\n        family webpage on the Google Fonts website.\n\n        Google Fonts has a content formatting policy for that snippet that expects the\n        text content of anchors not to include the http:// or https:// prefixes.\n    ", "result": "PASS", "severity": null}, {"description": "Is this a proper HTML snippet?", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Description Checks>", "<FontBakeryCheck:googlefonts/description/valid_html>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.description.valid_html", "proposal": ["https://github.com/fonttools/fontbakery/issues/2664", "https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        Sometimes people write malformed HTML markup. This check should ensure the\n        file is good.\n\n        Additionally, when packaging families for being pushed to the `google/fonts`\n        git repo, if there is no DESCRIPTION.en_us.html file, some older versions of\n        the `add_font.py` tool insert a placeholder description file which contains\n        invalid html. This file needs to either be replaced with an existing\n        description file or edited by hand.\n    ", "result": "PASS", "severity": null}], "key": ["Description Checks", null, null], "result": {"FAIL": 2, "PASS": 7, "SKIP": 1, "WARN": 1}}, {"checks": [{"description": "Fonts have equal codepoint coverage", "documentation": null, "experimental": false, "key": ["<Section: Family Checks>", "<FontBakeryCheck:googlefonts/family/equal_codepoint_coverage>", []], "logs": [{"message": {"code": "unfulfilled-conditions", "message": "Unfulfilled Conditions: stylenames_are_canonical"}, "status": "SKIP"}], "module": "vendorspecific.googlefonts.family.equal_codepoint_coverage", "proposal": ["https://github.com/fonttools/fontbakery/issues/4180"], "rationale": "\n        For a given family, all fonts must have the same codepoint coverage.\n        This is because we want to avoid the situation where, for example,\n        a character is present in a regular font but missing in the italic style;\n        turning on italic would cause the character to be rendered either as a\n        fake italic (auto-slanted) or to show tofu.\n    ", "result": "SKIP", "severity": null}, {"description": "Ensure Italic styles have Roman counterparts.", "documentation": null, "experimental": false, "key": ["<Section: Family Checks>", "<FontBakeryCheck:googlefonts/family/italics_have_roman_counterparts>", []], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.family.italics_have_roman_counterparts", "proposal": ["https://github.com/fonttools/fontbakery/issues/1733"], "rationale": "\n        For each font family on Google Fonts, every Italic style must have\n        a Roman sibling.\n\n        This kind of problem was first observed at [1] where the Bold style was\n        missing but BoldItalic was included.\n\n        [1] https://github.com/google/fonts/pull/1482\n    ", "result": "PASS", "severity": null}, {"description": "All tabular figures must have the same width across the RIBBI-family.", "documentation": null, "experimental": false, "key": ["<Section: Family Checks>", "<FontBakeryCheck:googlefonts/family/tnum_horizontal_metrics>", []], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.family.tnum_horizontal_metrics", "proposal": ["https://github.com/fonttools/fontbakery/issues/2278"], "rationale": "\n        Tabular figures need to have the same metrics in all styles in order to allow\n        tables to be set with proper typographic control, but to maintain the placement\n        of decimals and numeric columns between rows.\n\n        Here's a good explanation of this:\n        https://www.typography.com/techniques/fonts-for-financials/#tabular-figs\n    ", "result": "PASS", "severity": null}], "key": ["Family Checks", null, null], "result": {"PASS": 2, "SKIP": 1}}, {"checks": [{"description": "Check family name for GF Guide compliance.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Name table checks>", "<FontBakeryCheck:googlefonts/family_name_compliance>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.family_name_compliance", "proposal": ["https://github.com/fonttools/fontbakery/issues/4049"], "rationale": "\n        Checks the family name for compliance with the Google Fonts Guide.\n        https://googlefonts.github.io/gf-guide/onboarding.html#new-fonts\n\n        If you want to have your family name added to the CamelCase\n        exceptions list, please submit a pull request to the\n        camelcased_familyname_exceptions.txt file.\n\n        Similarly, abbreviations can be submitted to the\n        abbreviations_familyname_exceptions.txt file.\n\n        These are located in the Lib/fontbakery/data/googlefonts/ directory\n        of the FontBakery source code currently hosted at\n        https://github.com/fonttools/fontbakery/\n    ", "result": "PASS", "severity": null}, {"description": "Name table entries should not contain line-breaks.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Name table checks>", "<FontBakeryCheck:googlefonts/name/line_breaks>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.name.line_breaks", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        There are some entries on the name table that may include more than one line\n        of text. The Google Fonts team, though, prefers to keep the name table entries\n        short and simple without line breaks.\n\n        For instance, some designers like to include the full text of a font license in\n        the \"copyright notice\" entry, but for the GFonts collection this entry should\n        only mention year, author and other basic info in a manner enforced by\n        `googlefonts/font_copyright`\n    ", "result": "PASS", "severity": null}], "key": ["Name table checks", null, null], "result": {"PASS": 2}}, {"checks": [{"description": "Check font has a license.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Licensing Checks>", "<FontBakeryCheck:googlefonts/family/has_license>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.family.has_license", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        A license file is required for all fonts in the Google Fonts collection.\n        This checks that the font's directory contains a file named OFL.txt or\n        LICENSE.txt.\n    ", "result": "PASS", "severity": null}, {"description": "Copyright notices match canonical pattern in fonts", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Licensing Checks>", "<FontBakeryCheck:googlefonts/font_copyright>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.font_copyright", "proposal": ["https://github.com/fonttools/fontbakery/pull/2383", "https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        This check aims at ensuring a uniform and legally accurate copyright statement\n        on the name table entries and METADATA.pb files of font files across the Google\n        Fonts library.\n\n        We also check that the copyright field in METADATA.pb matches the\n        contents of the name table nameID 0 (Copyright), and that the copyright\n        notice within the METADATA.pb file is not too long; if it is more than 500\n        characters, this may be an indication that either a full license or the\n        font's description has been included in this field by mistake.\n\n    \n        The expected pattern for the copyright string adheres to the following rules:\n\n        * It must say \"Copyright\" followed by a 4 digit year (optionally followed by\n          a hyphen and another 4 digit year)\n\n        * Additional years or year ranges are also valid.\n\n        * An optional comma can be placed here.\n\n        * Then it must say \"The <familyname> Project Authors\" and, within parentheses,\n          a URL for a git repository must be provided. But we have an exception\n          for the fonts from the Noto project, that simply have\n          \"google llc. all rights reserved\" here.\n\n        * The check is case insensitive and does not validate whether the familyname\n          is correct, even though we'd obviously expect it to be.\n\n\n        Here is an example of a valid copyright string:\n\n        \"Copyright 2017 The Archivo Black Project Authors\n         (https://github.com/Omnibus-Type/ArchivoBlack)\"\n", "result": "PASS", "severity": 10}, {"description": "Check OFL body text is correct.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Licensing Checks>", "<FontBakeryCheck:googlefonts/license/OFL_body_text>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.license.OFL_body_text", "proposal": ["https://github.com/fonttools/fontbakery/issues/3352"], "rationale": "\n        Check OFL body text is correct.\n        Often users will accidently delete parts of the body text.\n    ", "result": "PASS", "severity": 10}, {"description": "Check license file has good copyright string.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Licensing Checks>", "<FontBakeryCheck:googlefonts/license/OFL_copyright>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.license.OFL_copyright", "proposal": ["https://github.com/fonttools/fontbakery/issues/2764"], "rationale": "\n        An OFL.txt file's first line should be the font copyright.\n\n    \n        The expected pattern for the copyright string adheres to the following rules:\n\n        * It must say \"Copyright\" followed by a 4 digit year (optionally followed by\n          a hyphen and another 4 digit year)\n\n        * Additional years or year ranges are also valid.\n\n        * An optional comma can be placed here.\n\n        * Then it must say \"The <familyname> Project Authors\" and, within parentheses,\n          a URL for a git repository must be provided. But we have an exception\n          for the fonts from the Noto project, that simply have\n          \"google llc. all rights reserved\" here.\n\n        * The check is case insensitive and does not validate whether the familyname\n          is correct, even though we'd obviously expect it to be.\n\n\n        Here is an example of a valid copyright string:\n\n        \"Copyright 2017 The Archivo Black Project Authors\n         (https://github.com/Omnibus-Type/ArchivoBlack)\"\n", "result": "PASS", "severity": 10}, {"description": "METADATA.pb: Copyright notice is the same in all fonts?", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Licensing Checks>", "<FontBakeryCheck:googlefonts/metadata/copyright>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.copyright", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        The METADATA.pb file includes a copyright field for each font\n        file in the family. The value of this field should be the same\n        for all fonts in the family.\n    ", "result": "PASS", "severity": null}, {"description": "METADATA.pb license is \"APACHE2\", \"UFL\" or \"OFL\"?", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Licensing Checks>", "<FontBakeryCheck:googlefonts/metadata/license>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.license", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        The license field in METADATA.pb must contain one of the\n        three values \"APACHE2\", \"UFL\" or \"OFL\". (New fonts should\n        generally be OFL unless there are special circumstances.)\n    ", "result": "PASS", "severity": null}, {"description": "Copyright notice on METADATA.pb should not contain 'Reserved Font Name'.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Licensing Checks>", "<FontBakeryCheck:googlefonts/metadata/reserved_font_name>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.reserved_font_name", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        Unless an exception has been granted, we expect fonts on\n        Google Fonts not to use the \"Reserved Font Name\" clause in their\n        copyright information. This is because fonts with RFNs are difficult\n        to modify in a libre ecosystem; anyone who forks the font (with a\n        view to changing it) must first rename the font, which makes\n        it difficult to pass changes back to upstream.\n\n        There is also a potential licensing difficulty, in that Google Fonts\n        web service subsets the font - a modification of the original - but\n        then delivers the font with the same name, which could be seen as a\n        violation of the reserved font name clause.\n    ", "result": "PASS", "severity": null}, {"description": "Check copyright namerecords match license file.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Licensing Checks>", "<FontBakeryCheck:googlefonts/name/license>", [["font", 0]]], "logs": [{"message": {"code": "old-url", "message": "Please consider updating the url from 'https://scripts.sil.org/OFL' to 'https://openfontlicense.org'."}, "status": "WARN"}], "module": "vendorspecific.googlefonts.name.license", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        A known licensing description must be provided in the NameID 14\n        (LICENSE DESCRIPTION) entries of the name table.\n\n        The source of truth for this check (to determine which license is in use) is\n        a file placed side-by-side to your font project including the licensing terms.\n\n        Depending on the chosen license, one of the following string snippets is\n        expected to be found on the NameID 13 (LICENSE DESCRIPTION) entries of the\n        name table:\n\n        - \"This Font Software is licensed under the SIL Open Font License, Version 1.1.\n          This license is available with a FAQ at: openfontlicense.org\"\n\n        - \"Licensed under the Apache License, Version 2.0\"\n\n        - \"Licensed under the Ubuntu Font Licence 1.0.\"\n\n\n        Currently accepted licenses are Apache or Open Font License. For a small set\n        of legacy families the Ubuntu Font License may be acceptable as well.\n\n        When in doubt, please choose OFL for new font projects.\n    ", "result": "WARN", "severity": null}, {"description": "License URL matches License text on name table?", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Licensing Checks>", "<FontBakeryCheck:googlefonts/name/license_url>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "Could not infer the font license. Please ensure NameID 13 (LICENSE DESCRIPTION) is properly set."}, "status": "SKIP"}], "module": "vendorspecific.googlefonts.name.license_url", "proposal": ["https://github.com/fonttools/fontbakery/issues/4358", "https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        A known license URL must be provided in the NameID 14 (LICENSE INFO URL)\n        entry of the name table.\n\n        The source of truth for this check is the licensing text found on the NameID 13\n        entry (LICENSE DESCRIPTION).\n\n        The string snippets used for detecting licensing terms are:\n\n        - \"This Font Software is licensed under the SIL Open Font License, Version 1.1.\n          This license is available with a FAQ at: openfontlicense.org\"\n\n        - \"Licensed under the Apache License, Version 2.0\"\n\n        - \"Licensed under the Ubuntu Font Licence 1.0.\"\n\n\n        Currently accepted licenses are Apache or Open Font License. For a small set of\n        legacy families the Ubuntu Font License may be acceptable as well.\n\n        When in doubt, please choose OFL for new font projects.\n    ", "result": "SKIP", "severity": null}, {"description": "Name table strings must not contain the string 'Reserved Font Name'.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Licensing Checks>", "<FontBakeryCheck:googlefonts/name/rfn>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.name.rfn", "proposal": ["https://github.com/fonttools/fontbakery/issues/1380"], "rationale": "\n        Some designers adopt the \"Reserved Font Name\" clause of the OFL license. This\n        means that the original author reserves the rights to the family name and other\n        people can only distribute modified versions using a different family name.\n\n        Google Fonts published updates to the fonts in the collection in order to fix\n        issues and/or implement further improvements to the fonts. It is important to\n        keep the family name so that users of the webfonts can benefit from the updates.\n        Since it would forbid such usage scenario, all families in the GFonts collection\n        are required to not adopt the RFN clause.\n\n        This check ensures \"Reserved Font Name\" is not mentioned in the name table.\n    ", "result": "PASS", "severity": null}], "key": ["Licensing Checks", null, null], "result": {"PASS": 8, "SKIP": 1, "WARN": 1}}, {"checks": [{"description": "Directory name in GFonts repo structure must match NameID 1 of the regular.", "documentation": null, "experimental": false, "key": ["<Section: Repository Checks>", "<FontBakeryCheck:googlefonts/repo/dirname_matches_nameid_1>", []], "logs": [{"message": {"code": "variable-exempt", "message": "Variable fonts are exempt from this check."}, "status": "SKIP"}], "module": "vendorspecific.googlefonts.repo.dirname_matches_nameid_1", "proposal": ["https://github.com/fonttools/fontbakery/issues/2302"], "rationale": "\n        For static fonts, we expect to name the directory in google/fonts\n        according to the NameID 1 of the regular font, all lower case with\n        no hyphens or spaces. This check verifies that the directory\n        name matches our expectations.\n    ", "result": "SKIP", "severity": null}, {"description": "A font repository should not include FontBakery report files", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Repository Checks>", "<FontBakeryCheck:googlefonts/repo/fb_report>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.repo.fb_report", "proposal": ["https://github.com/fonttools/fontbakery/issues/2888"], "rationale": "\n        A FontBakery report is ephemeral and so should be used for posting issues on a\n        bug-tracker instead of being hosted in the font project repository.\n    ", "result": "PASS", "severity": null}, {"description": "Check upstream.yaml file contains all required fields", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Repository Checks>", "<FontBakeryCheck:googlefonts/repo/upstream_yaml_has_required_fields>", [["font", 0]]], "logs": [{"message": {"code": "unfulfilled-conditions", "message": "Unfulfilled Conditions: upstream_yaml"}, "status": "SKIP"}], "module": "vendorspecific.googlefonts.repo.upstream_yaml_has_required_fields", "proposal": ["https://github.com/fonttools/fontbakery/issues/3338"], "rationale": "\n        If a family has been pushed using the gftools packager, we must check that all\n        the required fields in the upstream.yaml file have been populated.\n    ", "result": "SKIP", "severity": 10}, {"description": "A static fonts directory, if present, must contain manually hinted fonts", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Repository Checks>", "<FontBakeryCheck:googlefonts/repo/vf_has_static_fonts>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.repo.vf_has_static_fonts", "proposal": ["https://github.com/fonttools/fontbakery/issues/2654"], "rationale": "\n        Variable font family directories kept in the google/fonts git repo may include\n        a static/ subdir containing static fonts, if manual hinting is used on\n        these fonts. Otherwise, the directory should be removed.\n    ", "result": "PASS", "severity": null}, {"description": "A font repository should not include ZIP files", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Repository Checks>", "<FontBakeryCheck:googlefonts/repo/zip_files>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.repo.zip_files", "proposal": ["https://github.com/fonttools/fontbakery/issues/2903"], "rationale": "\n        Sometimes people check in ZIPs into their font project repositories. While we\n        accept the practice of checking in binaries, we believe that a ZIP is a step\n        too far ;)\n\n        Note: a source purist position is that only source files and build scripts\n        should be checked in.\n    ", "result": "PASS", "severity": null}], "key": ["Repository Checks", null, null], "result": {"PASS": 3, "SKIP": 2}}, {"checks": [{"description": "Ensure dotted circle glyph is present and can attach marks.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Shaping Checks>", "<FontBakeryCheck:dotted_circle>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "All marks were anchored to dotted circle"}, "status": "PASS"}], "module": "dotted_circle", "proposal": ["https://github.com/fonttools/fontbakery/issues/3600"], "rationale": "\n        The dotted circle character (U+25CC) is inserted by shaping engines before\n        mark glyphs which do not have an associated base, especially in the context\n        of broken syllabic clusters.\n\n        For fonts containing combining marks, it is recommended that the dotted circle\n        character be included so that these isolated marks can be displayed properly;\n        for fonts supporting complex scripts, this should be considered mandatory.\n\n        Additionally, when a dotted circle glyph is present, it should be able to\n        display all marks correctly, meaning that it should contain anchors for all\n        attaching marks.\n\n        A fontmake filter can be used to automatically add a dotted_circle to a font:\n\n        fontmake --filter 'DottedCircleFilter(pre=True)' --filter '...'\n    ", "result": "PASS", "severity": 3}, {"description": "Check that no collisions are found while shaping", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Shaping Checks>", "<FontBakeryCheck:shaping/collides>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "Shaping test directory not defined in configuration file"}, "status": "SKIP"}], "module": "shaping.collides", "proposal": ["https://github.com/fonttools/fontbakery/pull/3223"], "rationale": "\n        Fonts with complex layout rules can benefit from regression tests to ensure\n        that the rules are behaving as designed. This checks runs a shaping test\n        suite and reports instances where the glyphs collide in unexpected ways.\n\n        Shaping test suites should be written by the font engineer and referenced\n        in the FontBakery configuration file. For more information about write\n        shaping test files and how to configure FontBakery to read the shaping\n        test suites, see https://simoncozens.github.io/tdd-for-otl/\n    ", "result": "SKIP", "severity": null}, {"description": "Check that no forbidden glyphs are found while shaping", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Shaping Checks>", "<FontBakeryCheck:shaping/forbidden>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "Shaping test directory not defined in configuration file"}, "status": "SKIP"}], "module": "shaping.forbidden", "proposal": ["https://github.com/fonttools/fontbakery/pull/3223"], "rationale": "\n        Fonts with complex layout rules can benefit from regression tests to ensure\n        that the rules are behaving as designed. This checks runs a shaping test\n        suite and reports if any glyphs are generated in the shaping which should\n        not be produced. (For example, .notdef glyphs, visible viramas, etc.)\n\n        Shaping test suites should be written by the font engineer and referenced in\n        the FontBakery configuration file. For more information about write shaping\n        test files and how to configure FontBakery to read the shaping test suites,\n        see https://simoncozens.github.io/tdd-for-otl/\n    ", "result": "SKIP", "severity": null}, {"description": "Check that texts shape as per expectation", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Shaping Checks>", "<FontBakeryCheck:shaping/regression>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "Shaping test directory not defined in configuration file"}, "status": "SKIP"}], "module": "shaping.regression", "proposal": ["https://github.com/fonttools/fontbakery/pull/3223"], "rationale": "\n        Fonts with complex layout rules can benefit from regression tests to ensure\n        that the rules are behaving as designed. This checks runs a shaping test\n        suite and compares expected shaping against actual shaping, reporting\n        any differences.\n\n        Shaping test suites should be written by the font engineer and referenced\n        in the FontBakery configuration file. For more information about write\n        shaping test files and how to configure FontBakery to read the shaping\n        test suites, see https://simoncozens.github.io/tdd-for-otl/\n    ", "result": "SKIP", "severity": null}, {"description": "Ensure soft_dotted characters lose their dot when combined with marks that replace the dot.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Shaping Checks>", "<FontBakeryCheck:soft_dotted>", [["font", 0]]], "logs": [{"message": {"code": "failed-check", "message": "Failed with ModuleNotFoundError: No module named 'shaperglot.checker'\n```\n  File \"/Users/simon/work/gf-dashboard/venv/lib/python3.13/site-packages/fontbakery/checkrunner.py\", line 222, in _run_check\n    subresults = list(subresults)\n  File \"/Users/simon/work/gf-dashboard/venv/lib/python3.13/site-packages/fontbakery/checks/soft_dotted.py\", line 144, in check_soft_dotted\n    from shaperglot.checker import Checker\n\n```"}, "status": "ERROR"}], "module": "soft_dotted", "proposal": ["https://github.com/fonttools/fontbakery/issues/4059"], "rationale": "\n        An accent placed on characters with a \"soft dot\", like i or j, causes\n        the dot to disappear.\n        An explicit dot above can be added where required.\n        See \"Diacritics on i and j\" in Section 7.1, \"Latin\" in The Unicode Standard.\n\n        Characters with the Soft_Dotted property are listed in\n        https://www.unicode.org/Public/UCD/latest/ucd/PropList.txt\n\n        See also:\n        https://googlefonts.github.io/gf-guide/diacritics.html#soft-dotted-glyphs\n    ", "result": "ERROR", "severity": 3}], "key": ["Shaping Checks", null, null], "result": {"ERROR": 1, "PASS": 1, "SKIP": 3}}, {"checks": [{"description": "Are there any misaligned on-curve points?", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Outline Checks>", "<FontBakeryCheck:outline_alignment_miss>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "So many Y-coordinates of points were close to boundaries that this was probably by design."}, "status": "PASS"}], "module": "outline_alignment_miss", "proposal": ["https://github.com/fonttools/fontbakery/pull/3088"], "rationale": "\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ", "result": "PASS", "severity": null}, {"description": "Do any segments have colinear vectors?", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Outline Checks>", "<FontBakeryCheck:outline_colinear_vectors>", [["font", 0]]], "logs": [{"message": {"code": "unfulfilled-conditions", "message": "Unfulfilled Conditions: not is_variable_font"}, "status": "SKIP"}], "module": "outline_colinear_vectors", "proposal": ["https://github.com/fonttools/fontbakery/pull/3088"], "rationale": "\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ", "result": "SKIP", "severity": null}, {"description": "Check the direction of the outermost contour in each glyph", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Outline Checks>", "<FontBakeryCheck:outline_direction>", [["font", 0]]], "logs": [{"message": {"code": "ccw-outer-contour", "message": "The following glyphs have a counter-clockwise outer contour:\n\n\t* dkshade (U+2593) has a counter-clockwise outer contour\n\n\t* dkshade (U+2593) has a counter-clockwise outer contour\n\n\t* dkshade (U+2593) has a counter-clockwise outer contour\n\n\t* dkshade (U+2593) has a counter-clockwise outer contour\n\n\t* dkshade (U+2593) has a counter-clockwise outer contour\n\n\t* dkshade (U+2593) has a counter-clockwise outer contour\n\n\t* uniA7D3 (U+A7D3) has a counter-clockwise outer contour"}, "status": "WARN"}], "module": "outline_direction", "proposal": ["https://github.com/fonttools/fontbakery/issues/2056"], "rationale": "\n        In TrueType fonts, the outermost contour of a glyph should be oriented\n        clockwise, while the inner contours should be oriented counter-clockwise.\n        Getting the path direction wrong can lead to rendering issues in some\n        software.\n    ", "result": "WARN", "severity": null}, {"description": "Do outlines contain any jaggy segments?", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Outline Checks>", "<FontBakeryCheck:outline_jaggy_segments>", [["font", 0]]], "logs": [{"message": {"code": "unfulfilled-conditions", "message": "Unfulfilled Conditions: not is_variable_font"}, "status": "SKIP"}], "module": "outline_jaggy_segments", "proposal": ["https://github.com/fonttools/fontbakery/issues/3064"], "rationale": "\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ", "result": "SKIP", "severity": null}, {"description": "Do outlines contain any semi-vertical or semi-horizontal lines?", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Outline Checks>", "<FontBakeryCheck:outline_semi_vertical>", [["font", 0]]], "logs": [{"message": {"code": "unfulfilled-conditions", "message": "Unfulfilled Conditions: not is_variable_font"}, "status": "SKIP"}], "module": "outline_semi_vertical", "proposal": ["https://github.com/fonttools/fontbakery/pull/3088"], "rationale": "\n        This check detects line segments which are nearly, but not quite, exactly\n        horizontal or vertical. Sometimes such lines are created by design, but often\n        they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright\n        lines.\n    ", "result": "SKIP", "severity": null}, {"description": "Are any segments inordinately short?", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Outline Checks>", "<FontBakeryCheck:outline_short_segments>", [["font", 0]]], "logs": [{"message": {"code": "unfulfilled-conditions", "message": "Unfulfilled Conditions: not is_variable_font"}, "status": "SKIP"}], "module": "outline_short_segments", "proposal": ["https://github.com/fonttools/fontbakery/pull/3088"], "rationale": "\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ", "result": "SKIP", "severity": null}], "key": ["Outline Checks", null, null], "result": {"PASS": 1, "SKIP": 4, "WARN": 1}}, {"checks": [{"description": "Check if the axes match between the font and the Google Fonts version.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Font File Checks>", "<FontBakeryCheck:googlefonts/axes_match>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "Axes match Google Fonts version."}, "status": "PASS"}], "module": "vendorspecific.googlefonts.axes_match", "proposal": [null], "rationale": "\n        An updated font family must include the same axes found in the Google \"\n        Fonts version, with the same axis ranges.\n    ", "result": "PASS", "severity": null}, {"description": "Validate defaults on fvar table match registered fallback names in GFAxisRegistry.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Font File Checks>", "<FontBakeryCheck:googlefonts/axisregistry/fvar_axis_defaults>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.axisregistry.fvar_axis_defaults", "proposal": ["https://github.com/fonttools/fontbakery/issues/3141"], "rationale": "\n        Check that axis defaults have a corresponding fallback name registered at the\n        Google Fonts Axis Registry, available at\n        https://github.com/google/fonts/tree/main/axisregistry\n\n        This is necessary for the following reasons:\n\n        To get ZIP files downloads on Google Fonts to be accurate \u2014 otherwise the\n        chosen default font is not generated. The Newsreader family, for instance, has\n        a default value on the 'opsz' axis of 16pt. If 16pt was not a registered\n        fallback position, then the ZIP file would instead include another position\n        as default (such as 14pt).\n\n        For the Variable fonts to display the correct location on the specimen page.\n\n        For VF with no weight axis to be displayed at all. For instance, Ballet, which\n        has no weight axis, was not appearing in sandbox because default position on\n        'opsz' axis was 16pt, and it was not yet a registered fallback positon.\n    ", "result": "PASS", "severity": null}, {"description": "Checking file is named canonically.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Font File Checks>", "<FontBakeryCheck:googlefonts/canonical_filename>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "Font filename is correct, \"NotoSansMono[wdth,wght].ttf\"."}, "status": "PASS"}], "module": "vendorspecific.googlefonts.canonical_filename", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        A font's filename must be composed as \"<familyname>-<stylename>.ttf\":\n\n        - Nunito-Regular.ttf\n\n        - Oswald-BoldItalic.ttf\n\n\n        Variable fonts must list the axis tags in alphabetical order in\n        square brackets and separated by commas:\n\n        - Roboto[wdth,wght].ttf\n\n        - Familyname-Italic[wght].ttf\n    ", "result": "PASS", "severity": null}, {"description": "Check font follows the Google Fonts CJK vertical metric schema", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Font File Checks>", "<FontBakeryCheck:googlefonts/cjk_vertical_metrics>", [["font", 0]]], "logs": [{"message": {"code": "unfulfilled-conditions", "message": "Unfulfilled Conditions: is_cjk_font, not listed_on_gfonts_api"}, "status": "SKIP"}], "module": "vendorspecific.googlefonts.cjk_vertical_metrics", "proposal": ["https://github.com/fonttools/fontbakery/pull/2797"], "rationale": "\n        CJK fonts have different vertical metrics when compared to Latin fonts.\n        We follow the schema developed by dr Ken Lunde for Source Han Sans and\n        the Noto CJK fonts.\n\n        Our documentation includes further information:\n        https://github.com/googlefonts/gf-docs/tree/main/Spec#cjk-vertical-metrics\n    ", "result": "SKIP", "severity": null}, {"description": "Check if the vertical metrics of a CJK family are similar to the same family hosted on Google Fonts.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Font File Checks>", "<FontBakeryCheck:googlefonts/cjk_vertical_metrics_regressions>", [["font", 0]]], "logs": [{"message": {"code": "unfulfilled-conditions", "message": "Unfulfilled Conditions: is_cjk_font"}, "status": "SKIP"}], "module": "vendorspecific.googlefonts.cjk_vertical_metrics_regressions", "proposal": ["https://github.com/fonttools/fontbakery/pull/3244"], "rationale": "\n        Check CJK family has the same vertical metrics as the same family\n        hosted on Google Fonts.\n    ", "result": "SKIP", "severity": null}, {"description": "Ensure font has the expected color font tables.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Font File Checks>", "<FontBakeryCheck:googlefonts/colorfont_tables>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.colorfont_tables", "proposal": ["https://googlefonts.github.io/gf-guide/color.html", "https://github.com/fonttools/fontbakery/issues/3886", "https://github.com/fonttools/fontbakery/issues/3888", "https://github.com/fonttools/fontbakery/pull/3889", "https://github.com/fonttools/fontbakery/issues/4131"], "rationale": "\n        COLR v0 fonts are widely supported in most browsers so they do not require\n        an SVG color table. However, some environments (e.g. Safari, Adobe apps)\n        do not currently support COLR v1 so we need to add an SVG table to these fonts,\n        except in the case of variable fonts, since SVG does not support\n        OpenType Variations.\n\n        To automatically generate compatible SVG/COLR tables,\n        run the maximum_color tool in nanoemoji:\n        https://github.com/googlefonts/nanoemoji\n    ", "result": "PASS", "severity": null}, {"description": "Check font names are correct", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Font File Checks>", "<FontBakeryCheck:googlefonts/font_names>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.font_names", "proposal": ["https://github.com/fonttools/fontbakery/pull/3800"], "rationale": "\n        Google Fonts has several rules which need to be adhered to when\n        setting a font's name table. Please read:\n        https://googlefonts.github.io/gf-guide/statics.html#supported-styles\n        https://googlefonts.github.io/gf-guide/statics.html#style-linking\n        https://googlefonts.github.io/gf-guide/statics.html#unsupported-styles\n        https://googlefonts.github.io/gf-guide/statics.html#single-weight-families\n    ", "result": "PASS", "severity": null}, {"description": "Checking OS/2 fsType does not impose restrictions.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Font File Checks>", "<FontBakeryCheck:googlefonts/fstype>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.fstype", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        The fsType in the OS/2 table is a legacy DRM-related field. Fonts in the\n        Google Fonts collection must have it set to zero (also known as\n        \"Installable Embedding\"). This setting indicates that the fonts can be\n        embedded in documents and permanently installed by applications on\n        remote systems.\n\n        More detailed info is available at:\n        https://docs.microsoft.com/en-us/typography/opentype/spec/os2#fstype\n    ", "result": "PASS", "severity": null}, {"description": "Check variable font instances", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Font File Checks>", "<FontBakeryCheck:googlefonts/fvar_instances>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.fvar_instances", "proposal": ["https://github.com/fonttools/fontbakery/pull/3800"], "rationale": "\n        Check a font's fvar instance coordinates comply with our guidelines:\n        https://googlefonts.github.io/gf-guide/variable.html#fvar-instances\n\n        This check is skipped for fonts that have a Morph (MORF) axis\n        since we allow users to define their own custom instances.\n    ", "result": "PASS", "severity": null}, {"description": "Is the Grid-fitting and Scan-conversion Procedure ('gasp') table set to optimize rendering?", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Font File Checks>", "<FontBakeryCheck:googlefonts/gasp>", [["font", 0]]], "logs": [{"message": {"code": "ranges", "message": "These are the ppm ranges declared on the gasp table:\n\nPPM <= 65535:\n\tflag = 0x0F\n\t- Use grid-fitting\n\t- Use grayscale rendering\n\t- Use gridfitting with ClearType symmetric smoothing\n\t- Use smoothing along multiple axes with ClearType\u00ae\n"}, "status": "INFO"}], "module": "vendorspecific.googlefonts.gasp", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        Traditionally version 0 'gasp' tables were set so that font sizes below 8 ppem\n        had no grid fitting but did have antialiasing. From 9-16 ppem, just grid\n        fitting.\n        And fonts above 17ppem had both antialiasing and grid fitting toggled on.\n        The use of accelerated graphics cards and higher resolution screens make this\n        approach obsolete. Microsoft's DirectWrite pushed this even further with much\n        improved rendering built into the OS and apps.\n\n        In this scenario it makes sense to simply toggle all 4 flags ON for all font\n        sizes.\n    ", "result": "INFO", "severity": null}, {"description": "Check Google Fonts glyph coverage.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Font File Checks>", "<FontBakeryCheck:googlefonts/glyph_coverage>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.glyph_coverage", "proposal": ["https://github.com/fonttools/fontbakery/pull/2488"], "rationale": "\n        Google Fonts expects that fonts in its collection support at least the minimal\n        set of characters defined in the `GF-latin-core` glyph-set.\n    ", "result": "PASS", "severity": null}, {"description": "Font has ttfautohint params?", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Font File Checks>", "<FontBakeryCheck:googlefonts/has_ttfautohint_params>", [["font", 0]]], "logs": [{"message": {"code": "not-hinted", "message": "Font appears to our heuristic as not hinted using ttfautohint."}, "status": "SKIP"}], "module": "vendorspecific.googlefonts.has_ttfautohint_params", "proposal": ["https://github.com/fonttools/fontbakery/issues/1773"], "rationale": "\n        It is critically important that all static TTFs in the Google Fonts API\n        which were autohinted with ttfautohint store their TTFAutohint args in\n        the 'name' table, so that an automated solution can be made to\n        replicate the hinting on subsets, etc.\n    ", "result": "SKIP", "severity": null}, {"description": "Ensure fonts have ScriptLangTags declared on the 'meta' table.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Font File Checks>", "<FontBakeryCheck:googlefonts/meta/script_lang_tags>", [["font", 0]]], "logs": [{"message": {"code": "lacks-meta-table", "message": "This font file does not have a 'meta' table."}, "status": "WARN"}], "module": "vendorspecific.googlefonts.meta.script_lang_tags", "proposal": ["https://github.com/fonttools/fontbakery/issues/3349"], "rationale": "\n        The OpenType 'meta' table originated at Apple. Microsoft added it to OT with\n        just two DataMap records:\n\n        - dlng: comma-separated ScriptLangTags that indicate which scripts,\n          or languages and scripts, with possible variants, the font is designed for.\n\n        - slng: comma-separated ScriptLangTags that indicate which scripts,\n          or languages and scripts, with possible variants, the font supports.\n\n\n        The slng structure is intended to describe which languages and scripts the\n        font overall supports. For example, a Traditional Chinese font that also\n        contains Latin characters, can indicate Hant,Latn, showing that it supports\n        Hant, the Traditional Chinese variant of the Hani script, and it also\n        supports the Latn script.\n\n        The dlng structure is far more interesting. A font may contain various glyphs,\n        but only a particular subset of the glyphs may be truly \"leading\" in the design,\n        while other glyphs may have been included for technical reasons. Such a\n        Traditional Chinese font could only list Hant there, showing that it\u2019s designed\n        for Traditional Chinese, but the font would omit Latn, because the developers\n        don\u2019t think the font is really recommended for purely Latin-script use.\n\n        The tags used in the structures can comprise just script, or also language\n        and script. For example, if a font has Bulgarian Cyrillic alternates in the\n        locl feature for the cyrl BGR OT languagesystem, it could also indicate in\n        dlng explicitly that it supports bul-Cyrl. (Note that the scripts and languages\n        in meta use the ISO language and script codes, not the OpenType ones).\n\n        This check ensures that the font has the meta table containing the\n        slng and dlng structures.\n\n        All families in the Google Fonts collection should contain the 'meta' table.\n        Windows 10 already uses it when deciding on which fonts to fall back to.\n        The Google Fonts API and also other environments could use the data for\n        smarter filtering. Most importantly, those entries should be added\n        to the Noto fonts.\n\n        In the font making process, some environments store this data in external\n        files already. But the meta table provides a convenient way to store this\n        inside the font file, so some tools may add the data, and unrelated tools\n        may read this data. This makes the solution much more portable and universal.\n    ", "result": "WARN", "severity": 3}, {"description": "Description strings in the name table must not exceed 200 characters.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Font File Checks>", "<FontBakeryCheck:googlefonts/name/description_max_length>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.name.description_max_length", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        An old FontLab version had a bug which caused it to store copyright notices\n        in nameID 10 entries.\n\n        In order to detect those and distinguish them from actual legitimate usage of\n        this name table entry, we expect that such strings do not exceed a reasonable\n        length of 200 chars.\n\n        Longer strings are likely instances of the FontLab bug.\n    ", "result": "PASS", "severity": null}, {"description": "Make sure family name does not begin with a digit.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Font File Checks>", "<FontBakeryCheck:googlefonts/name/familyname_first_char>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.name.familyname_first_char", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        Font family names which start with a numeral are often not discoverable\n        in Windows applications.\n    ", "result": "PASS", "severity": null}, {"description": "Font has all mandatory 'name' table entries?", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Font File Checks>", "<FontBakeryCheck:googlefonts/name/mandatory_entries>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.name.mandatory_entries", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        We require all fonts to have values for their font family name,\n        font subfamily name, full font name, and postscript name. For RIBBI\n        fonts, we also require values for the typographic family name and\n        typographic subfamily name.\n    ", "result": "PASS", "severity": null}, {"description": "Version format is correct in 'name' table?", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Font File Checks>", "<FontBakeryCheck:googlefonts/name/version_format>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.name.version_format", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        For Google Fonts, the version string must be in the format \"Version X.Y\".\n        The version number must be greater than or equal to 1.000. (Additional\n        information following the numeric version number is acceptable.)\n        The \"Version \" prefix is a recommendation given by the OpenType spec.\n    ", "result": "PASS", "severity": null}, {"description": "Font has old ttfautohint applied?", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Font File Checks>", "<FontBakeryCheck:googlefonts/old_ttfautohint>", [["font", 0]]], "logs": [{"message": {"code": "version-not-detected", "message": "Could not detect which version of ttfautohint was used in this font. It is typically specified as a comment in the font version entries of the 'name' table. Such font version strings are currently: ['Version 2.014']"}, "status": "INFO"}], "module": "vendorspecific.googlefonts.old_ttfautohint", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        Check if font has been hinted with an outdated version of ttfautohint.\n    ", "result": "INFO", "severity": null}, {"description": "Ensure font can render its own name.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Font File Checks>", "<FontBakeryCheck:googlefonts/render_own_name>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.render_own_name", "proposal": ["https://github.com/fonttools/fontbakery/issues/3159"], "rationale": "\n        A base expectation is that a font family's regular/default (400 roman) style\n        can render its 'menu name' (nameID 1) in itself.\n    ", "result": "PASS", "severity": null}, {"description": "Check axis ordering on the STAT table.", "documentation": null, "experimental": false, "key": ["<Section: Font File Checks>", "<FontBakeryCheck:googlefonts/STAT/axis_order>", []], "logs": [{"message": {"code": "summary", "message": "None of the fonts lack a STAT table.\n\n\tAnd these are the most common STAT axis orderings:\n\t('wght-wdth', 1)"}, "status": "INFO"}], "module": "vendorspecific.googlefonts.STAT.axis_order", "proposal": ["https://github.com/fonttools/fontbakery/issues/3049"], "rationale": "\n        This is (for now) a merely informative check to detect what's the axis ordering\n        declared on the STAT table of fonts in the Google Fonts collection.\n\n        We may later update this to enforce some unified axis ordering scheme,\n        yet to be determined.\n    ", "result": "INFO", "severity": null}, {"description": "Validate STAT particle names and values match the fallback names in GFAxisRegistry.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Font File Checks>", "<FontBakeryCheck:googlefonts/STAT/axisregistry>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.STAT.axisregistry", "proposal": ["https://github.com/fonttools/fontbakery/issues/3022"], "rationale": "\n        Check that particle names and values on STAT table match the fallback names\n        in each axis entry at the Google Fonts Axis Registry, available at\n        https://github.com/google/fonts/tree/main/axisregistry\n    ", "result": "PASS", "severity": null}, {"description": "Stricter unitsPerEm criteria for Google Fonts.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Font File Checks>", "<FontBakeryCheck:googlefonts/unitsperem>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.unitsperem", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        Even though the OpenType spec allows unitsPerEm to be any value between 16\n        and 16384, the Google Fonts project aims at a narrower set of reasonable values.\n\n        Values above 4000 would likely result in unreasonable filesize increases.\n    ", "result": "PASS", "severity": null}, {"description": "OS/2.fsSelection bit 7 (USE_TYPO_METRICS) is set in all fonts.", "documentation": null, "experimental": false, "key": ["<Section: Font File Checks>", "<FontBakeryCheck:googlefonts/use_typo_metrics>", []], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.use_typo_metrics", "proposal": ["https://github.com/fonttools/fontbakery/issues/3241"], "rationale": "\n        All fonts on the Google Fonts collection should have OS/2.fsSelection bit 7\n        (USE_TYPO_METRICS) set. This requirement is part of the vertical metrics scheme\n        established as a Google Fonts policy aiming at a common ground supported by\n        all major font rendering environments.\n\n        For more details, read:\n        https://github.com/googlefonts/gf-docs/blob/main/VerticalMetrics/README.md\n\n        Below is the portion of that document that is most relevant to this check:\n\n        Use_Typo_Metrics must be enabled. This will force MS Applications to use the\n        OS/2 Typo values instead of the Win values. By doing this, we can freely set\n        the Win values to avoid clipping and control the line height with the typo\n        values. It has the added benefit of future line height compatibility. When\n        a new script is added, we simply change the Win values to the new yMin\n        and yMax, without needing to worry if the line height have changed.\n    ", "result": "PASS", "severity": 10}, {"description": "Check a static ttf can be generated from a variable font.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Font File Checks>", "<FontBakeryCheck:googlefonts/varfont/generate_static>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "fontTools.varLib.mutator generated a static font instance"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.varfont.generate_static", "proposal": ["https://github.com/fonttools/fontbakery/issues/1727"], "rationale": "\n        Google Fonts may serve static fonts which have been generated from variable\n        fonts. This check will attempt to generate a static ttf using fontTool's\n        varLib mutator.\n\n        The target font will be the mean of each axis e.g:\n\n        **VF font axes**\n\n        - min weight, max weight = 400, 800\n\n        - min width, max width = 50, 100\n\n        **Target Instance**\n\n        - weight = 600\n\n        - width = 75\n    ", "result": "PASS", "severity": null}, {"description": "Check that variable fonts have an HVAR table.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Font File Checks>", "<FontBakeryCheck:googlefonts/varfont/has_HVAR>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.varfont.has_HVAR", "proposal": ["https://github.com/fonttools/fontbakery/issues/2119"], "rationale": "\n        Not having a HVAR table can lead to costly text-layout operations on some\n        platforms, which we want to avoid.\n\n        So, all variable fonts on the Google Fonts collection should have an HVAR\n        with valid values.\n\n        More info on the HVAR table can be found at:\n        https://docs.microsoft.com/en-us/typography/opentype/spec/otvaroverview#variation-data-tables-and-miscellaneous-requirements\n    ", "result": "PASS", "severity": null}, {"description": "Checking OS/2 achVendID.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Font File Checks>", "<FontBakeryCheck:googlefonts/vendor_id>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.vendor_id", "proposal": ["https://github.com/fonttools/fontbakery/issues/3943", "https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        Microsoft keeps a list of font vendors and their respective contact info. This\n        list is updated regularly and is indexed by a 4-char \"Vendor ID\" which is\n        stored in the achVendID field of the OS/2 table.\n\n        Registering your ID is not mandatory, but it is a good practice since some\n        applications may display the type designer / type foundry contact info on some\n        dialog and also because that info will be visible on Microsoft's website:\n\n        https://docs.microsoft.com/en-us/typography/vendors/\n\n        This check verifies whether or not a given font's vendor ID is registered in\n        that list or if it has some of the default values used by the most common\n        font editors.\n\n        Each new FontBakery release includes a cached copy of that list of vendor IDs.\n        If you registered recently, you're safe to ignore warnings emitted by this\n        check, since your ID will soon be included in one of our upcoming releases.\n    ", "result": "PASS", "severity": null}, {"description": "Check font follows the Google Fonts vertical metric schema", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Font File Checks>", "<FontBakeryCheck:googlefonts/vertical_metrics>", [["font", 0]]], "logs": [{"message": {"code": "unfulfilled-conditions", "message": "Unfulfilled Conditions: not listed_on_gfonts_api"}, "status": "SKIP"}], "module": "vendorspecific.googlefonts.vertical_metrics", "proposal": ["https://github.com/fonttools/fontbakery/pull/3762", "https://github.com/fonttools/fontbakery/pull/3921"], "rationale": "\n        This check generally enforces Google Fonts\u2019 vertical metrics specifications.\n        In particular:\n        * lineGap must be 0\n        * Sum of hhea ascender + abs(descender) + linegap must be\n          between 120% and 200% of UPM\n        * Warning if sum is over 150% of UPM\n\n        The threshold levels 150% (WARN) and 200% (FAIL) are somewhat arbitrarily chosen\n        and may hint at a glaring mistake in the metrics calculations or UPM settings.\n\n        Our documentation includes further information:\n        https://github.com/googlefonts/gf-docs/tree/main/VerticalMetrics\n    ", "result": "SKIP", "severity": null}, {"description": "Check if the vertical metrics of a family are similar to the same family hosted on Google Fonts.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Font File Checks>", "<FontBakeryCheck:googlefonts/vertical_metrics_regressions>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.vertical_metrics_regressions", "proposal": ["https://github.com/fonttools/fontbakery/issues/1162"], "rationale": "\n        If the family already exists on Google Fonts, we need to ensure that the\n        checked family's vertical metrics are similar. This check will test the\n        following schema which was outlined in Font Bakery issue #1162 [1]:\n\n        - The family should visually have the same vertical metrics as the Regular\n          style hosted on Google Fonts.\n\n        - If the family on Google Fonts has differing hhea and typo metrics, the family\n          being checked should use the typo metrics for both the hhea and typo entries.\n\n        - If the family on Google Fonts has use typo metrics not enabled and the family\n          being checked has it enabled, the hhea and typo metrics should use the family\n          on Google Fonts winAscent and winDescent values.\n\n        - If the upms differ, the values must be scaled so the visual appearance is\n          the same.\n\n        [1] https://github.com/fonttools/fontbakery/issues/1162\n    ", "result": "PASS", "severity": null}, {"description": "Check the OS/2 usWeightClass is appropriate for the font's best SubFamily name.", "documentation": null, "experimental": false, "filename": "NotoSansMono[wdth,wght].ttf", "key": ["<Section: Font File Checks>", "<FontBakeryCheck:googlefonts/weightclass>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.weightclass", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        Google Fonts expects variable fonts, static ttfs and static otfs to have\n        differing OS/2 usWeightClass values.\n\n        - For Variable Fonts, Thin-Black must be 100-900\n\n        - For static ttfs, Thin-Black can be 100-900 or 250-900\n\n        - For static otfs, Thin-Black must be 250-900\n\n        If static otfs are set lower than 250, text may appear blurry in\n        legacy Windows applications.\n\n        Glyphsapp users can change the usWeightClass value of an instance by adding\n        a 'weightClass' customParameter.\n    ", "result": "PASS", "severity": null}], "key": ["Font File Checks", null, null], "result": {"INFO": 3, "PASS": 21, "SKIP": 4, "WARN": 1}}], "fontbakery_version": "0.13.1"}