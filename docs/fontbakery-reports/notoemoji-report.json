{"result": {"(not finished)": 0, "ERROR": 1, "FAIL": 15, "INFO": 6, "PASS": 154, "SKIP": 46, "WARN": 16}, "sections": [{"checks": [{"description": "Check hhea.caretSlopeRise and hhea.caretSlopeRun", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/caret_slope>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "opentype.caret_slope", "proposal": ["https://github.com/fonttools/fontbakery/issues/3670"], "rationale": "\n        Checks whether hhea.caretSlopeRise and hhea.caretSlopeRun\n        match with post.italicAngle.\n\n        For Upright fonts, you can set hhea.caretSlopeRise to 1\n        and hhea.caretSlopeRun to 0.\n\n        For Italic fonts, you can set hhea.caretSlopeRise to head.unitsPerEm\n        and calculate hhea.caretSlopeRun like this:\n        round(math.tan(\n          math.radians(-1 * font[\"post\"].italicAngle)) * font[\"head\"].unitsPerEm)\n\n        This check allows for a 0.1\u00b0 rounding difference between the Italic angle\n        as calculated by the caret slope and post.italicAngle\n    ", "result": "PASS", "severity": null}, {"description": "Is the CFF2 subr/gsubr call depth > 10?", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/cff2_call_depth>", [["font", 0]]], "logs": [{"message": {"code": "unfulfilled-conditions", "message": "Unfulfilled Conditions: is_cff2"}, "status": "SKIP"}], "module": "opentype.cff2_call_depth", "proposal": ["https://github.com/fonttools/fontbakery/pull/2425"], "rationale": "\n        Per \"The CFF2 CharString Format\", the \"Subr nesting, stack limit\" is 10.\n    ", "result": "SKIP", "severity": null}, {"description": "Does the font's CFF table top dict strings fit into the ASCII range?", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/cff_ascii_strings>", [["font", 0]]], "logs": [{"message": {"code": "unfulfilled-conditions", "message": "Unfulfilled Conditions: is_cff"}, "status": "SKIP"}], "module": "opentype.cff_ascii_strings", "proposal": ["https://github.com/fonttools/fontbakery/issues/4619"], "rationale": "\n        All CFF Table top dict string chars should fit into the ASCII range.\n    ", "result": "SKIP", "severity": null}, {"description": "Is the CFF subr/gsubr call depth > 10?", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/cff_call_depth>", [["font", 0]]], "logs": [{"message": {"code": "unfulfilled-conditions", "message": "Unfulfilled Conditions: is_cff"}, "status": "SKIP"}], "module": "opentype.cff_call_depth", "proposal": ["https://github.com/fonttools/fontbakery/pull/2425"], "rationale": "\n        Per \"The Type 2 Charstring Format, Technical Note #5177\",\n        the \"Subr nesting, stack limit\" is 10.\n    ", "result": "SKIP", "severity": null}, {"description": "Does the font use deprecated CFF operators or operations?", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/cff_deprecated_operators>", [["font", 0]]], "logs": [{"message": {"code": "unfulfilled-conditions", "message": "Unfulfilled Conditions: is_cff"}, "status": "SKIP"}], "module": "opentype.cff_deprecated_operators", "proposal": ["https://github.com/fonttools/fontbakery/pull/3033"], "rationale": "\n        The 'dotsection' operator and the use of 'endchar' to build accented characters\n        from the Adobe Standard Encoding Character Set (\"seac\") are deprecated in CFF.\n        Adobe recommends repairing any fonts that use these, especially endchar-as-seac,\n        because a rendering issue was discovered in Microsoft Word with a font that\n        makes use of this operation. The check treats that usage as a FAIL.\n        There are no known ill effects of using dotsection, so that check is a WARN.\n    ", "result": "SKIP", "severity": null}, {"description": "Check code page character ranges", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/code_pages>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "opentype.code_pages", "proposal": ["https://github.com/fonttools/fontbakery/issues/2474"], "rationale": "\n        At least some programs (such as Word and Sublime Text) under Windows 7\n        do not recognize fonts unless code page bits are properly set on the\n        ulCodePageRange1 (and/or ulCodePageRange2) fields of the OS/2 table.\n\n        More specifically, the fonts are selectable in the font menu, but whichever\n        Windows API these applications use considers them unsuitable for any\n        character set, so anything set in these fonts is rendered with Arial as a\n        fallback font.\n\n        This check currently does not identify which code pages should be set.\n        Auto-detecting coverage is not trivial since the OpenType specification\n        leaves the interpretation of whether a given code page is \"functional\"\n        or not open to the font developer to decide.\n\n        So here we simply detect as a FAIL when a given font has no code page\n        declared at all.\n    ", "result": "PASS", "severity": null}, {"description": "Check that OS/2.fsSelection bold & italic settings are unique for each NameID1", "documentation": null, "experimental": false, "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/family/bold_italic_unique_for_nameid1>", []], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "opentype.family.bold_italic_unique_for_nameid1", "proposal": ["https://github.com/fonttools/fontbakery/pull/2388"], "rationale": "\n        Per the OpenType spec: name ID 1 'is used in combination with Font Subfamily\n        name (name ID 2), and should be shared among at most four fonts that differ\n        only in weight or style.\n\n        This four-way distinction should also be reflected in the OS/2.fsSelection\n        field, using bits 0 and 5.\n    ", "result": "PASS", "severity": null}, {"description": "Verify that family names in the name table are consistent across all fonts in the family. Checks Typographic Family name (nameID 16) if present, otherwise uses Font Family name (nameID 1)", "documentation": null, "experimental": false, "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/family/consistent_family_name>", []], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "opentype.family.consistent_family_name", "proposal": ["https://github.com/fonttools/fontbakery/issues/4112"], "rationale": "\n        Per the OpenType spec:\n\n            * \"...many existing applications that use this pair of names assume that a\n              Font Family name is shared by at most four fonts that form a font\n              style-linking group\"\n\n            * \"For extended typographic families that includes fonts other than the\n              four basic styles(regular, italic, bold, bold italic), it is strongly\n              recommended that name IDs 16 and 17 be used in fonts to create an\n              extended, typographic grouping.\"\n\n            * \"If name ID 16 is absent, then name ID 1 is considered to be the\n              typographic family name.\"\n\n        https://learn.microsoft.com/en-us/typography/opentype/spec/name\n\n        Fonts within a font family all must have consistent names\n        in the Typographic Family name (nameID 16)\n        or Font Family name (nameID 1), depending on which it uses.\n\n        Inconsistent font/typographic family names across fonts in a family\n        can result in unexpected behaviors, such as broken style linking.\n    ", "result": "PASS", "severity": null}, {"description": "Make sure all font files have the same version value.", "documentation": null, "experimental": false, "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/family/equal_font_versions>", []], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "opentype.family.equal_font_versions", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        Within a family released at the same time, all members of the family\n        should have the same version number in the head table.\n    ", "result": "PASS", "severity": null}, {"description": "Verify that each group of fonts with the same nameID 1 has maximum of 4 fonts.", "documentation": null, "experimental": false, "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/family/max_4_fonts_per_family_name>", []], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "opentype.family.max_4_fonts_per_family_name", "proposal": ["https://github.com/fonttools/fontbakery/pull/2372"], "rationale": "\n        Per the OpenType spec:\n\n        'The Font Family name [...] should be shared among at most four fonts that\n        differ only in weight or style [...]'\n    ", "result": "PASS", "severity": null}, {"description": "Font follows the family naming recommendations?", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/family_naming_recommendations>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "opentype.family_naming_recommendations", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        This check ensures that the length of various family name and style\n        name strings in the name table are within the maximum length\n        recommended by the OpenType specification.\n    ", "result": "PASS", "severity": null}, {"description": "Fonts have consistent PANOSE family type?", "documentation": null, "experimental": false, "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/family/panose_familytype>", []], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "opentype.family.panose_familytype", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        The [PANOSE value](https://monotype.github.io/panose/) in the OS/2 table is a\n        way of classifying a font based on its visual appearance and characteristics.\n\n        The first field in the PANOSE classification is the family type: 2 means Latin\n        Text, 3 means Latin Script, 4 means Latin Decorative, 5 means Latin Symbol.\n        This check ensures that within a family, all fonts have the same family type.\n    ", "result": "PASS", "severity": null}, {"description": "Fonts have consistent underline thickness?", "documentation": null, "experimental": false, "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/family/underline_thickness>", []], "logs": [{"message": {"code": null, "message": "Fonts have consistent underline thickness."}, "status": "PASS"}], "module": "opentype.family.underline_thickness", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        Dave C Lemon (Adobe Type Team) recommends setting the underline thickness to be\n        consistent across the family.\n\n        If thicknesses are not family consistent, words set on the same line which have\n        different styles look strange.\n    ", "result": "PASS", "severity": null}, {"description": "Checking font version fields (head and name table).", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/font_version>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "opentype.font_version", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n            The OpenType specification provides for two fields which contain\n            the version number of the font: fontRevision in the head table,\n            and nameID 5 in the name table. If these fields do not match,\n            different applications will report different version numbers for\n            the font.\n        ", "result": "PASS", "severity": null}, {"description": "Checking OS/2 fsSelection value.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/fsselection>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "opentype.fsselection", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829", "https://github.com/fonttools/fontbakery/pull/2382"], "rationale": "\n        The OS/2.fsSelection field is a bit field used to specify the stylistic\n        qualities of the font - in particular, it specifies to some operating\n        systems whether the font is italic (bit 0), bold (bit 5) or regular\n        (bit 6).\n\n        This check verifies that the fsSelection field is set correctly for the\n        font style. For a family of static fonts created in GlyphsApp, this is\n        set by using the style linking checkboxes in the exports settings.\n\n        Additionally, the bold and italic bits in OS/2.fsSelection must match the\n        bold and italic bits in head.macStyle per the OpenType spec.\n    ", "result": "PASS", "severity": null}, {"description": "Axes and named instances fall within correct ranges?", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/fvar/axis_ranges_correct>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "opentype.fvar.axis_ranges_correct", "proposal": ["https://github.com/fonttools/fontbakery/issues/2264", "https://github.com/fonttools/fontbakery/pull/2520", "https://github.com/fonttools/fontbakery/issues/2572"], "rationale": "\n        According to the OpenType spec's registered design-variation tags, instances in\n        a variable font should have certain prescribed values.\n        If a variable font has a 'wght' (Weight) axis, the valid coordinate range is 1-1000.\n        If a variable font has a 'wdth' (Width) axis, the valid numeric range is strictly greater than zero.\n        If a variable font has a 'slnt' (Slant) axis, then the coordinate of its 'Regular' instance is required to be 0.\n        If a variable font has a 'ital' (Slant) axis, then the coordinate of its 'Regular' instance is required to be 0.\n    ", "result": "PASS", "severity": null}, {"description": "Axes and named instances fall within correct ranges?", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/fvar/regular_coords_correct>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "opentype.fvar.regular_coords_correct", "proposal": ["https://github.com/fonttools/fontbakery/issues/1707", "https://github.com/fonttools/fontbakery/issues/2572"], "rationale": "\n        According to the Open-Type spec's registered design-variation tags,instances in a variable font should have certain prescribed values.\n        If a variable font has a 'wght' (Weight) axis, the valid coordinate range is 1-1000.\n        If a variable font has a 'wdth' (Width) axis, the valid numeric range is strictly greater than zero.\n        If a variable font has a 'slnt' (Slant) axis, then the coordinate of its 'Regular' instance is required to be 0.\n        If a variable font has a 'ital' (Slant) axis, then the coordinate of its 'Regular' instance is required to be 0.\n    ", "result": "PASS", "severity": null}, {"description": "Check mark characters are in GDEF mark glyph class.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/gdef_mark_chars>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "Font does not declare an optional \"GDEF\" table or has any GDEF glyph class definition."}, "status": "SKIP"}], "module": "opentype.gdef_mark_chars", "proposal": ["https://github.com/fonttools/fontbakery/issues/2877"], "rationale": "\n        Mark characters should be in the GDEF mark glyph class.\n    ", "result": "SKIP", "severity": null}, {"description": "Check GDEF mark glyph class doesn't have characters that are not marks.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/gdef_non_mark_chars>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "Font does not declare an optional \"GDEF\" table or has any GDEF glyph class definition."}, "status": "SKIP"}], "module": "opentype.gdef_non_mark_chars", "proposal": ["https://github.com/fonttools/fontbakery/issues/2877"], "rationale": "\n        Glyphs in the GDEF mark glyph class become non-spacing and may be repositioned\n        if they have mark anchors.\n\n        Only combining mark glyphs should be in that class. Any non-mark glyph\n        must not be in that class, in particular spacing glyphs.\n    ", "result": "SKIP", "severity": null}, {"description": "Check glyphs in mark glyph class are non-spacing.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/gdef_spacing_marks>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "Font does not declare an optional \"GDEF\" table or has any GDEF glyph class definition."}, "status": "SKIP"}], "module": "opentype.gdef_spacing_marks", "proposal": ["https://github.com/fonttools/fontbakery/issues/2877"], "rationale": "\n        Glyphs in the GDEF mark glyph class should be non-spacing.\n\n        Spacing glyphs in the GDEF mark glyph class may have incorrect anchor\n        positioning that was only intended for building composite glyphs during design.\n    ", "result": "SKIP", "severity": null}, {"description": "Check glyphs do not have duplicate components which have the same x,y coordinates.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/glyf_non_transformed_duplicate_components>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "opentype.glyf_non_transformed_duplicate_components", "proposal": ["https://github.com/fonttools/fontbakery/pull/2709"], "rationale": "\n        There have been cases in which fonts had faulty double quote marks, with each\n        of them containing two single quote marks as components with the same\n        x, y coordinates which makes them visually look like single quote marks.\n\n        This check ensures that glyphs do not contain duplicate components\n        which have the same x,y coordinates.\n    ", "result": "PASS", "severity": null}, {"description": "Is there any unused data at the end of the glyf table?", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/glyf_unused_data>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "There is no unused data at the end of the glyf table."}, "status": "PASS"}], "module": "opentype.glyf_unused_data", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        This check validates the structural integrity of the glyf table,\n        by checking that all glyphs referenced in the loca table are\n        actually present in the glyf table and that there is no unused\n        data at the end of the glyf table. A failure here indicates a\n        problem with the font compiler.\n    ", "result": "PASS", "severity": null}, {"description": "Checking post.italicAngle value.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/italic_angle>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "Value of post.italicAngle is 0.0 with style=\"Regular\"."}, "status": "PASS"}], "module": "opentype.italic_angle", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        The 'post' table italicAngle property should be a reasonable amount, likely\n        not more than 30\u00b0. Note that in the OpenType specification, the value is\n        negative for a rightward lean.\n\n        https://docs.microsoft.com/en-us/typography/opentype/spec/post\n    ", "result": "PASS", "severity": null}, {"description": "Is there a usable \"kern\" table declared in the font?", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/kern_table>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "Font does not declare an optional \"kern\" table."}, "status": "PASS"}], "module": "opentype.kern_table", "proposal": ["https://github.com/fonttools/fontbakery/issues/1675", "https://github.com/fonttools/fontbakery/issues/3148", "https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        Even though all fonts should have their kerning implemented in the GPOS table,\n        there may be kerning info at the kern table as well.\n\n        Some applications such as MS PowerPoint require kerning info on the kern table.\n        More specifically, they require a format 0 kern subtable from a kern table\n        version 0 with only glyphs defined in the cmap table, which is the only one\n        that Windows understands (and which is also the simplest and more limited\n        of all the kern subtables).\n\n        Google Fonts ingests fonts made for download and use on desktops, and does\n        all web font optimizations in the serving pipeline (using libre libraries\n        that anyone can replicate.)\n\n        Ideally, TTFs intended for desktop users (and thus the ones intended for\n        Google Fonts) should have both KERN and GPOS tables.\n\n        Given all of the above, we currently treat kerning on a v0 kern table\n        as a good-to-have (but optional) feature.\n    ", "result": "PASS", "severity": null}, {"description": "Does the font have any invalid feature tags?", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/layout_valid_feature_tags>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "opentype.layout_valid_feature_tags", "proposal": ["https://github.com/fonttools/fontbakery/issues/3355"], "rationale": "\n        Incorrect tags can be indications of typos, leftover debugging code or\n        questionable approaches, or user error in the font editor. Such typos can\n        cause features and language support to fail to work as intended.\n\n        Font vendors may use private tags to identify private features. These tags\n        must be four uppercase letters (A-Z) with no punctuation, spaces, or numbers.\n    ", "result": "PASS", "severity": 8}, {"description": "Does the font have any invalid language tags?", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/layout_valid_language_tags>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "opentype.layout_valid_language_tags", "proposal": ["https://github.com/fonttools/fontbakery/issues/3355"], "rationale": "\n        Incorrect language tags can be indications of typos, leftover debugging code\n        or questionable approaches, or user error in the font editor. Such typos can\n        cause features and language support to fail to work as intended.\n    ", "result": "PASS", "severity": 8}, {"description": "Does the font have any invalid script tags?", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/layout_valid_script_tags>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "opentype.layout_valid_script_tags", "proposal": ["https://github.com/fonttools/fontbakery/issues/3355"], "rationale": "\n        Incorrect script tags can be indications of typos, leftover debugging code\n        or questionable approaches, or user error in the font editor. Such typos can\n        cause features and language support to fail to work as intended.\n    ", "result": "PASS", "severity": 8}, {"description": "Does the number of glyphs in the loca table match the maxp table?", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/loca/maxp_num_glyphs>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "opentype.loca.maxp_num_glyphs", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        The 'maxp' table contains various statistics about the font, including the\n        number of glyphs in the font. The 'loca' table contains the offsets to the\n        locations of the glyphs in the font. The number of offsets in the 'loca' table\n        should match the number of glyphs in the 'maxp' table. A failure here indicates\n        a problem with the font compiler.\n    ", "result": "PASS", "severity": null}, {"description": "Checking head.macStyle value.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/mac_style>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "head macStyle ITALIC bit is properly set."}, "status": "PASS"}, {"message": {"code": null, "message": "head macStyle BOLD bit is properly set."}, "status": "PASS"}], "module": "opentype.mac_style", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        The values of the flags on the macStyle entry on the 'head' OpenType table\n        that describe whether a font is bold and/or italic must be coherent with the\n        actual style of the font as inferred by its filename.\n    ", "result": "PASS", "severity": null}, {"description": "MaxAdvanceWidth is consistent with values in the Hmtx and Hhea tables?", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/maxadvancewidth>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "opentype.maxadvancewidth", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        The 'hhea' table contains a field which specifies the maximum\n        advance width. This value should be consistent with the maximum\n        advance width of all glyphs specified in the 'hmtx' table.\n    ", "result": "PASS", "severity": null}, {"description": "Checking correctness of monospaced metadata.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/monospace>", [["font", 0]]], "logs": [{"message": {"code": "bad-numberOfHMetrics", "message": "The OpenType spec recommends at https://learn.microsoft.com/en-us/typography/opentype/spec/recom#hhea-table that hhea.numberOfHMetrics be set to 3 but this font has 1549 instead.\nPlease read https://github.com/fonttools/fonttools/issues/3014 to decide whether this makes sense for your font."}, "status": "WARN"}, {"message": {"code": "mono-outliers", "message": "Font is monospaced but 2 glyphs (0.11%) have a different width. You should check the widths of: ['uni0000', 'uni000D']"}, "status": "WARN"}], "module": "opentype.monospace", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        There are various metadata in the OpenType spec to specify if a font is\n        monospaced or not. If the font is not truly monospaced, then no monospaced\n        metadata should be set (as sometimes they mistakenly are...)\n\n        Requirements for monospace fonts:\n\n        * post.isFixedPitch - \"Set to 0 if the font is proportionally spaced,\n          non-zero if the font is not proportionally spaced (monospaced)\"\n          (https://www.microsoft.com/typography/otspec/post.htm)\n\n        * hhea.advanceWidthMax must be correct, meaning no glyph's width value\n          is greater. (https://www.microsoft.com/typography/otspec/hhea.htm)\n\n        * OS/2.panose.bProportion must be set to 9 (monospace) on latin text fonts.\n\n        * OS/2.panose.bSpacing must be set to 3 (monospace) on latin hand written\n          or latin symbol fonts.\n\n        * Spec says: \"The PANOSE definition contains ten digits each of which currently\n          describes up to sixteen variations. Windows uses bFamilyType, bSerifStyle\n          and bProportion in the font mapper to determine family type. It also uses\n          bProportion to determine if the font is monospaced.\"\n          (https://www.microsoft.com/typography/otspec/os2.htm#pan\n           https://monotypecom-test.monotype.de/services/pan2)\n\n        * OS/2.xAvgCharWidth must be set accurately.\n          \"OS/2.xAvgCharWidth is used when rendering monospaced fonts,\n          at least by Windows GDI\"\n          (http://typedrawers.com/discussion/comment/15397/#Comment_15397)\n\n        Also we should report an error for glyphs not of average width.\n\n\n        Please also note:\n\n        Thomas Phinney told us that a few years ago (as of December 2019), if you gave\n        a font a monospace flag in Panose, Microsoft Word would ignore the actual\n        advance widths and treat it as monospaced.\n\n        Source: https://typedrawers.com/discussion/comment/45140/#Comment_45140\n    ", "result": "WARN", "severity": null}, {"description": "Check name table for empty records.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/name/empty_records>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "opentype.name.empty_records", "proposal": ["https://github.com/fonttools/fontbakery/pull/2369"], "rationale": "\n        Check the name table for empty records,\n        as this can cause problems in Adobe apps.\n    ", "result": "PASS", "severity": null}, {"description": "Does full font name begin with the font family name?", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/name/match_familyname_fullfont>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "opentype.name.match_familyname_fullfont", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        The FULL_FONT_NAME entry in the \u2018name\u2019 table should start with the same string\n        as the Family Name (FONT_FAMILY_NAME, TYPOGRAPHIC_FAMILY_NAME or\n        WWS_FAMILY_NAME).\n\n        If the Family Name is not included as the first part of the Full Font Name, and\n        the user embeds the font in a document using a Microsoft Office app, the app\n        will fail to render the font when it opens the document again.\n\n        NOTE: Up until version 1.5, the OpenType spec included the following exception\n        in the definition of Full Font Name:\n\n            \"An exception to the [above] definition of Full font name is for Microsoft\n            platform strings for CFF OpenType fonts: in this case, the Full font name\n            string must be identical to the PostScript FontName in the CFF Name INDEX.\"\n\n        https://docs.microsoft.com/en-us/typography/opentype/otspec150/name#name-ids\n    ", "result": "PASS", "severity": null}, {"description": "Name table ID 6 (PostScript name) must be consistent across platforms.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/name/postscript_name_consistency>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "opentype.name.postscript_name_consistency", "proposal": ["https://github.com/fonttools/fontbakery/pull/2394"], "rationale": "\n        The PostScript name entries in the font's 'name' table should be\n        consistent across platforms.\n\n        This is the TTF/CFF2 equivalent of the CFF 'name/postscript_vs_cff' check.\n    ", "result": "PASS", "severity": null}, {"description": "CFF table FontName must match name table ID 6 (PostScript name).", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/name/postscript_vs_cff>", [["font", 0]]], "logs": [{"message": {"code": "unfulfilled-conditions", "message": "Unfulfilled Conditions: is_cff"}, "status": "SKIP"}], "module": "opentype.name.postscript_vs_cff", "proposal": ["https://github.com/fonttools/fontbakery/pull/2229"], "rationale": "\n        The PostScript name entries in the font's 'name' table should match\n        the FontName string in the 'CFF ' table.\n\n        The 'CFF ' table has a lot of information that is duplicated in other tables.\n        This information should be consistent across tables, because there's\n        no guarantee which table an app will get the data from.\n    ", "result": "SKIP", "severity": null}, {"description": "Check for points out of bounds.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/points_out_of_bounds>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "opentype.points_out_of_bounds", "proposal": ["https://github.com/fonttools/fontbakery/issues/735"], "rationale": "\n        The glyf table specifies a bounding box for each glyph. This check\n        ensures that all points in all glyph paths are within the bounding\n        box. Glyphs with out-of-bounds points can cause rendering issues in\n        some software, and should be corrected.\n    ", "result": "PASS", "severity": null}, {"description": "PostScript name follows OpenType specification requirements?", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/postscript_name>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "opentype.postscript_name", "proposal": ["https://github.com/miguelsousa/openbakery/issues/62"], "rationale": "\n        The PostScript name is used by some applications to identify the font.\n        It should only consist of characters from the set A-Z, a-z, 0-9, and hyphen.\n\n    ", "result": "PASS", "severity": null}, {"description": "Font has correct post table version?", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/post_table_version>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "Font has an acceptable post format 2.0 table version."}, "status": "PASS"}], "module": "opentype.post_table_version", "proposal": ["https://github.com/google/fonts/issues/215", "https://github.com/fonttools/fontbakery/issues/2638", "https://github.com/fonttools/fontbakery/issues/3635", "https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        Format 2.5 of the 'post' table was deprecated in OpenType 1.3 and\n        should not be used.\n\n        According to Thomas Phinney, the possible problem with post format 3\n        is that under the right combination of circumstances, one can generate\n        PDF from a font with a post format 3 table, and not have accurate backing\n        store for any text that has non-default glyphs for a given codepoint.\n\n        It will look fine but not be searchable. This can affect Latin text with\n        high-end typography, and some complex script writing systems, especially\n        with higher-quality fonts. Those circumstances generally involve creating\n        a PDF by first printing a PostScript stream to disk, and then creating a\n        PDF from that stream without reference to the original source document.\n        There are some workflows where this applies,but these are not common\n        use cases.\n\n        Apple recommends against use of post format version 4 as \"no longer\n        necessary and should be avoided\". Please see the Apple TrueType reference\n        documentation for additional details.\n\n        https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6post.html\n\n        Acceptable post format versions are 2 and 3 for TTF and OTF CFF2 builds,\n        and post format 3 for CFF builds.\n    ", "result": "PASS", "severity": null}, {"description": "Checking direction of slnt axis angles.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/slant_direction>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "Font has no slnt axis"}, "status": "PASS"}], "module": "opentype.slant_direction", "proposal": ["https://github.com/fonttools/fontbakery/pull/3910"], "rationale": "\n        The 'slnt' axis values are defined as negative values for a clockwise (right)\n        lean, and positive values for counter-clockwise lean. This is counter-intuitive\n        for many designers who are used to think of a positive slant as a lean to\n        the right.\n\n        This check ensures that the slant axis direction is consistent with the specs.\n\n        https://docs.microsoft.com/en-us/typography/opentype/spec/dvaraxistag_slnt\n    ", "result": "PASS", "severity": null}, {"description": "Ensure VFs have 'ital' STAT axis.", "documentation": null, "experimental": false, "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/STAT/ital_axis>", []], "logs": [{"message": {"code": null, "message": "Font {font.file} doesn't have an ital axis"}, "status": "SKIP"}], "module": "opentype.STAT.ital_axis", "proposal": ["https://github.com/fonttools/fontbakery/issues/2934", "https://github.com/fonttools/fontbakery/issues/3668", "https://github.com/fonttools/fontbakery/issues/3669"], "rationale": "\n        Check that related Upright and Italic VFs have an\n        'ital' axis in the STAT table.\n\n        Since the STAT table can be used to create new instances, it is\n        important to ensure that such an 'ital' axis be the last one\n        declared in the STAT table so that the eventual naming of new\n        instances follows the subfamily traditional scheme (RIBBI / WWS)\n        where \"Italic\" is always last.\n\n        The 'ital' axis should also be strictly boolean, only accepting\n        values of 0 (for Uprights) or 1 (for Italics). This usually works\n        as a mechanism for selecting between two linked variable font files.\n\n        Also, the axis value name for uprights must be set as elidable.\n    ", "result": "SKIP", "severity": null}, {"description": "Checking unitsPerEm value is reasonable.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/unitsperem>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "opentype.unitsperem", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        According to the OpenType spec:\n\n        The value of unitsPerEm at the head table must be a value\n        between 16 and 16384. Any value in this range is valid.\n\n        In fonts that have TrueType outlines, a power of 2 is recommended\n        as this allows performance optimizations in some rasterizers.\n\n        But 1000 is a commonly used value. And 2000 may become\n        increasingly more common on Variable Fonts.\n    ", "result": "PASS", "severity": null}, {"description": "Validates that all of the instance records in a given font have distinct data.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/varfont/distinct_instance_records>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "opentype.varfont.distinct_instance_records", "proposal": ["https://github.com/fonttools/fontbakery/issues/3706"], "rationale": "\n        According to the 'fvar' documentation in OpenType spec v1.9\n        https://docs.microsoft.com/en-us/typography/opentype/spec/fvar\n\n        All of the instance records in a font should have distinct coordinates\n        and distinct subfamilyNameID and postScriptName ID values. If two or more\n        records share the same coordinates, the same nameID values or the same\n        postScriptNameID values, then all but the first can be ignored.\n    ", "result": "PASS", "severity": null}, {"description": "Check that family axis ranges are indentical", "documentation": null, "experimental": false, "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/varfont/family_axis_ranges>", []], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "opentype.varfont.family_axis_ranges", "proposal": ["https://github.com/fonttools/fontbakery/issues/4445"], "rationale": "\n        Between members of a family (such as Roman & Italic),\n        the ranges of variable axes must be identical.\n    ", "result": "PASS", "severity": null}, {"description": "Validate foundry-defined design-variation axis tag names.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/varfont/foundry_defined_tag_name>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "opentype.varfont.foundry_defined_tag_name", "proposal": ["https://github.com/fonttools/fontbakery/issues/4043"], "rationale": "\n        According to the OpenType spec's syntactic requirements for\n        foundry-defined design-variation axis tags available at\n        https://learn.microsoft.com/en-us/typography/opentype/spec/dvaraxisreg\n\n        Foundry-defined tags must begin with an uppercase letter\n        and must use only uppercase letters or digits.\n    ", "result": "PASS", "severity": null}, {"description": "Validates that all of the instance records in a given font have the same size.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/varfont/same_size_instance_records>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "opentype.varfont.same_size_instance_records", "proposal": ["https://github.com/fonttools/fontbakery/issues/3705"], "rationale": "\n        According to the 'fvar' documentation in OpenType spec v1.9\n        https://docs.microsoft.com/en-us/typography/opentype/spec/fvar\n\n        All of the instance records in a given font must be the same size, with\n        all either including or omitting the postScriptNameID field. [...]\n        If the value is 0xFFFF, then the value is ignored, and no PostScript name\n        equivalent is provided for the instance.\n    ", "result": "PASS", "severity": null}, {"description": "All fvar axes have a correspondent Axis Record on STAT table?", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/varfont/STAT_axis_record_for_each_axis>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "STAT table has all necessary Axis Records."}, "status": "PASS"}], "module": "opentype.varfont.STAT_axis_record_for_each_axis", "proposal": ["https://github.com/fonttools/fontbakery/pull/3017"], "rationale": "\n        According to the OpenType spec, there must be an Axis Record\n        for every axis defined in the fvar table.\n\n        https://docs.microsoft.com/en-us/typography/opentype/spec/stat#axis-records\n    ", "result": "PASS", "severity": null}, {"description": "Validates subfamilyNameID and postScriptNameID for the default instance record", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/varfont/valid_default_instance_nameids>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "opentype.varfont.valid_default_instance_nameids", "proposal": ["https://github.com/fonttools/fontbakery/issues/3708"], "rationale": "\n        According to the 'fvar' documentation in OpenType spec v1.9.1\n        https://docs.microsoft.com/en-us/typography/opentype/spec/fvar\n\n        The default instance of a font is that instance for which the coordinate\n        value of each axis is the defaultValue specified in the corresponding\n        variation axis record. An instance record is not required for the default\n        instance, though an instance record can be provided. When enumerating named\n        instances, the default instance should be enumerated even if there is no\n        corresponding instance record. If an instance record is included for the\n        default instance (that is, an instance record has coordinates set to default\n        values), then the nameID value should be set to either 2 or 17 or to a\n        name ID with the same value as name ID 2 or 17. Also, if a postScriptNameID is\n        included in instance records, and the postScriptNameID value should be set\n        to 6 or to a name ID with the same value as name ID 6.\n    ", "result": "PASS", "severity": null}, {"description": "Validates that all of the name IDs in an instance record are within the correct range", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/varfont/valid_nameids>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "opentype.varfont.valid_nameids", "proposal": ["https://github.com/fonttools/fontbakery/issues/3702", "https://github.com/fonttools/fontbakery/issues/3703"], "rationale": "\n        According to the 'fvar' documentation in OpenType spec v1.9\n        https://docs.microsoft.com/en-us/typography/opentype/spec/fvar\n\n        The axisNameID field provides a name ID that can be used to obtain strings\n        from the 'name' table that can be used to refer to the axis in application\n        user interfaces. The name ID must be greater than 255 and less than 32768.\n\n        The postScriptNameID field provides a name ID that can be used to obtain\n        strings from the 'name' table that can be treated as equivalent to name\n        ID 6 (PostScript name) strings for the given instance. Values of 6 and\n        \"undefined\" can be used; otherwise, values must be greater than 255 and\n        less than 32768.\n\n        The subfamilyNameID field provides a name ID that can be used to obtain\n        strings from the 'name' table that can be treated as equivalent to name\n        ID 17 (typographic subfamily) strings for the given instance. Values of\n        2 or 17 can be used; otherwise, values must be greater than 255 and less\n        than 32768.\n    ", "result": "PASS", "severity": null}, {"description": "Checking OS/2 achVendID against configuration.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/vendor_id>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "Add the `vendor_id` key to a `fontbakery.yaml` file on your font project directory to enable this check.\nYou'll also need to use the `--configuration` flag when invoking fontbakery."}, "status": "SKIP"}], "module": "opentype.vendor_id", "proposal": ["https://github.com/fonttools/fontbakery/pull/3941"], "rationale": "\n        When a font project's Vendor ID is specified explicitly on FontBakery's\n        configuration file, all binaries must have a matching vendor identifier\n        value in the OS/2 table.\n    ", "result": "SKIP", "severity": null}, {"description": "Checking if OS/2 usWeightClass matches fvar.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/weight_class_fvar>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "opentype.weight_class_fvar", "proposal": ["https://github.com/googlefonts/gftools/issues/477"], "rationale": "\n        According to Microsoft's OT Spec the OS/2 usWeightClass\n        should match the fvar default value.\n    ", "result": "PASS", "severity": null}, {"description": "Check if OS/2 xAvgCharWidth is correct.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: OpenType Specification Checks>", "<FontBakeryCheck:opentype/xavgcharwidth>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "OS/2 xAvgCharWidth value is correct."}, "status": "PASS"}], "module": "opentype.xavgcharwidth", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        The OS/2.xAvgCharWidth field is used to calculate the width of a string of\n        characters. It is the average width of all non-zero width glyphs in the font.\n\n        This check ensures that the value is correct. A failure here may indicate\n        a bug in the font compiler, rather than something that the designer can\n        do anything about.\n    ", "result": "PASS", "severity": null}], "key": ["OpenType Specification Checks", null, null], "result": {"PASS": 40, "SKIP": 10, "WARN": 1}}, {"checks": [{"description": "List all superfamily filepaths", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Superfamily Checks>", "<FontBakeryCheck:superfamily/list>", [["font", 0]]], "logs": [{"message": {"code": "family-path", "message": "/Users/simon/others-repos/fonts//ofl/notoemoji"}, "status": "INFO"}], "module": "superfamily.list", "proposal": ["https://github.com/fonttools/fontbakery/issues/1487"], "rationale": "\n        This is a merely informative check that lists all sibling families\n        detected by fontbakery.\n\n        Only the fontfiles in these directories will be considered in\n        superfamily-level checks.\n    ", "result": "INFO", "severity": null}, {"description": "Each font in set of sibling families must have the same set of vertical metrics values.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Superfamily Checks>", "<FontBakeryCheck:superfamily/vertical_metrics>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "Sibling families were not detected."}, "status": "SKIP"}], "module": "superfamily.vertical_metrics", "proposal": ["https://github.com/fonttools/fontbakery/issues/1487"], "rationale": "\n        We may want all fonts within a super-family (all sibling families) to have\n        the same vertical metrics so their line spacing is consistent\n        across the super-family.\n\n        This is an experimental extended version of the\n        `family/vertical_metrics` check and for now it will only result in WARNs.\n    ", "result": "SKIP", "severity": null}], "key": ["Superfamily Checks", null, null], "result": {"INFO": 1, "SKIP": 1}}, {"checks": [{"description": "Check accent of Lcaron, dcaron, lcaron, tcaron", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:alt_caron>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "Looks good!"}, "status": "PASS"}], "module": "alt_caron", "proposal": ["https://github.com/fonttools/fontbakery/issues/3308"], "rationale": "\n        Lcaron, dcaron, lcaron, tcaron should NOT be composed with quoteright\n        or quotesingle or comma or caron(comb). It should be composed with a\n        distinctive glyph which doesn't look like an apostrophe.\n\n        Source:\n        https://ilovetypography.com/2009/01/24/on-diacritics/\n        http://diacritics.typo.cz/index.php?id=5\n        https://www.typotheque.com/articles/lcaron\n    ", "result": "PASS", "severity": null}, {"description": "Check that glyph for U+0675 ARABIC LETTER HIGH HAMZA is not a mark.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:arabic_high_hamza>", [["font", 0]]], "logs": [{"message": {"code": "glyphs-missing", "message": "This check will only run on fonts that have both glyphs U+0621 and U+0675"}, "status": "SKIP"}], "module": "arabic_high_hamza", "proposal": ["https://github.com/googlefonts/fontbakery/issues/4290"], "rationale": "\n        Many fonts incorrectly treat ARABIC LETTER HIGH HAMZA (U+0675) as a variant of\n        ARABIC HAMZA ABOVE (U+0654) and make it a combining mark of the same size.\n\n        But U+0675 is a base letter and should be a variant of ARABIC LETTER HAMZA\n        (U+0621) but raised slightly above baseline.\n\n        Not doing so effectively makes the font useless for Jawi and\n        possibly Kazakh as well.\n    ", "result": "SKIP", "severity": 4}, {"description": "Check that Arabic spacing symbols U+FBB2\u2013FBC1 aren't classified as marks.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:arabic_spacing_symbols>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "arabic_spacing_symbols", "proposal": ["https://github.com/googlefonts/fontbakery/issues/4295"], "rationale": "\n        Unicode has a few spacing symbols representing Arabic dots and other marks,\n        but they are purposefully not classified as marks.\n\n        Many fonts mistakenly classify them as marks, making them unsuitable\n        for their original purpose as stand-alone symbols to used in pedagogical\n        contexts discussing Arabic consonantal marks.\n    ", "result": "PASS", "severity": 4}, {"description": "Check base characters have non-zero advance width.", "documentation": null, "experimental": "Since 2024/12/28", "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:base_has_width>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "base_has_width", "proposal": ["https://github.com/fonttools/fontbakery/issues/4906"], "rationale": "\n        Base characters should have non-zero advance width.\n    ", "result": "PASS", "severity": null}, {"description": "Check if uppercase glyphs are vertically centered.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:caps_vertically_centered>", [["font", 0]]], "logs": [{"message": {"code": "lacks-ascii", "message": "The implementation of this check relies on a few samples of uppercase latin characters that are not available in this font."}, "status": "SKIP"}], "module": "caps_vertically_centered", "proposal": ["https://github.com/fonttools/fontbakery/issues/4139"], "rationale": "\n        This check suggests one possible approach to designing vertical metrics,\n        but can be ingnored if you follow a different approach.\n        In order to center text in buttons, lists, and grid systems\n        with minimal additional CSS work, the uppercase glyphs should be\n        vertically centered in the em box.\n        This check mainly applies to Latin, Greek, Cyrillic, and other similar scripts.\n        For non-latin scripts like Arabic, this check might not be applicable.\n        There is a detailed description of this subject at:\n        https://x.com/romanshamin_en/status/1562801657691672576\n    ", "result": "SKIP", "severity": null}, {"description": "Ensure the font supports case swapping for all its glyphs.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:case_mapping>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "case_mapping", "proposal": ["https://github.com/googlefonts/fontbakery/issues/3230"], "rationale": "\n        Ensure that no glyph lacks its corresponding upper or lower counterpart\n        (but only when unicode supports case-mapping).\n    ", "result": "PASS", "severity": 10}, {"description": "Does the font contain chws and vchw features?", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:cjk_chws_feature>", [["font", 0]]], "logs": [{"message": {"code": "unfulfilled-conditions", "message": "Unfulfilled Conditions: is_cjk_font"}, "status": "SKIP"}], "module": "cjk_chws_feature", "proposal": ["https://github.com/fonttools/fontbakery/issues/3363"], "rationale": "\n        The W3C recommends the addition of chws and vchw features to CJK fonts\n        to enhance the spacing of glyphs in environments which do not fully support\n        JLREQ layout rules.\n\n        The chws_tool utility (https://github.com/googlefonts/chws_tool) can be used\n        to add these features automatically.\n    ", "result": "SKIP", "severity": null}, {"description": "Any CJK font should contain at least a minimal set of 150 CJK characters.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:cjk_not_enough_glyphs>", [["font", 0]]], "logs": [{"message": {"code": "cjk-not-enough-glyphs", "message": "There are only 2 CJK glyphs when there needs to be at least 150 in order to support the smallest CJK writing system, Kana.\nThe following CJK glyphs were found:\n['japaneseCongratulationsButton', 'japaneseSecretButton']\nPlease check that these glyphs have the correct unicodes."}, "status": "WARN"}], "module": "cjk_not_enough_glyphs", "proposal": ["https://github.com/fonttools/fontbakery/pull/3214"], "rationale": "\n        Kana has 150 characters and it's the smallest CJK writing system.\n\n        If a font contains less CJK glyphs than this writing system, we inform the\n        user that some glyphs may be encoded incorrectly.\n    ", "result": "WARN", "severity": null}, {"description": "Color layers should have a minimum brightness.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:color_cpal_brightness>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "color_cpal_brightness", "proposal": ["https://github.com/fonttools/fontbakery/pull/3908"], "rationale": "\n        Layers of a COLRv0 font should not be too dark or too bright. When layer colors\n        are set explicitly, they can't be changed and they may turn out illegible\n        against dark or bright backgrounds.\n\n        While traditional color-less fonts can be colored in design apps or CSS, a\n        black color definition in a COLRv0 font actually means that that layer will be\n        rendered in black regardless of the background color. This leads to text\n        becoming invisible against a dark background, for instance when using a dark\n        theme in a web browser or operating system.\n\n        This check ensures that layer colors are at least 10% bright and at most 90%\n        bright, when not already set to the current color (0xFFFF).\n    ", "result": "PASS", "severity": null}, {"description": "Check if each glyph has the recommended amount of contours.", "documentation": "This check is useful to assure glyphs aren't incorrectly constructed.\n\nThe desired_glyph_data module contains the 'recommended' countour count\nfor encoded glyphs. The contour counts are derived from fonts which were\nchosen for their quality and unique design decisions for particular glyphs.\n\nIn the future, additional glyph data can be included. A good addition would\nbe the 'recommended' anchor counts for each glyph.", "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:contour_count>", [["font", 0]]], "logs": [{"message": {"code": "unfulfilled-conditions", "message": "Unfulfilled Conditions: not is_variable_font"}, "status": "SKIP"}], "module": "contour_count", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ", "result": "SKIP", "severity": null}, {"description": "Does font file include unacceptable control character glyphs?", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:control_chars>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "control_chars", "proposal": ["https://github.com/fonttools/fontbakery/pull/2430"], "rationale": "\n        Use of some unacceptable control characters in the U+0000 - U+001F range can\n        lead to rendering issues on some platforms.\n\n        Acceptable control characters are defined as .null (U+0000) and\n        CR (U+000D) for this check.\n    ", "result": "PASS", "severity": null}, {"description": "Put an empty glyph on GID 1 right after the .notdef glyph for COLRv0 fonts.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:empty_glyph_on_gid1_for_colrv0>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "empty_glyph_on_gid1_for_colrv0", "proposal": ["https://github.com/googlefonts/gftools/issues/609", "https://github.com/fonttools/fontbakery/pull/3905"], "rationale": "\n        A rendering bug in Windows 10 paints whichever glyph is on GID 1 on top of\n        some glyphs, colored or not. This only occurs for COLR version 0 fonts.\n\n        Having a glyph with no contours on GID 1 is a practical workaround for that.\n\n        See https://github.com/googlefonts/gftools/issues/609\n    ", "result": "PASS", "severity": null}, {"description": "Checking all files are in the same directory.", "documentation": null, "experimental": false, "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:family/single_directory>", []], "logs": [{"message": {"code": null, "message": "All files are in the same directory."}, "status": "PASS"}], "module": "family.single_directory", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        If the set of font files passed in the command line is not all in the\n        same directory, then we warn the user since the tool will interpret the\n        set of files as belonging to a single family (and it is unlikely that\n        the user would store the files from a single family spreaded\n        in several separate directories).\n    ", "result": "PASS", "severity": null}, {"description": "Each font in a family must have the same set of vertical metrics values.", "documentation": null, "experimental": false, "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:family/vertical_metrics>", []], "logs": [{"message": {"code": null, "message": "Vertical metrics are the same across the family."}, "status": "PASS"}], "module": "family.vertical_metrics", "proposal": ["https://github.com/fonttools/fontbakery/issues/1487"], "rationale": "\n        We want all fonts within a family to have the same vertical metrics so\n        their line spacing is consistent across the family.\n    ", "result": "PASS", "severity": null}, {"description": "Checking OS/2 usWinAscent & usWinDescent.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:family/win_ascent_and_descent>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "OS/2 usWinAscent & usWinDescent values look good!"}, "status": "PASS"}], "module": "family.win_ascent_and_descent", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        A font's winAscent and winDescent values should be greater than or equal to\n        the head table's yMax, abs(yMin) values. If they are less than these values,\n        clipping can occur on Windows platforms\n        (https://github.com/RedHatBrand/Overpass/issues/33).\n\n        If the font includes tall/deep writing systems such as Arabic or Devanagari,\n        the winAscent and winDescent can be greater than the yMax and absolute yMin\n        values to accommodate vowel marks.\n\n        When the 'win' Metrics are significantly greater than the UPM, the linespacing\n        can appear too loose. To counteract this, enabling the OS/2 fsSelection\n        bit 7 (Use_Typo_Metrics), will force Windows to use the OS/2 'typo' values\n        instead. This means the font developer can control the linespacing with\n        the 'typo' values, whilst avoiding clipping by setting the 'win' values to\n        values greater than the yMax and absolute yMin.\n    ", "result": "PASS", "severity": null}, {"description": "All name entries referenced by fvar instances exist on the name table?", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:fvar_name_entries>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "fvar_name_entries", "proposal": ["https://github.com/fonttools/fontbakery/issues/2069"], "rationale": "\n        The purpose of this check is to make sure that all name entries referenced\n        by variable font instances do exist in the name table.\n    ", "result": "PASS", "severity": null}, {"description": "Ensure files are not too large.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:file_size>", [["font", 0]]], "logs": [{"message": {"code": "large-font", "message": "Font file is 1.9Mb; ideally it should be less than 1.0Mb"}, "status": "WARN"}], "module": "file_size", "proposal": ["https://github.com/fonttools/fontbakery/issues/3320"], "rationale": "\n        Serving extremely large font files causes usability issues.\n        This check ensures that file sizes are reasonable.\n    ", "result": "WARN", "severity": 10}, {"description": "Do we have the latest version of FontBakery installed?", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:fontbakery_version>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "FontBakery is up-to-date."}, "status": "PASS"}], "module": "fontbakery_version", "proposal": ["https://github.com/fonttools/fontbakery/issues/2093"], "rationale": "\n        Running old versions of FontBakery can lead to a poor report which may\n        include false WARNs and FAILs due do bugs, as well as outdated\n        quality assurance criteria.\n\n        Older versions will also not report problems that are detected by new checks\n        added to the tool in more recent updates.\n    ", "result": "PASS", "severity": null}, {"description": "Familyname must be unique according to namecheck.fontdata.com", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:fontdata_namecheck>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "Font familyname seems to be unique."}, "status": "PASS"}], "module": "fontdata_namecheck", "proposal": ["https://github.com/fonttools/fontbakery/issues/494"], "rationale": "\n        We need to check names are not already used, and today the best place to check\n        that is http://namecheck.fontdata.com\n    ", "result": "PASS", "severity": null}, {"description": "Ensure that the font can be rasterized by FreeType.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:freetype_rasterizer>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "Font can be rasterized by FreeType."}, "status": "PASS"}], "module": "freetype_rasterizer", "proposal": ["https://github.com/fonttools/fontbakery/issues/3642"], "rationale": "\n        Malformed fonts can cause FreeType to crash.\n    ", "result": "PASS", "severity": 10}, {"description": "Ensure no GPOS7 lookups are present.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:gpos7>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "Font has no GPOS7 lookups"}, "status": "PASS"}], "module": "gpos7", "proposal": ["https://github.com/fonttools/fontbakery/issues/3643"], "rationale": "\n        Versions of fonttools >=4.14.0 (19 August 2020) perform an optimisation on\n        chained contextual lookups, expressing GSUB6 as GSUB5 and GPOS8 and GPOS7\n        where possible (when there are no suffixes/prefixes for all rules in\n        the lookup).\n\n        However, makeotf has never generated these lookup types and they are rare\n        in practice. Perhaps because of this, Mac's CoreText shaper does not correctly\n        interpret GPOS7, meaning that these lookups will be ignored by the shaper,\n        and fonts containing these lookups will have unintended positioning errors.\n\n        To fix this warning, rebuild the font with a recent version of fonttools.\n    ", "result": "PASS", "severity": 9}, {"description": "Does GPOS table have kerning information? This check skips monospaced fonts as defined by post.isFixedPitch value", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:gpos_kerning_info>", [["font", 0]]], "logs": [{"message": {"code": "lacks-kern-info", "message": "GPOS table lacks kerning information."}, "status": "WARN"}], "module": "gpos_kerning_info", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        Well-designed fonts use kerning to improve the spacing between\n        specific pairs of glyphs. This check ensures that the font has\n        kerning information in the GPOS table. It can be ignored if the\n        design or writing system does not require kerning.\n    ", "result": "WARN", "severity": null}, {"description": "Show hinting filesize impact.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:hinting_impact>", [["font", 0]]], "logs": [{"message": {"code": "size-impact", "message": "Hinting filesize impact:\n\n |               | /Users/simon/others-repos/fonts//ofl/notoemoji/NotoEmoji[wght].ttf     |\n |:------------- | ---------------:|\n | Dehinted Size | 1.9Mb |\n | Hinted Size   | 1.9Mb   |\n | Increase      | 0 bytes      |\n | Change        | 0.0 %  |\n"}, "status": "INFO"}], "module": "hinting_impact", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        This check is merely informative, displaying an useful comparison of filesizes\n        of hinted versus unhinted font files.\n    ", "result": "INFO", "severity": null}, {"description": "PPEM must be an integer on hinted fonts.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:integer_ppem_if_hinted>", [["font", 0]]], "logs": [{"message": {"code": "unfulfilled-conditions", "message": "Unfulfilled Conditions: is_hinted"}, "status": "SKIP"}], "module": "integer_ppem_if_hinted", "proposal": ["https://github.com/fonttools/fontbakery/issues/2338"], "rationale": "\n        Hinted fonts must have head table flag bit 3 set.\n\n        Per https://docs.microsoft.com/en-us/typography/opentype/spec/head,\n        bit 3 of Head::flags decides whether PPEM should be rounded. This bit should\n        always be set for hinted fonts.\n\n        Note:\n        Bit 3 = Force ppem to integer values for all internal scaler math;\n                May use fractional ppem sizes if this bit is clear;\n    ", "result": "SKIP", "severity": null}, {"description": "Detect any interpolation issues in the font.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:interpolation_issues>", [["font", 0]]], "logs": [{"message": {"code": "interpolation-issues", "message": "Interpolation issues were found in the font:\n\n\t- Contour 4 start point differs in glyph 'openMailboxWithRaisedFlag' between location wght=400 and location wght=300\n\n\t- Contour 4 start point differs in glyph 'openMailboxWithRaisedFlag' between location wght=300 and location wght=700\n\n\t- Contour 4 start point differs in glyph 'emojiComponentRedHair' between location wght=400 and location wght=300\n\n\t- Contour 4 in glyph 'emojiComponentRedHair': becomes underweight between wght=400 and wght=300.\n\n\t- Contour 3 start point differs in glyph 'u1F493' between location wght=300 and location wght=700\n\n\t- Contour 3 in glyph 'u1F493': becomes underweight between wght=300 and wght=700.\n\n\t- Contour 3 point 16 in glyph 'u1F493' has a kink between location wght=300 and location wght=700\n\n\t- Contour 7 start point differs in glyph 'coin' between location wght=300 and location wght=700"}, "status": "WARN"}], "module": "interpolation_issues", "proposal": ["https://github.com/fonttools/fontbakery/issues/3930"], "rationale": "\n        When creating a variable font, the designer must make sure that corresponding\n        paths have the same start points across masters, as well as that corresponding\n        component shapes are placed in the same order within a glyph across masters.\n        If this is not done, the glyph will not interpolate correctly.\n\n        Here we check for the presence of potential interpolation errors using the\n        fontTools.varLib.interpolatable module.\n    ", "result": "WARN", "severity": 4}, {"description": "Check that legacy accents aren't used in composite glyphs.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:legacy_accents>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "Looks good!"}, "status": "PASS"}], "module": "legacy_accents", "proposal": ["https://github.com/googlefonts/fontbakery/issues/4310"], "rationale": "\n        Legacy accents should not have anchors and should have positive width.\n        They are often used independently of a letter, either as a placeholder\n        for an expected combined mark+letter combination in MacOS, or separately.\n        For instance, U+00B4 (ACUTE ACCENT) is often mistakenly used as an apostrophe,\n        U+0060 (GRAVE ACCENT) is used in Markdown to notify code blocks,\n        and ^ is used as an exponential operator in maths.\n    ", "result": "PASS", "severity": null}, {"description": "Are there caret positions declared for every ligature?", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:ligature_carets>", [["font", 0]]], "logs": [{"message": {"code": "no-ligatures", "message": "No ligature glyphs found."}, "status": "SKIP"}], "module": "ligature_carets", "proposal": ["https://github.com/fonttools/fontbakery/issues/1225"], "rationale": "\n        All ligatures in a font must have corresponding caret (text cursor) positions\n        defined in the GDEF table, otherwhise, users may experience issues with\n        caret rendering.\n\n        If using GlyphsApp or UFOs, ligature carets can be defined as anchors with\n        names starting with `caret_`. These can be compiled with fontmake as of\n        version v2.4.0.\n    ", "result": "SKIP", "severity": null}, {"description": "Checking Vertical Metric Linegaps.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:linegaps>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "OS/2 sTypoLineGap and hhea lineGap are both 0."}, "status": "PASS"}], "module": "linegaps", "proposal": ["https://github.com/fonttools/fontbakery/issues/4133", "https://googlefonts.github.io/gf-guide/metrics.html"], "rationale": "\n        The LineGap value is a space added to the line height created by the union\n        of the (typo/hhea)Ascender and (typo/hhea)Descender. It is handled differently\n        according to the environment.\n\n        This leading value will be added above the text line in most desktop apps.\n        It will be shared above and under in web browsers, and ignored in Windows\n        if Use_Typo_Metrics is disabled.\n\n        For better linespacing consistency across platforms,\n        (typo/hhea)LineGap values must be 0.\n    ", "result": "PASS", "severity": null}, {"description": "Ensure variable fonts include an avar table.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:mandatory_avar_table>", [["font", 0]]], "logs": [{"message": {"code": "missing-avar", "message": "This variable font does not have an avar table. Most variable fonts should include an avar table to correctly define axes progression rates."}, "status": "WARN"}], "module": "mandatory_avar_table", "proposal": ["https://github.com/fonttools/fontbakery/issues/3100"], "rationale": "\n        Most variable fonts should include an avar table to correctly define\n        axes progression rates.\n\n        For example, a weight axis from 0% to 100% doesn't map directly to 100 to 1000,\n        because a 10% progression from 0% may be too much to define the 200,\n        while 90% may be too little to define the 900.\n\n        If the progression rates of axes is linear, this check can be ignored.\n        Fontmake will also skip adding an avar table if the progression rates\n        are linear. However, it is still recommended that designers visually proof\n        each instance is at the expected weight, width etc.\n    ", "result": "WARN", "severity": null}, {"description": "Font contains '.notdef' as its first glyph?", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:mandatory_glyphs>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "mandatory_glyphs", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        The OpenType specification v1.8.2 recommends that the first glyph is the\n        '.notdef' glyph without a codepoint assigned and with a drawing:\n\n        The .notdef glyph is very important for providing the user feedback\n        that a glyph is not found in the font. This glyph should not be left\n        without an outline as the user will only see what looks like a space\n        if a glyph is missing and not be aware of the active font\u2019s limitation.\n\n        https://docs.microsoft.com/en-us/typography/opentype/spec/recom#glyph-0-the-notdef-glyph\n\n        Pre-v1.8, it was recommended that fonts should also contain 'space', 'CR'\n        and '.null' glyphs. This might have been relevant for MacOS 9 applications.\n    ", "result": "PASS", "severity": null}, {"description": "Check math signs have the same width.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:math_signs_width>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "Looks good."}, "status": "PASS"}], "module": "math_signs_width", "proposal": ["https://github.com/fonttools/fontbakery/issues/3832"], "rationale": "\n        It is a common practice to have math signs sharing the same width\n        (preferably the same width as tabular figures accross the entire font family).\n\n        This probably comes from the will to avoid additional tabular math signs\n        knowing that their design can easily share the same width.\n    ", "result": "PASS", "severity": null}, {"description": "Ensure small caps glyphs are available.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:missing_small_caps_glyphs>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "missing_small_caps_glyphs", "proposal": ["https://github.com/fonttools/fontbakery/issues/3154"], "rationale": "\n        Ensure small caps glyphs are available if\n        a font declares smcp or c2sc OT features.\n    ", "result": "PASS", "severity": null}, {"description": "Are there disallowed characters in the NAME table?", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:name/char_restrictions>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "name.char_restrictions", "proposal": ["https://github.com/fonttools/fontbakery/issues/1718", "https://github.com/fonttools/fontbakery/issues/1663", "https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        The OpenType spec requires a subset of ASCII\n        (any printable characters except \"[]{}()<>/%\") for\n        POSTSCRIPT_NAME (nameID 6),\n        POSTSCRIPT_CID_NAME (nameID 20), and\n        an even smaller subset (\"a-zA-Z0-9\") for\n        VARIATIONS_POSTSCRIPT_NAME_PREFIX (nameID 25).\n    ", "result": "PASS", "severity": null}, {"description": "Combined length of family and style must not exceed 32 characters.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:name/family_and_style_max_length>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "name.family_and_style_max_length", "proposal": ["https://github.com/fonttools/fontbakery/issues/1488", "https://github.com/fonttools/fontbakery/issues/2179"], "rationale": "\n        This check ensures that the length of name table entries is not\n        too long, as this causes problems in some environments.\n    ", "result": "PASS", "severity": null}, {"description": "Name table records must not have trailing spaces.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:name/trailing_spaces>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "No trailing spaces on name table entries."}, "status": "PASS"}], "module": "name.trailing_spaces", "proposal": ["https://github.com/fonttools/fontbakery/issues/2417"], "rationale": "\n        This check ensures that no entries in the name table end in\n        spaces; trailing spaces, particularly in font names, can be\n        confusing to users. In most cases this can be fixed by\n        removing trailing spaces from the metadata fields in the font\n        editor.\n    ", "result": "PASS", "severity": null}, {"description": "Description strings in the name table must not contain copyright info.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:name/no_copyright_on_description>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "name.no_copyright_on_description", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        The name table in a font file contains strings about the font;\n        there are entries for a copyright field and a description. If the\n        copyright entry is being used correctly, then there should not\n        be any copyright information in the description entry.\n    ", "result": "PASS", "severity": null}, {"description": "Check name table IDs 1, 2, 16, 17 to conform to Italic style.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:name/italic_names>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "Font is not Italic."}, "status": "SKIP"}], "module": "name.italic_names", "proposal": ["https://github.com/fonttools/fontbakery/issues/3666"], "rationale": "\n        This check ensures that several entries in the name table\n        conform to the font's Upright or Italic style,\n        namely IDs 1 & 2 as well as 16 & 17 if they're present.\n    ", "result": "SKIP", "severity": null}, {"description": "Ensure glyphs do not have components which are themselves components.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:nested_components>", [["font", 0]]], "logs": [{"message": {"code": "found-nested-components", "message": "The following glyphs have components which themselves are component glyphs:\n\t* u1F478"}, "status": "FAIL"}], "module": "nested_components", "proposal": ["https://github.com/fonttools/fontbakery/issues/2961"], "rationale": "\n        There have been bugs rendering variable fonts with nested components.\n        Additionally, some static fonts with nested components have been reported\n        to have rendering and printing issues.\n\n        For more info, see:\n        * https://github.com/fonttools/fontbakery/issues/2961\n        * https://github.com/arrowtype/recursive/issues/412\n    ", "result": "FAIL", "severity": null}, {"description": "Checking OS/2 Metrics match hhea Metrics.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:os2_metrics_match_hhea>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "OS/2.sTypoAscender/Descender values match hhea.ascent/descent."}, "status": "PASS"}], "module": "os2_metrics_match_hhea", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        OS/2 and hhea vertical metric values should match. This will produce the\n        same linespacing on Mac, GNU+Linux and Windows.\n\n        - Mac OS X uses the hhea values.\n        - Windows uses OS/2 or Win, depending on the OS or fsSelection bit value.\n\n        When OS/2 and hhea vertical metrics match, the same linespacing results on\n        macOS, GNU+Linux and Windows. Note that fixing this issue in a previously\n        released font may cause reflow in user documents and unhappy users.\n    ", "result": "PASS", "severity": null}, {"description": "Checking with ots-sanitize.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:ots>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "ots", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n       The OpenType Sanitizer (OTS) is a tool that checks that the font is\n       structually well-formed and passes various sanity checks. It is used by\n       many web browsers to check web fonts before using them; fonts which fail\n       such checks are blocked by browsers.\n\n       This check runs OTS on the font and reports any errors or warnings that\n       it finds.\n       ", "result": "PASS", "severity": null}, {"description": "Check there are no overlapping path segments", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:overlapping_path_segments>", [["font", 0]]], "logs": [{"message": {"code": "overlapping-path-segments", "message": "The following glyphs have overlapping path segments:\n\n\t* u1F391 (U+1F391): L<<1181.0,17.0>--<2191.0,17.0>> has the same coordinates as a previous segment.\n\n\t* u1F391 (U+1F391): L<<2191.0,17.0>--<2191.0,244.0>> has the same coordinates as a previous segment.\n\n\t* u1F391 (U+1F391): L<<2191.0,244.0>--<2169.0,244.0>> has the same coordinates as a previous segment.\n\n\t* u1F391 (U+1F391): B<<2169.0,244.0>-<2171.0,258.0>-<2172.0,266.5>> has the same coordinates as a previous segment.\n\n\t* u1F391 (U+1F391): B<<2172.0,266.5>-<2173.0,275.0>-<2173.0,283.0>> has the same coordinates as a previous segment.\n\n\t* u1F391 (U+1F391): B<<2173.0,283.0>-<2173.0,350.0>-<2130.5,400.0>> has the same coordinates as a previous segment.\n\n\t* u1F391 (U+1F391): B<<2130.5,400.0>-<2088.0,450.0>-<2021.0,463.0>> has the same coordinates as a previous segment.\n\n\t* u1F391 (U+1F391): L<<2021.0,463.0>--<2021.0,472.0>> has the same coordinates as a previous segment.\n\n\t* openHands (U+1F450): L<<1260.0,403.0>--<1260.0,1015.0>> has the same coordinates as a previous segment.\n\n\t* openHands (U+1F450): L<<1340.0,1015.0>--<1340.0,403.0>> has the same coordinates as a previous segment.\n\n\t* u1F466 (U+1F466): L<<1172.0,1662.0>--<1172.0,1716.0>> has the same coordinates as a previous segment.\n\n\t* laptop (U+1F4BB): L<<414.0,465.0>--<2186.0,465.0>> has the same coordinates as a previous segment.\n\n\t* foldedHands (U+1F64F): L<<1260.0,244.0>--<1260.0,1629.0>> has the same coordinates as a previous segment.\n\n\t* foldedHands (U+1F64F): L<<1340.0,1629.0>--<1340.0,244.0>> has the same coordinates as a previous segment.\n\n\t* u1F932 (U+1F932): L<<1260.0,342.0>--<1260.0,1114.0>> has the same coordinates as a previous segment.\n\n\t* u1F932 (U+1F932): L<<1340.0,1114.0>--<1340.0,342.0>> has the same coordinates as a previous segment.\n\n\t* toolbox (U+1F9F0): L<<1300.0,1388.0>--<1300.0,1468.0>> has the same coordinates as a previous segment.\n\n\t* toolbox (U+1F9F0): L<<1300.0,-340.0>--<1300.0,-260.0>> has the same coordinates as a previous segment.\n\n\t* toolbox (U+1F9F0): L<<1300.0,499.0>--<1300.0,579.0>> has the same coordinates as a previous segment.\n\n\t* toolbox (U+1F9F0): L<<1300.0,857.0>--<1300.0,937.0>> has the same coordinates as a previous segment.\n\n\t* toolbox (U+1F9F0): L<<1300.0,1191.0>--<1300.0,1271.0>> has the same coordinates as a previous segment.\n\n\t* toolbox (U+1F9F0): L<<1300.0,1604.0>--<1300.0,1740.0>> has the same coordinates as a previous segment."}, "status": "WARN"}], "module": "overlapping_path_segments", "proposal": ["https://github.com/google/fonts/issues/7594#issuecomment-2401909084"], "rationale": "\n        Some rasterizers encounter difficulties when rendering glyphs with\n        overlapping path segments.\n\n        A path segment is a section of a path defined by two on-curve points.\n        When two segments share the same coordinates, they are considered\n        overlapping.\n    ", "result": "WARN", "severity": null}, {"description": "Font contains all required tables?", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:required_tables>", [["font", 0]]], "logs": [{"message": {"code": "optional-tables", "message": "This font contains the following optional tables:\n\n\t- loca\n\n\t- GSUB\n\n\t- gasp\n\n\t- vhea\n\n\t- vmtx"}, "status": "INFO"}, {"message": {"code": null, "message": "Font contains all required tables."}, "status": "PASS"}], "module": "required_tables", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        According to the OpenType spec\n        https://docs.microsoft.com/en-us/typography/opentype/spec/otff#required-tables\n\n        Whether TrueType or CFF outlines are used in an OpenType font, the following\n        tables are required for the font to function correctly:\n\n        - cmap (Character to glyph mapping)\u23ce\n        - head (Font header)\u23ce\n        - hhea (Horizontal header)\u23ce\n        - hmtx (Horizontal metrics)\u23ce\n        - maxp (Maximum profile)\u23ce\n        - name (Naming table)\u23ce\n        - OS/2 (OS/2 and Windows specific metrics)\u23ce\n        - post (PostScript information)\n\n        The spec also documents that variable fonts require the following table:\n\n        - STAT (Style attributes)\n\n        Depending on the typeface and coverage of a font, certain tables are\n        recommended for optimum quality.\n\n        For example:\u23ce\n        - the performance of a non-linear font is improved if the VDMX, LTSH,\n          and hdmx tables are present.\u23ce\n        - Non-monospaced Latin fonts should have a kern table.\u23ce\n        - A gasp table is necessary if a designer wants to influence the sizes\n          at which grayscaling is used under Windows. Etc.\n    ", "result": "INFO", "severity": null}, {"description": "Ensure indic fonts have the Indian Rupee Sign glyph.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:rupee>", [["font", 0]]], "logs": [{"message": {"code": "unfulfilled-conditions", "message": "Unfulfilled Conditions: is_indic_font"}, "status": "SKIP"}], "module": "rupee", "proposal": ["https://github.com/fonttools/fontbakery/issues/2967"], "rationale": "\n        Per Bureau of Indian Standards every font supporting one of the\n        official Indian languages needs to include Unicode Character\n        \u201c\u20b9\u201d (U+20B9) Indian Rupee Sign.\n    ", "result": "SKIP", "severity": null}, {"description": "Font has the proper sfntVersion value?", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:sfnt_version>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "Font has the correct sfntVersion value."}, "status": "PASS"}], "module": "sfnt_version", "proposal": ["https://github.com/fonttools/fontbakery/issues/3388"], "rationale": "\n        OpenType fonts that contain TrueType outlines should use the value of 0x00010000\n        for the sfntVersion. OpenType fonts containing CFF data (version 1 or 2) should\n        use 0x4F54544F ('OTTO', when re-interpreted as a Tag) for sfntVersion.\n\n        Fonts with the wrong sfntVersion value are rejected by FreeType.\n\n        https://docs.microsoft.com/en-us/typography/opentype/spec/otff#table-directory\n    ", "result": "PASS", "severity": 10}, {"description": "Ensure 'smcp' (small caps) lookups are defined before ligature lookups in the 'GSUB' table.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:smallcaps_before_ligatures>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "Font lacks 'smcp' or 'liga' features."}, "status": "SKIP"}], "module": "smallcaps_before_ligatures", "proposal": ["https://github.com/fonttools/fontbakery/issues/3020"], "rationale": "\n        OpenType small caps should be defined before ligature lookups to ensure\n        proper functionality.\n\n        Rainer Erich Scheichelbauer (a.k.a. MekkaBlue) pointed out in a tweet\n        (https://twitter.com/mekkablue/status/1297486769668132865) that the ordering\n        of small caps and ligature lookups can lead to bad results such as the example\n        he provided of the word \"WAFFLES\" in small caps, but with an unfortunate\n        lowercase ffl ligature substitution.\n\t\n        This check attempts to detect this kind of mistake.\n    ", "result": "SKIP", "severity": null}, {"description": "Ensure smart dropout control is enabled in \"prep\" table instructions.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:smart_dropout>", [["font", 0]]], "logs": [{"message": {"code": "lacks-smart-dropout", "message": "The 'prep' table does not contain TrueType instructions enabling smart dropout control. To fix, export the font with autohinting enabled, or run ttfautohint on the font, or run the `gftools fix-nonhinting` script."}, "status": "FAIL"}], "module": "smart_dropout", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        This setup is meant to ensure consistent rendering quality for fonts across\n        all devices (with different rendering/hinting capabilities).\n\n        Below is the snippet of instructions we expect to see in the fonts:\n        B8 01 FF    PUSHW 0x01FF\n        85          SCANCTRL (unconditinally turn on\n                              dropout control mode)\n        B0 04       PUSHB 0x04\n        8D          SCANTYPE (enable smart dropout control)\n\n        \"Smart dropout control\" means activating rules 1, 2 and 5:\n        Rule 1: If a pixel's center falls within the glyph outline,\n                that pixel is turned on.\n        Rule 2: If a contour falls exactly on a pixel's center,\n                that pixel is turned on.\n        Rule 5: If a scan line between two adjacent pixel centers\n                (either vertical or horizontal) is intersected\n                by both an on-Transition contour and an off-Transition\n                contour and neither of the pixels was already turned on\n                by rules 1 and 2, turn on the pixel which is closer to\n                the midpoint between the on-Transition contour and\n                off-Transition contour. This is \"Smart\" dropout control.\n\n        For more detailed info (such as other rules not enabled in this snippet),\n        please refer to the TrueType Instruction Set documentation.\n\n        Generally this occurs with unhinted fonts; if you are not using autohinting,\n        use gftools-fix-nonhinting (or just gftools-fix-font) to fix this issue.\n    ", "result": "FAIL", "severity": null}, {"description": "Does the font contain a soft hyphen?", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:soft_hyphen>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "Looks good!"}, "status": "PASS"}], "module": "soft_hyphen", "proposal": ["https://github.com/fonttools/fontbakery/issues/4046", "https://github.com/fonttools/fontbakery/issues/3486"], "rationale": "\n        The 'Soft Hyphen' character (codepoint 0x00AD) is used to mark\n        a hyphenation possibility within a word in the absence of or\n        overriding dictionary hyphenation.\n\n        It is sometimes designed empty with no width (such as a control character),\n        sometimes the same as the traditional hyphen, sometimes double encoded with\n        the hyphen.\n\n        That being said, it is recommended to not include it in the font at all,\n        because discretionary hyphenation should be handled at the level of the\n        shaping engine, not the font. Also, even if present, the software would\n        not display that character.\n\n        More discussion at:\n        https://typedrawers.com/discussion/2046/special-dash-things-softhyphen-horizontalbar\n    ", "result": "PASS", "severity": null}, {"description": "Checking STAT table entries in static fonts.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:STAT_in_statics>", [["font", 0]]], "logs": [{"message": {"code": "unfulfilled-conditions", "message": "Unfulfilled Conditions: not is_variable_font"}, "status": "SKIP"}], "module": "STAT_in_statics", "proposal": ["https://github.com/fonttools/fontbakery/issues/4149"], "rationale": "\n        Adobe feature syntax allows for the definition of a STAT table. Fonts built\n        with a hand-coded STAT table in feature syntax may be built either as static\n        or variable, but will end up with the same STAT table.\n\n        This is a problem, because a STAT table which works on variable fonts\n        will not be appropriate for static instances. The examples in the OpenType spec\n        of non-variable fonts with a STAT table show that the table entries must be\n        restricted to those entries which refer to the static font's position in\n        the designspace. i.e. a Regular weight static should only have the following\n        entry for the weight axis:\n\n        <AxisIndex value=\"0\"/>\n        <Flags value=\"2\"/>  <!-- ElidableAxisValueName -->\n        <ValueNameID value=\"265\"/>  <!-- Regular -->\n        <Value value=\"400.0\"/>\n\n        However, if the STAT table intended for a variable font is compiled into a\n        static, it will have many entries for this axis. In this case, Windows will\n        read the first entry only, causing all instances to report themselves\n        as \"Thin Condensed\".\n    ", "result": "SKIP", "severity": null}, {"description": "Check correctness of STAT table strings", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:STAT_strings>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "STAT_strings", "proposal": ["https://github.com/fonttools/fontbakery/issues/2863"], "rationale": "\n        On the STAT table, the \"Italic\" keyword must not be used on AxisValues\n        for variation axes other than 'ital'.\n    ", "result": "PASS", "severity": null}, {"description": "Ensure Stylistic Sets have description.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:stylisticset_description>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "stylisticset_description", "proposal": ["https://github.com/fonttools/fontbakery/issues/3155"], "rationale": "\n        Stylistic sets should provide description text. Programs such as InDesign,\n        TextEdit and Inkscape use that info to display to the users so that they know\n        what a given stylistic set offers.\n    ", "result": "PASS", "severity": null}, {"description": "Check tabular widths don't have kerning.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:tabular_kerning>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "tabular_kerning", "proposal": ["https://github.com/fonttools/fontbakery/issues/4440"], "rationale": "\n        Tabular glyphs should not have kerning, as they are meant to be used in tables.\n\n        This check looks for kerning in:\n        - all glyphs in a font in combination with tabular numerals;\n        - tabular symbols in combination with tabular numerals.\n\n        \"Tabular symbols\" is defined as:\n        - for fonts with a \"tnum\" feature, all \"tnum\" substitution target glyphs;\n        - for fonts without a \"tnum\" feature, all glyphs that have the same width\n        as the tabular numerals, but limited to numbers, math and currency symbols.\n\n        This check may produce false positives for fonts with no \"tnum\" feature\n        and with equal-width numerals (and other same-width symbols) that are\n        not intended to be used as tabular numerals.\n    ", "result": "PASS", "severity": null}, {"description": "Ensure component transforms do not perform scaling or rotation.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:transformed_components>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "No glyphs had components with scaling or rotation"}, "status": "PASS"}], "module": "transformed_components", "proposal": ["https://github.com/fonttools/fontbakery/issues/2011"], "rationale": "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ", "result": "PASS", "severity": null}, {"description": "Checking with fontTools.ttx", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:ttx_roundtrip>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "ttx_roundtrip", "proposal": ["https://github.com/fonttools/fontbakery/issues/1763"], "rationale": "\n        One way of testing whether or not fonts are well-formed at the\n        binary level is to convert them to TTX and then back to binary. Structural\n        problems within the binary font will show up as errors during conversion.\n        This is not necessarily something that a designer will be able to address\n        but is evidence of a potential bug in the font compiler used to generate\n        the binary.", "result": "PASS", "severity": null}, {"description": "Checking that the typoAscender exceeds the yMax of the /Agrave.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:typoascender_exceeds_Agrave>", [["font", 0]]], "logs": [{"message": {"code": "lacks-Agrave", "message": "Font file lacks the /Agrave, so it can\u2019t be compared with typoAscender"}, "status": "SKIP"}], "module": "typoascender_exceeds_Agrave", "proposal": ["https://github.com/fonttools/fontbakery/issues/3170"], "rationale": "\n        MacOS uses OS/2.sTypoAscender/Descender values to determine the line height\n        of a font. If the sTypoAscender value is smaller than the maximum height of\n        the uppercase /Agrave, the font\u2019s sTypoAscender value is ignored, and a very\n        tall line height is used instead.\n\n        This happens on a per-font, per-style basis, so it\u2019s possible for a font to\n        have a good sTypoAscender value in one style but not in another. This can\n        lead to inconsistent line heights across a typeface family.\n\n        So, it is important to ensure that the sTypoAscender value is greater than\n        the maximum height of the uppercase /Agrave in all styles of a type family.\n    ", "result": "SKIP", "severity": null}, {"description": "Font contains unique glyph names?", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:unique_glyphnames>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "Glyph names are all unique."}, "status": "PASS"}], "module": "unique_glyphnames", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        Duplicate glyph names prevent font installation on Mac OS X.\n    ", "result": "PASS", "severity": null}, {"description": "Check font contains no unreachable glyphs", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:unreachable_glyphs>", [["font", 0]]], "logs": [{"message": {"code": "unreachable-glyphs", "message": "The following glyphs could not be reached by codepoint or substitution rules:\n\n\t- flagBritishIndianOceanTerritory\n\n\t- flagHeardMcdonaldIslands\n\n\t- flagNorway\n\n\t- flagSvalbardJanMayen\n"}, "status": "WARN"}], "module": "unreachable_glyphs", "proposal": ["https://github.com/fonttools/fontbakery/issues/3160"], "rationale": "\n        Glyphs are either accessible directly through Unicode codepoints or through\n        substitution rules.\n\n        In Color Fonts, glyphs are also referenced by the COLR table. And mathematical\n        fonts also reference glyphs via the MATH table.\n\n        Any glyphs not accessible by these means are redundant and serve only\n        to increase the font's file size.\n    ", "result": "WARN", "severity": null}, {"description": "Are there unwanted Apple tables?", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:unwanted_aat_tables>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "unwanted_aat_tables", "proposal": ["https://github.com/fonttools/fontbakery/pull/2190"], "rationale": "\n        Apple's TrueType reference manual [1] describes SFNT tables not in the\n        Microsoft OpenType specification [2] and these can sometimes sneak into final\n        release files.\n\n        This check ensures fonts only have OpenType tables.\n\n        [1] https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6.html\n        [2] https://docs.microsoft.com/en-us/typography/opentype/spec/\n    ", "result": "PASS", "severity": null}, {"description": "Are there unwanted tables?", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:unwanted_tables>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "There are no unwanted tables."}, "status": "PASS"}], "module": "unwanted_tables", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        Some font editors store source data in their own SFNT tables, and these\n        can sometimes sneak into final release files, which should only have\n        OpenType spec tables.\n    ", "result": "PASS", "severity": null}, {"description": "Glyph names are all valid?", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:valid_glyphnames>", [["font", 0]]], "logs": [{"message": {"code": "legacy-long-names", "message": "The following glyph names may be too long for some legacy systems which may expect a maximum 31-characters length limit:\nfaceWithOpenEyesAndHandOverMouth, flagSouthGeorgiaSouthSandwichIslands, grinningFaceWithOneLargeAndOneSmallEye, handWithIndexFingerAndThumbCrossed, personInManualWheelchairFacingRight, personInMotorizedWheelchairFacingRight and smilingFaceWithSmilingEyesAndThreeHearts"}, "status": "WARN"}], "module": "valid_glyphnames", "proposal": ["https://github.com/fonttools/fontbakery/issues/2832", "https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        Microsoft's recommendations for OpenType Fonts states the following:\n\n        'NOTE: The PostScript glyph name must be no longer than 31 characters,\n        include only uppercase or lowercase English letters, European digits,\n        the period or the underscore, i.e. from the set `[A-Za-z0-9_.]` and\n        should start with a letter, except the special glyph name `.notdef`\n        which starts with a period.'\n\n        https://learn.microsoft.com/en-us/typography/opentype/otspec181/recom#-post--table\n\n\n        In practice, though, particularly in modern environments, glyph names\n        can be as long as 63 characters.\n\n        According to the \"Adobe Glyph List Specification\" available at:\n\n        https://github.com/adobe-type-tools/agl-specification\n    ", "result": "WARN", "severity": null}, {"description": "The variable font 'wght' (Weight) axis coordinate must be 700 on the 'Bold' instance.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:varfont/bold_wght_coord>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "Bold:wght is 700."}, "status": "PASS"}], "module": "varfont.bold_wght_coord", "proposal": ["https://github.com/fonttools/fontbakery/issues/1707"], "rationale": "\n        The OpenType spec's registered\n        design-variation tag 'wght' available at\n        https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_wght\n        does not specify a required value for the 'Bold' instance of a variable font.\n\n        But Dave Crossland suggested that a required value of 700 should be enforced \n        in this case (NOTE: a distinction is made between \"no bold instance present\"\n        vs \"bold instance is present but its wght coordinate is not == 700\").\n    ", "result": "PASS", "severity": null}, {"description": "Ensure that all variable font files have the same set of axes and axis ranges.", "documentation": null, "experimental": false, "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:varfont/consistent_axes>", []], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "varfont.consistent_axes", "proposal": ["https://github.com/fonttools/fontbakery/issues/2810"], "rationale": "\n        In order to facilitate the construction of intuitive and friendly user\n        interfaces, all variable font files in a given family should have the same set\n        of variation axes. Also, each axis must have a consistent setting of min/max\n        value ranges accross all the files.\n    ", "result": "PASS", "severity": null}, {"description": "Ensure VFs with duplexed axes do not vary horizontal advance.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:varfont/duplexed_axis_reflow>", [["font", 0]]], "logs": [{"message": {"code": "no-relevant-axes", "message": "This font has no duplexed axes"}, "status": "SKIP"}], "module": "varfont.duplexed_axis_reflow", "proposal": ["https://github.com/fonttools/fontbakery/issues/3187"], "rationale": "\n        Certain axes, such as grade (GRAD) or roundness (ROND), should not\n        change any advanceWidth or kerning data across the font's design space.\n        This is because altering the advance width of glyphs can cause text reflow.\n    ", "result": "SKIP", "severity": null}, {"description": "Check variable font instances don't have duplicate names", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:varfont/duplicate_instance_names>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "varfont.duplicate_instance_names", "proposal": ["https://github.com/fonttools/fontbakery/issues/2986"], "rationale": "\n        This check's purpose is to detect duplicate named instances names in a\n        given variable font.\n\n        Repeating instance names may be the result of instances for several VF axes\n        defined in `fvar`, but in some setups only weight+italic tokens are used\n        in instance names, so they end up repeating.\n\n        Only a base set of fonts for the most default representation of the\n        family can be defined through instances in the `fvar` table, all other\n        instances will have to be left to access through the `STAT` table.\n    ", "result": "PASS", "severity": null}, {"description": "Ensure the font's instances are in the correct order.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:varfont/instances_in_order>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "varfont.instances_in_order", "proposal": ["https://github.com/googlefonts/fontbakery/issues/3334"], "rationale": "\n        Ensure that the fvar table instances are in ascending order of weight.\n        Some software, such as Canva, displays the instances in the order they\n        are defined in the fvar table, which can lead to confusion if the\n        instances are not in order of weight.\n    ", "result": "PASS", "severity": 2}, {"description": "Ensure VFs do not contain (yet) the ital axis.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:varfont/unsupported_axes>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "varfont.unsupported_axes", "proposal": ["https://github.com/fonttools/fontbakery/issues/2866"], "rationale": "\n        The 'ital' axis is not supported yet in Google Chrome.\n\n        For the time being, we need to ensure that VFs do not contain this axis.\n        Once browser support is better, we can deprecate this check.\n\n        For more info regarding browser support, see:\n        https://arrowtype.github.io/vf-slnt-test/\n    ", "result": "PASS", "severity": null}, {"description": "Font contains glyphs for whitespace characters?", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:whitespace_glyphs>", [["font", 0]]], "logs": [{"message": {"code": "missing-whitespace-glyph-0x00A0", "message": "Whitespace glyph missing for codepoint 0x00A0."}, "status": "FAIL"}], "module": "whitespace_glyphs", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        The OpenType specification recommends that fonts should contain\n        glyphs for the following whitespace characters:\n\n        - U+0020 SPACE\n        - U+00A0 NO-BREAK SPACE\n\n        The space character is required for text processing, and the no-break\n        space is useful to prevent line breaks at its position. It is also\n        recommended to have a glyph for the tab character (U+0009) and the\n        soft hyphen (U+00AD), but these are not mandatory.\n    ", "result": "FAIL", "severity": null}, {"description": "Whitespace glyphs have ink?", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:whitespace_ink>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "There is no whitespace glyph with ink."}, "status": "PASS"}], "module": "whitespace_ink", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n           This check ensures that certain whitespace glyphs are empty.\n           Certain text layout engines will assume that these glyphs are empty,\n           and will not draw them; if they were in fact not designed to be\n           empty, the result will be text layout that is not as expected.\n       ", "result": "PASS", "severity": null}, {"description": "Space and non-breaking space have the same width?", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Universal Profile Checks>", "<FontBakeryCheck:whitespace_widths>", [["font", 0]]], "logs": [{"message": {"code": "unfulfilled-conditions", "message": "Unfulfilled Conditions: not missing_whitespace_chars"}, "status": "SKIP"}], "module": "whitespace_widths", "proposal": ["https://github.com/fonttools/fontbakery/issues/3843", "https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations in\n        documents; such as the space before punctuation in languages that do that. It\n        avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It's also used\n        by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ", "result": "SKIP", "severity": null}], "key": ["Universal Profile Checks", null, null], "result": {"FAIL": 3, "INFO": 2, "PASS": 42, "SKIP": 13, "WARN": 8}}, {"checks": [{"description": "Validate size, and resolution of article images, and ensure article page has minimum length and includes visual assets.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Article Checks>", "<FontBakeryCheck:googlefonts/article/images>", [["font", 0]]], "logs": [{"message": {"code": "lacks-article", "message": "Family metadata at /Users/simon/others-repos/fonts//ofl/notoemoji does not have an article.\n"}, "status": "WARN"}], "module": "vendorspecific.googlefonts.article.images", "proposal": ["https://github.com/fonttools/fontbakery/issues/4594"], "rationale": "\n        The purpose of this check is to ensure images (either raster or vector files)\n        are not excessively large in filesize and resolution.\n\n        These constraints are loosely based on infrastructure limitations under\n        default configurations.\n\n        It also ensures that the article page has a minimum length and includes\n        at least one visual asset.\n    ", "result": "WARN", "severity": null}], "key": ["Article Checks", null, null], "result": {"WARN": 1}}, {"checks": [{"description": "Validate METADATA.pb axes values are within gf_axisregistry bounds.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/axisregistry_bounds>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.axisregistry_bounds", "proposal": ["https://github.com/fonttools/fontbakery/issues/3010"], "rationale": "\n        Each axis range in a METADATA.pb file must be registered, and within the bounds\n        of the axis definition in the Google Fonts Axis Registry, available at\n        https://github.com/google/fonts/tree/main/axisregistry\n    ", "result": "PASS", "severity": null}, {"description": "Validate METADATA.pb axes tags are defined in gf_axisregistry.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/axisregistry_valid_tags>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.axisregistry_valid_tags", "proposal": ["https://github.com/fonttools/fontbakery/issues/3022"], "rationale": "\n        Ensure all axes in a METADATA.pb file are registered in the\n        Google Fonts Axis Registry, available at\n        https://github.com/google/fonts/tree/main/axisregistry\n\n        Why does Google Fonts have its own Axis Registry?\n\n        We support a superset of the OpenType axis registry axis set, and use\n        additional metadata for each axis. Axes present in a font file but not in this\n        registry will not function via our API. No variable font is expected to\n        support all of the axes here.\n\n        Any font foundry or distributor library that offers variable fonts has a\n        implicit, latent, de-facto axis registry, which can be extracted by scanning\n        the library for axes' tags, labels, and min/def/max values. While in 2016\n        Microsoft originally offered to include more axes in the OpenType 1.8\n        specification (github.com/microsoft/OpenTypeDesignVariationAxisTags), as of\n        August 2020, this effort has stalled. We hope more foundries and distributors\n        will publish documents like this that make their axes explicit, to encourage\n        of adoption of variable fonts throughout the industry, and provide source\n        material for a future update to the OpenType specification's axis registry.\n    ", "result": "PASS", "severity": null}, {"description": "Does METADATA.pb copyright field contain broken links?", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/broken_links>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.broken_links", "proposal": ["https://github.com/fonttools/fontbakery/issues/2550", "https://github.com/fonttools/fontbakery/issues/4110"], "rationale": "\n        This check ensures that any URLs found within the copyright\n        field of the METADATA.pb file are valid.\n    ", "result": "PASS", "severity": null}, {"description": "METADATA.pb: Font styles are named canonically?", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/canonical_style_names>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.canonical_style_names", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        If the style is set to 'normal' in the METADATA.pb file, we expect a\n        non-italic font - i.e. the font's macStyle bit 1 should be set to 0,\n        and the font's fullname should not end with \"Italic\"; similarly if\n        the style is set to 'italic', we expect a font with the macStyle bit 1\n        set to 1, and the font's fullname ending with \"Italic\". If this is\n        not the case, it can indicate an italic font was incorrectly marked\n        as 'normal' in the METADATA.pb file or vice versa.\n    ", "result": "PASS", "severity": null}, {"description": "METADATA.pb: Check that font weight has a canonical value.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/canonical_weight_value>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.canonical_weight_value", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        This check ensures that the font weight declared in the METADATA.pb file\n        has a canonical value. The canonical values are multiples of 100 between\n        100 and 900.\n    ", "result": "PASS", "severity": null}, {"description": "Check samples can be rendered.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/can_render_samples>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.can_render_samples", "proposal": ["https://github.com/fonttools/fontbakery/issues/3419", "https://github.com/fonttools/fontbakery/issues/3605"], "rationale": "\n        In order to prevent tofu from being seen on fonts.google.com, this check\n        verifies that all samples specified by METADATA.pb can be properly\n        rendered by the font.\n    ", "result": "PASS", "severity": null}, {"description": "Ensure METADATA.pb category field is valid.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/category>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.category", "proposal": ["https://github.com/fonttools/fontbakery/issues/2972"], "rationale": "\n        There are only five acceptable values for the category field in a METADATA.pb\n        file:\n\n        - MONOSPACE\n\n        - SANS_SERIF\n\n        - SERIF\n\n        - DISPLAY\n\n        - HANDWRITING\n\n        This check is meant to avoid typos in this field.\n    ", "result": "PASS", "severity": null}, {"description": "Check if category on METADATA.pb matches what can be inferred from the family name.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/category_hints>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.category_hints", "proposal": ["https://github.com/fonttools/fontbakery/issues/3624"], "rationale": "\n        Sometimes the font familyname contains words that hint at which is the most\n        likely correct category to be declared on METADATA.pb\n    ", "result": "PASS", "severity": null}, {"description": "Validate VF axes match the ones declared on METADATA.pb.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/consistent_axis_enumeration>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.consistent_axis_enumeration", "proposal": ["https://github.com/fonttools/fontbakery/issues/3051"], "rationale": "\n        All font variation axes present in the font files must be properly declared\n        on METADATA.pb so that they can be served by the GFonts API.\n    ", "result": "PASS", "severity": null}, {"description": "METADATA.pb: Check URL on copyright string is the same as in repository_url field.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/consistent_repo_urls>", [["font", 0]]], "logs": [{"message": {"code": "lacks-repo-url", "message": "Please add a family.source.repository_url entry."}, "status": "FAIL"}], "module": "vendorspecific.googlefonts.metadata.consistent_repo_urls", "proposal": ["https://github.com/fonttools/fontbakery/issues/4056"], "rationale": "\n        Sometimes, perhaps due to copy-pasting, projects may declare different URLs\n        between the font.coyright and the family.sources.repository_url fields.\n    ", "result": "FAIL", "severity": null}, {"description": "Validate 'date_added' field on METADATA.pb.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/date_added>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.date_added", "proposal": ["https://github.com/fonttools/fontbakery/issues/4729"], "rationale": "\n        The date_added field must not be empty or malformed.\n\n        Expected format is \"YYYY-MM-DD\"\n    ", "result": "PASS", "severity": null}, {"description": "METADATA.pb: Designers are listed correctly on the Google Fonts catalog?", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/designer_profiles>", [["font", 0]]], "logs": [{"message": {"code": "unfulfilled-conditions", "message": "Unfulfilled Conditions: not is_noto"}, "status": "SKIP"}], "module": "vendorspecific.googlefonts.metadata.designer_profiles", "proposal": ["https://github.com/fonttools/fontbakery/issues/3083"], "rationale": "\n        Google Fonts has a catalog of designers.\n\n        This check ensures that the online entries of the catalog can be found based\n        on the designer names listed on the METADATA.pb file.\n\n        It also validates the URLs and file formats are all correctly set.\n    ", "result": "SKIP", "severity": null}, {"description": "Multiple values in font designer field in METADATA.pb must be separated by commas.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/designer_values>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.designer_values", "proposal": ["https://github.com/fonttools/fontbakery/issues/2479"], "rationale": "\n        We must use commas instead of forward slashes because the server-side code\n        at the fonts.google.com directory will segment the string on the commas into\n        a list of names and display the first item in the list as the\n        \"principal designer\" while the remaining names are identified as \"contributors\".\n\n        See eg https://fonts.google.com/specimen/Rubik\n    ", "result": "PASS", "severity": null}, {"description": "At least one designer is declared in METADATA.pb", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/empty_designer>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.empty_designer", "proposal": ["https://github.com/fonttools/fontbakery/issues/3961"], "rationale": "\n        Any font published on Google Fonts must credit one or several authors,\n        foundry and/or individuals.\n\n        Ideally, all authors listed in the upstream repository's AUTHORS.txt should\n        be mentioned in the designer field.\n    ", "result": "PASS", "severity": null}, {"description": "Ensure METADATA.pb does not use escaped strings.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/escaped_strings>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.escaped_strings", "proposal": ["https://github.com/fonttools/fontbakery/issues/2932"], "rationale": "\n        In some cases we've seen designer names and other fields with escaped strings\n        in METADATA files (such as \"Juli\\303\\241n\").\n\n        Nowadays the strings can be full unicode strings (such as \"Juli\u00e1n\") and do\n        not need escaping.\n\n        Escaping quotes or double-quotes is fine, though.\n    ", "result": "PASS", "severity": null}, {"description": "Check font family directory name.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/family_directory_name>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.family_directory_name", "proposal": ["https://github.com/fonttools/fontbakery/issues/3421"], "rationale": "\n        We want the directory name of a font family to be predictable and directly\n        derived from the family name, all lowercased and removing spaces.\n    ", "result": "PASS", "severity": null}, {"description": "Check that METADATA.pb family values are all the same.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/familyname>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.familyname", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        The METADATA.pb file includes a family name field for each font\n        file in the family. The value of this field should be the same\n        for all fonts in the family.\n    ", "result": "PASS", "severity": null}, {"description": "METADATA.pb: Font filenames match font.filename entries?", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/filenames>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.filenames", "proposal": ["https://github.com/fonttools/fontbakery/issues/2597"], "rationale": "\n        Note:\n        This check only looks for files in the current directory.\n\n        Font files in subdirectories are checked by these other two checks:\n         - googlefonts/metadata/undeclared_fonts\n         - googlefonts/repo/vf_has_static_fonts\n\n        We may want to merge them all into a single check.\n    ", "result": "PASS", "severity": null}, {"description": "Ensure there is a regular style defined in METADATA.pb.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/has_regular>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.has_regular", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        According to Google Fonts standards, families should have a Regular\n        style.\n    ", "result": "PASS", "severity": null}, {"description": "Check METADATA.pb includes production subsets.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/includes_production_subsets>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.includes_production_subsets", "proposal": ["https://github.com/fonttools/fontbakery/issues/2989"], "rationale": "\n        Check METADATA.pb file includes the same subsets as the family in production.\n    ", "result": "PASS", "severity": null}, {"description": "METADATA.pb font.filename and font.post_script_name fields have equivalent values?", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/match_filename_postscript>", [["font", 0]]], "logs": [{"message": {"code": "unfulfilled-conditions", "message": "Unfulfilled Conditions: not is_variable_font"}, "status": "SKIP"}], "module": "vendorspecific.googlefonts.metadata.match_filename_postscript", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        For static fonts, this checks that the font filename as declared in\n        the METADATA.pb file matches the post_script_name field. i.e.\n        SomeFont-Regular.ttf should have a PostScript name of SomeFont-Regular.\n    ", "result": "SKIP", "severity": null}, {"description": "METADATA.pb font.full_name and font.post_script_name fields have equivalent values ?", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/match_fullname_postscript>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.match_fullname_postscript", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        The font.full_name and font.post_script_name fields in the\n        METADATA.pb file should be consistent - i.e. when all non-alphabetic\n        characters are removed, they should be the same. This is to\n        prevent inconsistencies when one or the other value has been\n        manually edited in the METADATA.pb file.\n    ", "result": "PASS", "severity": null}, {"description": "METADATA.pb: Check font name is the same as family name.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/match_name_familyname>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.match_name_familyname", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        This check ensures that the 'name' field in each font's entry in\n        the METADATA.pb file matches the 'name' field at the top level of\n        the METADATA.pb.\n    ", "result": "PASS", "severity": null}, {"description": "METADATA.pb weight matches postScriptName for static fonts.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/match_weight_postscript>", [["font", 0]]], "logs": [{"message": {"code": "unfulfilled-conditions", "message": "Unfulfilled Conditions: not is_variable_font"}, "status": "SKIP"}], "module": "vendorspecific.googlefonts.metadata.match_weight_postscript", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        The METADATA.pb file has a field for each font file called 'weight',\n        with a numeric value from 100 to 900. This check ensures that the\n        weight value seems appropriate given the style name in the font's\n        postScriptName. For example, a font with a postScriptName ending in\n        'Bold' should have a weight value of 700.\n    ", "result": "SKIP", "severity": null}, {"description": "METADATA.pb should contain at least \"menu\" and \"latin\" subsets.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/menu_and_latin>", [["font", 0]]], "logs": [{"message": {"code": "missing", "message": "Subsets \"menu\" and \"latin\" are mandatory, but METADATA.pb is missing \"latin\"."}, "status": "FAIL"}], "module": "vendorspecific.googlefonts.metadata.menu_and_latin", "proposal": ["https://github.com/fonttools/fontbakery/issues/912#issuecomment-237935444", "https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        The 'menu' and 'latin' subsets are mandatory in METADATA.pb for the\n        font to display correctly on the Google Fonts website.\n    ", "result": "FAIL", "severity": null}, {"description": "METADATA.pb: Validate family.minisite_url field.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/minisite_url>", [["font", 0]]], "logs": [{"message": {"code": "lacks-minisite-url", "message": "Please consider adding a family.minisite_url entry."}, "status": "INFO"}], "module": "vendorspecific.googlefonts.metadata.minisite_url", "proposal": ["https://github.com/fonttools/fontbakery/issues/4504"], "rationale": "\n        Validate family.minisite_url field.\n    ", "result": "INFO", "severity": null}, {"description": "METADATA.pb font.name and font.full_name fields match the values declared on the name table?", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/nameid/family_and_full_names>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.nameid.family_and_full_names", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        This check ensures that the family name declared in the METADATA.pb file\n        matches the family name declared in the name table of the font file,\n        and that the font full name declared in the METADATA.pb file\n        matches the font full name declared in the name table of the font file.\n        If the font was uploaded by the packager, this should always be the\n        case. But if there were manual changes to the METADATA.pb file, a mismatch\n        could occur.\n    ", "result": "PASS", "severity": null}, {"description": "METADATA.pb font.name value should be same as the family name declared on the name table.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/nameid/font_name>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.nameid.font_name", "proposal": ["https://github.com/fonttools/fontbakery/issues/4086", "https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        This check ensures consistency between the font name declared on the name table\n        and the contents of the METADATA.pb file.\n    ", "result": "PASS", "severity": null}, {"description": "Checks METADATA.pb font.post_script_name matches postscript name declared on the name table.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/nameid/post_script_name>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.nameid.post_script_name", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        This check ensures that the PostScript name declared in the METADATA.pb file\n        matches the PostScript name declared in the name table of the font file.\n        If the font was uploaded by the packager, this should always be the\n        case. But if there were manual changes to the METADATA.pb file, a mismatch\n        could occur.\n    ", "result": "PASS", "severity": null}, {"description": "Check METADATA.pb parse correctly.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/parses>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "METADATA.pb parsed successfuly."}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.parses", "proposal": ["https://github.com/fonttools/fontbakery/issues/2248"], "rationale": "\n        The purpose of this check is to ensure that the METADATA.pb file is not\n        malformed.\n    ", "result": "PASS", "severity": null}, {"description": "METADATA.pb: Check for primary_script", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/primary_script>", [["font", 0]]], "logs": [{"message": {"code": "missing-primary-script", "message": "METADATA.pb: primary_script field should be 'Hani' but is missing.\nMake sure that 'Hani' is actually the correct one (out of Jpan, Hani, Hant, Hans)."}, "status": "WARN"}], "module": "vendorspecific.googlefonts.metadata.primary_script", "proposal": ["https://github.com/fonttools/fontbakery/issues/4109"], "rationale": "\n        Try to guess font's primary script and see if that's set in METADATA.pb.\n        This is an educated guess based on the number of glyphs per script in the font\n        and should be taken with caution.\n    ", "result": "WARN", "severity": null}, {"description": "METADATA.pb: Regular should be 400.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/regular_is_400>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.regular_is_400", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        The weight of the regular style should be set to 400.\n    ", "result": "PASS", "severity": null}, {"description": "Check METADATA.pb file only contains a single CJK subset.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/single_cjk_subset>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.single_cjk_subset", "proposal": ["https://github.com/fonttools/fontbakery/issues/4779"], "rationale": "\n        Check METADATA.pb file only contains a single CJK subset since the Google Fonts\n        backend doesn't support multiple CJK subsets.\n    ", "result": "PASS", "severity": null}, {"description": "METADATA.pb subsets should be alphabetically ordered.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/subsets_order>", [["font", 0]]], "logs": [{"message": {"code": "not-sorted", "message": "METADATA.pb subsets are not sorted in alphabetical order: Got ['menu', 'emoji'] and expected ['emoji', 'menu']"}, "status": "FAIL"}], "module": "vendorspecific.googlefonts.metadata.subsets_order", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        The subsets listed in the METADATA.pb file should be sorted in\n        alphabetical order.\n    ", "result": "FAIL", "severity": null}, {"description": "Ensure METADATA.pb lists all font binaries.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/undeclared_fonts>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.undeclared_fonts", "proposal": ["https://github.com/fonttools/fontbakery/issues/2575"], "rationale": "\n        The set of font binaries available, except the ones on a \"static\" subdir,\n        must match exactly those declared on the METADATA.pb file.\n\n        Also, to avoid confusion, we expect that font files (other than statics)\n        are not placed on subdirectories.\n    ", "result": "PASS", "severity": null}, {"description": "METADATA.pb: check if fonts field only has unique \"full_name\" values.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/unique_full_name_values>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.unique_full_name_values", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        Each font field in the METADATA.pb file should have a unique\n        \"full_name\" value. If this is not the case, it may indicate that\n        the font files have been incorrectly named, or that the METADATA.pb\n        file has been incorrectly edited.\n    ", "result": "PASS", "severity": null}, {"description": "METADATA.pb: check if fonts field only contains unique style:weight pairs.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/unique_weight_style_pairs>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.unique_weight_style_pairs", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        Each font field in the METADATA.pb file should have a unique\n        style and weight. If there are duplications, it may indicate that\n        that the METADATA.pb file has been incorrectly edited.\n    ", "result": "PASS", "severity": null}, {"description": "Check for codepoints not covered by METADATA subsets.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/unreachable_subsetting>", [["font", 0]]], "logs": [{"message": {"code": "unreachable-subsetting", "message": "The following codepoints supported by the font are not covered by\n    any subsets defined in the font's metadata file, and will never\n    be served. You can solve this by either manually adding additional\n    subset declarations to METADATA.pb, or by editing the glyphset\n    definitions.\n\n * U+200D ZERO WIDTH JOINER: try adding one of: mongolian, tamil, bhaiksuki, hebrew, modi, rejang, warang-citi, meetei-mayek, arabic, khmer, thai, brahmi, myanmar, buhid, old-hungarian, yi, saurashtra, kayah-li, sogdian, dogra, mahajani, tai-le, telugu, siddham, batak, devanagari, tagbanwa, nko, hanunoo, psalter-pahlavi, tirhuta, grantha, avestan, tagalog, tai-viet, bengali, zanabazar-square, chakma, thaana, cham, kharoshthi, masaram-gondi, kannada, buginese, javanese, manichaean, new-tai-lue, newa, pahawh-hmong, phags-pa, khudawadi, sinhala, limbu, sundanese, lao, gunjala-gondi, syriac, tibetan, hanifi-rohingya, gujarati, gurmukhi, oriya, syloti-nagri, tai-tham, takri, tifinagh, lepcha, duployan, mandaic, kaithi, balinese, malayalam, sharada, khojki\n * U+203C DOUBLE EXCLAMATION MARK: try adding math\n * U+2049 EXCLAMATION QUESTION MARK: try adding mongolian\n * U+20E3 COMBINING ENCLOSING KEYCAP: try adding symbols\n * U+2139 INFORMATION SOURCE: try adding math\n * U+2194 LEFT RIGHT ARROW: try adding one of: symbols, math\n * U+2195 UP DOWN ARROW: try adding one of: symbols, math\n * U+2196 NORTH WEST ARROW: try adding one of: symbols, math\n * U+2197 NORTH EAST ARROW: try adding one of: symbols, math\n * U+2198 SOUTH EAST ARROW: try adding one of: symbols, math\n * U+2199 SOUTH WEST ARROW: try adding one of: symbols, math\n * U+21A9 LEFTWARDS ARROW WITH HOOK: try adding math\n * U+21AA RIGHTWARDS ARROW WITH HOOK: try adding math\n * U+231A WATCH: try adding symbols\n * U+231B HOURGLASS: try adding symbols\n * U+2328 KEYBOARD: try adding symbols\n * U+23CF EJECT SYMBOL: try adding symbols\n * U+23E9 BLACK RIGHT-POINTING DOUBLE TRIANGLE: try adding symbols\n * U+23EA BLACK LEFT-POINTING DOUBLE TRIANGLE: try adding symbols\n * U+23EB BLACK UP-POINTING DOUBLE TRIANGLE: not included in any glyphset definition\n * U+23EC BLACK DOWN-POINTING DOUBLE TRIANGLE: not included in any glyphset definition\n * U+23ED BLACK RIGHT-POINTING DOUBLE TRIANGLE WITH VERTICAL BAR: try adding symbols\n * U+23EE BLACK LEFT-POINTING DOUBLE TRIANGLE WITH VERTICAL BAR: try adding symbols\n * U+23EF BLACK RIGHT-POINTING TRIANGLE WITH DOUBLE VERTICAL BAR: try adding symbols\n * U+23F0 ALARM CLOCK: not included in any glyphset definition\n * U+23F1 STOPWATCH: try adding symbols\n * U+23F2 TIMER CLOCK: try adding symbols\n * U+23F3 HOURGLASS WITH FLOWING SAND: try adding symbols\n * U+23F8 DOUBLE VERTICAL BAR: try adding symbols\n * U+23F9 BLACK SQUARE FOR STOP: try adding symbols\n * U+23FA BLACK CIRCLE FOR RECORD: try adding symbols\n * U+24C2 CIRCLED LATIN CAPITAL LETTER M: try adding symbols\n * U+25AA BLACK SMALL SQUARE: try adding symbols\n * U+25AB WHITE SMALL SQUARE: try adding symbols\n * U+25B6 BLACK RIGHT-POINTING TRIANGLE: try adding symbols\n * U+25C0 BLACK LEFT-POINTING TRIANGLE: try adding symbols\n * U+25FB WHITE MEDIUM SQUARE: try adding one of: symbols, math\n * U+25FC BLACK MEDIUM SQUARE: try adding symbols\n * U+25FD WHITE MEDIUM SMALL SQUARE: try adding symbols\n * U+25FE BLACK MEDIUM SMALL SQUARE: try adding symbols\n * U+2600 BLACK SUN WITH RAYS: try adding symbols\n * U+2601 CLOUD: try adding symbols\n * U+2602 UMBRELLA: try adding symbols\n * U+2603 SNOWMAN: try adding symbols\n * U+2604 COMET: try adding symbols\n * U+260E BLACK TELEPHONE: try adding symbols\n * U+2611 BALLOT BOX WITH CHECK: try adding symbols\n * U+2614 UMBRELLA WITH RAIN DROPS: try adding symbols\n * U+2615 HOT BEVERAGE: try adding symbols\n * U+2618 SHAMROCK: try adding symbols\n * U+261D WHITE UP POINTING INDEX: try adding symbols\n * U+2620 SKULL AND CROSSBONES: try adding symbols\n * U+2622 RADIOACTIVE SIGN: try adding symbols\n * U+2623 BIOHAZARD SIGN: try adding symbols\n * U+2626 ORTHODOX CROSS: try adding symbols\n * U+262A STAR AND CRESCENT: try adding symbols\n * U+262E PEACE SYMBOL: try adding symbols\n * U+262F YIN YANG: try adding symbols\n * U+2638 WHEEL OF DHARMA: try adding symbols\n * U+2639 WHITE FROWNING FACE: try adding symbols\n * U+263A WHITE SMILING FACE: try adding symbols\n * U+2640 FEMALE SIGN: try adding symbols\n * U+2642 MALE SIGN: try adding symbols\n * U+2648 ARIES: try adding symbols\n * U+2649 TAURUS: try adding symbols\n * U+264A GEMINI: try adding symbols\n * U+264B CANCER: try adding symbols\n * U+264C LEO: try adding symbols\n * U+264D VIRGO: try adding symbols\n * U+264E LIBRA: try adding symbols\n * U+264F SCORPIUS: try adding symbols\n * U+2650 SAGITTARIUS: try adding symbols\n * U+2651 CAPRICORN: try adding symbols\n * U+2652 AQUARIUS: try adding symbols\n * U+2653 PISCES: try adding symbols\n * U+265F BLACK CHESS PAWN: try adding symbols\n * U+2660 BLACK SPADE SUIT: try adding symbols\n * U+2663 BLACK CLUB SUIT: try adding symbols\n * U+2665 BLACK HEART SUIT: try adding symbols\n * U+2666 BLACK DIAMOND SUIT: try adding symbols\n * U+2668 HOT SPRINGS: try adding symbols\n * U+267B BLACK UNIVERSAL RECYCLING SYMBOL: try adding symbols\n * U+267E PERMANENT PAPER SIGN: try adding symbols\n * U+267F WHEELCHAIR SYMBOL: try adding symbols\n * U+2692 HAMMER AND PICK: try adding symbols\n * U+2693 ANCHOR: try adding symbols\n * U+2694 CROSSED SWORDS: try adding symbols\n * U+2695 STAFF OF AESCULAPIUS: try adding symbols\n * U+2696 SCALES: try adding symbols\n * U+2697 ALEMBIC: try adding symbols\n * U+2699 GEAR: try adding symbols\n * U+269B ATOM SYMBOL: try adding symbols\n * U+269C FLEUR-DE-LIS: try adding symbols\n * U+26A0 WARNING SIGN: try adding symbols\n * U+26A1 HIGH VOLTAGE SIGN: try adding symbols\n * U+26A7 MALE WITH STROKE AND MALE AND FEMALE SIGN: try adding symbols\n * U+26AA MEDIUM WHITE CIRCLE: try adding symbols\n * U+26AB MEDIUM BLACK CIRCLE: try adding symbols\n * U+26B0 COFFIN: try adding symbols\n * U+26B1 FUNERAL URN: try adding symbols\n * U+26BD SOCCER BALL: try adding symbols\n * U+26BE BASEBALL: try adding symbols\n * U+26C4 SNOWMAN WITHOUT SNOW: try adding symbols\n * U+26C5 SUN BEHIND CLOUD: try adding symbols\n * U+26C8 THUNDER CLOUD AND RAIN: try adding symbols\n * U+26CE OPHIUCHUS: try adding symbols\n * U+26CF PICK: try adding symbols\n * U+26D1 HELMET WITH WHITE CROSS: try adding symbols\n * U+26D3 CHAINS: try adding symbols\n * U+26D4 NO ENTRY: try adding symbols\n * U+26E9 SHINTO SHRINE: try adding symbols\n * U+26EA CHURCH: try adding symbols\n * U+26F0 MOUNTAIN: try adding symbols\n * U+26F1 UMBRELLA ON GROUND: try adding symbols\n * U+26F2 FOUNTAIN: try adding symbols\n * U+26F3 FLAG IN HOLE: try adding symbols\n * U+26F4 FERRY: try adding symbols\n * U+26F5 SAILBOAT: try adding symbols\n * U+26F7 SKIER: try adding symbols\n * U+26F8 ICE SKATE: try adding symbols\n * U+26F9 PERSON WITH BALL: try adding symbols\n * U+26FA TENT: try adding symbols\n * U+26FD FUEL PUMP: try adding symbols\n * U+2702 BLACK SCISSORS: try adding symbols\n * U+2705 WHITE HEAVY CHECK MARK: not included in any glyphset definition\n * U+2708 AIRPLANE: try adding symbols\n * U+2709 ENVELOPE: try adding symbols\n * U+270A RAISED FIST: not included in any glyphset definition\n * U+270B RAISED HAND: try adding symbols\n * U+270C VICTORY HAND: try adding symbols\n * U+270D WRITING HAND: try adding symbols\n * U+270F PENCIL: try adding symbols\n * U+2712 BLACK NIB: try adding symbols\n * U+2714 HEAVY CHECK MARK: try adding symbols\n * U+2716 HEAVY MULTIPLICATION X: try adding symbols\n * U+271D LATIN CROSS: try adding symbols\n * U+2721 STAR OF DAVID: try adding symbols\n * U+2728 SPARKLES: not included in any glyphset definition\n * U+2733 EIGHT SPOKED ASTERISK: try adding symbols\n * U+2734 EIGHT POINTED BLACK STAR: try adding symbols\n * U+2744 SNOWFLAKE: try adding symbols\n * U+2747 SPARKLE: try adding symbols\n * U+274C CROSS MARK: try adding symbols\n * U+274E NEGATIVE SQUARED CROSS MARK: not included in any glyphset definition\n * U+2753 BLACK QUESTION MARK ORNAMENT: try adding symbols\n * U+2754 WHITE QUESTION MARK ORNAMENT: not included in any glyphset definition\n * U+2755 WHITE EXCLAMATION MARK ORNAMENT: not included in any glyphset definition\n * U+2757 HEAVY EXCLAMATION MARK SYMBOL: try adding symbols\n * U+2763 HEAVY HEART EXCLAMATION MARK ORNAMENT: try adding symbols\n * U+2764 HEAVY BLACK HEART: try adding symbols\n * U+2795 HEAVY PLUS SIGN: not included in any glyphset definition\n * U+2796 HEAVY MINUS SIGN: not included in any glyphset definition\n * U+2797 HEAVY DIVISION SIGN: not included in any glyphset definition\n * U+27A1 BLACK RIGHTWARDS ARROW: try adding symbols\n * U+27B0 CURLY LOOP: not included in any glyphset definition\n * U+27BF DOUBLE CURLY LOOP: not included in any glyphset definition\n * U+2934 ARROW POINTING RIGHTWARDS THEN CURVING UPWARDS: try adding math\n * U+2935 ARROW POINTING RIGHTWARDS THEN CURVING DOWNWARDS: try adding math\n * U+2B05 LEFTWARDS BLACK ARROW: try adding symbols\n * U+2B06 UPWARDS BLACK ARROW: try adding symbols\n * U+2B07 DOWNWARDS BLACK ARROW: try adding symbols\n * U+2B1B BLACK LARGE SQUARE: try adding symbols\n * U+2B1C WHITE LARGE SQUARE: try adding symbols\n * U+2B50 WHITE MEDIUM STAR: try adding symbols\n * U+2B55 HEAVY LARGE CIRCLE: try adding symbols\n * U+3030 WAVY DASH: try adding math\n * U+303D PART ALTERNATION MARK: not included in any glyphset definition\n * U+3297 CIRCLED IDEOGRAPH CONGRATULATION: not included in any glyphset definition\n * U+3299 CIRCLED IDEOGRAPH SECRET: not included in any glyphset definition\n * U+FE0E VARIATION SELECTOR-15: not included in any glyphset definition\n * U+FE0F VARIATION SELECTOR-16: not included in any glyphset definition\n * U+1F004 MAHJONG TILE RED DRAGON: try adding symbols\n * U+1F0CF PLAYING CARD BLACK JOKER: try adding symbols\n * U+1F170 NEGATIVE SQUARED LATIN CAPITAL LETTER A: try adding symbols\n * U+1F171 NEGATIVE SQUARED LATIN CAPITAL LETTER B: try adding symbols\n * U+1F17E NEGATIVE SQUARED LATIN CAPITAL LETTER O: try adding symbols\n * U+1F17F NEGATIVE SQUARED LATIN CAPITAL LETTER P: try adding symbols\n * U+1F18E NEGATIVE SQUARED AB: try adding symbols\n * U+1F191 SQUARED CL: try adding symbols\n * U+1F192 SQUARED COOL: try adding symbols\n * U+1F193 SQUARED FREE: try adding symbols\n * U+1F194 SQUARED ID: try adding symbols\n * U+1F195 SQUARED NEW: try adding symbols\n * U+1F196 SQUARED NG: try adding symbols\n * U+1F197 SQUARED OK: try adding symbols\n * U+1F198 SQUARED SOS: try adding symbols\n * U+1F199 SQUARED UP WITH EXCLAMATION MARK: try adding symbols\n * U+1F19A SQUARED VS: try adding symbols\n * U+1F1E6 REGIONAL INDICATOR SYMBOL LETTER A: try adding symbols\n * U+1F1E7 REGIONAL INDICATOR SYMBOL LETTER B: try adding symbols\n * U+1F1E8 REGIONAL INDICATOR SYMBOL LETTER C: try adding symbols\n * U+1F1E9 REGIONAL INDICATOR SYMBOL LETTER D: try adding symbols\n * U+1F1EA REGIONAL INDICATOR SYMBOL LETTER E: try adding symbols\n * U+1F1EB REGIONAL INDICATOR SYMBOL LETTER F: try adding symbols\n * U+1F1EC REGIONAL INDICATOR SYMBOL LETTER G: try adding symbols\n * U+1F1ED REGIONAL INDICATOR SYMBOL LETTER H: try adding symbols\n * U+1F1EE REGIONAL INDICATOR SYMBOL LETTER I: try adding symbols\n * U+1F1EF REGIONAL INDICATOR SYMBOL LETTER J: try adding symbols\n * U+1F1F0 REGIONAL INDICATOR SYMBOL LETTER K: try adding symbols\n * U+1F1F1 REGIONAL INDICATOR SYMBOL LETTER L: try adding symbols\n * U+1F1F2 REGIONAL INDICATOR SYMBOL LETTER M: try adding symbols\n * U+1F1F3 REGIONAL INDICATOR SYMBOL LETTER N: try adding symbols\n * U+1F1F4 REGIONAL INDICATOR SYMBOL LETTER O: try adding symbols\n * U+1F1F5 REGIONAL INDICATOR SYMBOL LETTER P: try adding symbols\n * U+1F1F6 REGIONAL INDICATOR SYMBOL LETTER Q: try adding symbols\n * U+1F1F7 REGIONAL INDICATOR SYMBOL LETTER R: try adding symbols\n * U+1F1F8 REGIONAL INDICATOR SYMBOL LETTER S: try adding symbols\n * U+1F1F9 REGIONAL INDICATOR SYMBOL LETTER T: try adding symbols\n * U+1F1FA REGIONAL INDICATOR SYMBOL LETTER U: try adding symbols\n * U+1F1FB REGIONAL INDICATOR SYMBOL LETTER V: try adding symbols\n * U+1F1FC REGIONAL INDICATOR SYMBOL LETTER W: try adding symbols\n * U+1F1FD REGIONAL INDICATOR SYMBOL LETTER X: try adding symbols\n * U+1F1FE REGIONAL INDICATOR SYMBOL LETTER Y: try adding symbols\n * U+1F1FF REGIONAL INDICATOR SYMBOL LETTER Z: try adding symbols\n * U+1F201 SQUARED KATAKANA KOKO: not included in any glyphset definition\n * U+1F202 SQUARED KATAKANA SA: not included in any glyphset definition\n * U+1F21A SQUARED CJK UNIFIED IDEOGRAPH-7121: not included in any glyphset definition\n * U+1F22F SQUARED CJK UNIFIED IDEOGRAPH-6307: not included in any glyphset definition\n * U+1F232 SQUARED CJK UNIFIED IDEOGRAPH-7981: not included in any glyphset definition\n * U+1F233 SQUARED CJK UNIFIED IDEOGRAPH-7A7A: not included in any glyphset definition\n * U+1F234 SQUARED CJK UNIFIED IDEOGRAPH-5408: not included in any glyphset definition\n * U+1F235 SQUARED CJK UNIFIED IDEOGRAPH-6E80: not included in any glyphset definition\n * U+1F236 SQUARED CJK UNIFIED IDEOGRAPH-6709: not included in any glyphset definition\n * U+1F237 SQUARED CJK UNIFIED IDEOGRAPH-6708: not included in any glyphset definition\n * U+1F238 SQUARED CJK UNIFIED IDEOGRAPH-7533: not included in any glyphset definition\n * U+1F239 SQUARED CJK UNIFIED IDEOGRAPH-5272: not included in any glyphset definition\n * U+1F23A SQUARED CJK UNIFIED IDEOGRAPH-55B6: not included in any glyphset definition\n * U+1F250 CIRCLED IDEOGRAPH ADVANTAGE: not included in any glyphset definition\n * U+1F251 CIRCLED IDEOGRAPH ACCEPT: not included in any glyphset definition\n * U+1F300 CYCLONE: not included in any glyphset definition\n * U+1F301 FOGGY: not included in any glyphset definition\n * U+1F302 CLOSED UMBRELLA: not included in any glyphset definition\n * U+1F303 NIGHT WITH STARS: not included in any glyphset definition\n * U+1F304 SUNRISE OVER MOUNTAINS: not included in any glyphset definition\n * U+1F305 SUNRISE: not included in any glyphset definition\n * U+1F306 CITYSCAPE AT DUSK: not included in any glyphset definition\n * U+1F307 SUNSET OVER BUILDINGS: not included in any glyphset definition\n * U+1F308 RAINBOW: not included in any glyphset definition\n * U+1F309 BRIDGE AT NIGHT: not included in any glyphset definition\n * U+1F30A WATER WAVE: not included in any glyphset definition\n * U+1F30B VOLCANO: not included in any glyphset definition\n * U+1F30C MILKY WAY: not included in any glyphset definition\n * U+1F30D EARTH GLOBE EUROPE-AFRICA: try adding symbols\n * U+1F30E EARTH GLOBE AMERICAS: try adding symbols\n * U+1F30F EARTH GLOBE ASIA-AUSTRALIA: try adding symbols\n * U+1F310 GLOBE WITH MERIDIANS: not included in any glyphset definition\n * U+1F311 NEW MOON SYMBOL: not included in any glyphset definition\n * U+1F312 WAXING CRESCENT MOON SYMBOL: not included in any glyphset definition\n * U+1F313 FIRST QUARTER MOON SYMBOL: not included in any glyphset definition\n * U+1F314 WAXING GIBBOUS MOON SYMBOL: not included in any glyphset definition\n * U+1F315 FULL MOON SYMBOL: try adding symbols\n * U+1F316 WANING GIBBOUS MOON SYMBOL: not included in any glyphset definition\n * U+1F317 LAST QUARTER MOON SYMBOL: not included in any glyphset definition\n * U+1F318 WANING CRESCENT MOON SYMBOL: not included in any glyphset definition\n * U+1F319 CRESCENT MOON: not included in any glyphset definition\n * U+1F31A NEW MOON WITH FACE: not included in any glyphset definition\n * U+1F31B FIRST QUARTER MOON WITH FACE: not included in any glyphset definition\n * U+1F31C LAST QUARTER MOON WITH FACE: try adding symbols\n * U+1F31D FULL MOON WITH FACE: not included in any glyphset definition\n * U+1F31E SUN WITH FACE: try adding symbols\n * U+1F31F GLOWING STAR: not included in any glyphset definition\n * U+1F320 SHOOTING STAR: try adding symbols\n * U+1F321 THERMOMETER: try adding symbols\n * U+1F324 WHITE SUN WITH SMALL CLOUD: try adding symbols\n * U+1F325 WHITE SUN BEHIND CLOUD: try adding symbols\n * U+1F326 WHITE SUN BEHIND CLOUD WITH RAIN: try adding symbols\n * U+1F327 CLOUD WITH RAIN: try adding symbols\n * U+1F328 CLOUD WITH SNOW: try adding symbols\n * U+1F329 CLOUD WITH LIGHTNING: try adding symbols\n * U+1F32A CLOUD WITH TORNADO: try adding symbols\n * U+1F32B FOG: try adding symbols\n * U+1F32C WIND BLOWING FACE: try adding symbols\n * U+1F32D HOT DOG: not included in any glyphset definition\n * U+1F32E TACO: not included in any glyphset definition\n * U+1F32F BURRITO: not included in any glyphset definition\n * U+1F330 CHESTNUT: not included in any glyphset definition\n * U+1F331 SEEDLING: not included in any glyphset definition\n * U+1F332 EVERGREEN TREE: not included in any glyphset definition\n * U+1F333 DECIDUOUS TREE: not included in any glyphset definition\n * U+1F334 PALM TREE: not included in any glyphset definition\n * U+1F335 CACTUS: not included in any glyphset definition\n * U+1F336 HOT PEPPER: try adding symbols\n * U+1F337 TULIP: not included in any glyphset definition\n * U+1F338 CHERRY BLOSSOM: not included in any glyphset definition\n * U+1F339 ROSE: not included in any glyphset definition\n * U+1F33A HIBISCUS: not included in any glyphset definition\n * U+1F33B SUNFLOWER: not included in any glyphset definition\n * U+1F33C BLOSSOM: not included in any glyphset definition\n * U+1F33D EAR OF MAIZE: not included in any glyphset definition\n * U+1F33E EAR OF RICE: not included in any glyphset definition\n * U+1F33F HERB: not included in any glyphset definition\n * U+1F340 FOUR LEAF CLOVER: not included in any glyphset definition\n * U+1F341 MAPLE LEAF: not included in any glyphset definition\n * U+1F342 FALLEN LEAF: not included in any glyphset definition\n * U+1F343 LEAF FLUTTERING IN WIND: not included in any glyphset definition\n * U+1F344 MUSHROOM: not included in any glyphset definition\n * U+1F345 TOMATO: not included in any glyphset definition\n * U+1F346 AUBERGINE: not included in any glyphset definition\n * U+1F347 GRAPES: not included in any glyphset definition\n * U+1F348 MELON: not included in any glyphset definition\n * U+1F349 WATERMELON: not included in any glyphset definition\n * U+1F34A TANGERINE: not included in any glyphset definition\n * U+1F34B LEMON: not included in any glyphset definition\n * U+1F34C BANANA: not included in any glyphset definition\n * U+1F34D PINEAPPLE: not included in any glyphset definition\n * U+1F34E RED APPLE: not included in any glyphset definition\n * U+1F34F GREEN APPLE: not included in any glyphset definition\n * U+1F350 PEAR: not included in any glyphset definition\n * U+1F351 PEACH: not included in any glyphset definition\n * U+1F352 CHERRIES: not included in any glyphset definition\n * U+1F353 STRAWBERRY: not included in any glyphset definition\n * U+1F354 HAMBURGER: not included in any glyphset definition\n * U+1F355 SLICE OF PIZZA: not included in any glyphset definition\n * U+1F356 MEAT ON BONE: not included in any glyphset definition\n * U+1F357 POULTRY LEG: not included in any glyphset definition\n * U+1F358 RICE CRACKER: not included in any glyphset definition\n * U+1F359 RICE BALL: not included in any glyphset definition\n * U+1F35A COOKED RICE: not included in any glyphset definition\n * U+1F35B CURRY AND RICE: not included in any glyphset definition\n * U+1F35C STEAMING BOWL: not included in any glyphset definition\n * U+1F35D SPAGHETTI: not included in any glyphset definition\n * U+1F35E BREAD: not included in any glyphset definition\n * U+1F35F FRENCH FRIES: not included in any glyphset definition\n * U+1F360 ROASTED SWEET POTATO: not included in any glyphset definition\n * U+1F361 DANGO: not included in any glyphset definition\n * U+1F362 ODEN: not included in any glyphset definition\n * U+1F363 SUSHI: not included in any glyphset definition\n * U+1F364 FRIED SHRIMP: not included in any glyphset definition\n * U+1F365 FISH CAKE WITH SWIRL DESIGN: not included in any glyphset definition\n * U+1F366 SOFT ICE CREAM: not included in any glyphset definition\n * U+1F367 SHAVED ICE: not included in any glyphset definition\n * U+1F368 ICE CREAM: not included in any glyphset definition\n * U+1F369 DOUGHNUT: not included in any glyphset definition\n * U+1F36A COOKIE: not included in any glyphset definition\n * U+1F36B CHOCOLATE BAR: not included in any glyphset definition\n * U+1F36C CANDY: not included in any glyphset definition\n * U+1F36D LOLLIPOP: not included in any glyphset definition\n * U+1F36E CUSTARD: not included in any glyphset definition\n * U+1F36F HONEY POT: not included in any glyphset definition\n * U+1F370 SHORTCAKE: not included in any glyphset definition\n * U+1F371 BENTO BOX: not included in any glyphset definition\n * U+1F372 POT OF FOOD: not included in any glyphset definition\n * U+1F373 COOKING: not included in any glyphset definition\n * U+1F374 FORK AND KNIFE: not included in any glyphset definition\n * U+1F375 TEACUP WITHOUT HANDLE: not included in any glyphset definition\n * U+1F376 SAKE BOTTLE AND CUP: not included in any glyphset definition\n * U+1F377 WINE GLASS: not included in any glyphset definition\n * U+1F378 COCKTAIL GLASS: try adding symbols\n * U+1F379 TROPICAL DRINK: not included in any glyphset definition\n * U+1F37A BEER MUG: not included in any glyphset definition\n * U+1F37B CLINKING BEER MUGS: not included in any glyphset definition\n * U+1F37C BABY BOTTLE: not included in any glyphset definition\n * U+1F37D FORK AND KNIFE WITH PLATE: try adding symbols\n * U+1F37E BOTTLE WITH POPPING CORK: not included in any glyphset definition\n * U+1F37F POPCORN: not included in any glyphset definition\n * U+1F380 RIBBON: not included in any glyphset definition\n * U+1F381 WRAPPED PRESENT: not included in any glyphset definition\n * U+1F382 BIRTHDAY CAKE: try adding symbols\n * U+1F383 JACK-O-LANTERN: not included in any glyphset definition\n * U+1F384 CHRISTMAS TREE: not included in any glyphset definition\n * U+1F385 FATHER CHRISTMAS: not included in any glyphset definition\n * U+1F386 FIREWORKS: not included in any glyphset definition\n * U+1F387 FIREWORK SPARKLER: not included in any glyphset definition\n * U+1F388 BALLOON: not included in any glyphset definition\n * U+1F389 PARTY POPPER: not included in any glyphset definition\n * U+1F38A CONFETTI BALL: not included in any glyphset definition\n * U+1F38B TANABATA TREE: not included in any glyphset definition\n * U+1F38C CROSSED FLAGS: not included in any glyphset definition\n * U+1F38D PINE DECORATION: not included in any glyphset definition\n * U+1F38E JAPANESE DOLLS: not included in any glyphset definition\n * U+1F38F CARP STREAMER: not included in any glyphset definition\n * U+1F390 WIND CHIME: not included in any glyphset definition\n * U+1F391 MOON VIEWING CEREMONY: not included in any glyphset definition\n * U+1F392 SCHOOL SATCHEL: not included in any glyphset definition\n * U+1F393 GRADUATION CAP: try adding symbols\n * U+1F396 MILITARY MEDAL: try adding symbols\n * U+1F397 REMINDER RIBBON: try adding symbols\n * U+1F399 STUDIO MICROPHONE: try adding symbols\n * U+1F39A LEVEL SLIDER: try adding symbols\n * U+1F39B CONTROL KNOBS: try adding symbols\n * U+1F39E FILM FRAMES: try adding symbols\n * U+1F39F ADMISSION TICKETS: try adding symbols\n * U+1F3A0 CAROUSEL HORSE: not included in any glyphset definition\n * U+1F3A1 FERRIS WHEEL: not included in any glyphset definition\n * U+1F3A2 ROLLER COASTER: not included in any glyphset definition\n * U+1F3A3 FISHING POLE AND FISH: not included in any glyphset definition\n * U+1F3A4 MICROPHONE: not included in any glyphset definition\n * U+1F3A5 MOVIE CAMERA: not included in any glyphset definition\n * U+1F3A6 CINEMA: not included in any glyphset definition\n * U+1F3A7 HEADPHONE: try adding symbols\n * U+1F3A8 ARTIST PALETTE: try adding symbols\n * U+1F3A9 TOP HAT: not included in any glyphset definition\n * U+1F3AA CIRCUS TENT: not included in any glyphset definition\n * U+1F3AB TICKET: not included in any glyphset definition\n * U+1F3AC CLAPPER BOARD: try adding symbols\n * U+1F3AD PERFORMING ARTS: try adding symbols\n * U+1F3AE VIDEO GAME: try adding symbols\n * U+1F3AF DIRECT HIT: try adding symbols\n * U+1F3B0 SLOT MACHINE: not included in any glyphset definition\n * U+1F3B1 BILLIARDS: not included in any glyphset definition\n * U+1F3B2 GAME DIE: not included in any glyphset definition\n * U+1F3B3 BOWLING: not included in any glyphset definition\n * U+1F3B4 FLOWER PLAYING CARDS: not included in any glyphset definition\n * U+1F3B5 MUSICAL NOTE: not included in any glyphset definition\n * U+1F3B6 MULTIPLE MUSICAL NOTES: not included in any glyphset definition\n * U+1F3B7 SAXOPHONE: not included in any glyphset definition\n * U+1F3B8 GUITAR: not included in any glyphset definition\n * U+1F3B9 MUSICAL KEYBOARD: not included in any glyphset definition\n * U+1F3BA TRUMPET: not included in any glyphset definition\n * U+1F3BB VIOLIN: not included in any glyphset definition\n * U+1F3BC MUSICAL SCORE: not included in any glyphset definition\n * U+1F3BD RUNNING SHIRT WITH SASH: not included in any glyphset definition\n * U+1F3BE TENNIS RACQUET AND BALL: not included in any glyphset definition\n * U+1F3BF SKI AND SKI BOOT: not included in any glyphset definition\n * U+1F3C0 BASKETBALL AND HOOP: not included in any glyphset definition\n * U+1F3C1 CHEQUERED FLAG: not included in any glyphset definition\n * U+1F3C2 SNOWBOARDER: try adding symbols\n * U+1F3C3 RUNNER: not included in any glyphset definition\n * U+1F3C4 SURFER: try adding symbols\n * U+1F3C5 SPORTS MEDAL: try adding symbols\n * U+1F3C6 TROPHY: try adding symbols\n * U+1F3C7 HORSE RACING: not included in any glyphset definition\n * U+1F3C8 AMERICAN FOOTBALL: not included in any glyphset definition\n * U+1F3C9 RUGBY FOOTBALL: not included in any glyphset definition\n * U+1F3CA SWIMMER: try adding symbols\n * U+1F3CB WEIGHT LIFTER: try adding symbols\n * U+1F3CC GOLFER: try adding symbols\n * U+1F3CD RACING MOTORCYCLE: try adding symbols\n * U+1F3CE RACING CAR: try adding symbols\n * U+1F3CF CRICKET BAT AND BALL: not included in any glyphset definition\n * U+1F3D0 VOLLEYBALL: not included in any glyphset definition\n * U+1F3D1 FIELD HOCKEY STICK AND BALL: not included in any glyphset definition\n * U+1F3D2 ICE HOCKEY STICK AND PUCK: not included in any glyphset definition\n * U+1F3D3 TABLE TENNIS PADDLE AND BALL: not included in any glyphset definition\n * U+1F3D4 SNOW CAPPED MOUNTAIN: try adding symbols\n * U+1F3D5 CAMPING: try adding symbols\n * U+1F3D6 BEACH WITH UMBRELLA: try adding symbols\n * U+1F3D7 BUILDING CONSTRUCTION: try adding symbols\n * U+1F3D8 HOUSE BUILDINGS: try adding symbols\n * U+1F3D9 CITYSCAPE: try adding symbols\n * U+1F3DA DERELICT HOUSE BUILDING: try adding symbols\n * U+1F3DB CLASSICAL BUILDING: try adding symbols\n * U+1F3DC DESERT: try adding symbols\n * U+1F3DD DESERT ISLAND: try adding symbols\n * U+1F3DE NATIONAL PARK: try adding symbols\n * U+1F3DF STADIUM: try adding symbols\n * U+1F3E0 HOUSE BUILDING: try adding symbols\n * U+1F3E1 HOUSE WITH GARDEN: not included in any glyphset definition\n * U+1F3E2 OFFICE BUILDING: not included in any glyphset definition\n * U+1F3E3 JAPANESE POST OFFICE: not included in any glyphset definition\n * U+1F3E4 EUROPEAN POST OFFICE: not included in any glyphset definition\n * U+1F3E5 HOSPITAL: not included in any glyphset definition\n * U+1F3E6 BANK: not included in any glyphset definition\n * U+1F3E7 AUTOMATED TELLER MACHINE: not included in any glyphset definition\n * U+1F3E8 HOTEL: not included in any glyphset definition\n * U+1F3E9 LOVE HOTEL: not included in any glyphset definition\n * U+1F3EA CONVENIENCE STORE: not included in any glyphset definition\n * U+1F3EB SCHOOL: not included in any glyphset definition\n * U+1F3EC DEPARTMENT STORE: not included in any glyphset definition\n * U+1F3ED FACTORY: try adding symbols\n * U+1F3EE IZAKAYA LANTERN: not included in any glyphset definition\n * U+1F3EF JAPANESE CASTLE: not included in any glyphset definition\n * U+1F3F0 EUROPEAN CASTLE: not included in any glyphset definition\n * U+1F3F3 WAVING WHITE FLAG: try adding symbols\n * U+1F3F4 WAVING BLACK FLAG: not included in any glyphset definition\n * U+1F3F5 ROSETTE: try adding symbols\n * U+1F3F7 LABEL: try adding symbols\n * U+1F3F8 BADMINTON RACQUET AND SHUTTLECOCK: not included in any glyphset definition\n * U+1F3F9 BOW AND ARROW: not included in any glyphset definition\n * U+1F3FA AMPHORA: not included in any glyphset definition\n * U+1F3FB EMOJI MODIFIER FITZPATRICK TYPE-1-2: not included in any glyphset definition\n * U+1F3FC EMOJI MODIFIER FITZPATRICK TYPE-3: not included in any glyphset definition\n * U+1F3FD EMOJI MODIFIER FITZPATRICK TYPE-4: not included in any glyphset definition\n * U+1F3FE EMOJI MODIFIER FITZPATRICK TYPE-5: not included in any glyphset definition\n * U+1F3FF EMOJI MODIFIER FITZPATRICK TYPE-6: not included in any glyphset definition\n * U+1F400 RAT: not included in any glyphset definition\n * U+1F401 MOUSE: not included in any glyphset definition\n * U+1F402 OX: not included in any glyphset definition\n * U+1F403 WATER BUFFALO: not included in any glyphset definition\n * U+1F404 COW: not included in any glyphset definition\n * U+1F405 TIGER: not included in any glyphset definition\n * U+1F406 LEOPARD: not included in any glyphset definition\n * U+1F407 RABBIT: not included in any glyphset definition\n * U+1F408 CAT: try adding symbols\n * U+1F409 DRAGON: not included in any glyphset definition\n * U+1F40A CROCODILE: not included in any glyphset definition\n * U+1F40B WHALE: not included in any glyphset definition\n * U+1F40C SNAIL: not included in any glyphset definition\n * U+1F40D SNAKE: not included in any glyphset definition\n * U+1F40E HORSE: not included in any glyphset definition\n * U+1F40F RAM: not included in any glyphset definition\n * U+1F410 GOAT: not included in any glyphset definition\n * U+1F411 SHEEP: not included in any glyphset definition\n * U+1F412 MONKEY: not included in any glyphset definition\n * U+1F413 ROOSTER: not included in any glyphset definition\n * U+1F414 CHICKEN: not included in any glyphset definition\n * U+1F415 DOG: try adding symbols\n * U+1F416 PIG: not included in any glyphset definition\n * U+1F417 BOAR: not included in any glyphset definition\n * U+1F418 ELEPHANT: not included in any glyphset definition\n * U+1F419 OCTOPUS: not included in any glyphset definition\n * U+1F41A SPIRAL SHELL: not included in any glyphset definition\n * U+1F41B BUG: not included in any glyphset definition\n * U+1F41C ANT: not included in any glyphset definition\n * U+1F41D HONEYBEE: not included in any glyphset definition\n * U+1F41E LADY BEETLE: not included in any glyphset definition\n * U+1F41F FISH: try adding symbols\n * U+1F420 TROPICAL FISH: not included in any glyphset definition\n * U+1F421 BLOWFISH: not included in any glyphset definition\n * U+1F422 TURTLE: not included in any glyphset definition\n * U+1F423 HATCHING CHICK: not included in any glyphset definition\n * U+1F424 BABY CHICK: not included in any glyphset definition\n * U+1F425 FRONT-FACING BABY CHICK: not included in any glyphset definition\n * U+1F426 BIRD: try adding symbols\n * U+1F427 PENGUIN: not included in any glyphset definition\n * U+1F428 KOALA: not included in any glyphset definition\n * U+1F429 POODLE: not included in any glyphset definition\n * U+1F42A DROMEDARY CAMEL: not included in any glyphset definition\n * U+1F42B BACTRIAN CAMEL: not included in any glyphset definition\n * U+1F42C DOLPHIN: not included in any glyphset definition\n * U+1F42D MOUSE FACE: not included in any glyphset definition\n * U+1F42E COW FACE: not included in any glyphset definition\n * U+1F42F TIGER FACE: not included in any glyphset definition\n * U+1F430 RABBIT FACE: not included in any glyphset definition\n * U+1F431 CAT FACE: not included in any glyphset definition\n * U+1F432 DRAGON FACE: not included in any glyphset definition\n * U+1F433 SPOUTING WHALE: not included in any glyphset definition\n * U+1F434 HORSE FACE: not included in any glyphset definition\n * U+1F435 MONKEY FACE: not included in any glyphset definition\n * U+1F436 DOG FACE: not included in any glyphset definition\n * U+1F437 PIG FACE: not included in any glyphset definition\n * U+1F438 FROG FACE: not included in any glyphset definition\n * U+1F439 HAMSTER FACE: not included in any glyphset definition\n * U+1F43A WOLF FACE: not included in any glyphset definition\n * U+1F43B BEAR FACE: not included in any glyphset definition\n * U+1F43C PANDA FACE: not included in any glyphset definition\n * U+1F43D PIG NOSE: not included in any glyphset definition\n * U+1F43E PAW PRINTS: not included in any glyphset definition\n * U+1F43F CHIPMUNK: try adding symbols\n * U+1F440 EYES: not included in any glyphset definition\n * U+1F441 EYE: try adding symbols\n * U+1F442 EAR: try adding symbols\n * U+1F443 NOSE: not included in any glyphset definition\n * U+1F444 MOUTH: try adding symbols\n * U+1F445 TONGUE: not included in any glyphset definition\n * U+1F446 WHITE UP POINTING BACKHAND INDEX: try adding symbols\n * U+1F447 WHITE DOWN POINTING BACKHAND INDEX: try adding symbols\n * U+1F448 WHITE LEFT POINTING BACKHAND INDEX: try adding symbols\n * U+1F449 WHITE RIGHT POINTING BACKHAND INDEX: try adding symbols\n * U+1F44A FISTED HAND SIGN: not included in any glyphset definition\n * U+1F44B WAVING HAND SIGN: not included in any glyphset definition\n * U+1F44C OK HAND SIGN: try adding symbols\n * U+1F44D THUMBS UP SIGN: try adding symbols\n * U+1F44E THUMBS DOWN SIGN: try adding symbols\n * U+1F44F CLAPPING HANDS SIGN: not included in any glyphset definition\n * U+1F450 OPEN HANDS SIGN: not included in any glyphset definition\n * U+1F451 CROWN: not included in any glyphset definition\n * U+1F452 WOMANS HAT: not included in any glyphset definition\n * U+1F453 EYEGLASSES: try adding symbols\n * U+1F454 NECKTIE: not included in any glyphset definition\n * U+1F455 T-SHIRT: not included in any glyphset definition\n * U+1F456 JEANS: not included in any glyphset definition\n * U+1F457 DRESS: not included in any glyphset definition\n * U+1F458 KIMONO: not included in any glyphset definition\n * U+1F459 BIKINI: not included in any glyphset definition\n * U+1F45A WOMANS CLOTHES: not included in any glyphset definition\n * U+1F45B PURSE: not included in any glyphset definition\n * U+1F45C HANDBAG: not included in any glyphset definition\n * U+1F45D POUCH: not included in any glyphset definition\n * U+1F45E MANS SHOE: not included in any glyphset definition\n * U+1F45F ATHLETIC SHOE: not included in any glyphset definition\n * U+1F460 HIGH-HEELED SHOE: not included in any glyphset definition\n * U+1F461 WOMANS SANDAL: not included in any glyphset definition\n * U+1F462 WOMANS BOOTS: not included in any glyphset definition\n * U+1F463 FOOTPRINTS: not included in any glyphset definition\n * U+1F464 BUST IN SILHOUETTE: not included in any glyphset definition\n * U+1F465 BUSTS IN SILHOUETTE: not included in any glyphset definition\n * U+1F466 BOY: not included in any glyphset definition\n * U+1F467 GIRL: not included in any glyphset definition\n * U+1F468 MAN: not included in any glyphset definition\n * U+1F469 WOMAN: not included in any glyphset definition\n * U+1F46A FAMILY: try adding symbols\n * U+1F46B MAN AND WOMAN HOLDING HANDS: not included in any glyphset definition\n * U+1F46C TWO MEN HOLDING HANDS: not included in any glyphset definition\n * U+1F46D TWO WOMEN HOLDING HANDS: not included in any glyphset definition\n * U+1F46E POLICE OFFICER: not included in any glyphset definition\n * U+1F46F WOMAN WITH BUNNY EARS: not included in any glyphset definition\n * U+1F470 BRIDE WITH VEIL: not included in any glyphset definition\n * U+1F471 PERSON WITH BLOND HAIR: not included in any glyphset definition\n * U+1F472 MAN WITH GUA PI MAO: not included in any glyphset definition\n * U+1F473 MAN WITH TURBAN: not included in any glyphset definition\n * U+1F474 OLDER MAN: not included in any glyphset definition\n * U+1F475 OLDER WOMAN: not included in any glyphset definition\n * U+1F476 BABY: not included in any glyphset definition\n * U+1F477 CONSTRUCTION WORKER: not included in any glyphset definition\n * U+1F478 PRINCESS: not included in any glyphset definition\n * U+1F479 JAPANESE OGRE: not included in any glyphset definition\n * U+1F47A JAPANESE GOBLIN: not included in any glyphset definition\n * U+1F47B GHOST: not included in any glyphset definition\n * U+1F47C BABY ANGEL: not included in any glyphset definition\n * U+1F47D EXTRATERRESTRIAL ALIEN: try adding symbols\n * U+1F47E ALIEN MONSTER: not included in any glyphset definition\n * U+1F47F IMP: not included in any glyphset definition\n * U+1F480 SKULL: not included in any glyphset definition\n * U+1F481 INFORMATION DESK PERSON: not included in any glyphset definition\n * U+1F482 GUARDSMAN: not included in any glyphset definition\n * U+1F483 DANCER: not included in any glyphset definition\n * U+1F484 LIPSTICK: not included in any glyphset definition\n * U+1F485 NAIL POLISH: not included in any glyphset definition\n * U+1F486 FACE MASSAGE: not included in any glyphset definition\n * U+1F487 HAIRCUT: not included in any glyphset definition\n * U+1F488 BARBER POLE: not included in any glyphset definition\n * U+1F489 SYRINGE: not included in any glyphset definition\n * U+1F48A PILL: not included in any glyphset definition\n * U+1F48B KISS MARK: not included in any glyphset definition\n * U+1F48C LOVE LETTER: not included in any glyphset definition\n * U+1F48D RING: not included in any glyphset definition\n * U+1F48E GEM STONE: not included in any glyphset definition\n * U+1F48F KISS: not included in any glyphset definition\n * U+1F490 BOUQUET: not included in any glyphset definition\n * U+1F491 COUPLE WITH HEART: not included in any glyphset definition\n * U+1F492 WEDDING: not included in any glyphset definition\n * U+1F493 BEATING HEART: not included in any glyphset definition\n * U+1F494 BROKEN HEART: not included in any glyphset definition\n * U+1F495 TWO HEARTS: not included in any glyphset definition\n * U+1F496 SPARKLING HEART: not included in any glyphset definition\n * U+1F497 GROWING HEART: not included in any glyphset definition\n * U+1F498 HEART WITH ARROW: not included in any glyphset definition\n * U+1F499 BLUE HEART: not included in any glyphset definition\n * U+1F49A GREEN HEART: not included in any glyphset definition\n * U+1F49B YELLOW HEART: not included in any glyphset definition\n * U+1F49C PURPLE HEART: not included in any glyphset definition\n * U+1F49D HEART WITH RIBBON: not included in any glyphset definition\n * U+1F49E REVOLVING HEARTS: not included in any glyphset definition\n * U+1F49F HEART DECORATION: not included in any glyphset definition\n * U+1F4A0 DIAMOND SHAPE WITH A DOT INSIDE: not included in any glyphset definition\n * U+1F4A1 ELECTRIC LIGHT BULB: not included in any glyphset definition\n * U+1F4A2 ANGER SYMBOL: not included in any glyphset definition\n * U+1F4A3 BOMB: try adding symbols\n * U+1F4A4 SLEEPING SYMBOL: not included in any glyphset definition\n * U+1F4A5 COLLISION SYMBOL: not included in any glyphset definition\n * U+1F4A6 SPLASHING SWEAT SYMBOL: not included in any glyphset definition\n * U+1F4A7 DROPLET: not included in any glyphset definition\n * U+1F4A8 DASH SYMBOL: not included in any glyphset definition\n * U+1F4A9 PILE OF POO: not included in any glyphset definition\n * U+1F4AA FLEXED BICEPS: not included in any glyphset definition\n * U+1F4AB DIZZY SYMBOL: not included in any glyphset definition\n * U+1F4AC SPEECH BALLOON: not included in any glyphset definition\n * U+1F4AD THOUGHT BALLOON: not included in any glyphset definition\n * U+1F4AE WHITE FLOWER: not included in any glyphset definition\n * U+1F4AF HUNDRED POINTS SYMBOL: not included in any glyphset definition\n * U+1F4B0 MONEY BAG: try adding symbols\n * U+1F4B1 CURRENCY EXCHANGE: not included in any glyphset definition\n * U+1F4B2 HEAVY DOLLAR SIGN: not included in any glyphset definition\n * U+1F4B3 CREDIT CARD: try adding symbols\n * U+1F4B4 BANKNOTE WITH YEN SIGN: not included in any glyphset definition\n * U+1F4B5 BANKNOTE WITH DOLLAR SIGN: not included in any glyphset definition\n * U+1F4B6 BANKNOTE WITH EURO SIGN: not included in any glyphset definition\n * U+1F4B7 BANKNOTE WITH POUND SIGN: not included in any glyphset definition\n * U+1F4B8 MONEY WITH WINGS: not included in any glyphset definition\n * U+1F4B9 CHART WITH UPWARDS TREND AND YEN SIGN: try adding symbols\n * U+1F4BA SEAT: not included in any glyphset definition\n * U+1F4BB PERSONAL COMPUTER: try adding symbols\n * U+1F4BC BRIEFCASE: not included in any glyphset definition\n * U+1F4BD MINIDISC: not included in any glyphset definition\n * U+1F4BE FLOPPY DISK: not included in any glyphset definition\n * U+1F4BF OPTICAL DISC: try adding symbols\n * U+1F4C0 DVD: not included in any glyphset definition\n * U+1F4C1 FILE FOLDER: not included in any glyphset definition\n * U+1F4C2 OPEN FILE FOLDER: not included in any glyphset definition\n * U+1F4C3 PAGE WITH CURL: not included in any glyphset definition\n * U+1F4C4 PAGE FACING UP: not included in any glyphset definition\n * U+1F4C5 CALENDAR: not included in any glyphset definition\n * U+1F4C6 TEAR-OFF CALENDAR: not included in any glyphset definition\n * U+1F4C7 CARD INDEX: not included in any glyphset definition\n * U+1F4C8 CHART WITH UPWARDS TREND: try adding symbols\n * U+1F4C9 CHART WITH DOWNWARDS TREND: try adding symbols\n * U+1F4CA BAR CHART: try adding symbols\n * U+1F4CB CLIPBOARD: try adding symbols\n * U+1F4CC PUSHPIN: not included in any glyphset definition\n * U+1F4CD ROUND PUSHPIN: not included in any glyphset definition\n * U+1F4CE PAPERCLIP: not included in any glyphset definition\n * U+1F4CF STRAIGHT RULER: not included in any glyphset definition\n * U+1F4D0 TRIANGULAR RULER: not included in any glyphset definition\n * U+1F4D1 BOOKMARK TABS: not included in any glyphset definition\n * U+1F4D2 LEDGER: not included in any glyphset definition\n * U+1F4D3 NOTEBOOK: not included in any glyphset definition\n * U+1F4D4 NOTEBOOK WITH DECORATIVE COVER: not included in any glyphset definition\n * U+1F4D5 CLOSED BOOK: not included in any glyphset definition\n * U+1F4D6 OPEN BOOK: try adding symbols\n * U+1F4D7 GREEN BOOK: not included in any glyphset definition\n * U+1F4D8 BLUE BOOK: not included in any glyphset definition\n * U+1F4D9 ORANGE BOOK: not included in any glyphset definition\n * U+1F4DA BOOKS: try adding symbols\n * U+1F4DB NAME BADGE: not included in any glyphset definition\n * U+1F4DC SCROLL: not included in any glyphset definition\n * U+1F4DD MEMO: not included in any glyphset definition\n * U+1F4DE TELEPHONE RECEIVER: not included in any glyphset definition\n * U+1F4DF PAGER: try adding symbols\n * U+1F4E0 FAX MACHINE: not included in any glyphset definition\n * U+1F4E1 SATELLITE ANTENNA: not included in any glyphset definition\n * U+1F4E2 PUBLIC ADDRESS LOUDSPEAKER: not included in any glyphset definition\n * U+1F4E3 CHEERING MEGAPHONE: try adding symbols\n * U+1F4E4 OUTBOX TRAY: try adding symbols\n * U+1F4E5 INBOX TRAY: try adding symbols\n * U+1F4E6 PACKAGE: try adding symbols\n * U+1F4E7 E-MAIL SYMBOL: not included in any glyphset definition\n * U+1F4E8 INCOMING ENVELOPE: not included in any glyphset definition\n * U+1F4E9 ENVELOPE WITH DOWNWARDS ARROW ABOVE: not included in any glyphset definition\n * U+1F4EA CLOSED MAILBOX WITH LOWERED FLAG: try adding symbols\n * U+1F4EB CLOSED MAILBOX WITH RAISED FLAG: try adding symbols\n * U+1F4EC OPEN MAILBOX WITH RAISED FLAG: try adding symbols\n * U+1F4ED OPEN MAILBOX WITH LOWERED FLAG: try adding symbols\n * U+1F4EE POSTBOX: not included in any glyphset definition\n * U+1F4EF POSTAL HORN: not included in any glyphset definition\n * U+1F4F0 NEWSPAPER: not included in any glyphset definition\n * U+1F4F1 MOBILE PHONE: not included in any glyphset definition\n * U+1F4F2 MOBILE PHONE WITH RIGHTWARDS ARROW AT LEFT: not included in any glyphset definition\n * U+1F4F3 VIBRATION MODE: not included in any glyphset definition\n * U+1F4F4 MOBILE PHONE OFF: not included in any glyphset definition\n * U+1F4F5 NO MOBILE PHONES: not included in any glyphset definition\n * U+1F4F6 ANTENNA WITH BARS: not included in any glyphset definition\n * U+1F4F7 CAMERA: try adding symbols\n * U+1F4F8 CAMERA WITH FLASH: not included in any glyphset definition\n * U+1F4F9 VIDEO CAMERA: try adding symbols\n * U+1F4FA TELEVISION: try adding symbols\n * U+1F4FB RADIO: try adding symbols\n * U+1F4FC VIDEOCASSETTE: not included in any glyphset definition\n * U+1F4FD FILM PROJECTOR: try adding symbols\n * U+1F4FF PRAYER BEADS: not included in any glyphset definition\n * U+1F500 TWISTED RIGHTWARDS ARROWS: not included in any glyphset definition\n * U+1F501 CLOCKWISE RIGHTWARDS AND LEFTWARDS OPEN CIRCLE ARROWS: not included in any glyphset definition\n * U+1F502 CLOCKWISE RIGHTWARDS AND LEFTWARDS OPEN CIRCLE ARROWS WITH CIRCLED ONE OVERLAY: not included in any glyphset definition\n * U+1F503 CLOCKWISE DOWNWARDS AND UPWARDS OPEN CIRCLE ARROWS: try adding symbols\n * U+1F504 ANTICLOCKWISE DOWNWARDS AND UPWARDS OPEN CIRCLE ARROWS: not included in any glyphset definition\n * U+1F505 LOW BRIGHTNESS SYMBOL: not included in any glyphset definition\n * U+1F506 HIGH BRIGHTNESS SYMBOL: not included in any glyphset definition\n * U+1F507 SPEAKER WITH CANCELLATION STROKE: try adding symbols\n * U+1F508 SPEAKER: try adding symbols\n * U+1F509 SPEAKER WITH ONE SOUND WAVE: try adding symbols\n * U+1F50A SPEAKER WITH THREE SOUND WAVES: try adding symbols\n * U+1F50B BATTERY: try adding symbols\n * U+1F50C ELECTRIC PLUG: not included in any glyphset definition\n * U+1F50D LEFT-POINTING MAGNIFYING GLASS: try adding symbols\n * U+1F50E RIGHT-POINTING MAGNIFYING GLASS: not included in any glyphset definition\n * U+1F50F LOCK WITH INK PEN: not included in any glyphset definition\n * U+1F510 CLOSED LOCK WITH KEY: not included in any glyphset definition\n * U+1F511 KEY: not included in any glyphset definition\n * U+1F512 LOCK: try adding symbols\n * U+1F513 OPEN LOCK: try adding symbols\n * U+1F514 BELL: not included in any glyphset definition\n * U+1F515 BELL WITH CANCELLATION STROKE: not included in any glyphset definition\n * U+1F516 BOOKMARK: not included in any glyphset definition\n * U+1F517 LINK SYMBOL: not included in any glyphset definition\n * U+1F518 RADIO BUTTON: not included in any glyphset definition\n * U+1F519 BACK WITH LEFTWARDS ARROW ABOVE: not included in any glyphset definition\n * U+1F51A END WITH LEFTWARDS ARROW ABOVE: not included in any glyphset definition\n * U+1F51B ON WITH EXCLAMATION MARK WITH LEFT RIGHT ARROW ABOVE: not included in any glyphset definition\n * U+1F51C SOON WITH RIGHTWARDS ARROW ABOVE: not included in any glyphset definition\n * U+1F51D TOP WITH UPWARDS ARROW ABOVE: not included in any glyphset definition\n * U+1F51E NO ONE UNDER EIGHTEEN SYMBOL: not included in any glyphset definition\n * U+1F51F KEYCAP TEN: not included in any glyphset definition\n * U+1F520 INPUT SYMBOL FOR LATIN CAPITAL LETTERS: not included in any glyphset definition\n * U+1F521 INPUT SYMBOL FOR LATIN SMALL LETTERS: not included in any glyphset definition\n * U+1F522 INPUT SYMBOL FOR NUMBERS: not included in any glyphset definition\n * U+1F523 INPUT SYMBOL FOR SYMBOLS: not included in any glyphset definition\n * U+1F524 INPUT SYMBOL FOR LATIN LETTERS: not included in any glyphset definition\n * U+1F525 FIRE: not included in any glyphset definition\n * U+1F526 ELECTRIC TORCH: not included in any glyphset definition\n * U+1F527 WRENCH: not included in any glyphset definition\n * U+1F528 HAMMER: not included in any glyphset definition\n * U+1F529 NUT AND BOLT: not included in any glyphset definition\n * U+1F52A HOCHO: not included in any glyphset definition\n * U+1F52B PISTOL: not included in any glyphset definition\n * U+1F52C MICROSCOPE: not included in any glyphset definition\n * U+1F52D TELESCOPE: not included in any glyphset definition\n * U+1F52E CRYSTAL BALL: not included in any glyphset definition\n * U+1F52F SIX POINTED STAR WITH MIDDLE DOT: not included in any glyphset definition\n * U+1F530 JAPANESE SYMBOL FOR BEGINNER: not included in any glyphset definition\n * U+1F531 TRIDENT EMBLEM: not included in any glyphset definition\n * U+1F532 BLACK SQUARE BUTTON: not included in any glyphset definition\n * U+1F533 WHITE SQUARE BUTTON: not included in any glyphset definition\n * U+1F534 LARGE RED CIRCLE: not included in any glyphset definition\n * U+1F535 LARGE BLUE CIRCLE: not included in any glyphset definition\n * U+1F536 LARGE ORANGE DIAMOND: not included in any glyphset definition\n * U+1F537 LARGE BLUE DIAMOND: not included in any glyphset definition\n * U+1F538 SMALL ORANGE DIAMOND: not included in any glyphset definition\n * U+1F539 SMALL BLUE DIAMOND: not included in any glyphset definition\n * U+1F53A UP-POINTING RED TRIANGLE: not included in any glyphset definition\n * U+1F53B DOWN-POINTING RED TRIANGLE: not included in any glyphset definition\n * U+1F53C UP-POINTING SMALL RED TRIANGLE: not included in any glyphset definition\n * U+1F53D DOWN-POINTING SMALL RED TRIANGLE: not included in any glyphset definition\n * U+1F549 OM SYMBOL: try adding symbols\n * U+1F54A DOVE OF PEACE: try adding symbols\n * U+1F54B KAABA: not included in any glyphset definition\n * U+1F54C MOSQUE: not included in any glyphset definition\n * U+1F54D SYNAGOGUE: not included in any glyphset definition\n * U+1F54E MENORAH WITH NINE BRANCHES: not included in any glyphset definition\n * U+1F550 CLOCK FACE ONE OCLOCK: try adding symbols\n * U+1F551 CLOCK FACE TWO OCLOCK: try adding symbols\n * U+1F552 CLOCK FACE THREE OCLOCK: try adding symbols\n * U+1F553 CLOCK FACE FOUR OCLOCK: try adding symbols\n * U+1F554 CLOCK FACE FIVE OCLOCK: try adding symbols\n * U+1F555 CLOCK FACE SIX OCLOCK: try adding symbols\n * U+1F556 CLOCK FACE SEVEN OCLOCK: try adding symbols\n * U+1F557 CLOCK FACE EIGHT OCLOCK: try adding symbols\n * U+1F558 CLOCK FACE NINE OCLOCK: try adding symbols\n * U+1F559 CLOCK FACE TEN OCLOCK: try adding symbols\n * U+1F55A CLOCK FACE ELEVEN OCLOCK: try adding symbols\n * U+1F55B CLOCK FACE TWELVE OCLOCK: try adding symbols\n * U+1F55C CLOCK FACE ONE-THIRTY: try adding symbols\n * U+1F55D CLOCK FACE TWO-THIRTY: try adding symbols\n * U+1F55E CLOCK FACE THREE-THIRTY: try adding symbols\n * U+1F55F CLOCK FACE FOUR-THIRTY: try adding symbols\n * U+1F560 CLOCK FACE FIVE-THIRTY: try adding symbols\n * U+1F561 CLOCK FACE SIX-THIRTY: try adding symbols\n * U+1F562 CLOCK FACE SEVEN-THIRTY: try adding symbols\n * U+1F563 CLOCK FACE EIGHT-THIRTY: try adding symbols\n * U+1F564 CLOCK FACE NINE-THIRTY: try adding symbols\n * U+1F565 CLOCK FACE TEN-THIRTY: try adding symbols\n * U+1F566 CLOCK FACE ELEVEN-THIRTY: try adding symbols\n * U+1F567 CLOCK FACE TWELVE-THIRTY: try adding symbols\n * U+1F56F CANDLE: try adding symbols\n * U+1F570 MANTELPIECE CLOCK: try adding symbols\n * U+1F573 HOLE: try adding symbols\n * U+1F574 MAN IN BUSINESS SUIT LEVITATING: try adding symbols\n * U+1F575 SLEUTH OR SPY: try adding symbols\n * U+1F576 DARK SUNGLASSES: try adding symbols\n * U+1F577 SPIDER: try adding symbols\n * U+1F578 SPIDER WEB: try adding symbols\n * U+1F579 JOYSTICK: try adding symbols\n * U+1F57A MAN DANCING: try adding symbols\n * U+1F587 LINKED PAPERCLIPS: try adding symbols\n * U+1F58A LOWER LEFT BALLPOINT PEN: try adding symbols\n * U+1F58B LOWER LEFT FOUNTAIN PEN: try adding symbols\n * U+1F58C LOWER LEFT PAINTBRUSH: try adding symbols\n * U+1F58D LOWER LEFT CRAYON: try adding symbols\n * U+1F590 RAISED HAND WITH FINGERS SPLAYED: try adding symbols\n * U+1F595 REVERSED HAND WITH MIDDLE FINGER EXTENDED: try adding symbols\n * U+1F596 RAISED HAND WITH PART BETWEEN MIDDLE AND RING FINGERS: try adding symbols\n * U+1F5A4 BLACK HEART: try adding symbols\n * U+1F5A5 DESKTOP COMPUTER: try adding symbols\n * U+1F5A8 PRINTER: try adding symbols\n * U+1F5B1 THREE BUTTON MOUSE: try adding symbols\n * U+1F5B2 TRACKBALL: try adding symbols\n * U+1F5BC FRAME WITH PICTURE: try adding symbols\n * U+1F5C2 CARD INDEX DIVIDERS: try adding symbols\n * U+1F5C3 CARD FILE BOX: try adding symbols\n * U+1F5C4 FILE CABINET: try adding symbols\n * U+1F5D1 WASTEBASKET: try adding symbols\n * U+1F5D2 SPIRAL NOTE PAD: try adding symbols\n * U+1F5D3 SPIRAL CALENDAR PAD: try adding symbols\n * U+1F5DC COMPRESSION: try adding symbols\n * U+1F5DD OLD KEY: try adding symbols\n * U+1F5DE ROLLED-UP NEWSPAPER: try adding symbols\n * U+1F5E1 DAGGER KNIFE: try adding symbols\n * U+1F5E3 SPEAKING HEAD IN SILHOUETTE: try adding symbols\n * U+1F5E8 LEFT SPEECH BUBBLE: try adding symbols\n * U+1F5EF RIGHT ANGER BUBBLE: try adding symbols\n * U+1F5F3 BALLOT BOX WITH BALLOT: try adding symbols\n * U+1F5FA WORLD MAP: try adding symbols\n * U+1F5FB MOUNT FUJI: not included in any glyphset definition\n * U+1F5FC TOKYO TOWER: not included in any glyphset definition\n * U+1F5FD STATUE OF LIBERTY: not included in any glyphset definition\n * U+1F5FE SILHOUETTE OF JAPAN: not included in any glyphset definition\n * U+1F5FF MOYAI: not included in any glyphset definition\n * U+1F600 GRINNING FACE: not included in any glyphset definition\n * U+1F601 GRINNING FACE WITH SMILING EYES: not included in any glyphset definition\n * U+1F602 FACE WITH TEARS OF JOY: not included in any glyphset definition\n * U+1F603 SMILING FACE WITH OPEN MOUTH: not included in any glyphset definition\n * U+1F604 SMILING FACE WITH OPEN MOUTH AND SMILING EYES: not included in any glyphset definition\n * U+1F605 SMILING FACE WITH OPEN MOUTH AND COLD SWEAT: not included in any glyphset definition\n * U+1F606 SMILING FACE WITH OPEN MOUTH AND TIGHTLY-CLOSED EYES: not included in any glyphset definition\n * U+1F607 SMILING FACE WITH HALO: not included in any glyphset definition\n * U+1F608 SMILING FACE WITH HORNS: not included in any glyphset definition\n * U+1F609 WINKING FACE: not included in any glyphset definition\n * U+1F60A SMILING FACE WITH SMILING EYES: not included in any glyphset definition\n * U+1F60B FACE SAVOURING DELICIOUS FOOD: not included in any glyphset definition\n * U+1F60C RELIEVED FACE: not included in any glyphset definition\n * U+1F60D SMILING FACE WITH HEART-SHAPED EYES: not included in any glyphset definition\n * U+1F60E SMILING FACE WITH SUNGLASSES: not included in any glyphset definition\n * U+1F60F SMIRKING FACE: not included in any glyphset definition\n * U+1F610 NEUTRAL FACE: try adding symbols\n * U+1F611 EXPRESSIONLESS FACE: not included in any glyphset definition\n * U+1F612 UNAMUSED FACE: not included in any glyphset definition\n * U+1F613 FACE WITH COLD SWEAT: not included in any glyphset definition\n * U+1F614 PENSIVE FACE: not included in any glyphset definition\n * U+1F615 CONFUSED FACE: not included in any glyphset definition\n * U+1F616 CONFOUNDED FACE: not included in any glyphset definition\n * U+1F617 KISSING FACE: not included in any glyphset definition\n * U+1F618 FACE THROWING A KISS: not included in any glyphset definition\n * U+1F619 KISSING FACE WITH SMILING EYES: not included in any glyphset definition\n * U+1F61A KISSING FACE WITH CLOSED EYES: not included in any glyphset definition\n * U+1F61B FACE WITH STUCK-OUT TONGUE: not included in any glyphset definition\n * U+1F61C FACE WITH STUCK-OUT TONGUE AND WINKING EYE: not included in any glyphset definition\n * U+1F61D FACE WITH STUCK-OUT TONGUE AND TIGHTLY-CLOSED EYES: not included in any glyphset definition\n * U+1F61E DISAPPOINTED FACE: not included in any glyphset definition\n * U+1F61F WORRIED FACE: not included in any glyphset definition\n * U+1F620 ANGRY FACE: not included in any glyphset definition\n * U+1F621 POUTING FACE: not included in any glyphset definition\n * U+1F622 CRYING FACE: not included in any glyphset definition\n * U+1F623 PERSEVERING FACE: not included in any glyphset definition\n * U+1F624 FACE WITH LOOK OF TRIUMPH: not included in any glyphset definition\n * U+1F625 DISAPPOINTED BUT RELIEVED FACE: not included in any glyphset definition\n * U+1F626 FROWNING FACE WITH OPEN MOUTH: not included in any glyphset definition\n * U+1F627 ANGUISHED FACE: not included in any glyphset definition\n * U+1F628 FEARFUL FACE: not included in any glyphset definition\n * U+1F629 WEARY FACE: not included in any glyphset definition\n * U+1F62A SLEEPY FACE: not included in any glyphset definition\n * U+1F62B TIRED FACE: not included in any glyphset definition\n * U+1F62C GRIMACING FACE: not included in any glyphset definition\n * U+1F62D LOUDLY CRYING FACE: not included in any glyphset definition\n * U+1F62E FACE WITH OPEN MOUTH: not included in any glyphset definition\n * U+1F62F HUSHED FACE: not included in any glyphset definition\n * U+1F630 FACE WITH OPEN MOUTH AND COLD SWEAT: not included in any glyphset definition\n * U+1F631 FACE SCREAMING IN FEAR: not included in any glyphset definition\n * U+1F632 ASTONISHED FACE: not included in any glyphset definition\n * U+1F633 FLUSHED FACE: not included in any glyphset definition\n * U+1F634 SLEEPING FACE: not included in any glyphset definition\n * U+1F635 DIZZY FACE: not included in any glyphset definition\n * U+1F636 FACE WITHOUT MOUTH: not included in any glyphset definition\n * U+1F637 FACE WITH MEDICAL MASK: not included in any glyphset definition\n * U+1F638 GRINNING CAT FACE WITH SMILING EYES: not included in any glyphset definition\n * U+1F639 CAT FACE WITH TEARS OF JOY: not included in any glyphset definition\n * U+1F63A SMILING CAT FACE WITH OPEN MOUTH: not included in any glyphset definition\n * U+1F63B SMILING CAT FACE WITH HEART-SHAPED EYES: not included in any glyphset definition\n * U+1F63C CAT FACE WITH WRY SMILE: not included in any glyphset definition\n * U+1F63D KISSING CAT FACE WITH CLOSED EYES: not included in any glyphset definition\n * U+1F63E POUTING CAT FACE: not included in any glyphset definition\n * U+1F63F CRYING CAT FACE: not included in any glyphset definition\n * U+1F640 WEARY CAT FACE: not included in any glyphset definition\n * U+1F641 SLIGHTLY FROWNING FACE: not included in any glyphset definition\n * U+1F642 SLIGHTLY SMILING FACE: not included in any glyphset definition\n * U+1F643 UPSIDE-DOWN FACE: not included in any glyphset definition\n * U+1F644 FACE WITH ROLLING EYES: not included in any glyphset definition\n * U+1F645 FACE WITH NO GOOD GESTURE: not included in any glyphset definition\n * U+1F646 FACE WITH OK GESTURE: not included in any glyphset definition\n * U+1F647 PERSON BOWING DEEPLY: not included in any glyphset definition\n * U+1F648 SEE-NO-EVIL MONKEY: not included in any glyphset definition\n * U+1F649 HEAR-NO-EVIL MONKEY: not included in any glyphset definition\n * U+1F64A SPEAK-NO-EVIL MONKEY: not included in any glyphset definition\n * U+1F64B HAPPY PERSON RAISING ONE HAND: not included in any glyphset definition\n * U+1F64C PERSON RAISING BOTH HANDS IN CELEBRATION: not included in any glyphset definition\n * U+1F64D PERSON FROWNING: not included in any glyphset definition\n * U+1F64E PERSON WITH POUTING FACE: not included in any glyphset definition\n * U+1F64F PERSON WITH FOLDED HANDS: not included in any glyphset definition\n * U+1F680 ROCKET: not included in any glyphset definition\n * U+1F681 HELICOPTER: not included in any glyphset definition\n * U+1F682 STEAM LOCOMOTIVE: not included in any glyphset definition\n * U+1F683 RAILWAY CAR: not included in any glyphset definition\n * U+1F684 HIGH-SPEED TRAIN: not included in any glyphset definition\n * U+1F685 HIGH-SPEED TRAIN WITH BULLET NOSE: not included in any glyphset definition\n * U+1F686 TRAIN: not included in any glyphset definition\n * U+1F687 METRO: try adding symbols\n * U+1F688 LIGHT RAIL: not included in any glyphset definition\n * U+1F689 STATION: not included in any glyphset definition\n * U+1F68A TRAM: not included in any glyphset definition\n * U+1F68B TRAM CAR: not included in any glyphset definition\n * U+1F68C BUS: not included in any glyphset definition\n * U+1F68D ONCOMING BUS: try adding symbols\n * U+1F68E TROLLEYBUS: not included in any glyphset definition\n * U+1F68F BUS STOP: not included in any glyphset definition\n * U+1F690 MINIBUS: not included in any glyphset definition\n * U+1F691 AMBULANCE: try adding symbols\n * U+1F692 FIRE ENGINE: not included in any glyphset definition\n * U+1F693 POLICE CAR: not included in any glyphset definition\n * U+1F694 ONCOMING POLICE CAR: try adding symbols\n * U+1F695 TAXI: not included in any glyphset definition\n * U+1F696 ONCOMING TAXI: not included in any glyphset definition\n * U+1F697 AUTOMOBILE: not included in any glyphset definition\n * U+1F698 ONCOMING AUTOMOBILE: try adding symbols\n * U+1F699 RECREATIONAL VEHICLE: not included in any glyphset definition\n * U+1F69A DELIVERY TRUCK: not included in any glyphset definition\n * U+1F69B ARTICULATED LORRY: not included in any glyphset definition\n * U+1F69C TRACTOR: not included in any glyphset definition\n * U+1F69D MONORAIL: not included in any glyphset definition\n * U+1F69E MOUNTAIN RAILWAY: not included in any glyphset definition\n * U+1F69F SUSPENSION RAILWAY: not included in any glyphset definition\n * U+1F6A0 MOUNTAIN CABLEWAY: not included in any glyphset definition\n * U+1F6A1 AERIAL TRAMWAY: not included in any glyphset definition\n * U+1F6A2 SHIP: not included in any glyphset definition\n * U+1F6A3 ROWBOAT: not included in any glyphset definition\n * U+1F6A4 SPEEDBOAT: not included in any glyphset definition\n * U+1F6A5 HORIZONTAL TRAFFIC LIGHT: not included in any glyphset definition\n * U+1F6A6 VERTICAL TRAFFIC LIGHT: not included in any glyphset definition\n * U+1F6A7 CONSTRUCTION SIGN: not included in any glyphset definition\n * U+1F6A8 POLICE CARS REVOLVING LIGHT: not included in any glyphset definition\n * U+1F6A9 TRIANGULAR FLAG ON POST: not included in any glyphset definition\n * U+1F6AA DOOR: not included in any glyphset definition\n * U+1F6AB NO ENTRY SIGN: not included in any glyphset definition\n * U+1F6AC SMOKING SYMBOL: not included in any glyphset definition\n * U+1F6AD NO SMOKING SYMBOL: try adding symbols\n * U+1F6AE PUT LITTER IN ITS PLACE SYMBOL: not included in any glyphset definition\n * U+1F6AF DO NOT LITTER SYMBOL: not included in any glyphset definition\n * U+1F6B0 POTABLE WATER SYMBOL: not included in any glyphset definition\n * U+1F6B1 NON-POTABLE WATER SYMBOL: not included in any glyphset definition\n * U+1F6B2 BICYCLE: try adding symbols\n * U+1F6B3 NO BICYCLES: not included in any glyphset definition\n * U+1F6B4 BICYCLIST: not included in any glyphset definition\n * U+1F6B5 MOUNTAIN BICYCLIST: not included in any glyphset definition\n * U+1F6B6 PEDESTRIAN: not included in any glyphset definition\n * U+1F6B7 NO PEDESTRIANS: not included in any glyphset definition\n * U+1F6B8 CHILDREN CROSSING: not included in any glyphset definition\n * U+1F6B9 MENS SYMBOL: try adding symbols\n * U+1F6BA WOMENS SYMBOL: try adding symbols\n * U+1F6BB RESTROOM: not included in any glyphset definition\n * U+1F6BC BABY SYMBOL: try adding symbols\n * U+1F6BD TOILET: not included in any glyphset definition\n * U+1F6BE WATER CLOSET: not included in any glyphset definition\n * U+1F6BF SHOWER: not included in any glyphset definition\n * U+1F6C0 BATH: not included in any glyphset definition\n * U+1F6C1 BATHTUB: not included in any glyphset definition\n * U+1F6C2 PASSPORT CONTROL: not included in any glyphset definition\n * U+1F6C3 CUSTOMS: not included in any glyphset definition\n * U+1F6C4 BAGGAGE CLAIM: not included in any glyphset definition\n * U+1F6C5 LEFT LUGGAGE: not included in any glyphset definition\n * U+1F6CB COUCH AND LAMP: try adding symbols\n * U+1F6CC SLEEPING ACCOMMODATION: try adding symbols\n * U+1F6CD SHOPPING BAGS: try adding symbols\n * U+1F6CE BELLHOP BELL: try adding symbols\n * U+1F6CF BED: try adding symbols\n * U+1F6D0 PLACE OF WORSHIP: not included in any glyphset definition\n * U+1F6D1 OCTAGONAL SIGN: not included in any glyphset definition\n * U+1F6D2 SHOPPING TROLLEY: not included in any glyphset definition\n * U+1F6D5 HINDU TEMPLE: try adding symbols\n * U+1F6D6 HUT: try adding symbols\n * U+1F6D7 ELEVATOR: try adding symbols\n * U+1F6DC WIRELESS: not included in any glyphset definition\n * U+1F6DD PLAYGROUND SLIDE: not included in any glyphset definition\n * U+1F6DE WHEEL: not included in any glyphset definition\n * U+1F6DF RING BUOY: not included in any glyphset definition\n * U+1F6E0 HAMMER AND WRENCH: try adding symbols\n * U+1F6E1 SHIELD: try adding symbols\n * U+1F6E2 OIL DRUM: try adding symbols\n * U+1F6E3 MOTORWAY: try adding symbols\n * U+1F6E4 RAILWAY TRACK: try adding symbols\n * U+1F6E5 MOTOR BOAT: try adding symbols\n * U+1F6E9 SMALL AIRPLANE: try adding symbols\n * U+1F6EB AIRPLANE DEPARTURE: not included in any glyphset definition\n * U+1F6EC AIRPLANE ARRIVING: not included in any glyphset definition\n * U+1F6F0 SATELLITE: try adding symbols\n * U+1F6F3 PASSENGER SHIP: try adding symbols\n * U+1F6F4 SCOOTER: not included in any glyphset definition\n * U+1F6F5 MOTOR SCOOTER: not included in any glyphset definition\n * U+1F6F6 CANOE: not included in any glyphset definition\n * U+1F6F7 SLED: try adding symbols\n * U+1F6F8 FLYING SAUCER: try adding symbols\n * U+1F6F9 SKATEBOARD: try adding symbols\n * U+1F6FA AUTO RICKSHAW: try adding symbols\n * U+1F6FB PICKUP TRUCK: try adding symbols\n * U+1F6FC ROLLER SKATE: try adding symbols\n * U+1F7E0 LARGE ORANGE CIRCLE: try adding symbols\n * U+1F7E1 LARGE YELLOW CIRCLE: try adding symbols\n * U+1F7E2 LARGE GREEN CIRCLE: try adding symbols\n * U+1F7E3 LARGE PURPLE CIRCLE: try adding symbols\n * U+1F7E4 LARGE BROWN CIRCLE: try adding symbols\n * U+1F7E5 LARGE RED SQUARE: try adding symbols\n * U+1F7E6 LARGE BLUE SQUARE: try adding symbols\n * U+1F7E7 LARGE ORANGE SQUARE: try adding symbols\n * U+1F7E8 LARGE YELLOW SQUARE: try adding symbols\n * U+1F7E9 LARGE GREEN SQUARE: try adding symbols\n * U+1F7EA LARGE PURPLE SQUARE: try adding symbols\n * U+1F7EB LARGE BROWN SQUARE: try adding symbols\n * U+1F7F0 HEAVY EQUALS SIGN: try adding symbols\n * U+1F90C PINCHED FINGERS: not included in any glyphset definition\n * U+1F90D WHITE HEART: not included in any glyphset definition\n * U+1F90E BROWN HEART: not included in any glyphset definition\n * U+1F90F PINCHING HAND: not included in any glyphset definition\n * U+1F910 ZIPPER-MOUTH FACE: not included in any glyphset definition\n * U+1F911 MONEY-MOUTH FACE: not included in any glyphset definition\n * U+1F912 FACE WITH THERMOMETER: not included in any glyphset definition\n * U+1F913 NERD FACE: not included in any glyphset definition\n * U+1F914 THINKING FACE: not included in any glyphset definition\n * U+1F915 FACE WITH HEAD-BANDAGE: not included in any glyphset definition\n * U+1F916 ROBOT FACE: not included in any glyphset definition\n * U+1F917 HUGGING FACE: not included in any glyphset definition\n * U+1F918 SIGN OF THE HORNS: not included in any glyphset definition\n * U+1F919 CALL ME HAND: not included in any glyphset definition\n * U+1F91A RAISED BACK OF HAND: not included in any glyphset definition\n * U+1F91B LEFT-FACING FIST: not included in any glyphset definition\n * U+1F91C RIGHT-FACING FIST: not included in any glyphset definition\n * U+1F91D HANDSHAKE: not included in any glyphset definition\n * U+1F91E HAND WITH INDEX AND MIDDLE FINGERS CROSSED: not included in any glyphset definition\n * U+1F91F I LOVE YOU HAND SIGN: not included in any glyphset definition\n * U+1F920 FACE WITH COWBOY HAT: not included in any glyphset definition\n * U+1F921 CLOWN FACE: not included in any glyphset definition\n * U+1F922 NAUSEATED FACE: not included in any glyphset definition\n * U+1F923 ROLLING ON THE FLOOR LAUGHING: not included in any glyphset definition\n * U+1F924 DROOLING FACE: not included in any glyphset definition\n * U+1F925 LYING FACE: not included in any glyphset definition\n * U+1F926 FACE PALM: not included in any glyphset definition\n * U+1F927 SNEEZING FACE: not included in any glyphset definition\n * U+1F928 FACE WITH ONE EYEBROW RAISED: not included in any glyphset definition\n * U+1F929 GRINNING FACE WITH STAR EYES: not included in any glyphset definition\n * U+1F92A GRINNING FACE WITH ONE LARGE AND ONE SMALL EYE: not included in any glyphset definition\n * U+1F92B FACE WITH FINGER COVERING CLOSED LIPS: not included in any glyphset definition\n * U+1F92C SERIOUS FACE WITH SYMBOLS COVERING MOUTH: not included in any glyphset definition\n * U+1F92D SMILING FACE WITH SMILING EYES AND HAND COVERING MOUTH: not included in any glyphset definition\n * U+1F92E FACE WITH OPEN MOUTH VOMITING: not included in any glyphset definition\n * U+1F92F SHOCKED FACE WITH EXPLODING HEAD: not included in any glyphset definition\n * U+1F930 PREGNANT WOMAN: not included in any glyphset definition\n * U+1F931 BREAST-FEEDING: not included in any glyphset definition\n * U+1F932 PALMS UP TOGETHER: not included in any glyphset definition\n * U+1F933 SELFIE: not included in any glyphset definition\n * U+1F934 PRINCE: not included in any glyphset definition\n * U+1F935 MAN IN TUXEDO: not included in any glyphset definition\n * U+1F936 MOTHER CHRISTMAS: not included in any glyphset definition\n * U+1F937 SHRUG: not included in any glyphset definition\n * U+1F938 PERSON DOING CARTWHEEL: not included in any glyphset definition\n * U+1F939 JUGGLING: not included in any glyphset definition\n * U+1F93A FENCER: not included in any glyphset definition\n * U+1F93C WRESTLERS: not included in any glyphset definition\n * U+1F93D WATER POLO: not included in any glyphset definition\n * U+1F93E HANDBALL: not included in any glyphset definition\n * U+1F93F DIVING MASK: not included in any glyphset definition\n * U+1F940 WILTED FLOWER: not included in any glyphset definition\n * U+1F941 DRUM WITH DRUMSTICKS: not included in any glyphset definition\n * U+1F942 CLINKING GLASSES: not included in any glyphset definition\n * U+1F943 TUMBLER GLASS: not included in any glyphset definition\n * U+1F944 SPOON: not included in any glyphset definition\n * U+1F945 GOAL NET: not included in any glyphset definition\n * U+1F947 FIRST PLACE MEDAL: not included in any glyphset definition\n * U+1F948 SECOND PLACE MEDAL: not included in any glyphset definition\n * U+1F949 THIRD PLACE MEDAL: not included in any glyphset definition\n * U+1F94A BOXING GLOVE: not included in any glyphset definition\n * U+1F94B MARTIAL ARTS UNIFORM: not included in any glyphset definition\n * U+1F94C CURLING STONE: not included in any glyphset definition\n * U+1F94D LACROSSE STICK AND BALL: not included in any glyphset definition\n * U+1F94E SOFTBALL: not included in any glyphset definition\n * U+1F94F FLYING DISC: not included in any glyphset definition\n * U+1F950 CROISSANT: not included in any glyphset definition\n * U+1F951 AVOCADO: not included in any glyphset definition\n * U+1F952 CUCUMBER: not included in any glyphset definition\n * U+1F953 BACON: not included in any glyphset definition\n * U+1F954 POTATO: not included in any glyphset definition\n * U+1F955 CARROT: not included in any glyphset definition\n * U+1F956 BAGUETTE BREAD: not included in any glyphset definition\n * U+1F957 GREEN SALAD: not included in any glyphset definition\n * U+1F958 SHALLOW PAN OF FOOD: not included in any glyphset definition\n * U+1F959 STUFFED FLATBREAD: not included in any glyphset definition\n * U+1F95A EGG: not included in any glyphset definition\n * U+1F95B GLASS OF MILK: not included in any glyphset definition\n * U+1F95C PEANUTS: not included in any glyphset definition\n * U+1F95D KIWIFRUIT: not included in any glyphset definition\n * U+1F95E PANCAKES: not included in any glyphset definition\n * U+1F95F DUMPLING: not included in any glyphset definition\n * U+1F960 FORTUNE COOKIE: not included in any glyphset definition\n * U+1F961 TAKEOUT BOX: not included in any glyphset definition\n * U+1F962 CHOPSTICKS: not included in any glyphset definition\n * U+1F963 BOWL WITH SPOON: not included in any glyphset definition\n * U+1F964 CUP WITH STRAW: not included in any glyphset definition\n * U+1F965 COCONUT: not included in any glyphset definition\n * U+1F966 BROCCOLI: not included in any glyphset definition\n * U+1F967 PIE: not included in any glyphset definition\n * U+1F968 PRETZEL: not included in any glyphset definition\n * U+1F969 CUT OF MEAT: not included in any glyphset definition\n * U+1F96A SANDWICH: not included in any glyphset definition\n * U+1F96B CANNED FOOD: not included in any glyphset definition\n * U+1F96C LEAFY GREEN: not included in any glyphset definition\n * U+1F96D MANGO: not included in any glyphset definition\n * U+1F96E MOON CAKE: not included in any glyphset definition\n * U+1F96F BAGEL: not included in any glyphset definition\n * U+1F970 SMILING FACE WITH SMILING EYES AND THREE HEARTS: not included in any glyphset definition\n * U+1F971 YAWNING FACE: not included in any glyphset definition\n * U+1F972 SMILING FACE WITH TEAR: not included in any glyphset definition\n * U+1F973 FACE WITH PARTY HORN AND PARTY HAT: not included in any glyphset definition\n * U+1F974 FACE WITH UNEVEN EYES AND WAVY MOUTH: not included in any glyphset definition\n * U+1F975 OVERHEATED FACE: not included in any glyphset definition\n * U+1F976 FREEZING FACE: not included in any glyphset definition\n * U+1F977 NINJA: not included in any glyphset definition\n * U+1F978 DISGUISED FACE: not included in any glyphset definition\n * U+1F979 FACE HOLDING BACK TEARS: not included in any glyphset definition\n * U+1F97A FACE WITH PLEADING EYES: not included in any glyphset definition\n * U+1F97B SARI: not included in any glyphset definition\n * U+1F97C LAB COAT: not included in any glyphset definition\n * U+1F97D GOGGLES: not included in any glyphset definition\n * U+1F97E HIKING BOOT: not included in any glyphset definition\n * U+1F97F FLAT SHOE: not included in any glyphset definition\n * U+1F980 CRAB: not included in any glyphset definition\n * U+1F981 LION FACE: not included in any glyphset definition\n * U+1F982 SCORPION: not included in any glyphset definition\n * U+1F983 TURKEY: not included in any glyphset definition\n * U+1F984 UNICORN FACE: try adding symbols\n * U+1F985 EAGLE: not included in any glyphset definition\n * U+1F986 DUCK: not included in any glyphset definition\n * U+1F987 BAT: not included in any glyphset definition\n * U+1F988 SHARK: not included in any glyphset definition\n * U+1F989 OWL: not included in any glyphset definition\n * U+1F98A FOX FACE: not included in any glyphset definition\n * U+1F98B BUTTERFLY: not included in any glyphset definition\n * U+1F98C DEER: not included in any glyphset definition\n * U+1F98D GORILLA: not included in any glyphset definition\n * U+1F98E LIZARD: not included in any glyphset definition\n * U+1F98F RHINOCEROS: not included in any glyphset definition\n * U+1F990 SHRIMP: not included in any glyphset definition\n * U+1F991 SQUID: not included in any glyphset definition\n * U+1F992 GIRAFFE FACE: not included in any glyphset definition\n * U+1F993 ZEBRA FACE: not included in any glyphset definition\n * U+1F994 HEDGEHOG: not included in any glyphset definition\n * U+1F995 SAUROPOD: not included in any glyphset definition\n * U+1F996 T-REX: try adding symbols\n * U+1F997 CRICKET: not included in any glyphset definition\n * U+1F998 KANGAROO: not included in any glyphset definition\n * U+1F999 LLAMA: not included in any glyphset definition\n * U+1F99A PEACOCK: not included in any glyphset definition\n * U+1F99B HIPPOPOTAMUS: not included in any glyphset definition\n * U+1F99C PARROT: not included in any glyphset definition\n * U+1F99D RACCOON: not included in any glyphset definition\n * U+1F99E LOBSTER: not included in any glyphset definition\n * U+1F99F MOSQUITO: not included in any glyphset definition\n * U+1F9A0 MICROBE: not included in any glyphset definition\n * U+1F9A1 BADGER: not included in any glyphset definition\n * U+1F9A2 SWAN: not included in any glyphset definition\n * U+1F9A3 MAMMOTH: not included in any glyphset definition\n * U+1F9A4 DODO: not included in any glyphset definition\n * U+1F9A5 SLOTH: not included in any glyphset definition\n * U+1F9A6 OTTER: not included in any glyphset definition\n * U+1F9A7 ORANGUTAN: not included in any glyphset definition\n * U+1F9A8 SKUNK: not included in any glyphset definition\n * U+1F9A9 FLAMINGO: not included in any glyphset definition\n * U+1F9AA OYSTER: not included in any glyphset definition\n * U+1F9AB BEAVER: not included in any glyphset definition\n * U+1F9AC BISON: not included in any glyphset definition\n * U+1F9AD SEAL: not included in any glyphset definition\n * U+1F9AE GUIDE DOG: not included in any glyphset definition\n * U+1F9AF PROBING CANE: not included in any glyphset definition\n * U+1F9B0 EMOJI COMPONENT RED HAIR: not included in any glyphset definition\n * U+1F9B1 EMOJI COMPONENT CURLY HAIR: not included in any glyphset definition\n * U+1F9B2 EMOJI COMPONENT BALD: not included in any glyphset definition\n * U+1F9B3 EMOJI COMPONENT WHITE HAIR: not included in any glyphset definition\n * U+1F9B4 BONE: not included in any glyphset definition\n * U+1F9B5 LEG: not included in any glyphset definition\n * U+1F9B6 FOOT: not included in any glyphset definition\n * U+1F9B7 TOOTH: not included in any glyphset definition\n * U+1F9B8 SUPERHERO: not included in any glyphset definition\n * U+1F9B9 SUPERVILLAIN: not included in any glyphset definition\n * U+1F9BA SAFETY VEST: not included in any glyphset definition\n * U+1F9BB EAR WITH HEARING AID: not included in any glyphset definition\n * U+1F9BC MOTORIZED WHEELCHAIR: not included in any glyphset definition\n * U+1F9BD MANUAL WHEELCHAIR: not included in any glyphset definition\n * U+1F9BE MECHANICAL ARM: not included in any glyphset definition\n * U+1F9BF MECHANICAL LEG: not included in any glyphset definition\n * U+1F9C0 CHEESE WEDGE: not included in any glyphset definition\n * U+1F9C1 CUPCAKE: not included in any glyphset definition\n * U+1F9C2 SALT SHAKER: not included in any glyphset definition\n * U+1F9C3 BEVERAGE BOX: not included in any glyphset definition\n * U+1F9C4 GARLIC: not included in any glyphset definition\n * U+1F9C5 ONION: not included in any glyphset definition\n * U+1F9C6 FALAFEL: not included in any glyphset definition\n * U+1F9C7 WAFFLE: not included in any glyphset definition\n * U+1F9C8 BUTTER: not included in any glyphset definition\n * U+1F9C9 MATE DRINK: not included in any glyphset definition\n * U+1F9CA ICE CUBE: not included in any glyphset definition\n * U+1F9CB BUBBLE TEA: not included in any glyphset definition\n * U+1F9CC TROLL: not included in any glyphset definition\n * U+1F9CD STANDING PERSON: not included in any glyphset definition\n * U+1F9CE KNEELING PERSON: not included in any glyphset definition\n * U+1F9CF DEAF PERSON: not included in any glyphset definition\n * U+1F9D0 FACE WITH MONOCLE: not included in any glyphset definition\n * U+1F9D1 ADULT: not included in any glyphset definition\n * U+1F9D2 CHILD: not included in any glyphset definition\n * U+1F9D3 OLDER ADULT: not included in any glyphset definition\n * U+1F9D4 BEARDED PERSON: not included in any glyphset definition\n * U+1F9D5 PERSON WITH HEADSCARF: not included in any glyphset definition\n * U+1F9D6 PERSON IN STEAMY ROOM: not included in any glyphset definition\n * U+1F9D7 PERSON CLIMBING: not included in any glyphset definition\n * U+1F9D8 PERSON IN LOTUS POSITION: not included in any glyphset definition\n * U+1F9D9 MAGE: not included in any glyphset definition\n * U+1F9DA FAIRY: not included in any glyphset definition\n * U+1F9DB VAMPIRE: not included in any glyphset definition\n * U+1F9DC MERPERSON: not included in any glyphset definition\n * U+1F9DD ELF: not included in any glyphset definition\n * U+1F9DE GENIE: not included in any glyphset definition\n * U+1F9DF ZOMBIE: not included in any glyphset definition\n * U+1F9E0 BRAIN: not included in any glyphset definition\n * U+1F9E1 ORANGE HEART: not included in any glyphset definition\n * U+1F9E2 BILLED CAP: not included in any glyphset definition\n * U+1F9E3 SCARF: not included in any glyphset definition\n * U+1F9E4 GLOVES: not included in any glyphset definition\n * U+1F9E5 COAT: not included in any glyphset definition\n * U+1F9E6 SOCKS: not included in any glyphset definition\n * U+1F9E7 RED GIFT ENVELOPE: not included in any glyphset definition\n * U+1F9E8 FIRECRACKER: not included in any glyphset definition\n * U+1F9E9 JIGSAW PUZZLE PIECE: try adding symbols\n * U+1F9EA TEST TUBE: not included in any glyphset definition\n * U+1F9EB PETRI DISH: not included in any glyphset definition\n * U+1F9EC DNA DOUBLE HELIX: not included in any glyphset definition\n * U+1F9ED COMPASS: not included in any glyphset definition\n * U+1F9EE ABACUS: not included in any glyphset definition\n * U+1F9EF FIRE EXTINGUISHER: not included in any glyphset definition\n * U+1F9F0 TOOLBOX: not included in any glyphset definition\n * U+1F9F1 BRICK: not included in any glyphset definition\n * U+1F9F2 MAGNET: not included in any glyphset definition\n * U+1F9F3 LUGGAGE: not included in any glyphset definition\n * U+1F9F4 LOTION BOTTLE: not included in any glyphset definition\n * U+1F9F5 SPOOL OF THREAD: not included in any glyphset definition\n * U+1F9F6 BALL OF YARN: not included in any glyphset definition\n * U+1F9F7 SAFETY PIN: not included in any glyphset definition\n * U+1F9F8 TEDDY BEAR: not included in any glyphset definition\n * U+1F9F9 BROOM: not included in any glyphset definition\n * U+1F9FA BASKET: not included in any glyphset definition\n * U+1F9FB ROLL OF PAPER: not included in any glyphset definition\n * U+1F9FC BAR OF SOAP: not included in any glyphset definition\n * U+1F9FD SPONGE: not included in any glyphset definition\n * U+1F9FE RECEIPT: not included in any glyphset definition\n * U+1F9FF NAZAR AMULET: not included in any glyphset definition\n * U+1FA70 BALLET SHOES: try adding symbols\n * U+1FA71 ONE-PIECE SWIMSUIT: try adding symbols\n * U+1FA72 BRIEFS: try adding symbols\n * U+1FA73 SHORTS: try adding symbols\n * U+1FA74 THONG SANDAL: try adding symbols\n * U+1FA75 LIGHT BLUE HEART: try adding symbols\n * U+1FA76 GREY HEART: try adding symbols\n * U+1FA77 PINK HEART: try adding symbols\n * U+1FA78 DROP OF BLOOD: try adding symbols\n * U+1FA79 ADHESIVE BANDAGE: try adding symbols\n * U+1FA7A STETHOSCOPE: try adding symbols\n * U+1FA7B X-RAY: try adding symbols\n * U+1FA7C CRUTCH: try adding symbols\n * U+1FA80 YO-YO: try adding symbols\n * U+1FA81 KITE: try adding symbols\n * U+1FA82 PARACHUTE: try adding symbols\n * U+1FA83 BOOMERANG: try adding symbols\n * U+1FA84 MAGIC WAND: try adding symbols\n * U+1FA85 PINATA: try adding symbols\n * U+1FA86 NESTING DOLLS: try adding symbols\n * U+1FA87 MARACAS: try adding symbols\n * U+1FA88 FLUTE: try adding symbols\n * U+1FA90 RINGED PLANET: try adding symbols\n * U+1FA91 CHAIR: try adding symbols\n * U+1FA92 RAZOR: try adding symbols\n * U+1FA93 AXE: try adding symbols\n * U+1FA94 DIYA LAMP: try adding symbols\n * U+1FA95 BANJO: try adding symbols\n * U+1FA96 MILITARY HELMET: try adding symbols\n * U+1FA97 ACCORDION: try adding symbols\n * U+1FA98 LONG DRUM: try adding symbols\n * U+1FA99 COIN: try adding symbols\n * U+1FA9A CARPENTRY SAW: try adding symbols\n * U+1FA9B SCREWDRIVER: try adding symbols\n * U+1FA9C LADDER: try adding symbols\n * U+1FA9D HOOK: try adding symbols\n * U+1FA9E MIRROR: try adding symbols\n * U+1FA9F WINDOW: try adding symbols\n * U+1FAA0 PLUNGER: try adding symbols\n * U+1FAA1 SEWING NEEDLE: try adding symbols\n * U+1FAA2 KNOT: try adding symbols\n * U+1FAA3 BUCKET: try adding symbols\n * U+1FAA4 MOUSE TRAP: try adding symbols\n * U+1FAA5 TOOTHBRUSH: try adding symbols\n * U+1FAA6 HEADSTONE: try adding symbols\n * U+1FAA7 PLACARD: try adding symbols\n * U+1FAA8 ROCK: try adding symbols\n * U+1FAA9 MIRROR BALL: try adding symbols\n * U+1FAAA IDENTIFICATION CARD: try adding symbols\n * U+1FAAB LOW BATTERY: try adding symbols\n * U+1FAAC HAMSA: try adding symbols\n * U+1FAAD FOLDING HAND FAN: try adding symbols\n * U+1FAAE HAIR PICK: try adding symbols\n * U+1FAAF KHANDA: try adding symbols\n * U+1FAB0 FLY: try adding symbols\n * U+1FAB1 WORM: try adding symbols\n * U+1FAB2 BEETLE: try adding symbols\n * U+1FAB3 COCKROACH: try adding symbols\n * U+1FAB4 POTTED PLANT: try adding symbols\n * U+1FAB5 WOOD: try adding symbols\n * U+1FAB6 FEATHER: try adding symbols\n * U+1FAB7 LOTUS: try adding symbols\n * U+1FAB8 CORAL: try adding symbols\n * U+1FAB9 EMPTY NEST: try adding symbols\n * U+1FABA NEST WITH EGGS: try adding symbols\n * U+1FABB HYACINTH: try adding symbols\n * U+1FABC JELLYFISH: try adding symbols\n * U+1FABD WING: try adding symbols\n * U+1FABF GOOSE: try adding symbols\n * U+1FAC0 ANATOMICAL HEART: try adding symbols\n * U+1FAC1 LUNGS: try adding symbols\n * U+1FAC2 PEOPLE HUGGING: try adding symbols\n * U+1FAC3 PREGNANT MAN: try adding symbols\n * U+1FAC4 PREGNANT PERSON: try adding symbols\n * U+1FAC5 PERSON WITH CROWN: try adding symbols\n * U+1FACE MOOSE: try adding symbols\n * U+1FACF DONKEY: try adding symbols\n * U+1FAD0 BLUEBERRIES: try adding symbols\n * U+1FAD1 BELL PEPPER: try adding symbols\n * U+1FAD2 OLIVE: try adding symbols\n * U+1FAD3 FLATBREAD: try adding symbols\n * U+1FAD4 TAMALE: try adding symbols\n * U+1FAD5 FONDUE: try adding symbols\n * U+1FAD6 TEAPOT: try adding symbols\n * U+1FAD7 POURING LIQUID: try adding symbols\n * U+1FAD8 BEANS: try adding symbols\n * U+1FAD9 JAR: try adding symbols\n * U+1FADA GINGER ROOT: try adding symbols\n * U+1FADB PEA POD: try adding symbols\n * U+1FAE0 MELTING FACE: try adding symbols\n * U+1FAE1 SALUTING FACE: try adding symbols\n * U+1FAE2 FACE WITH OPEN EYES AND HAND OVER MOUTH: try adding symbols\n * U+1FAE3 FACE WITH PEEKING EYE: try adding symbols\n * U+1FAE4 FACE WITH DIAGONAL MOUTH: try adding symbols\n * U+1FAE5 DOTTED LINE FACE: try adding symbols\n * U+1FAE6 BITING LIP: try adding symbols\n * U+1FAE7 BUBBLES: try adding symbols\n * U+1FAE8 SHAKING FACE: try adding symbols\n * U+1FAF0 HAND WITH INDEX FINGER AND THUMB CROSSED: try adding symbols\n * U+1FAF1 RIGHTWARDS HAND: try adding symbols\n * U+1FAF2 LEFTWARDS HAND: try adding symbols\n * U+1FAF3 PALM DOWN HAND: try adding symbols\n * U+1FAF4 PALM UP HAND: try adding symbols\n * U+1FAF5 INDEX POINTING AT THE VIEWER: try adding symbols\n * U+1FAF6 HEART HANDS: try adding symbols\n * U+1FAF7 LEFTWARDS PUSHING HAND: try adding symbols\n * U+1FAF8 RIGHTWARDS PUSHING HAND: try adding symbols\n * U+E0030 TAG DIGIT ZERO: not included in any glyphset definition\n * U+E0031 TAG DIGIT ONE: not included in any glyphset definition\n * U+E0032 TAG DIGIT TWO: not included in any glyphset definition\n * U+E0033 TAG DIGIT THREE: not included in any glyphset definition\n * U+E0034 TAG DIGIT FOUR: not included in any glyphset definition\n * U+E0035 TAG DIGIT FIVE: not included in any glyphset definition\n * U+E0036 TAG DIGIT SIX: not included in any glyphset definition\n * U+E0037 TAG DIGIT SEVEN: not included in any glyphset definition\n * U+E0038 TAG DIGIT EIGHT: not included in any glyphset definition\n * U+E0039 TAG DIGIT NINE: not included in any glyphset definition\n * U+E0061 TAG LATIN SMALL LETTER A: not included in any glyphset definition\n * U+E0062 TAG LATIN SMALL LETTER B: not included in any glyphset definition\n * U+E0063 TAG LATIN SMALL LETTER C: not included in any glyphset definition\n * U+E0064 TAG LATIN SMALL LETTER D: not included in any glyphset definition\n * U+E0065 TAG LATIN SMALL LETTER E: not included in any glyphset definition\n * U+E0066 TAG LATIN SMALL LETTER F: not included in any glyphset definition\n * U+E0067 TAG LATIN SMALL LETTER G: not included in any glyphset definition\n * U+E0068 TAG LATIN SMALL LETTER H: not included in any glyphset definition\n * U+E0069 TAG LATIN SMALL LETTER I: not included in any glyphset definition\n * U+E006A TAG LATIN SMALL LETTER J: not included in any glyphset definition\n * U+E006B TAG LATIN SMALL LETTER K: not included in any glyphset definition\n * U+E006C TAG LATIN SMALL LETTER L: not included in any glyphset definition\n * U+E006D TAG LATIN SMALL LETTER M: not included in any glyphset definition\n * U+E006E TAG LATIN SMALL LETTER N: not included in any glyphset definition\n * U+E006F TAG LATIN SMALL LETTER O: not included in any glyphset definition\n * U+E0070 TAG LATIN SMALL LETTER P: not included in any glyphset definition\n * U+E0071 TAG LATIN SMALL LETTER Q: not included in any glyphset definition\n * U+E0072 TAG LATIN SMALL LETTER R: not included in any glyphset definition\n * U+E0073 TAG LATIN SMALL LETTER S: not included in any glyphset definition\n * U+E0074 TAG LATIN SMALL LETTER T: not included in any glyphset definition\n * U+E0075 TAG LATIN SMALL LETTER U: not included in any glyphset definition\n * U+E0076 TAG LATIN SMALL LETTER V: not included in any glyphset definition\n * U+E0077 TAG LATIN SMALL LETTER W: not included in any glyphset definition\n * U+E0078 TAG LATIN SMALL LETTER X: not included in any glyphset definition\n * U+E0079 TAG LATIN SMALL LETTER Y: not included in any glyphset definition\n * U+E007A TAG LATIN SMALL LETTER Z: not included in any glyphset definition\n * U+E007F CANCEL TAG: not included in any glyphset definition\n * U+FE4E5 : not included in any glyphset definition\n * U+FE4E6 : not included in any glyphset definition\n * U+FE4E7 : not included in any glyphset definition\n * U+FE4E8 : not included in any glyphset definition\n * U+FE4E9 : not included in any glyphset definition\n * U+FE4EA : not included in any glyphset definition\n * U+FE4EB : not included in any glyphset definition\n * U+FE4EC : not included in any glyphset definition\n * U+FE4ED : not included in any glyphset definition\n * U+FE4EE : not included in any glyphset definition\n * U+FE82C : not included in any glyphset definition\n * U+FE82E : not included in any glyphset definition\n * U+FE82F : not included in any glyphset definition\n * U+FE830 : not included in any glyphset definition\n * U+FE831 : not included in any glyphset definition\n * U+FE832 : not included in any glyphset definition\n * U+FE833 : not included in any glyphset definition\n * U+FE834 : not included in any glyphset definition\n * U+FE835 : not included in any glyphset definition\n * U+FE836 : not included in any glyphset definition\n * U+FE837 : not included in any glyphset definition\n\nOr you can add the above codepoints to one of the subsets supported by the font: `menu`, `emoji`"}, "status": "WARN"}], "module": "vendorspecific.googlefonts.metadata.unreachable_subsetting", "proposal": ["https://github.com/fonttools/fontbakery/issues/4097", "https://github.com/fonttools/fontbakery/pull/4273"], "rationale": "\n        This check ensures that all encoded glyphs in the font are covered by a\n        subset declared in the METADATA.pb. Google Fonts splits the font into\n        a set of subset fonts based on the contents of the `subsets` field and\n        the subset definitions in the `glyphsets` repository.\n\n        Any encoded glyphs which are not by any of these subset definitions\n        will not be served in the subsetted fonts, and so will be unreachable to\n        the end user.\n    ", "result": "WARN", "severity": 2}, {"description": "Check for METADATA subsets with zero support.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/unsupported_subsets>", [["font", 0]]], "logs": [{"message": {"code": "unknown-subset", "message": "Please remove the unrecognized subset 'emoji' from the METADATA.pb file."}, "status": "FAIL"}], "module": "vendorspecific.googlefonts.metadata.unsupported_subsets", "proposal": ["https://github.com/fonttools/fontbakery/issues/3533"], "rationale": "\n        This check ensures that the subsets specified on a METADATA.pb file are\n        actually supported (even if only partially) by the font files.\n\n        Subsets for which none of the codepoints are supported will cause the\n        check to FAIL.\n    ", "result": "FAIL", "severity": 10}, {"description": "METADATA.pb font.filename field contains font name in right format?", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/valid_filename_values>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.valid_filename_values", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        This check ensures that the font.filename field in the METADATA.pb\n        is correct and well-formatted; we check well-formatting because we\n        have a condition called 'style', and if that is true, then the font's\n        filename correctly reflects its style. If a correctly formatted\n        filename appears in the font.filename field in METADATA.pb, then all\n        is good.\n    ", "result": "PASS", "severity": null}, {"description": "METADATA.pb font.full_name field contains font name in right format?", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/valid_full_name_values>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.valid_full_name_values", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        This check ensures that the font.full_name field in the METADATA.pb\n        file contains the family name of the font.\n    ", "result": "PASS", "severity": null}, {"description": "Check name ID 25 to end with \"Italic\" for Italic VFs.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/valid_nameid25>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.valid_nameid25", "proposal": ["https://github.com/fonttools/fontbakery/issues/3024", "https://github.com/googlefonts/gftools/issues/297", "https://typo.social/@arrowtype/110430680157544757"], "rationale": "\n        Due to a bug in (at least) Adobe Indesign, name ID 25\n        needs to be different for Italic VFs than their Upright counterparts.\n        Google Fonts chooses to append \"Italic\" here.\n    ", "result": "PASS", "severity": null}, {"description": "METADATA.pb font.post_script_name field contains font name in right format?", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/valid_post_script_name_values>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.valid_post_script_name_values", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        Ensures that the postscript name in METADATA.pb contains the font's\n        family name (with no spaces) as detected from the font binary.\n    ", "result": "PASS", "severity": null}, {"description": "Check METADATA.pb font weights are correct.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Metadata Checks>", "<FontBakeryCheck:googlefonts/metadata/weightclass>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.weightclass", "proposal": ["https://github.com/fonttools/fontbakery/issues/2683", "https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        Check METADATA.pb font weights are correct.\n\n        For static fonts, the metadata weight should be the same as the static font's\n        OS/2 usWeightClass.\n\n        For variable fonts, the weight value should be 400 if the font's wght axis range\n        includes 400, otherwise it should be the value closest to 400.\n    ", "result": "PASS", "severity": null}], "key": ["Metadata Checks", null, null], "result": {"FAIL": 4, "INFO": 1, "PASS": 34, "SKIP": 3, "WARN": 2}}, {"checks": [{"description": "Shapes languages in all GF glyphsets.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Glyphset Checks>", "<FontBakeryCheck:googlefonts/glyphsets/shape_languages>", [["font", 0]]], "logs": [{"message": {"code": "failed-check", "message": "Failed with ModuleNotFoundError: No module named 'shaperglot.checker'\n```\n  File \"/Users/simon/work/gf-dashboard/venv/lib/python3.13/site-packages/fontbakery/checkrunner.py\", line 222, in _run_check\n    subresults = list(subresults)\n  File \"/Users/simon/work/gf-dashboard/venv/lib/python3.13/site-packages/fontbakery/checks/vendorspecific/googlefonts/glyphsets/shape_languages.py\", line 19, in check_glyphsets_shape_languages\n    from shaperglot.checker import Checker\n\n```"}, "status": "ERROR"}], "module": "vendorspecific.googlefonts.glyphsets.shape_languages", "proposal": ["https://github.com/googlefonts/fontbakery/issues/4147"], "rationale": "\n        This check uses a heuristic to determine which GF glyphsets a font supports.\n        Then it checks the font for correct shaping behaviour for all languages in\n        those glyphsets.\n    ", "result": "ERROR", "severity": null}], "key": ["Glyphset Checks", null, null], "result": {"ERROR": 1}}, {"checks": [{"description": "Does DESCRIPTION file contain broken links?", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Description Checks>", "<FontBakeryCheck:googlefonts/description/broken_links>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.description.broken_links", "proposal": ["https://github.com/fonttools/fontbakery/issues/4110", "https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        The snippet of HTML in the DESCRIPTION.en_us.html/ARTICLE.en_us.html file is\n        added to the font family webpage on the Google Fonts website. For that reason,\n        all hyperlinks in it must be properly working.\n    ", "result": "PASS", "severity": null}, {"description": "DESCRIPTION.en_us.html should end in a linebreak.", "documentation": null, "experimental": false, "filename": "METADATA.pb", "key": ["<Section: Description Checks>", "<FontBakeryCheck:googlefonts/description/eof_linebreak>", [["metadata_pb", 0]]], "logs": [{"message": {"code": "missing-eof-linebreak", "message": "The last characther on DESCRIPTION.en_us.html is not a line-break. Please add it."}, "status": "WARN"}], "module": "vendorspecific.googlefonts.description.eof_linebreak", "proposal": ["https://github.com/fonttools/fontbakery/issues/2879"], "rationale": "\n        Some older text-handling tools sometimes misbehave if the last line of data\n        in a text file is not terminated with a newline character (also known as '\\n').\n\n        We know that this is a very small detail, but for the sake of keeping all\n        DESCRIPTION.en_us.html files uniformly formatted throughout the GFonts\n        collection, we chose to adopt the practice of placing this final linebreak\n        character on them.\n    ", "result": "WARN", "severity": null}, {"description": "DESCRIPTION.en_us.html should end in a linebreak.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Description Checks>", "<FontBakeryCheck:googlefonts/description/eof_linebreak>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.description.eof_linebreak", "proposal": ["https://github.com/fonttools/fontbakery/issues/2879"], "rationale": "\n        Some older text-handling tools sometimes misbehave if the last line of data\n        in a text file is not terminated with a newline character (also known as '\\n').\n\n        We know that this is a very small detail, but for the sake of keeping all\n        DESCRIPTION.en_us.html files uniformly formatted throughout the GFonts\n        collection, we chose to adopt the practice of placing this final linebreak\n        character on them.\n    ", "result": "PASS", "severity": null}, {"description": "On a family update, the DESCRIPTION.en_us.html file should ideally also be updated.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Description Checks>", "<FontBakeryCheck:googlefonts/description/family_update>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.description.family_update", "proposal": ["https://github.com/fonttools/fontbakery/issues/3182"], "rationale": "\n        We want to ensure that any significant changes to the font family are\n        properly mentioned in the DESCRIPTION file.\n\n        In general, it means that the contents of the DESCRIPTION.en_us.html file\n        will typically change if when font files are updated. Please treat this check\n        as a reminder to do so whenever appropriate!\n    ", "result": "PASS", "severity": null}, {"description": "Does DESCRIPTION file contain a upstream Git repo URL?", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Description Checks>", "<FontBakeryCheck:googlefonts/description/git_url>", [["font", 0]]], "logs": [{"message": {"code": "unfulfilled-conditions", "message": "Unfulfilled Conditions: not is_noto"}, "status": "SKIP"}], "module": "vendorspecific.googlefonts.description.git_url", "proposal": ["https://github.com/fonttools/fontbakery/issues/2523"], "rationale": "\n        The contents of the DESCRIPTION.en-us.html file are displayed on the\n        Google Fonts website in the about section of each font family specimen page.\n\n        Since all of the Google Fonts collection is composed of libre-licensed fonts,\n        this check enforces a policy that there must be a hypertext link in that page\n        directing users to the repository where the font project files are\n        made available.\n\n        Such hosting is typically done on sites like Github, Gitlab, GNU Savannah or\n        any other git-based version control service.\n    ", "result": "SKIP", "severity": null}, {"description": "Check for presence of an ARTICLE.en_us.html file", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Description Checks>", "<FontBakeryCheck:googlefonts/description/has_article>", [["font", 0]]], "logs": [{"message": {"code": "missing-article", "message": "This is a Noto font but it lacks an ARTICLE.en_us.html file."}, "status": "FAIL"}], "module": "vendorspecific.googlefonts.description.has_article", "proposal": ["https://github.com/fonttools/fontbakery/issues/3841", "https://github.com/fonttools/fontbakery/issues/4318", "https://github.com/fonttools/fontbakery/issues/4702"], "rationale": "\n        Fonts may have a longer article about them, or a description, but\n        not both - except for Noto fonts which should have both!\n    ", "result": "FAIL", "severity": null}, {"description": "Check the description doesn't contain unsupported html elements", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Description Checks>", "<FontBakeryCheck:googlefonts/description/has_unsupported_elements>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.description.has_unsupported_elements", "proposal": ["https://github.com/fonttools/fontbakery/issues/2811#issuecomment-1907566857"], "rationale": "\n        The Google Fonts backend doesn't support the following html elements:\n        https://googlefonts.github.io/gf-guide/description.html#requirements\n    ", "result": "PASS", "severity": null}, {"description": "DESCRIPTION.en_us.html must have more than 200 bytes.", "documentation": null, "experimental": false, "filename": "METADATA.pb", "key": ["<Section: Description Checks>", "<FontBakeryCheck:googlefonts/description/min_length>", [["metadata_pb", 0]]], "logs": [{"message": {"code": "too-short", "message": "DESCRIPTION.en_us.html must have size larger than 200 bytes."}, "status": "FAIL"}], "module": "vendorspecific.googlefonts.description.min_length", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        The DESCRIPTION.en_us.html file is intended to provide a brief overview of\n        the font family. It should be long enough to be useful to users, but not so\n        long that it becomes overwhelming.\n\n        We chose 200 bytes as a minimum length because it suggests that someone has\n        taken the time to write \"something sensible\" about the font.\n    ", "result": "FAIL", "severity": null}, {"description": "DESCRIPTION.en_us.html must have more than 200 bytes.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Description Checks>", "<FontBakeryCheck:googlefonts/description/min_length>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.description.min_length", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        The DESCRIPTION.en_us.html file is intended to provide a brief overview of\n        the font family. It should be long enough to be useful to users, but not so\n        long that it becomes overwhelming.\n\n        We chose 200 bytes as a minimum length because it suggests that someone has\n        taken the time to write \"something sensible\" about the font.\n    ", "result": "PASS", "severity": null}, {"description": "URLs on DESCRIPTION file must not display http(s) prefix.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Description Checks>", "<FontBakeryCheck:googlefonts/description/urls>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.description.urls", "proposal": ["https://github.com/fonttools/fontbakery/issues/3497", "https://github.com/fonttools/fontbakery/issues/4283"], "rationale": "\n        The snippet of HTML in the DESCRIPTION.en_us.html file is added to the font\n        family webpage on the Google Fonts website.\n\n        Google Fonts has a content formatting policy for that snippet that expects the\n        text content of anchors not to include the http:// or https:// prefixes.\n    ", "result": "PASS", "severity": null}, {"description": "Is this a proper HTML snippet?", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Description Checks>", "<FontBakeryCheck:googlefonts/description/valid_html>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.description.valid_html", "proposal": ["https://github.com/fonttools/fontbakery/issues/2664", "https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        Sometimes people write malformed HTML markup. This check should ensure the\n        file is good.\n\n        Additionally, when packaging families for being pushed to the `google/fonts`\n        git repo, if there is no DESCRIPTION.en_us.html file, some older versions of\n        the `add_font.py` tool insert a placeholder description file which contains\n        invalid html. This file needs to either be replaced with an existing\n        description file or edited by hand.\n    ", "result": "PASS", "severity": null}], "key": ["Description Checks", null, null], "result": {"FAIL": 2, "PASS": 7, "SKIP": 1, "WARN": 1}}, {"checks": [{"description": "Fonts have equal codepoint coverage", "documentation": null, "experimental": false, "key": ["<Section: Family Checks>", "<FontBakeryCheck:googlefonts/family/equal_codepoint_coverage>", []], "logs": [{"message": {"code": "unfulfilled-conditions", "message": "Unfulfilled Conditions: stylenames_are_canonical"}, "status": "SKIP"}], "module": "vendorspecific.googlefonts.family.equal_codepoint_coverage", "proposal": ["https://github.com/fonttools/fontbakery/issues/4180"], "rationale": "\n        For a given family, all fonts must have the same codepoint coverage.\n        This is because we want to avoid the situation where, for example,\n        a character is present in a regular font but missing in the italic style;\n        turning on italic would cause the character to be rendered either as a\n        fake italic (auto-slanted) or to show tofu.\n    ", "result": "SKIP", "severity": null}, {"description": "Ensure Italic styles have Roman counterparts.", "documentation": null, "experimental": false, "key": ["<Section: Family Checks>", "<FontBakeryCheck:googlefonts/family/italics_have_roman_counterparts>", []], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.family.italics_have_roman_counterparts", "proposal": ["https://github.com/fonttools/fontbakery/issues/1733"], "rationale": "\n        For each font family on Google Fonts, every Italic style must have\n        a Roman sibling.\n\n        This kind of problem was first observed at [1] where the Bold style was\n        missing but BoldItalic was included.\n\n        [1] https://github.com/google/fonts/pull/1482\n    ", "result": "PASS", "severity": null}, {"description": "All tabular figures must have the same width across the RIBBI-family.", "documentation": null, "experimental": false, "key": ["<Section: Family Checks>", "<FontBakeryCheck:googlefonts/family/tnum_horizontal_metrics>", []], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.family.tnum_horizontal_metrics", "proposal": ["https://github.com/fonttools/fontbakery/issues/2278"], "rationale": "\n        Tabular figures need to have the same metrics in all styles in order to allow\n        tables to be set with proper typographic control, but to maintain the placement\n        of decimals and numeric columns between rows.\n\n        Here's a good explanation of this:\n        https://www.typography.com/techniques/fonts-for-financials/#tabular-figs\n    ", "result": "PASS", "severity": null}], "key": ["Family Checks", null, null], "result": {"PASS": 2, "SKIP": 1}}, {"checks": [{"description": "Check family name for GF Guide compliance.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Name table checks>", "<FontBakeryCheck:googlefonts/family_name_compliance>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.family_name_compliance", "proposal": ["https://github.com/fonttools/fontbakery/issues/4049"], "rationale": "\n        Checks the family name for compliance with the Google Fonts Guide.\n        https://googlefonts.github.io/gf-guide/onboarding.html#new-fonts\n\n        If you want to have your family name added to the CamelCase\n        exceptions list, please submit a pull request to the\n        camelcased_familyname_exceptions.txt file.\n\n        Similarly, abbreviations can be submitted to the\n        abbreviations_familyname_exceptions.txt file.\n\n        These are located in the Lib/fontbakery/data/googlefonts/ directory\n        of the FontBakery source code currently hosted at\n        https://github.com/fonttools/fontbakery/\n    ", "result": "PASS", "severity": null}, {"description": "Name table entries should not contain line-breaks.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Name table checks>", "<FontBakeryCheck:googlefonts/name/line_breaks>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.name.line_breaks", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        There are some entries on the name table that may include more than one line\n        of text. The Google Fonts team, though, prefers to keep the name table entries\n        short and simple without line breaks.\n\n        For instance, some designers like to include the full text of a font license in\n        the \"copyright notice\" entry, but for the GFonts collection this entry should\n        only mention year, author and other basic info in a manner enforced by\n        `googlefonts/font_copyright`\n    ", "result": "PASS", "severity": null}], "key": ["Name table checks", null, null], "result": {"PASS": 2}}, {"checks": [{"description": "Check font has a license.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Licensing Checks>", "<FontBakeryCheck:googlefonts/family/has_license>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.family.has_license", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        A license file is required for all fonts in the Google Fonts collection.\n        This checks that the font's directory contains a file named OFL.txt or\n        LICENSE.txt.\n    ", "result": "PASS", "severity": null}, {"description": "Copyright notices match canonical pattern in fonts", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Licensing Checks>", "<FontBakeryCheck:googlefonts/font_copyright>", [["font", 0]]], "logs": [{"message": {"code": "bad-notice-format", "message": "Name Table entry: Copyright notices should match a pattern similar to:\n\n \"Copyright 2020 The Familyname Project Authors (git url)\"\n\nBut instead we have got:\n\n\"Copyright 2013 Google LLC\""}, "status": "FAIL"}, {"message": {"code": "bad-notice-format", "message": "METADATA.pb: Copyright notices should match a pattern similar to:\n\n \"Copyright 2020 The Familyname Project Authors (git url)\"\n\nBut instead we have got:\n\n\"Copyright 2013, 2022 Google Inc. All Rights Reserved.\""}, "status": "FAIL"}, {"message": {"code": "mismatch", "message": "Copyright notices differ between name table entries and METADATA.pb.The following copyright values were found:\n\n\t- Copyright 2013 Google LLC: Name Table entry\n\n\t- Copyright 2013, 2022 Google Inc. All Rights Reserved.: METADATA.pb"}, "status": "FAIL"}], "module": "vendorspecific.googlefonts.font_copyright", "proposal": ["https://github.com/fonttools/fontbakery/pull/2383", "https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        This check aims at ensuring a uniform and legally accurate copyright statement\n        on the name table entries and METADATA.pb files of font files across the Google\n        Fonts library.\n\n        We also check that the copyright field in METADATA.pb matches the\n        contents of the name table nameID 0 (Copyright), and that the copyright\n        notice within the METADATA.pb file is not too long; if it is more than 500\n        characters, this may be an indication that either a full license or the\n        font's description has been included in this field by mistake.\n\n    \n        The expected pattern for the copyright string adheres to the following rules:\n\n        * It must say \"Copyright\" followed by a 4 digit year (optionally followed by\n          a hyphen and another 4 digit year)\n\n        * Additional years or year ranges are also valid.\n\n        * An optional comma can be placed here.\n\n        * Then it must say \"The <familyname> Project Authors\" and, within parentheses,\n          a URL for a git repository must be provided. But we have an exception\n          for the fonts from the Noto project, that simply have\n          \"google llc. all rights reserved\" here.\n\n        * The check is case insensitive and does not validate whether the familyname\n          is correct, even though we'd obviously expect it to be.\n\n\n        Here is an example of a valid copyright string:\n\n        \"Copyright 2017 The Archivo Black Project Authors\n         (https://github.com/Omnibus-Type/ArchivoBlack)\"\n", "result": "FAIL", "severity": 10}, {"description": "Check OFL body text is correct.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Licensing Checks>", "<FontBakeryCheck:googlefonts/license/OFL_body_text>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.license.OFL_body_text", "proposal": ["https://github.com/fonttools/fontbakery/issues/3352"], "rationale": "\n        Check OFL body text is correct.\n        Often users will accidently delete parts of the body text.\n    ", "result": "PASS", "severity": 10}, {"description": "Check license file has good copyright string.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Licensing Checks>", "<FontBakeryCheck:googlefonts/license/OFL_copyright>", [["font", 0]]], "logs": [{"message": {"code": "bad-format", "message": "First line in license file is:\n\n\"copyright 2013 google llc\"\n\nwhich does not match the expected format, similar to:\n\n\"Copyright 2022 The Familyname Project Authors (git url)\""}, "status": "FAIL"}], "module": "vendorspecific.googlefonts.license.OFL_copyright", "proposal": ["https://github.com/fonttools/fontbakery/issues/2764"], "rationale": "\n        An OFL.txt file's first line should be the font copyright.\n\n    \n        The expected pattern for the copyright string adheres to the following rules:\n\n        * It must say \"Copyright\" followed by a 4 digit year (optionally followed by\n          a hyphen and another 4 digit year)\n\n        * Additional years or year ranges are also valid.\n\n        * An optional comma can be placed here.\n\n        * Then it must say \"The <familyname> Project Authors\" and, within parentheses,\n          a URL for a git repository must be provided. But we have an exception\n          for the fonts from the Noto project, that simply have\n          \"google llc. all rights reserved\" here.\n\n        * The check is case insensitive and does not validate whether the familyname\n          is correct, even though we'd obviously expect it to be.\n\n\n        Here is an example of a valid copyright string:\n\n        \"Copyright 2017 The Archivo Black Project Authors\n         (https://github.com/Omnibus-Type/ArchivoBlack)\"\n", "result": "FAIL", "severity": 10}, {"description": "METADATA.pb: Copyright notice is the same in all fonts?", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Licensing Checks>", "<FontBakeryCheck:googlefonts/metadata/copyright>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.copyright", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        The METADATA.pb file includes a copyright field for each font\n        file in the family. The value of this field should be the same\n        for all fonts in the family.\n    ", "result": "PASS", "severity": null}, {"description": "METADATA.pb license is \"APACHE2\", \"UFL\" or \"OFL\"?", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Licensing Checks>", "<FontBakeryCheck:googlefonts/metadata/license>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.license", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        The license field in METADATA.pb must contain one of the\n        three values \"APACHE2\", \"UFL\" or \"OFL\". (New fonts should\n        generally be OFL unless there are special circumstances.)\n    ", "result": "PASS", "severity": null}, {"description": "Copyright notice on METADATA.pb should not contain 'Reserved Font Name'.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Licensing Checks>", "<FontBakeryCheck:googlefonts/metadata/reserved_font_name>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.metadata.reserved_font_name", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        Unless an exception has been granted, we expect fonts on\n        Google Fonts not to use the \"Reserved Font Name\" clause in their\n        copyright information. This is because fonts with RFNs are difficult\n        to modify in a libre ecosystem; anyone who forks the font (with a\n        view to changing it) must first rename the font, which makes\n        it difficult to pass changes back to upstream.\n\n        There is also a potential licensing difficulty, in that Google Fonts\n        web service subsets the font - a modification of the original - but\n        then delivers the font with the same name, which could be seen as a\n        violation of the reserved font name clause.\n    ", "result": "PASS", "severity": null}, {"description": "Check copyright namerecords match license file.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Licensing Checks>", "<FontBakeryCheck:googlefonts/name/license>", [["font", 0]]], "logs": [{"message": {"code": "wrong", "message": "License file OFL.txt exists but NameID 13 (LICENSE DESCRIPTION) value on platform 3 (WINDOWS) is not specified for that. Value was: \"This Font Software is licensed under the SIL Open Font License, Version 1.1. This Font Software is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the SIL Open Font License for the specific language, permissions and limitations governing your use of this Font Software.\" Must be changed to \"This Font Software is licensed under the SIL Open Font License, Version 1.1. This license is available with a FAQ at: https://openfontlicense.org\""}, "status": "FAIL"}], "module": "vendorspecific.googlefonts.name.license", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        A known licensing description must be provided in the NameID 14\n        (LICENSE DESCRIPTION) entries of the name table.\n\n        The source of truth for this check (to determine which license is in use) is\n        a file placed side-by-side to your font project including the licensing terms.\n\n        Depending on the chosen license, one of the following string snippets is\n        expected to be found on the NameID 13 (LICENSE DESCRIPTION) entries of the\n        name table:\n\n        - \"This Font Software is licensed under the SIL Open Font License, Version 1.1.\n          This license is available with a FAQ at: openfontlicense.org\"\n\n        - \"Licensed under the Apache License, Version 2.0\"\n\n        - \"Licensed under the Ubuntu Font Licence 1.0.\"\n\n\n        Currently accepted licenses are Apache or Open Font License. For a small set\n        of legacy families the Ubuntu Font License may be acceptable as well.\n\n        When in doubt, please choose OFL for new font projects.\n    ", "result": "FAIL", "severity": null}, {"description": "License URL matches License text on name table?", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Licensing Checks>", "<FontBakeryCheck:googlefonts/name/license_url>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "Could not infer the font license. Please ensure NameID 13 (LICENSE DESCRIPTION) is properly set."}, "status": "SKIP"}], "module": "vendorspecific.googlefonts.name.license_url", "proposal": ["https://github.com/fonttools/fontbakery/issues/4358", "https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        A known license URL must be provided in the NameID 14 (LICENSE INFO URL)\n        entry of the name table.\n\n        The source of truth for this check is the licensing text found on the NameID 13\n        entry (LICENSE DESCRIPTION).\n\n        The string snippets used for detecting licensing terms are:\n\n        - \"This Font Software is licensed under the SIL Open Font License, Version 1.1.\n          This license is available with a FAQ at: openfontlicense.org\"\n\n        - \"Licensed under the Apache License, Version 2.0\"\n\n        - \"Licensed under the Ubuntu Font Licence 1.0.\"\n\n\n        Currently accepted licenses are Apache or Open Font License. For a small set of\n        legacy families the Ubuntu Font License may be acceptable as well.\n\n        When in doubt, please choose OFL for new font projects.\n    ", "result": "SKIP", "severity": null}, {"description": "Name table strings must not contain the string 'Reserved Font Name'.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Licensing Checks>", "<FontBakeryCheck:googlefonts/name/rfn>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.name.rfn", "proposal": ["https://github.com/fonttools/fontbakery/issues/1380"], "rationale": "\n        Some designers adopt the \"Reserved Font Name\" clause of the OFL license. This\n        means that the original author reserves the rights to the family name and other\n        people can only distribute modified versions using a different family name.\n\n        Google Fonts published updates to the fonts in the collection in order to fix\n        issues and/or implement further improvements to the fonts. It is important to\n        keep the family name so that users of the webfonts can benefit from the updates.\n        Since it would forbid such usage scenario, all families in the GFonts collection\n        are required to not adopt the RFN clause.\n\n        This check ensures \"Reserved Font Name\" is not mentioned in the name table.\n    ", "result": "PASS", "severity": null}], "key": ["Licensing Checks", null, null], "result": {"FAIL": 3, "PASS": 6, "SKIP": 1}}, {"checks": [{"description": "Directory name in GFonts repo structure must match NameID 1 of the regular.", "documentation": null, "experimental": false, "key": ["<Section: Repository Checks>", "<FontBakeryCheck:googlefonts/repo/dirname_matches_nameid_1>", []], "logs": [{"message": {"code": "variable-exempt", "message": "Variable fonts are exempt from this check."}, "status": "SKIP"}], "module": "vendorspecific.googlefonts.repo.dirname_matches_nameid_1", "proposal": ["https://github.com/fonttools/fontbakery/issues/2302"], "rationale": "\n        For static fonts, we expect to name the directory in google/fonts\n        according to the NameID 1 of the regular font, all lower case with\n        no hyphens or spaces. This check verifies that the directory\n        name matches our expectations.\n    ", "result": "SKIP", "severity": null}, {"description": "A font repository should not include FontBakery report files", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Repository Checks>", "<FontBakeryCheck:googlefonts/repo/fb_report>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.repo.fb_report", "proposal": ["https://github.com/fonttools/fontbakery/issues/2888"], "rationale": "\n        A FontBakery report is ephemeral and so should be used for posting issues on a\n        bug-tracker instead of being hosted in the font project repository.\n    ", "result": "PASS", "severity": null}, {"description": "Check upstream.yaml file contains all required fields", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Repository Checks>", "<FontBakeryCheck:googlefonts/repo/upstream_yaml_has_required_fields>", [["font", 0]]], "logs": [{"message": {"code": "unfulfilled-conditions", "message": "Unfulfilled Conditions: upstream_yaml"}, "status": "SKIP"}], "module": "vendorspecific.googlefonts.repo.upstream_yaml_has_required_fields", "proposal": ["https://github.com/fonttools/fontbakery/issues/3338"], "rationale": "\n        If a family has been pushed using the gftools packager, we must check that all\n        the required fields in the upstream.yaml file have been populated.\n    ", "result": "SKIP", "severity": 10}, {"description": "A static fonts directory, if present, must contain manually hinted fonts", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Repository Checks>", "<FontBakeryCheck:googlefonts/repo/vf_has_static_fonts>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.repo.vf_has_static_fonts", "proposal": ["https://github.com/fonttools/fontbakery/issues/2654"], "rationale": "\n        Variable font family directories kept in the google/fonts git repo may include\n        a static/ subdir containing static fonts, if manual hinting is used on\n        these fonts. Otherwise, the directory should be removed.\n    ", "result": "PASS", "severity": null}, {"description": "A font repository should not include ZIP files", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Repository Checks>", "<FontBakeryCheck:googlefonts/repo/zip_files>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.repo.zip_files", "proposal": ["https://github.com/fonttools/fontbakery/issues/2903"], "rationale": "\n        Sometimes people check in ZIPs into their font project repositories. While we\n        accept the practice of checking in binaries, we believe that a ZIP is a step\n        too far ;)\n\n        Note: a source purist position is that only source files and build scripts\n        should be checked in.\n    ", "result": "PASS", "severity": null}], "key": ["Repository Checks", null, null], "result": {"PASS": 3, "SKIP": 2}}, {"checks": [{"description": "Ensure dotted circle glyph is present and can attach marks.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Shaping Checks>", "<FontBakeryCheck:dotted_circle>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "Font has no nonspacing mark glyphs."}, "status": "SKIP"}], "module": "dotted_circle", "proposal": ["https://github.com/fonttools/fontbakery/issues/3600"], "rationale": "\n        The dotted circle character (U+25CC) is inserted by shaping engines before\n        mark glyphs which do not have an associated base, especially in the context\n        of broken syllabic clusters.\n\n        For fonts containing combining marks, it is recommended that the dotted circle\n        character be included so that these isolated marks can be displayed properly;\n        for fonts supporting complex scripts, this should be considered mandatory.\n\n        Additionally, when a dotted circle glyph is present, it should be able to\n        display all marks correctly, meaning that it should contain anchors for all\n        attaching marks.\n\n        A fontmake filter can be used to automatically add a dotted_circle to a font:\n\n        fontmake --filter 'DottedCircleFilter(pre=True)' --filter '...'\n    ", "result": "SKIP", "severity": 3}, {"description": "Check that no collisions are found while shaping", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Shaping Checks>", "<FontBakeryCheck:shaping/collides>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "Shaping test directory not defined in configuration file"}, "status": "SKIP"}], "module": "shaping.collides", "proposal": ["https://github.com/fonttools/fontbakery/pull/3223"], "rationale": "\n        Fonts with complex layout rules can benefit from regression tests to ensure\n        that the rules are behaving as designed. This checks runs a shaping test\n        suite and reports instances where the glyphs collide in unexpected ways.\n\n        Shaping test suites should be written by the font engineer and referenced\n        in the FontBakery configuration file. For more information about write\n        shaping test files and how to configure FontBakery to read the shaping\n        test suites, see https://simoncozens.github.io/tdd-for-otl/\n    ", "result": "SKIP", "severity": null}, {"description": "Check that no forbidden glyphs are found while shaping", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Shaping Checks>", "<FontBakeryCheck:shaping/forbidden>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "Shaping test directory not defined in configuration file"}, "status": "SKIP"}], "module": "shaping.forbidden", "proposal": ["https://github.com/fonttools/fontbakery/pull/3223"], "rationale": "\n        Fonts with complex layout rules can benefit from regression tests to ensure\n        that the rules are behaving as designed. This checks runs a shaping test\n        suite and reports if any glyphs are generated in the shaping which should\n        not be produced. (For example, .notdef glyphs, visible viramas, etc.)\n\n        Shaping test suites should be written by the font engineer and referenced in\n        the FontBakery configuration file. For more information about write shaping\n        test files and how to configure FontBakery to read the shaping test suites,\n        see https://simoncozens.github.io/tdd-for-otl/\n    ", "result": "SKIP", "severity": null}, {"description": "Check that texts shape as per expectation", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Shaping Checks>", "<FontBakeryCheck:shaping/regression>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "Shaping test directory not defined in configuration file"}, "status": "SKIP"}], "module": "shaping.regression", "proposal": ["https://github.com/fonttools/fontbakery/pull/3223"], "rationale": "\n        Fonts with complex layout rules can benefit from regression tests to ensure\n        that the rules are behaving as designed. This checks runs a shaping test\n        suite and compares expected shaping against actual shaping, reporting\n        any differences.\n\n        Shaping test suites should be written by the font engineer and referenced\n        in the FontBakery configuration file. For more information about write\n        shaping test files and how to configure FontBakery to read the shaping\n        test suites, see https://simoncozens.github.io/tdd-for-otl/\n    ", "result": "SKIP", "severity": null}, {"description": "Ensure soft_dotted characters lose their dot when combined with marks that replace the dot.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Shaping Checks>", "<FontBakeryCheck:soft_dotted>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "Font has no soft dotted characters or no mark above characters."}, "status": "SKIP"}], "module": "soft_dotted", "proposal": ["https://github.com/fonttools/fontbakery/issues/4059"], "rationale": "\n        An accent placed on characters with a \"soft dot\", like i or j, causes\n        the dot to disappear.\n        An explicit dot above can be added where required.\n        See \"Diacritics on i and j\" in Section 7.1, \"Latin\" in The Unicode Standard.\n\n        Characters with the Soft_Dotted property are listed in\n        https://www.unicode.org/Public/UCD/latest/ucd/PropList.txt\n\n        See also:\n        https://googlefonts.github.io/gf-guide/diacritics.html#soft-dotted-glyphs\n    ", "result": "SKIP", "severity": 3}], "key": ["Shaping Checks", null, null], "result": {"SKIP": 5}}, {"checks": [{"description": "Are there any misaligned on-curve points?", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Outline Checks>", "<FontBakeryCheck:outline_alignment_miss>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "So many Y-coordinates of points were close to boundaries that this was probably by design."}, "status": "PASS"}], "module": "outline_alignment_miss", "proposal": ["https://github.com/fonttools/fontbakery/pull/3088"], "rationale": "\n        This check heuristically looks for on-curve points which are close to, but\n        do not sit on, significant boundary coordinates. For example, a point which\n        has a Y-coordinate of 1 or -1 might be a misplaced baseline point. As well as\n        the baseline, here we also check for points near the x-height (but only for\n        lowercase Latin letters), cap-height, ascender and descender Y coordinates.\n\n        Not all such misaligned curve points are a mistake, and sometimes the design\n        may call for points in locations near the boundaries. As this check is liable\n        to generate significant numbers of false positives, it will pass if there are\n        more than 100 reported misalignments.\n    ", "result": "PASS", "severity": null}, {"description": "Do any segments have colinear vectors?", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Outline Checks>", "<FontBakeryCheck:outline_colinear_vectors>", [["font", 0]]], "logs": [{"message": {"code": "unfulfilled-conditions", "message": "Unfulfilled Conditions: not is_variable_font"}, "status": "SKIP"}], "module": "outline_colinear_vectors", "proposal": ["https://github.com/fonttools/fontbakery/pull/3088"], "rationale": "\n        This check looks for consecutive line segments which have the same angle. This\n        normally happens if an outline point has been added by accident.\n\n        This check is not run for variable fonts, as they may legitimately have\n        colinear vectors.\n    ", "result": "SKIP", "severity": null}, {"description": "Check the direction of the outermost contour in each glyph", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Outline Checks>", "<FontBakeryCheck:outline_direction>", [["font", 0]]], "logs": [{"message": {"code": "ccw-outer-contour", "message": "The following glyphs have a counter-clockwise outer contour:\n\n\t* blackHeart (U+1F5A4) has a counter-clockwise outer contour\n\n\t* blackMediumSmallSquare (U+25FE) has a counter-clockwise outer contour\n\n\t* blackMediumSquare (U+25FC) has a counter-clockwise outer contour\n\n\t* blueSquare (U+1F7E6) has a counter-clockwise outer contour\n\n\t* brownCircle (U+1F7E4) has a counter-clockwise outer contour\n\n\t* brownHeart (U+1F90E) has a counter-clockwise outer contour\n\n\t* brownSquare (U+1F7EB) has a counter-clockwise outer contour\n\n\t* cricketBatAndBall (U+1F3CF) has a counter-clockwise outer contour\n\n\t* eight (U+0038) has a counter-clockwise outer contour\n\n\t* euroBanknote (U+1F4B6) has a counter-clockwise outer contour\n\n\t* fieldHockeyStickAndBall (U+1F3D1) has a counter-clockwise outer contour\n\n\t* five (U+0035) has a counter-clockwise outer contour\n\n\t* four (U+0034) has a counter-clockwise outer contour\n\n\t* greenCircle (U+1F7E2) has a counter-clockwise outer contour\n\n\t* greenSquare (U+1F7E9) has a counter-clockwise outer contour\n\n\t* keycap_hash (U+FE82C) has a counter-clockwise outer contour\n\n\t* lacrosseStickAndBall (U+1F94D) has a counter-clockwise outer contour\n\n\t* lacrosseStickAndBall (U+1F94D) has a counter-clockwise outer contour\n\n\t* lacrosseStickAndBall (U+1F94D) has a counter-clockwise outer contour\n\n\t* lacrosseStickAndBall (U+1F94D) has a counter-clockwise outer contour\n\n\t* lacrosseStickAndBall (U+1F94D) has a counter-clockwise outer contour\n\n\t* lacrosseStickAndBall (U+1F94D) has a counter-clockwise outer contour\n\n\t* lacrosseStickAndBall (U+1F94D) has a counter-clockwise outer contour\n\n\t* lacrosseStickAndBall (U+1F94D) has a counter-clockwise outer contour\n\n\t* mendingHeart has a counter-clockwise outer contour\n\n\t* nine (U+0039) has a counter-clockwise outer contour\n\n\t* one (U+0031) has a counter-clockwise outer contour\n\n\t* onePieceSwimsuit (U+1FA71) has a counter-clockwise outer contour\n\n\t* orangeCircle (U+1F7E0) has a counter-clockwise outer contour\n\n\t* orangeSquare (U+1F7E7) has a counter-clockwise outer contour\n\n\t* purpleCircle (U+1F7E3) has a counter-clockwise outer contour\n\n\t* purpleSquare (U+1F7EA) has a counter-clockwise outer contour\n\n\t* redCircle (U+1F534) has a counter-clockwise outer contour\n\n\t* redHeart (U+2764) has a counter-clockwise outer contour\n\n\t* redSquare (U+1F7E5) has a counter-clockwise outer contour\n\n\t* ringBuoy (U+1F6DF) has a counter-clockwise outer contour\n\n\t* seven (U+0037) has a counter-clockwise outer contour\n\n\t* shorts (U+1FA73) has a counter-clockwise outer contour\n\n\t* six (U+0036) has a counter-clockwise outer contour\n\n\t* skinTone3 (U+1F3FD) has a counter-clockwise outer contour\n\n\t* skinTone5 (U+1F3FF) has a counter-clockwise outer contour\n\n\t* smallBlueDiamond (U+1F539) has a counter-clockwise outer contour\n\n\t* smallOrangeDiamond (U+1F538) has a counter-clockwise outer contour\n\n\t* three (U+0033) has a counter-clockwise outer contour\n\n\t* two (U+0032) has a counter-clockwise outer contour\n\n\t* u1F3AC (U+1F3AC) has a counter-clockwise outer contour\n\n\t* u1F3AC (U+1F3AC) has a counter-clockwise outer contour\n\n\t* u1F3AC (U+1F3AC) has a counter-clockwise outer contour\n\n\t* u1F3BD (U+1F3BD) has a counter-clockwise outer contour\n\n\t* u1F3BE (U+1F3BE) has a counter-clockwise outer contour\n\n\t* u1F3BE (U+1F3BE) has a counter-clockwise outer contour\n\n\t* u1F3BE (U+1F3BE) has a counter-clockwise outer contour\n\n\t* u1F3C0 (U+1F3C0) has a counter-clockwise outer contour\n\n\t* u1F3C8 (U+1F3C8) has a counter-clockwise outer contour\n\n\t* u1F3F8 (U+1F3F8) has a counter-clockwise outer contour\n\n\t* u1F3F8 (U+1F3F8) has a counter-clockwise outer contour\n\n\t* u1F3F8 (U+1F3F8) has a counter-clockwise outer contour\n\n\t* u1F3F8 (U+1F3F8) has a counter-clockwise outer contour\n\n\t* u1F455 (U+1F455) has a counter-clockwise outer contour\n\n\t* u1F456 (U+1F456) has a counter-clockwise outer contour\n\n\t* u1F45A (U+1F45A) has a counter-clockwise outer contour\n\n\t* u1F45E (U+1F45E) has a counter-clockwise outer contour\n\n\t* u1F496 (U+1F496) has a counter-clockwise outer contour\n\n\t* u1F499 (U+1F499) has a counter-clockwise outer contour\n\n\t* u1F49A (U+1F49A) has a counter-clockwise outer contour\n\n\t* u1F49B (U+1F49B) has a counter-clockwise outer contour\n\n\t* u1F536 (U+1F536) has a counter-clockwise outer contour\n\n\t* u1F537 (U+1F537) has a counter-clockwise outer contour\n\n\t* u1F611 (U+1F611) has a counter-clockwise outer contour\n\n\t* u1F611 (U+1F611) has a path with no bounds (probably a single point)\n\n\t* u1F94B (U+1F94B) has a counter-clockwise outer contour\n\n\t* u1F997 (U+1F997) has a counter-clockwise outer contour\n\n\t* u1F997 (U+1F997) has a counter-clockwise outer contour\n\n\t* u1F997 (U+1F997) has a counter-clockwise outer contour\n\n\t* u1F997 (U+1F997) has a counter-clockwise outer contour\n\n\t* u1F997 (U+1F997) has a counter-clockwise outer contour\n\n\t* u1F997 (U+1F997) has a counter-clockwise outer contour\n\n\t* u1F997 (U+1F997) has a counter-clockwise outer contour\n\n\t* u1F997 (U+1F997) has a counter-clockwise outer contour\n\n\t* u1F997 (U+1F997) has a counter-clockwise outer contour\n\n\t* u1F9E1 (U+1F9E1) has a counter-clockwise outer contour\n\n\t* u1F9E6 (U+1F9E6) has a counter-clockwise outer contour\n\n\t* u1F9E6 (U+1F9E6) has a counter-clockwise outer contour\n\n\t* uni25AA (U+25AA) has a counter-clockwise outer contour\n\n\t* uni25CF (U+26AB) has a counter-clockwise outer contour\n\n\t* uni2B1B (U+2B1B) has a counter-clockwise outer contour\n\n\t* volleyball (U+1F3D0) has a counter-clockwise outer contour\n\n\t* whiteMediumSmallSquare (U+25FD) has a counter-clockwise outer contour\n\n\t* whiteMediumSquare (U+25FB) has a counter-clockwise outer contour\n\n\t* yarn (U+1F9F6) has a counter-clockwise outer contour\n\n\t* yarn (U+1F9F6) has a counter-clockwise outer contour\n\n\t* yellowCircle (U+1F7E1) has a counter-clockwise outer contour\n\n\t* yellowSquare (U+1F7E8) has a counter-clockwise outer contour\n\n\t* zero (U+0030) has a counter-clockwise outer contour"}, "status": "WARN"}], "module": "outline_direction", "proposal": ["https://github.com/fonttools/fontbakery/issues/2056"], "rationale": "\n        In TrueType fonts, the outermost contour of a glyph should be oriented\n        clockwise, while the inner contours should be oriented counter-clockwise.\n        Getting the path direction wrong can lead to rendering issues in some\n        software.\n    ", "result": "WARN", "severity": null}, {"description": "Do outlines contain any jaggy segments?", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Outline Checks>", "<FontBakeryCheck:outline_jaggy_segments>", [["font", 0]]], "logs": [{"message": {"code": "unfulfilled-conditions", "message": "Unfulfilled Conditions: not is_variable_font"}, "status": "SKIP"}], "module": "outline_jaggy_segments", "proposal": ["https://github.com/fonttools/fontbakery/issues/3064"], "rationale": "\n        This check heuristically detects outline segments which form a particularly\n        small angle, indicative of an outline error. This may cause false positives\n        in cases such as extreme ink traps, so should be regarded as advisory and\n        backed up by manual inspection.\n    ", "result": "SKIP", "severity": null}, {"description": "Do outlines contain any semi-vertical or semi-horizontal lines?", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Outline Checks>", "<FontBakeryCheck:outline_semi_vertical>", [["font", 0]]], "logs": [{"message": {"code": "unfulfilled-conditions", "message": "Unfulfilled Conditions: not is_variable_font"}, "status": "SKIP"}], "module": "outline_semi_vertical", "proposal": ["https://github.com/fonttools/fontbakery/pull/3088"], "rationale": "\n        This check detects line segments which are nearly, but not quite, exactly\n        horizontal or vertical. Sometimes such lines are created by design, but often\n        they are indicative of a design error.\n\n        This check is disabled for italic styles, which often contain nearly-upright\n        lines.\n    ", "result": "SKIP", "severity": null}, {"description": "Are any segments inordinately short?", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Outline Checks>", "<FontBakeryCheck:outline_short_segments>", [["font", 0]]], "logs": [{"message": {"code": "unfulfilled-conditions", "message": "Unfulfilled Conditions: not is_variable_font"}, "status": "SKIP"}], "module": "outline_short_segments", "proposal": ["https://github.com/fonttools/fontbakery/pull/3088"], "rationale": "\n        This check looks for outline segments which seem particularly short (less\n        than 0.6% of the overall path length).\n\n        This check is not run for variable fonts, as they may legitimately have\n        short segments. As this check is liable to generate significant numbers\n        of false positives, it will pass if there are more than\n        100 reported short segments.\n    ", "result": "SKIP", "severity": null}], "key": ["Outline Checks", null, null], "result": {"PASS": 1, "SKIP": 4, "WARN": 1}}, {"checks": [{"description": "Check if the axes match between the font and the Google Fonts version.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Font File Checks>", "<FontBakeryCheck:googlefonts/axes_match>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "Axes match Google Fonts version."}, "status": "PASS"}], "module": "vendorspecific.googlefonts.axes_match", "proposal": [null], "rationale": "\n        An updated font family must include the same axes found in the Google \"\n        Fonts version, with the same axis ranges.\n    ", "result": "PASS", "severity": null}, {"description": "Validate defaults on fvar table match registered fallback names in GFAxisRegistry.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Font File Checks>", "<FontBakeryCheck:googlefonts/axisregistry/fvar_axis_defaults>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.axisregistry.fvar_axis_defaults", "proposal": ["https://github.com/fonttools/fontbakery/issues/3141"], "rationale": "\n        Check that axis defaults have a corresponding fallback name registered at the\n        Google Fonts Axis Registry, available at\n        https://github.com/google/fonts/tree/main/axisregistry\n\n        This is necessary for the following reasons:\n\n        To get ZIP files downloads on Google Fonts to be accurate \u2014 otherwise the\n        chosen default font is not generated. The Newsreader family, for instance, has\n        a default value on the 'opsz' axis of 16pt. If 16pt was not a registered\n        fallback position, then the ZIP file would instead include another position\n        as default (such as 14pt).\n\n        For the Variable fonts to display the correct location on the specimen page.\n\n        For VF with no weight axis to be displayed at all. For instance, Ballet, which\n        has no weight axis, was not appearing in sandbox because default position on\n        'opsz' axis was 16pt, and it was not yet a registered fallback positon.\n    ", "result": "PASS", "severity": null}, {"description": "Checking file is named canonically.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Font File Checks>", "<FontBakeryCheck:googlefonts/canonical_filename>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "Font filename is correct, \"NotoEmoji[wght].ttf\"."}, "status": "PASS"}], "module": "vendorspecific.googlefonts.canonical_filename", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        A font's filename must be composed as \"<familyname>-<stylename>.ttf\":\n\n        - Nunito-Regular.ttf\n\n        - Oswald-BoldItalic.ttf\n\n\n        Variable fonts must list the axis tags in alphabetical order in\n        square brackets and separated by commas:\n\n        - Roboto[wdth,wght].ttf\n\n        - Familyname-Italic[wght].ttf\n    ", "result": "PASS", "severity": null}, {"description": "Check font follows the Google Fonts CJK vertical metric schema", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Font File Checks>", "<FontBakeryCheck:googlefonts/cjk_vertical_metrics>", [["font", 0]]], "logs": [{"message": {"code": "unfulfilled-conditions", "message": "Unfulfilled Conditions: is_cjk_font, not listed_on_gfonts_api"}, "status": "SKIP"}], "module": "vendorspecific.googlefonts.cjk_vertical_metrics", "proposal": ["https://github.com/fonttools/fontbakery/pull/2797"], "rationale": "\n        CJK fonts have different vertical metrics when compared to Latin fonts.\n        We follow the schema developed by dr Ken Lunde for Source Han Sans and\n        the Noto CJK fonts.\n\n        Our documentation includes further information:\n        https://github.com/googlefonts/gf-docs/tree/main/Spec#cjk-vertical-metrics\n    ", "result": "SKIP", "severity": null}, {"description": "Check if the vertical metrics of a CJK family are similar to the same family hosted on Google Fonts.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Font File Checks>", "<FontBakeryCheck:googlefonts/cjk_vertical_metrics_regressions>", [["font", 0]]], "logs": [{"message": {"code": "unfulfilled-conditions", "message": "Unfulfilled Conditions: is_cjk_font"}, "status": "SKIP"}], "module": "vendorspecific.googlefonts.cjk_vertical_metrics_regressions", "proposal": ["https://github.com/fonttools/fontbakery/pull/3244"], "rationale": "\n        Check CJK family has the same vertical metrics as the same family\n        hosted on Google Fonts.\n    ", "result": "SKIP", "severity": null}, {"description": "Ensure font has the expected color font tables.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Font File Checks>", "<FontBakeryCheck:googlefonts/colorfont_tables>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.colorfont_tables", "proposal": ["https://googlefonts.github.io/gf-guide/color.html", "https://github.com/fonttools/fontbakery/issues/3886", "https://github.com/fonttools/fontbakery/issues/3888", "https://github.com/fonttools/fontbakery/pull/3889", "https://github.com/fonttools/fontbakery/issues/4131"], "rationale": "\n        COLR v0 fonts are widely supported in most browsers so they do not require\n        an SVG color table. However, some environments (e.g. Safari, Adobe apps)\n        do not currently support COLR v1 so we need to add an SVG table to these fonts,\n        except in the case of variable fonts, since SVG does not support\n        OpenType Variations.\n\n        To automatically generate compatible SVG/COLR tables,\n        run the maximum_color tool in nanoemoji:\n        https://github.com/googlefonts/nanoemoji\n    ", "result": "PASS", "severity": null}, {"description": "Check font names are correct", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Font File Checks>", "<FontBakeryCheck:googlefonts/font_names>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.font_names", "proposal": ["https://github.com/fonttools/fontbakery/pull/3800"], "rationale": "\n        Google Fonts has several rules which need to be adhered to when\n        setting a font's name table. Please read:\n        https://googlefonts.github.io/gf-guide/statics.html#supported-styles\n        https://googlefonts.github.io/gf-guide/statics.html#style-linking\n        https://googlefonts.github.io/gf-guide/statics.html#unsupported-styles\n        https://googlefonts.github.io/gf-guide/statics.html#single-weight-families\n    ", "result": "PASS", "severity": null}, {"description": "Checking OS/2 fsType does not impose restrictions.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Font File Checks>", "<FontBakeryCheck:googlefonts/fstype>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.fstype", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        The fsType in the OS/2 table is a legacy DRM-related field. Fonts in the\n        Google Fonts collection must have it set to zero (also known as\n        \"Installable Embedding\"). This setting indicates that the fonts can be\n        embedded in documents and permanently installed by applications on\n        remote systems.\n\n        More detailed info is available at:\n        https://docs.microsoft.com/en-us/typography/opentype/spec/os2#fstype\n    ", "result": "PASS", "severity": null}, {"description": "Check variable font instances", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Font File Checks>", "<FontBakeryCheck:googlefonts/fvar_instances>", [["font", 0]]], "logs": [{"message": {"code": "bad-fvar-instances", "message": "fvar instances are incorrect:\n\n- Add missing instances\n\n\n| Name | current | expected |\n| :--- | :--- | :--- |\n| Light | wght=300.0 | wght=300.0 |\n| Regular | wght=400.0 | wght=400.0 |\n| Medium | N/A | wght=500.0 |\n| SemiBold | N/A | wght=600.0 |\n| Bold | wght=700.0 | wght=700.0 |\n\n"}, "status": "FAIL"}], "module": "vendorspecific.googlefonts.fvar_instances", "proposal": ["https://github.com/fonttools/fontbakery/pull/3800"], "rationale": "\n        Check a font's fvar instance coordinates comply with our guidelines:\n        https://googlefonts.github.io/gf-guide/variable.html#fvar-instances\n\n        This check is skipped for fonts that have a Morph (MORF) axis\n        since we allow users to define their own custom instances.\n    ", "result": "FAIL", "severity": null}, {"description": "Is the Grid-fitting and Scan-conversion Procedure ('gasp') table set to optimize rendering?", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Font File Checks>", "<FontBakeryCheck:googlefonts/gasp>", [["font", 0]]], "logs": [{"message": {"code": "ranges", "message": "These are the ppm ranges declared on the gasp table:\n\nPPM <= 65535:\n\tflag = 0x0A\n\t- Use grayscale rendering\n\t- Use smoothing along multiple axes with ClearType\u00ae\n"}, "status": "INFO"}, {"message": {"code": "unset-flags", "message": "The gasp range 0xFFFF value 0x0A should be set to 0x0F."}, "status": "WARN"}], "module": "vendorspecific.googlefonts.gasp", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        Traditionally version 0 'gasp' tables were set so that font sizes below 8 ppem\n        had no grid fitting but did have antialiasing. From 9-16 ppem, just grid\n        fitting.\n        And fonts above 17ppem had both antialiasing and grid fitting toggled on.\n        The use of accelerated graphics cards and higher resolution screens make this\n        approach obsolete. Microsoft's DirectWrite pushed this even further with much\n        improved rendering built into the OS and apps.\n\n        In this scenario it makes sense to simply toggle all 4 flags ON for all font\n        sizes.\n    ", "result": "WARN", "severity": null}, {"description": "Check Google Fonts glyph coverage.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Font File Checks>", "<FontBakeryCheck:googlefonts/glyph_coverage>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "This is an icon font or a symbol font."}, "status": "SKIP"}], "module": "vendorspecific.googlefonts.glyph_coverage", "proposal": ["https://github.com/fonttools/fontbakery/pull/2488"], "rationale": "\n        Google Fonts expects that fonts in its collection support at least the minimal\n        set of characters defined in the `GF-latin-core` glyph-set.\n    ", "result": "SKIP", "severity": null}, {"description": "Font has ttfautohint params?", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Font File Checks>", "<FontBakeryCheck:googlefonts/has_ttfautohint_params>", [["font", 0]]], "logs": [{"message": {"code": "not-hinted", "message": "Font appears to our heuristic as not hinted using ttfautohint."}, "status": "SKIP"}], "module": "vendorspecific.googlefonts.has_ttfautohint_params", "proposal": ["https://github.com/fonttools/fontbakery/issues/1773"], "rationale": "\n        It is critically important that all static TTFs in the Google Fonts API\n        which were autohinted with ttfautohint store their TTFAutohint args in\n        the 'name' table, so that an automated solution can be made to\n        replicate the hinting on subsets, etc.\n    ", "result": "SKIP", "severity": null}, {"description": "Ensure fonts have ScriptLangTags declared on the 'meta' table.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Font File Checks>", "<FontBakeryCheck:googlefonts/meta/script_lang_tags>", [["font", 0]]], "logs": [{"message": {"code": "lacks-meta-table", "message": "This font file does not have a 'meta' table."}, "status": "WARN"}], "module": "vendorspecific.googlefonts.meta.script_lang_tags", "proposal": ["https://github.com/fonttools/fontbakery/issues/3349"], "rationale": "\n        The OpenType 'meta' table originated at Apple. Microsoft added it to OT with\n        just two DataMap records:\n\n        - dlng: comma-separated ScriptLangTags that indicate which scripts,\n          or languages and scripts, with possible variants, the font is designed for.\n\n        - slng: comma-separated ScriptLangTags that indicate which scripts,\n          or languages and scripts, with possible variants, the font supports.\n\n\n        The slng structure is intended to describe which languages and scripts the\n        font overall supports. For example, a Traditional Chinese font that also\n        contains Latin characters, can indicate Hant,Latn, showing that it supports\n        Hant, the Traditional Chinese variant of the Hani script, and it also\n        supports the Latn script.\n\n        The dlng structure is far more interesting. A font may contain various glyphs,\n        but only a particular subset of the glyphs may be truly \"leading\" in the design,\n        while other glyphs may have been included for technical reasons. Such a\n        Traditional Chinese font could only list Hant there, showing that it\u2019s designed\n        for Traditional Chinese, but the font would omit Latn, because the developers\n        don\u2019t think the font is really recommended for purely Latin-script use.\n\n        The tags used in the structures can comprise just script, or also language\n        and script. For example, if a font has Bulgarian Cyrillic alternates in the\n        locl feature for the cyrl BGR OT languagesystem, it could also indicate in\n        dlng explicitly that it supports bul-Cyrl. (Note that the scripts and languages\n        in meta use the ISO language and script codes, not the OpenType ones).\n\n        This check ensures that the font has the meta table containing the\n        slng and dlng structures.\n\n        All families in the Google Fonts collection should contain the 'meta' table.\n        Windows 10 already uses it when deciding on which fonts to fall back to.\n        The Google Fonts API and also other environments could use the data for\n        smarter filtering. Most importantly, those entries should be added\n        to the Noto fonts.\n\n        In the font making process, some environments store this data in external\n        files already. But the meta table provides a convenient way to store this\n        inside the font file, so some tools may add the data, and unrelated tools\n        may read this data. This makes the solution much more portable and universal.\n    ", "result": "WARN", "severity": 3}, {"description": "Description strings in the name table must not exceed 200 characters.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Font File Checks>", "<FontBakeryCheck:googlefonts/name/description_max_length>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.name.description_max_length", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        An old FontLab version had a bug which caused it to store copyright notices\n        in nameID 10 entries.\n\n        In order to detect those and distinguish them from actual legitimate usage of\n        this name table entry, we expect that such strings do not exceed a reasonable\n        length of 200 chars.\n\n        Longer strings are likely instances of the FontLab bug.\n    ", "result": "PASS", "severity": null}, {"description": "Make sure family name does not begin with a digit.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Font File Checks>", "<FontBakeryCheck:googlefonts/name/familyname_first_char>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.name.familyname_first_char", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        Font family names which start with a numeral are often not discoverable\n        in Windows applications.\n    ", "result": "PASS", "severity": null}, {"description": "Font has all mandatory 'name' table entries?", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Font File Checks>", "<FontBakeryCheck:googlefonts/name/mandatory_entries>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.name.mandatory_entries", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        We require all fonts to have values for their font family name,\n        font subfamily name, full font name, and postscript name. For RIBBI\n        fonts, we also require values for the typographic family name and\n        typographic subfamily name.\n    ", "result": "PASS", "severity": null}, {"description": "Version format is correct in 'name' table?", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Font File Checks>", "<FontBakeryCheck:googlefonts/name/version_format>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.name.version_format", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        For Google Fonts, the version string must be in the format \"Version X.Y\".\n        The version number must be greater than or equal to 1.000. (Additional\n        information following the numeric version number is acceptable.)\n        The \"Version \" prefix is a recommendation given by the OpenType spec.\n    ", "result": "PASS", "severity": null}, {"description": "Font has old ttfautohint applied?", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Font File Checks>", "<FontBakeryCheck:googlefonts/old_ttfautohint>", [["font", 0]]], "logs": [{"message": {"code": "version-not-detected", "message": "Could not detect which version of ttfautohint was used in this font. It is typically specified as a comment in the font version entries of the 'name' table. Such font version strings are currently: ['Version 3.002']"}, "status": "INFO"}], "module": "vendorspecific.googlefonts.old_ttfautohint", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        Check if font has been hinted with an outdated version of ttfautohint.\n    ", "result": "INFO", "severity": null}, {"description": "Ensure font can render its own name.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Font File Checks>", "<FontBakeryCheck:googlefonts/render_own_name>", [["font", 0]]], "logs": [{"message": {"code": "render-own-name", "message": ".notdef glyphs were found when attempting to render Noto Emoji"}, "status": "FAIL"}], "module": "vendorspecific.googlefonts.render_own_name", "proposal": ["https://github.com/fonttools/fontbakery/issues/3159"], "rationale": "\n        A base expectation is that a font family's regular/default (400 roman) style\n        can render its 'menu name' (nameID 1) in itself.\n    ", "result": "FAIL", "severity": null}, {"description": "Check axis ordering on the STAT table.", "documentation": null, "experimental": false, "key": ["<Section: Font File Checks>", "<FontBakeryCheck:googlefonts/STAT/axis_order>", []], "logs": [{"message": {"code": "summary", "message": "None of the fonts lack a STAT table.\n\n\tAnd these are the most common STAT axis orderings:\n\t('wght', 1)"}, "status": "INFO"}], "module": "vendorspecific.googlefonts.STAT.axis_order", "proposal": ["https://github.com/fonttools/fontbakery/issues/3049"], "rationale": "\n        This is (for now) a merely informative check to detect what's the axis ordering\n        declared on the STAT table of fonts in the Google Fonts collection.\n\n        We may later update this to enforce some unified axis ordering scheme,\n        yet to be determined.\n    ", "result": "INFO", "severity": null}, {"description": "Validate STAT particle names and values match the fallback names in GFAxisRegistry.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Font File Checks>", "<FontBakeryCheck:googlefonts/STAT/axisregistry>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.STAT.axisregistry", "proposal": ["https://github.com/fonttools/fontbakery/issues/3022"], "rationale": "\n        Check that particle names and values on STAT table match the fallback names\n        in each axis entry at the Google Fonts Axis Registry, available at\n        https://github.com/google/fonts/tree/main/axisregistry\n    ", "result": "PASS", "severity": null}, {"description": "Stricter unitsPerEm criteria for Google Fonts.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Font File Checks>", "<FontBakeryCheck:googlefonts/unitsperem>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.unitsperem", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        Even though the OpenType spec allows unitsPerEm to be any value between 16\n        and 16384, the Google Fonts project aims at a narrower set of reasonable values.\n\n        Values above 4000 would likely result in unreasonable filesize increases.\n    ", "result": "PASS", "severity": null}, {"description": "OS/2.fsSelection bit 7 (USE_TYPO_METRICS) is set in all fonts.", "documentation": null, "experimental": false, "key": ["<Section: Font File Checks>", "<FontBakeryCheck:googlefonts/use_typo_metrics>", []], "logs": [{"message": {"code": "missing-os2-fsselection-bit7", "message": "OS/2.fsSelection bit 7 (USE_TYPO_METRICS) wasNOT set in the following fonts: ['/Users/simon/others-repos/fonts//ofl/notoemoji/NotoEmoji[wght].ttf']."}, "status": "FAIL"}], "module": "vendorspecific.googlefonts.use_typo_metrics", "proposal": ["https://github.com/fonttools/fontbakery/issues/3241"], "rationale": "\n        All fonts on the Google Fonts collection should have OS/2.fsSelection bit 7\n        (USE_TYPO_METRICS) set. This requirement is part of the vertical metrics scheme\n        established as a Google Fonts policy aiming at a common ground supported by\n        all major font rendering environments.\n\n        For more details, read:\n        https://github.com/googlefonts/gf-docs/blob/main/VerticalMetrics/README.md\n\n        Below is the portion of that document that is most relevant to this check:\n\n        Use_Typo_Metrics must be enabled. This will force MS Applications to use the\n        OS/2 Typo values instead of the Win values. By doing this, we can freely set\n        the Win values to avoid clipping and control the line height with the typo\n        values. It has the added benefit of future line height compatibility. When\n        a new script is added, we simply change the Win values to the new yMin\n        and yMax, without needing to worry if the line height have changed.\n    ", "result": "FAIL", "severity": 10}, {"description": "Check a static ttf can be generated from a variable font.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Font File Checks>", "<FontBakeryCheck:googlefonts/varfont/generate_static>", [["font", 0]]], "logs": [{"message": {"code": null, "message": "fontTools.varLib.mutator generated a static font instance"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.varfont.generate_static", "proposal": ["https://github.com/fonttools/fontbakery/issues/1727"], "rationale": "\n        Google Fonts may serve static fonts which have been generated from variable\n        fonts. This check will attempt to generate a static ttf using fontTool's\n        varLib mutator.\n\n        The target font will be the mean of each axis e.g:\n\n        **VF font axes**\n\n        - min weight, max weight = 400, 800\n\n        - min width, max width = 50, 100\n\n        **Target Instance**\n\n        - weight = 600\n\n        - width = 75\n    ", "result": "PASS", "severity": null}, {"description": "Check that variable fonts have an HVAR table.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Font File Checks>", "<FontBakeryCheck:googlefonts/varfont/has_HVAR>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.varfont.has_HVAR", "proposal": ["https://github.com/fonttools/fontbakery/issues/2119"], "rationale": "\n        Not having a HVAR table can lead to costly text-layout operations on some\n        platforms, which we want to avoid.\n\n        So, all variable fonts on the Google Fonts collection should have an HVAR\n        with valid values.\n\n        More info on the HVAR table can be found at:\n        https://docs.microsoft.com/en-us/typography/opentype/spec/otvaroverview#variation-data-tables-and-miscellaneous-requirements\n    ", "result": "PASS", "severity": null}, {"description": "Checking OS/2 achVendID.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Font File Checks>", "<FontBakeryCheck:googlefonts/vendor_id>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.vendor_id", "proposal": ["https://github.com/fonttools/fontbakery/issues/3943", "https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        Microsoft keeps a list of font vendors and their respective contact info. This\n        list is updated regularly and is indexed by a 4-char \"Vendor ID\" which is\n        stored in the achVendID field of the OS/2 table.\n\n        Registering your ID is not mandatory, but it is a good practice since some\n        applications may display the type designer / type foundry contact info on some\n        dialog and also because that info will be visible on Microsoft's website:\n\n        https://docs.microsoft.com/en-us/typography/vendors/\n\n        This check verifies whether or not a given font's vendor ID is registered in\n        that list or if it has some of the default values used by the most common\n        font editors.\n\n        Each new FontBakery release includes a cached copy of that list of vendor IDs.\n        If you registered recently, you're safe to ignore warnings emitted by this\n        check, since your ID will soon be included in one of our upcoming releases.\n    ", "result": "PASS", "severity": null}, {"description": "Check font follows the Google Fonts vertical metric schema", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Font File Checks>", "<FontBakeryCheck:googlefonts/vertical_metrics>", [["font", 0]]], "logs": [{"message": {"code": "unfulfilled-conditions", "message": "Unfulfilled Conditions: not listed_on_gfonts_api"}, "status": "SKIP"}], "module": "vendorspecific.googlefonts.vertical_metrics", "proposal": ["https://github.com/fonttools/fontbakery/pull/3762", "https://github.com/fonttools/fontbakery/pull/3921"], "rationale": "\n        This check generally enforces Google Fonts\u2019 vertical metrics specifications.\n        In particular:\n        * lineGap must be 0\n        * Sum of hhea ascender + abs(descender) + linegap must be\n          between 120% and 200% of UPM\n        * Warning if sum is over 150% of UPM\n\n        The threshold levels 150% (WARN) and 200% (FAIL) are somewhat arbitrarily chosen\n        and may hint at a glaring mistake in the metrics calculations or UPM settings.\n\n        Our documentation includes further information:\n        https://github.com/googlefonts/gf-docs/tree/main/VerticalMetrics\n    ", "result": "SKIP", "severity": null}, {"description": "Check if the vertical metrics of a family are similar to the same family hosted on Google Fonts.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Font File Checks>", "<FontBakeryCheck:googlefonts/vertical_metrics_regressions>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.vertical_metrics_regressions", "proposal": ["https://github.com/fonttools/fontbakery/issues/1162"], "rationale": "\n        If the family already exists on Google Fonts, we need to ensure that the\n        checked family's vertical metrics are similar. This check will test the\n        following schema which was outlined in Font Bakery issue #1162 [1]:\n\n        - The family should visually have the same vertical metrics as the Regular\n          style hosted on Google Fonts.\n\n        - If the family on Google Fonts has differing hhea and typo metrics, the family\n          being checked should use the typo metrics for both the hhea and typo entries.\n\n        - If the family on Google Fonts has use typo metrics not enabled and the family\n          being checked has it enabled, the hhea and typo metrics should use the family\n          on Google Fonts winAscent and winDescent values.\n\n        - If the upms differ, the values must be scaled so the visual appearance is\n          the same.\n\n        [1] https://github.com/fonttools/fontbakery/issues/1162\n    ", "result": "PASS", "severity": null}, {"description": "Check the OS/2 usWeightClass is appropriate for the font's best SubFamily name.", "documentation": null, "experimental": false, "filename": "NotoEmoji[wght].ttf", "key": ["<Section: Font File Checks>", "<FontBakeryCheck:googlefonts/weightclass>", [["font", 0]]], "logs": [{"message": {"code": "ok", "message": "All looks good!"}, "status": "PASS"}], "module": "vendorspecific.googlefonts.weightclass", "proposal": ["https://github.com/fonttools/fontbakery/issues/4829"], "rationale": "\n        Google Fonts expects variable fonts, static ttfs and static otfs to have\n        differing OS/2 usWeightClass values.\n\n        - For Variable Fonts, Thin-Black must be 100-900\n\n        - For static ttfs, Thin-Black can be 100-900 or 250-900\n\n        - For static otfs, Thin-Black must be 250-900\n\n        If static otfs are set lower than 250, text may appear blurry in\n        legacy Windows applications.\n\n        Glyphsapp users can change the usWeightClass value of an instance by adding\n        a 'weightClass' customParameter.\n    ", "result": "PASS", "severity": null}], "key": ["Font File Checks", null, null], "result": {"FAIL": 3, "INFO": 2, "PASS": 17, "SKIP": 5, "WARN": 2}}], "fontbakery_version": "0.13.1"}