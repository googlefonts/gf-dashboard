{
    "result": {
        "FAIL": 109,
        "INFO": 27,
        "PASS": 396,
        "SKIP": 309,
        "WARN": 72
    },
    "sections": [
        {
            "checks": [
                {
                    "description": "Ensure that all variable font files have the same set of axes and axis ranges.",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/consistent_axes>",
                        []
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: VFs",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        In order to facilitate the construction of intuitive and friendly user\n        interfaces, all variable font files in a given family should have the same set\n        of variation axes. Also, each axis must have a consistent setting of min/max\n        value ranges accross all the files.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "All tabular figures must have the same width across the RIBBI-family.",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/family/tnum_horizontal_metrics>",
                        []
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: RIBBI_ttFonts",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Tabular figures need to have the same metrics in all styles in order to allow\n        tables to be set with proper typographic control, but to maintain the placement\n        of decimals and numeric columns between rows.\n\n        Here's a good explanation of this:\n        https://www.typography.com/techniques/fonts-for-financials/#tabular-figs\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Does font file include unacceptable control character glyphs?",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/family/control_chars>",
                        []
                    ],
                    "logs": [
                        {
                            "message": "Unacceptable control characters were not identified.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Use of some unacceptable control characters in the U+0000 - U+001F range can\n        lead to rendering issues on some platforms.\n\n        Acceptable control characters are defined as .null (U+0000) and\n        CR (U+000D) for this test.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Ensure Italic styles have Roman counterparts.",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/family/italics_have_roman_counterparts>",
                        []
                    ],
                    "logs": [
                        {
                            "message": "Filename seems to be incorrect: '/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf' [code: bad-filename]",
                            "status": "WARN",
                            "traceback": null
                        },
                        {
                            "message": "Filename seems to be incorrect: '/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf' [code: bad-filename]",
                            "status": "WARN",
                            "traceback": null
                        },
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        For each font family on Google Fonts, every Italic style must have\n        a Roman sibling.\n\n        This kind of problem was first observed at [1] where the Bold style was\n        missing but BoldItalic was included.\n\n        [1] https://github.com/google/fonts/pull/1482\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Check axis ordering on the STAT table.",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/STAT/axis_order>",
                        []
                    ],
                    "logs": [
                        {
                            "message": "This font does not have a STAT table: /Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf [code: missing-STAT]",
                            "status": "SKIP",
                            "traceback": null
                        },
                        {
                            "message": "This font does not have a STAT table: /Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf [code: missing-STAT]",
                            "status": "SKIP",
                            "traceback": null
                        },
                        {
                            "message": "This font does not have a STAT table: /Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf [code: missing-STAT]",
                            "status": "SKIP",
                            "traceback": null
                        },
                        {
                            "message": "This font does not have a STAT table: /Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf [code: missing-STAT]",
                            "status": "SKIP",
                            "traceback": null
                        },
                        {
                            "message": "From a total of 4 font files, 4 of them (100.00%) lack a STAT table.\n\n\tAnd these are the most common STAT axis orderings:\n\t [code: summary]",
                            "status": "INFO",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This is (for now) a merely informative check to detect what's the axis ordering\n        declared on the STAT table of fonts in the Google Fonts collection.\n\n        We may later update this to enforce some unified axis ordering scheme,\n        yet to be determined.\n    ",
                    "result": "INFO"
                },
                {
                    "description": "Check README.md has a sample image.",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/repo/sample_image>",
                        []
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: readme_contents, readme_directory",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        In order to showcase what a font family looks like, the project's README.md\n        file should ideally include a sample image and highlight it in the upper\n        portion of the document, no more than 10 lines away from the top of the file.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Checking file is named canonically.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/canonical_filename>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Expected \"GFSNeohellenic-Bold.ttf. Got GFSNeohellenicBold.ttf. [code: bad-filename]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        A font's filename must be composed as \"<familyname>-<stylename>.ttf\":\n\n        - Nunito-Regular.ttf\n\n        - Oswald-BoldItalic.ttf\n\n\n        Variable fonts must list the axis tags in alphabetical order in\n        square brackets and separated by commas:\n\n        - Roboto[wdth,wght].ttf\n\n        - Familyname-Italic[wght].ttf\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "Does DESCRIPTION file contain broken links?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/description/broken_links>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: description_html",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The snippet of HTML in the DESCRIPTION.en_us.html file is added to the font\n        family webpage on the Google Fonts website. For that reason, all hyperlinks\n        in it must be properly working.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "URLs on DESCRIPTION file must not display http(s) prefix.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/description/urls>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: description_html",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The snippet of HTML in the DESCRIPTION.en_us.html file is added to the font\n        family webpage on the Google Fonts website.\n\n        Google Fonts has a content formatting policy for that snippet that expects the\n        text content of links not to include the http:// or https:// prefixes.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Does DESCRIPTION file contain a upstream Git repo URL?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/description/git_url>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: description_html",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The contents of the DESCRIPTION.en-us.html file are displayed on the\n        Google Fonts website in the about section of each font family specimen page.\n\n        Since all of the Google Fonts collection is composed of libre-licensed fonts,\n        this check enforces a policy that there must be a hypertext link in that page\n        directing users to the repository where the font project files are\n        made available.\n\n        Such hosting is typically done on sites like Github, Gitlab, GNU Savannah or\n        any other git-based version control service.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Is this a proper HTML snippet?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/description/valid_html>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/DESCRIPTION.en_us.html does not include an HTML <p> tag. [code: lacks-paragraph]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Sometimes people write malformed HTML markup. This check should ensure the\n        file is good.\n\n        Additionally, when packaging families for being pushed to the `google/fonts`\n        git repo, if there is no DESCRIPTION.en_us.html file, some older versions of\n        the `add_font.py` tool insert a placeholder description file which contains\n        invalid html. This file needs to either be replaced with an existing\n        description file or edited by hand.\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "DESCRIPTION.en_us.html must have more than 200 bytes.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/description/min_length>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "DESCRIPTION.en_us.html is larger than 200 bytes.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "DESCRIPTION.en_us.html should end in a linebreak.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/description/eof_linebreak>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The last characther on DESCRIPTION.en_us.html is not a line-break. Please add it. [code: missing-eof-linebreak]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Some older text-handling tools sometimes misbehave if the last line of data\n        in a text file is not terminated with a newline character (also known as '\\n').\n\n        We know that this is a very small detail, but for the sake of keeping all\n        DESCRIPTION.en_us.html files uniformly formatted throughout the GFonts\n        collection, we chose to adopt the practice of placing this final linebreak\n        character on them.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Check METADATA.pb parse correctly.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/parses>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb parsed successfuly.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The purpose of this check is to ensure that the METADATA.pb file is not\n        malformed.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Font designer field in METADATA.pb must not be 'unknown'.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/unknown_designer>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font designer field is not 'unknown'.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Font designer field in METADATA.pb must not contain 'Multiple designers'.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/multiple_designers>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Looks good.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        For a while the string \"Multiple designers\" was used as a placeholder on\n        METADATA.pb files. We should replace all those instances with actual designer\n        names so that proper credits are displayed on the Google Fonts family\n        specimen pages.\n\n        If there's more than a single designer, the designer names must be\n        separated by commas.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Multiple values in font designer field in METADATA.pb must be separated by commas.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/designer_values>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Looks good.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        We must use commas instead of forward slashes because the server-side code\n        at the fonts.google.com directory will segment the string on the commas into\n        a list of names and display the first item in the list as the\n        \"principal designer\" while the remaining names are identified as \"contributors\".\n\n        See eg https://fonts.google.com/specimen/Rubik\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Does METADATA.pb copyright field contain broken links?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/broken_links>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "All links in the METADATA.pb file look good!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Ensure METADATA.pb lists all font binaries.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/undeclared_fonts>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The set of font binaries available, except the ones on a \"static\" subdir,\n        must match exactly those declared on the METADATA.pb file.\n\n        Also, to avoid confusion, we expect that font files (other than statics)\n        are not placed on subdirectories.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Ensure METADATA.pb category field is valid.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/category>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        There are only five acceptable values for the category field in a METADATA.pb\n        file:\n\n        - MONOSPACE\n\n        - SANS_SERIF\n\n        - SERIF\n\n        - DISPLAY\n\n        - HANDWRITING\n\n        This check is meant to avoid typos in this field.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Checking OS/2 fsType does not impose restrictions.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/fstype>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2 fsType is properly set to zero.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The fsType in the OS/2 table is a legacy DRM-related field. Fonts in the\n        Google Fonts collection must have it set to zero (also known as\n        \"Installable Embedding\"). This setting indicates that the fonts can be\n        embedded in documents and permanently installed by applications on\n        remote systems.\n\n        More detailed info is available at:\n        https://docs.microsoft.com/en-us/typography/opentype/spec/os2#fstype\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Checking OS/2 achVendID.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/vendor_id>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2 VendorID value 'Alts' is not yet recognized. If you registered it recently, then it's safe to ignore this warning message. Otherwise, you should set it to your own unique 4 character code, and register it with Microsoft at https://www.microsoft.com/typography/links/vendorlist.aspx\n [code: unknown]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Microsoft keeps a list of font vendors and their respective contact info. This\n        list is updated regularly and is indexed by a 4-char \"Vendor ID\" which is\n        stored in the achVendID field of the OS/2 table.\n\n        Registering your ID is not mandatory, but it is a good practice since some\n        applications may display the type designer / type foundry contact info on some\n        dialog and also because that info will be visible on Microsoft's website:\n\n        https://docs.microsoft.com/en-us/typography/vendors/\n\n        This check verifies whether or not a given font's vendor ID is registered in\n        that list or if it has some of the default values used by the most common\n        font editors.\n\n        Each new FontBakery release includes a cached copy of that list of vendor IDs.\n        If you registered recently, you're safe to ignore warnings emitted by this\n        check, since your ID will soon be included in one of our upcoming releases.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Check Google Fonts glyph coverage.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/glyph_coverage>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Missing required codepoints:\n\n\t- 0x030B (COMBINING DOUBLE ACUTE ACCENT)\n\n\n\t- 0x0304 (COMBINING MACRON)\n\n\n\t- 0x1E9E (LATIN CAPITAL LETTER SHARP S)\n\n\n\t- 0x0237 (LATIN SMALL LETTER DOTLESS J)\n\n\n\t- 0x0307 (COMBINING DOT ABOVE)\n\n\n\t- 0x0302 (COMBINING CIRCUMFLEX ACCENT)\n\n\n\t- 0x030C (COMBINING CARON)\n\n\n\t- 0x0306 (COMBINING BREVE)\n\n\n\t- 0x030A (COMBINING RING ABOVE)\n\n\n\t- 0x0327 (COMBINING CEDILLA)\n\n\n\t- 0x0328 (COMBINING OGONEK)\n [code: missing-codepoints]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Google Fonts expects that fonts in its collection support at least the minimal\n        set of characters defined in the `GF-latin-core` glyph-set.\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "Check for METADATA subsets with zero support.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/unsupported_subsets>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This check ensures that the subsets specified on a METADATA.pb file are\n        actually supported (even if only partially) by the font files.\n\n        Subsets for which none of the codepoints are supported will cause the\n        check to FAIL.\n    ",
                    "result": "PASS",
                    "severity": 10
                },
                {
                    "description": "Check for codepoints not covered by METADATA subsets.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/unreachable_subsetting>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The following codepoints supported by the font are not covered by\n    any subsets defined in the font's metadata file, and will never\n    be served. You can solve this by either manually adding additional\n    subset declarations to METADATA.pb, or by editing the glyphset\n    definitions.\n\n * U+0100 LATIN CAPITAL LETTER A WITH MACRON: try adding latin-ext\n * U+0101 LATIN SMALL LETTER A WITH MACRON: try adding latin-ext\n * U+0102 LATIN CAPITAL LETTER A WITH BREVE: try adding one of: latin-ext, vietnamese\n * U+0103 LATIN SMALL LETTER A WITH BREVE: try adding one of: latin-ext, vietnamese\n * U+0104 LATIN CAPITAL LETTER A WITH OGONEK: try adding latin-ext\n * U+0105 LATIN SMALL LETTER A WITH OGONEK: try adding latin-ext\n * U+0106 LATIN CAPITAL LETTER C WITH ACUTE: try adding latin-ext\n * U+0107 LATIN SMALL LETTER C WITH ACUTE: try adding latin-ext\n * U+0108 LATIN CAPITAL LETTER C WITH CIRCUMFLEX: try adding latin-ext\n * U+0109 LATIN SMALL LETTER C WITH CIRCUMFLEX: try adding latin-ext\n * U+010A LATIN CAPITAL LETTER C WITH DOT ABOVE: try adding latin-ext\n * U+010B LATIN SMALL LETTER C WITH DOT ABOVE: try adding latin-ext\n * U+010C LATIN CAPITAL LETTER C WITH CARON: try adding latin-ext\n * U+010D LATIN SMALL LETTER C WITH CARON: try adding latin-ext\n * U+010E LATIN CAPITAL LETTER D WITH CARON: try adding latin-ext\n * U+010F LATIN SMALL LETTER D WITH CARON: try adding latin-ext\n * U+0110 LATIN CAPITAL LETTER D WITH STROKE: try adding one of: latin-ext, vietnamese\n * U+0111 LATIN SMALL LETTER D WITH STROKE: try adding one of: latin-ext, vietnamese\n * U+0112 LATIN CAPITAL LETTER E WITH MACRON: try adding latin-ext\n * U+0113 LATIN SMALL LETTER E WITH MACRON: try adding latin-ext\n * U+0114 LATIN CAPITAL LETTER E WITH BREVE: try adding latin-ext\n * U+0115 LATIN SMALL LETTER E WITH BREVE: try adding latin-ext\n * U+0116 LATIN CAPITAL LETTER E WITH DOT ABOVE: try adding latin-ext\n * U+0117 LATIN SMALL LETTER E WITH DOT ABOVE: try adding latin-ext\n * U+0118 LATIN CAPITAL LETTER E WITH OGONEK: try adding latin-ext\n * U+0119 LATIN SMALL LETTER E WITH OGONEK: try adding latin-ext\n * U+011A LATIN CAPITAL LETTER E WITH CARON: try adding latin-ext\n * U+011B LATIN SMALL LETTER E WITH CARON: try adding latin-ext\n * U+011C LATIN CAPITAL LETTER G WITH CIRCUMFLEX: try adding latin-ext\n * U+011D LATIN SMALL LETTER G WITH CIRCUMFLEX: try adding latin-ext\n * U+011E LATIN CAPITAL LETTER G WITH BREVE: try adding latin-ext\n * U+011F LATIN SMALL LETTER G WITH BREVE: try adding latin-ext\n * U+0120 LATIN CAPITAL LETTER G WITH DOT ABOVE: try adding latin-ext\n * U+0121 LATIN SMALL LETTER G WITH DOT ABOVE: try adding latin-ext\n * U+0122 LATIN CAPITAL LETTER G WITH CEDILLA: try adding latin-ext\n * U+0123 LATIN SMALL LETTER G WITH CEDILLA: try adding latin-ext\n * U+0124 LATIN CAPITAL LETTER H WITH CIRCUMFLEX: try adding latin-ext\n * U+0125 LATIN SMALL LETTER H WITH CIRCUMFLEX: try adding latin-ext\n * U+0126 LATIN CAPITAL LETTER H WITH STROKE: try adding latin-ext\n * U+0127 LATIN SMALL LETTER H WITH STROKE: try adding latin-ext\n * U+0128 LATIN CAPITAL LETTER I WITH TILDE: try adding one of: latin-ext, vietnamese\n * U+0129 LATIN SMALL LETTER I WITH TILDE: try adding one of: latin-ext, vietnamese\n * U+012A LATIN CAPITAL LETTER I WITH MACRON: try adding latin-ext\n * U+012B LATIN SMALL LETTER I WITH MACRON: try adding latin-ext\n * U+012C LATIN CAPITAL LETTER I WITH BREVE: try adding latin-ext\n * U+012D LATIN SMALL LETTER I WITH BREVE: try adding latin-ext\n * U+012E LATIN CAPITAL LETTER I WITH OGONEK: try adding latin-ext\n * U+012F LATIN SMALL LETTER I WITH OGONEK: try adding latin-ext\n * U+0130 LATIN CAPITAL LETTER I WITH DOT ABOVE: try adding latin-ext\n * U+0132 LATIN CAPITAL LIGATURE IJ: try adding latin-ext\n * U+0133 LATIN SMALL LIGATURE IJ: try adding latin-ext\n * U+0134 LATIN CAPITAL LETTER J WITH CIRCUMFLEX: try adding latin-ext\n * U+0135 LATIN SMALL LETTER J WITH CIRCUMFLEX: try adding latin-ext\n * U+0136 LATIN CAPITAL LETTER K WITH CEDILLA: try adding latin-ext\n * U+0137 LATIN SMALL LETTER K WITH CEDILLA: try adding latin-ext\n * U+0139 LATIN CAPITAL LETTER L WITH ACUTE: try adding latin-ext\n * U+013A LATIN SMALL LETTER L WITH ACUTE: try adding latin-ext\n * U+013B LATIN CAPITAL LETTER L WITH CEDILLA: try adding latin-ext\n * U+013C LATIN SMALL LETTER L WITH CEDILLA: try adding latin-ext\n * U+013D LATIN CAPITAL LETTER L WITH CARON: try adding latin-ext\n * U+013E LATIN SMALL LETTER L WITH CARON: try adding latin-ext\n * U+013F LATIN CAPITAL LETTER L WITH MIDDLE DOT: try adding latin-ext\n * U+0140 LATIN SMALL LETTER L WITH MIDDLE DOT: try adding latin-ext\n * U+0141 LATIN CAPITAL LETTER L WITH STROKE: try adding latin-ext\n * U+0142 LATIN SMALL LETTER L WITH STROKE: try adding latin-ext\n * U+0143 LATIN CAPITAL LETTER N WITH ACUTE: try adding latin-ext\n * U+0144 LATIN SMALL LETTER N WITH ACUTE: try adding latin-ext\n * U+0145 LATIN CAPITAL LETTER N WITH CEDILLA: try adding latin-ext\n * U+0146 LATIN SMALL LETTER N WITH CEDILLA: try adding latin-ext\n * U+0147 LATIN CAPITAL LETTER N WITH CARON: try adding latin-ext\n * U+0148 LATIN SMALL LETTER N WITH CARON: try adding latin-ext\n * U+0149 LATIN SMALL LETTER N PRECEDED BY APOSTROPHE: try adding latin-ext\n * U+014A LATIN CAPITAL LETTER ENG: try adding latin-ext\n * U+014B LATIN SMALL LETTER ENG: try adding latin-ext\n * U+014C LATIN CAPITAL LETTER O WITH MACRON: try adding latin-ext\n * U+014D LATIN SMALL LETTER O WITH MACRON: try adding latin-ext\n * U+014E LATIN CAPITAL LETTER O WITH BREVE: try adding latin-ext\n * U+014F LATIN SMALL LETTER O WITH BREVE: try adding latin-ext\n * U+0150 LATIN CAPITAL LETTER O WITH DOUBLE ACUTE: try adding latin-ext\n * U+0151 LATIN SMALL LETTER O WITH DOUBLE ACUTE: try adding latin-ext\n * U+0154 LATIN CAPITAL LETTER R WITH ACUTE: try adding latin-ext\n * U+0155 LATIN SMALL LETTER R WITH ACUTE: try adding latin-ext\n * U+0156 LATIN CAPITAL LETTER R WITH CEDILLA: try adding latin-ext\n * U+0157 LATIN SMALL LETTER R WITH CEDILLA: try adding latin-ext\n * U+0158 LATIN CAPITAL LETTER R WITH CARON: try adding latin-ext\n * U+0159 LATIN SMALL LETTER R WITH CARON: try adding latin-ext\n * U+015A LATIN CAPITAL LETTER S WITH ACUTE: try adding latin-ext\n * U+015B LATIN SMALL LETTER S WITH ACUTE: try adding latin-ext\n * U+015C LATIN CAPITAL LETTER S WITH CIRCUMFLEX: try adding latin-ext\n * U+015D LATIN SMALL LETTER S WITH CIRCUMFLEX: try adding latin-ext\n * U+015E LATIN CAPITAL LETTER S WITH CEDILLA: try adding latin-ext\n * U+015F LATIN SMALL LETTER S WITH CEDILLA: try adding latin-ext\n * U+0160 LATIN CAPITAL LETTER S WITH CARON: try adding latin-ext\n * U+0161 LATIN SMALL LETTER S WITH CARON: try adding latin-ext\n * U+0162 LATIN CAPITAL LETTER T WITH CEDILLA: try adding latin-ext\n * U+0163 LATIN SMALL LETTER T WITH CEDILLA: try adding latin-ext\n * U+0164 LATIN CAPITAL LETTER T WITH CARON: try adding latin-ext\n * U+0165 LATIN SMALL LETTER T WITH CARON: try adding latin-ext\n * U+0166 LATIN CAPITAL LETTER T WITH STROKE: try adding latin-ext\n * U+0167 LATIN SMALL LETTER T WITH STROKE: try adding latin-ext\n * U+0168 LATIN CAPITAL LETTER U WITH TILDE: try adding one of: latin-ext, vietnamese\n * U+0169 LATIN SMALL LETTER U WITH TILDE: try adding one of: latin-ext, vietnamese\n * U+016A LATIN CAPITAL LETTER U WITH MACRON: try adding latin-ext\n * U+016B LATIN SMALL LETTER U WITH MACRON: try adding latin-ext\n * U+016C LATIN CAPITAL LETTER U WITH BREVE: try adding latin-ext\n * U+016D LATIN SMALL LETTER U WITH BREVE: try adding latin-ext\n * U+016E LATIN CAPITAL LETTER U WITH RING ABOVE: try adding latin-ext\n * U+016F LATIN SMALL LETTER U WITH RING ABOVE: try adding latin-ext\n * U+0170 LATIN CAPITAL LETTER U WITH DOUBLE ACUTE: try adding latin-ext\n * U+0171 LATIN SMALL LETTER U WITH DOUBLE ACUTE: try adding latin-ext\n * U+0172 LATIN CAPITAL LETTER U WITH OGONEK: try adding latin-ext\n * U+0173 LATIN SMALL LETTER U WITH OGONEK: try adding latin-ext\n * U+0174 LATIN CAPITAL LETTER W WITH CIRCUMFLEX: try adding latin-ext\n * U+0175 LATIN SMALL LETTER W WITH CIRCUMFLEX: try adding latin-ext\n * U+0176 LATIN CAPITAL LETTER Y WITH CIRCUMFLEX: try adding latin-ext\n * U+0177 LATIN SMALL LETTER Y WITH CIRCUMFLEX: try adding latin-ext\n * U+0178 LATIN CAPITAL LETTER Y WITH DIAERESIS: try adding latin-ext\n * U+0179 LATIN CAPITAL LETTER Z WITH ACUTE: try adding latin-ext\n * U+017A LATIN SMALL LETTER Z WITH ACUTE: try adding latin-ext\n * U+017B LATIN CAPITAL LETTER Z WITH DOT ABOVE: try adding latin-ext\n * U+017C LATIN SMALL LETTER Z WITH DOT ABOVE: try adding latin-ext\n * U+017D LATIN CAPITAL LETTER Z WITH CARON: try adding latin-ext\n * U+017E LATIN SMALL LETTER Z WITH CARON: try adding latin-ext\n * U+017F LATIN SMALL LETTER LONG S: try adding latin-ext\n * U+0192 LATIN SMALL LETTER F WITH HOOK: try adding latin-ext\n * U+01A1 LATIN SMALL LETTER O WITH HORN: try adding one of: latin-ext, vietnamese\n * U+01AF LATIN CAPITAL LETTER U WITH HORN: try adding one of: latin-ext, vietnamese\n * U+01B0 LATIN SMALL LETTER U WITH HORN: try adding one of: latin-ext, vietnamese\n * U+01B7 LATIN CAPITAL LETTER EZH: try adding latin-ext\n * U+01F4 LATIN CAPITAL LETTER G WITH ACUTE: try adding latin-ext\n * U+01F5 LATIN SMALL LETTER G WITH ACUTE: try adding latin-ext\n * U+01F7 LATIN CAPITAL LETTER WYNN: try adding latin-ext\n * U+01FA LATIN CAPITAL LETTER A WITH RING ABOVE AND ACUTE: try adding latin-ext\n * U+01FB LATIN SMALL LETTER A WITH RING ABOVE AND ACUTE: try adding latin-ext\n * U+01FC LATIN CAPITAL LETTER AE WITH ACUTE: try adding latin-ext\n * U+01FD LATIN SMALL LETTER AE WITH ACUTE: try adding latin-ext\n * U+01FE LATIN CAPITAL LETTER O WITH STROKE AND ACUTE: try adding latin-ext\n * U+01FF LATIN SMALL LETTER O WITH STROKE AND ACUTE: try adding latin-ext\n * U+0218 LATIN CAPITAL LETTER S WITH COMMA BELOW: try adding latin-ext\n * U+0219 LATIN SMALL LETTER S WITH COMMA BELOW: try adding latin-ext\n * U+0292 LATIN SMALL LETTER EZH: not included in any glyphset definition\n * U+02C7 CARON: try adding one of: tifinagh, canadian-aboriginal\n * U+02D8 BREVE: try adding canadian-aboriginal\n * U+02D9 DOT ABOVE: try adding canadian-aboriginal\n * U+02DB OGONEK: try adding canadian-aboriginal\n * U+02DD DOUBLE ACUTE ACCENT: not included in any glyphset definition\n * U+0300 COMBINING GRAVE ACCENT: try adding one of: coptic, tai-le, cherokee\n * U+0301 COMBINING ACUTE ACCENT: try adding one of: tifinagh, coptic, tai-le, cherokee\n * U+0303 COMBINING TILDE: not included in any glyphset definition\n * U+0308 COMBINING DIAERESIS: try adding one of: coptic, tai-le, gothic\n * U+0309 COMBINING HOOK ABOVE: try adding tifinagh\n * U+0312 COMBINING TURNED COMMA ABOVE: not included in any glyphset definition\n * U+0313 COMBINING COMMA ABOVE: not included in any glyphset definition\n * U+0314 COMBINING REVERSED COMMA ABOVE: not included in any glyphset definition\n * U+0323 COMBINING DOT BELOW: try adding one of: malayalam, coptic, tifinagh, cherokee\n * U+0326 COMBINING COMMA BELOW: not included in any glyphset definition\n * U+0342 COMBINING GREEK PERISPOMENI: not included in any glyphset definition\n * U+0343 COMBINING GREEK KORONIS: not included in any glyphset definition\n * U+0345 COMBINING GREEK YPOGEGRAMMENI: not included in any glyphset definition\n * U+04E6 CYRILLIC CAPITAL LETTER O WITH DIAERESIS: try adding cyrillic-ext\n * U+04E7 CYRILLIC SMALL LETTER O WITH DIAERESIS: try adding cyrillic-ext\n * U+1E80 LATIN CAPITAL LETTER W WITH GRAVE: try adding latin-ext\n * U+1E81 LATIN SMALL LETTER W WITH GRAVE: try adding latin-ext\n * U+1E82 LATIN CAPITAL LETTER W WITH ACUTE: try adding latin-ext\n * U+1E83 LATIN SMALL LETTER W WITH ACUTE: try adding latin-ext\n * U+1E84 LATIN CAPITAL LETTER W WITH DIAERESIS: try adding latin-ext\n * U+1E85 LATIN SMALL LETTER W WITH DIAERESIS: try adding latin-ext\n * U+1EA0 LATIN CAPITAL LETTER A WITH DOT BELOW: try adding vietnamese\n * U+1EA1 LATIN SMALL LETTER A WITH DOT BELOW: try adding vietnamese\n * U+1EA2 LATIN CAPITAL LETTER A WITH HOOK ABOVE: try adding vietnamese\n * U+1EA3 LATIN SMALL LETTER A WITH HOOK ABOVE: try adding vietnamese\n * U+1EA4 LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND ACUTE: try adding vietnamese\n * U+1EA5 LATIN SMALL LETTER A WITH CIRCUMFLEX AND ACUTE: try adding vietnamese\n * U+1EA6 LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND GRAVE: try adding vietnamese\n * U+1EA7 LATIN SMALL LETTER A WITH CIRCUMFLEX AND GRAVE: try adding vietnamese\n * U+1EA8 LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND HOOK ABOVE: try adding vietnamese\n * U+1EA9 LATIN SMALL LETTER A WITH CIRCUMFLEX AND HOOK ABOVE: try adding vietnamese\n * U+1EAA LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND TILDE: try adding vietnamese\n * U+1EAB LATIN SMALL LETTER A WITH CIRCUMFLEX AND TILDE: try adding vietnamese\n * U+1EAC LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND DOT BELOW: try adding vietnamese\n * U+1EAD LATIN SMALL LETTER A WITH CIRCUMFLEX AND DOT BELOW: try adding vietnamese\n * U+1EAE LATIN CAPITAL LETTER A WITH BREVE AND ACUTE: try adding vietnamese\n * U+1EAF LATIN SMALL LETTER A WITH BREVE AND ACUTE: try adding vietnamese\n * U+1EB0 LATIN CAPITAL LETTER A WITH BREVE AND GRAVE: try adding vietnamese\n * U+1EB1 LATIN SMALL LETTER A WITH BREVE AND GRAVE: try adding vietnamese\n * U+1EB2 LATIN CAPITAL LETTER A WITH BREVE AND HOOK ABOVE: try adding vietnamese\n * U+1EB3 LATIN SMALL LETTER A WITH BREVE AND HOOK ABOVE: try adding vietnamese\n * U+1EB4 LATIN CAPITAL LETTER A WITH BREVE AND TILDE: try adding vietnamese\n * U+1EB5 LATIN SMALL LETTER A WITH BREVE AND TILDE: try adding vietnamese\n * U+1EB6 LATIN CAPITAL LETTER A WITH BREVE AND DOT BELOW: try adding vietnamese\n * U+1EB7 LATIN SMALL LETTER A WITH BREVE AND DOT BELOW: try adding vietnamese\n * U+1EB8 LATIN CAPITAL LETTER E WITH DOT BELOW: try adding vietnamese\n * U+1EB9 LATIN SMALL LETTER E WITH DOT BELOW: try adding vietnamese\n * U+1EBA LATIN CAPITAL LETTER E WITH HOOK ABOVE: try adding vietnamese\n * U+1EBB LATIN SMALL LETTER E WITH HOOK ABOVE: try adding vietnamese\n * U+1EBC LATIN CAPITAL LETTER E WITH TILDE: try adding vietnamese\n * U+1EBD LATIN SMALL LETTER E WITH TILDE: try adding vietnamese\n * U+1EBE LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND ACUTE: try adding vietnamese\n * U+1EBF LATIN SMALL LETTER E WITH CIRCUMFLEX AND ACUTE: try adding vietnamese\n * U+1EC0 LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND GRAVE: try adding vietnamese\n * U+1EC1 LATIN SMALL LETTER E WITH CIRCUMFLEX AND GRAVE: try adding vietnamese\n * U+1EC2 LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND HOOK ABOVE: try adding vietnamese\n * U+1EC3 LATIN SMALL LETTER E WITH CIRCUMFLEX AND HOOK ABOVE: try adding vietnamese\n * U+1EC4 LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND TILDE: try adding vietnamese\n * U+1EC5 LATIN SMALL LETTER E WITH CIRCUMFLEX AND TILDE: try adding vietnamese\n * U+1EC6 LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND DOT BELOW: try adding vietnamese\n * U+1EC7 LATIN SMALL LETTER E WITH CIRCUMFLEX AND DOT BELOW: try adding vietnamese\n * U+1EC8 LATIN CAPITAL LETTER I WITH HOOK ABOVE: try adding vietnamese\n * U+1EC9 LATIN SMALL LETTER I WITH HOOK ABOVE: try adding vietnamese\n * U+1ECA LATIN CAPITAL LETTER I WITH DOT BELOW: try adding vietnamese\n * U+1ECB LATIN SMALL LETTER I WITH DOT BELOW: try adding vietnamese\n * U+1ECC LATIN CAPITAL LETTER O WITH DOT BELOW: try adding vietnamese\n * U+1ECD LATIN SMALL LETTER O WITH DOT BELOW: try adding vietnamese\n * U+1ECE LATIN CAPITAL LETTER O WITH HOOK ABOVE: try adding vietnamese\n * U+1ECF LATIN SMALL LETTER O WITH HOOK ABOVE: try adding vietnamese\n * U+1ED0 LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND ACUTE: try adding vietnamese\n * U+1ED1 LATIN SMALL LETTER O WITH CIRCUMFLEX AND ACUTE: try adding vietnamese\n * U+1ED2 LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND GRAVE: try adding vietnamese\n * U+1ED3 LATIN SMALL LETTER O WITH CIRCUMFLEX AND GRAVE: try adding vietnamese\n * U+1ED4 LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND HOOK ABOVE: try adding vietnamese\n * U+1ED5 LATIN SMALL LETTER O WITH CIRCUMFLEX AND HOOK ABOVE: try adding vietnamese\n * U+1ED6 LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND TILDE: try adding vietnamese\n * U+1ED7 LATIN SMALL LETTER O WITH CIRCUMFLEX AND TILDE: try adding vietnamese\n * U+1ED8 LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND DOT BELOW: try adding vietnamese\n * U+1ED9 LATIN SMALL LETTER O WITH CIRCUMFLEX AND DOT BELOW: try adding vietnamese\n * U+1EDA LATIN CAPITAL LETTER O WITH HORN AND ACUTE: try adding vietnamese\n * U+1EDB LATIN SMALL LETTER O WITH HORN AND ACUTE: try adding vietnamese\n * U+1EDC LATIN CAPITAL LETTER O WITH HORN AND GRAVE: try adding vietnamese\n * U+1EDD LATIN SMALL LETTER O WITH HORN AND GRAVE: try adding vietnamese\n * U+1EDE LATIN CAPITAL LETTER O WITH HORN AND HOOK ABOVE: try adding vietnamese\n * U+1EDF LATIN SMALL LETTER O WITH HORN AND HOOK ABOVE: try adding vietnamese\n * U+1EE0 LATIN CAPITAL LETTER O WITH HORN AND TILDE: try adding vietnamese\n * U+1EE1 LATIN SMALL LETTER O WITH HORN AND TILDE: try adding vietnamese\n * U+1EE2 LATIN CAPITAL LETTER O WITH HORN AND DOT BELOW: try adding vietnamese\n * U+1EE3 LATIN SMALL LETTER O WITH HORN AND DOT BELOW: try adding vietnamese\n * U+1EE4 LATIN CAPITAL LETTER U WITH DOT BELOW: try adding vietnamese\n * U+1EE5 LATIN SMALL LETTER U WITH DOT BELOW: try adding vietnamese\n * U+1EE6 LATIN CAPITAL LETTER U WITH HOOK ABOVE: try adding vietnamese\n * U+1EE7 LATIN SMALL LETTER U WITH HOOK ABOVE: try adding vietnamese\n * U+1EE8 LATIN CAPITAL LETTER U WITH HORN AND ACUTE: try adding vietnamese\n * U+1EE9 LATIN SMALL LETTER U WITH HORN AND ACUTE: try adding vietnamese\n * U+1EEA LATIN CAPITAL LETTER U WITH HORN AND GRAVE: try adding vietnamese\n * U+1EEB LATIN SMALL LETTER U WITH HORN AND GRAVE: try adding vietnamese\n * U+1EEC LATIN CAPITAL LETTER U WITH HORN AND HOOK ABOVE: try adding vietnamese\n * U+1EED LATIN SMALL LETTER U WITH HORN AND HOOK ABOVE: try adding vietnamese\n * U+1EEE LATIN CAPITAL LETTER U WITH HORN AND TILDE: try adding vietnamese\n * U+1EEF LATIN SMALL LETTER U WITH HORN AND TILDE: try adding vietnamese\n * U+1EF0 LATIN CAPITAL LETTER U WITH HORN AND DOT BELOW: try adding vietnamese\n * U+1EF1 LATIN SMALL LETTER U WITH HORN AND DOT BELOW: try adding vietnamese\n * U+1EF2 LATIN CAPITAL LETTER Y WITH GRAVE: try adding one of: latin-ext, vietnamese\n * U+1EF3 LATIN SMALL LETTER Y WITH GRAVE: try adding one of: latin-ext, vietnamese\n * U+1EF4 LATIN CAPITAL LETTER Y WITH DOT BELOW: try adding one of: latin-ext, vietnamese\n * U+1EF5 LATIN SMALL LETTER Y WITH DOT BELOW: try adding one of: latin-ext, vietnamese\n * U+1EF6 LATIN CAPITAL LETTER Y WITH HOOK ABOVE: try adding one of: latin-ext, vietnamese\n * U+1EF7 LATIN SMALL LETTER Y WITH HOOK ABOVE: try adding one of: latin-ext, vietnamese\n * U+1EF8 LATIN CAPITAL LETTER Y WITH TILDE: try adding one of: latin-ext, vietnamese\n * U+1EF9 LATIN SMALL LETTER Y WITH TILDE: try adding one of: latin-ext, vietnamese\n * U+1F00 GREEK SMALL LETTER ALPHA WITH PSILI: try adding greek-ext\n * U+1F01 GREEK SMALL LETTER ALPHA WITH DASIA: try adding greek-ext\n * U+1F02 GREEK SMALL LETTER ALPHA WITH PSILI AND VARIA: try adding greek-ext\n * U+1F03 GREEK SMALL LETTER ALPHA WITH DASIA AND VARIA: try adding greek-ext\n * U+1F04 GREEK SMALL LETTER ALPHA WITH PSILI AND OXIA: try adding greek-ext\n * U+1F05 GREEK SMALL LETTER ALPHA WITH DASIA AND OXIA: try adding greek-ext\n * U+1F06 GREEK SMALL LETTER ALPHA WITH PSILI AND PERISPOMENI: try adding greek-ext\n * U+1F07 GREEK SMALL LETTER ALPHA WITH DASIA AND PERISPOMENI: try adding greek-ext\n * U+1F08 GREEK CAPITAL LETTER ALPHA WITH PSILI: try adding greek-ext\n * U+1F09 GREEK CAPITAL LETTER ALPHA WITH DASIA: try adding greek-ext\n * U+1F0A GREEK CAPITAL LETTER ALPHA WITH PSILI AND VARIA: try adding greek-ext\n * U+1F0B GREEK CAPITAL LETTER ALPHA WITH DASIA AND VARIA: try adding greek-ext\n * U+1F0C GREEK CAPITAL LETTER ALPHA WITH PSILI AND OXIA: try adding greek-ext\n * U+1F0D GREEK CAPITAL LETTER ALPHA WITH DASIA AND OXIA: try adding greek-ext\n * U+1F0E GREEK CAPITAL LETTER ALPHA WITH PSILI AND PERISPOMENI: try adding greek-ext\n * U+1F0F GREEK CAPITAL LETTER ALPHA WITH DASIA AND PERISPOMENI: try adding greek-ext\n * U+1F10 GREEK SMALL LETTER EPSILON WITH PSILI: try adding greek-ext\n * U+1F11 GREEK SMALL LETTER EPSILON WITH DASIA: try adding greek-ext\n * U+1F12 GREEK SMALL LETTER EPSILON WITH PSILI AND VARIA: try adding greek-ext\n * U+1F13 GREEK SMALL LETTER EPSILON WITH DASIA AND VARIA: try adding greek-ext\n * U+1F14 GREEK SMALL LETTER EPSILON WITH PSILI AND OXIA: try adding greek-ext\n * U+1F15 GREEK SMALL LETTER EPSILON WITH DASIA AND OXIA: try adding greek-ext\n * U+1F18 GREEK CAPITAL LETTER EPSILON WITH PSILI: try adding greek-ext\n * U+1F19 GREEK CAPITAL LETTER EPSILON WITH DASIA: try adding greek-ext\n * U+1F1A GREEK CAPITAL LETTER EPSILON WITH PSILI AND VARIA: try adding greek-ext\n * U+1F1B GREEK CAPITAL LETTER EPSILON WITH DASIA AND VARIA: try adding greek-ext\n * U+1F1C GREEK CAPITAL LETTER EPSILON WITH PSILI AND OXIA: try adding greek-ext\n * U+1F1D GREEK CAPITAL LETTER EPSILON WITH DASIA AND OXIA: try adding greek-ext\n * U+1F20 GREEK SMALL LETTER ETA WITH PSILI: try adding greek-ext\n * U+1F21 GREEK SMALL LETTER ETA WITH DASIA: try adding greek-ext\n * U+1F22 GREEK SMALL LETTER ETA WITH PSILI AND VARIA: try adding greek-ext\n * U+1F23 GREEK SMALL LETTER ETA WITH DASIA AND VARIA: try adding greek-ext\n * U+1F24 GREEK SMALL LETTER ETA WITH PSILI AND OXIA: try adding greek-ext\n * U+1F25 GREEK SMALL LETTER ETA WITH DASIA AND OXIA: try adding greek-ext\n * U+1F26 GREEK SMALL LETTER ETA WITH PSILI AND PERISPOMENI: try adding greek-ext\n * U+1F27 GREEK SMALL LETTER ETA WITH DASIA AND PERISPOMENI: try adding greek-ext\n * U+1F28 GREEK CAPITAL LETTER ETA WITH PSILI: try adding greek-ext\n * U+1F29 GREEK CAPITAL LETTER ETA WITH DASIA: try adding greek-ext\n * U+1F2A GREEK CAPITAL LETTER ETA WITH PSILI AND VARIA: try adding greek-ext\n * U+1F2B GREEK CAPITAL LETTER ETA WITH DASIA AND VARIA: try adding greek-ext\n * U+1F2C GREEK CAPITAL LETTER ETA WITH PSILI AND OXIA: try adding greek-ext\n * U+1F2D GREEK CAPITAL LETTER ETA WITH DASIA AND OXIA: try adding greek-ext\n * U+1F2E GREEK CAPITAL LETTER ETA WITH PSILI AND PERISPOMENI: try adding greek-ext\n * U+1F2F GREEK CAPITAL LETTER ETA WITH DASIA AND PERISPOMENI: try adding greek-ext\n * U+1F30 GREEK SMALL LETTER IOTA WITH PSILI: try adding greek-ext\n * U+1F31 GREEK SMALL LETTER IOTA WITH DASIA: try adding greek-ext\n * U+1F32 GREEK SMALL LETTER IOTA WITH PSILI AND VARIA: try adding greek-ext\n * U+1F33 GREEK SMALL LETTER IOTA WITH DASIA AND VARIA: try adding greek-ext\n * U+1F34 GREEK SMALL LETTER IOTA WITH PSILI AND OXIA: try adding greek-ext\n * U+1F35 GREEK SMALL LETTER IOTA WITH DASIA AND OXIA: try adding greek-ext\n * U+1F36 GREEK SMALL LETTER IOTA WITH PSILI AND PERISPOMENI: try adding greek-ext\n * U+1F37 GREEK SMALL LETTER IOTA WITH DASIA AND PERISPOMENI: try adding greek-ext\n * U+1F38 GREEK CAPITAL LETTER IOTA WITH PSILI: try adding greek-ext\n * U+1F39 GREEK CAPITAL LETTER IOTA WITH DASIA: try adding greek-ext\n * U+1F3A GREEK CAPITAL LETTER IOTA WITH PSILI AND VARIA: try adding greek-ext\n * U+1F3B GREEK CAPITAL LETTER IOTA WITH DASIA AND VARIA: try adding greek-ext\n * U+1F3C GREEK CAPITAL LETTER IOTA WITH PSILI AND OXIA: try adding greek-ext\n * U+1F3D GREEK CAPITAL LETTER IOTA WITH DASIA AND OXIA: try adding greek-ext\n * U+1F3E GREEK CAPITAL LETTER IOTA WITH PSILI AND PERISPOMENI: try adding greek-ext\n * U+1F3F GREEK CAPITAL LETTER IOTA WITH DASIA AND PERISPOMENI: try adding greek-ext\n * U+1F40 GREEK SMALL LETTER OMICRON WITH PSILI: try adding greek-ext\n * U+1F41 GREEK SMALL LETTER OMICRON WITH DASIA: try adding greek-ext\n * U+1F42 GREEK SMALL LETTER OMICRON WITH PSILI AND VARIA: try adding greek-ext\n * U+1F43 GREEK SMALL LETTER OMICRON WITH DASIA AND VARIA: try adding greek-ext\n * U+1F44 GREEK SMALL LETTER OMICRON WITH PSILI AND OXIA: try adding greek-ext\n * U+1F45 GREEK SMALL LETTER OMICRON WITH DASIA AND OXIA: try adding greek-ext\n * U+1F48 GREEK CAPITAL LETTER OMICRON WITH PSILI: try adding greek-ext\n * U+1F49 GREEK CAPITAL LETTER OMICRON WITH DASIA: try adding greek-ext\n * U+1F4A GREEK CAPITAL LETTER OMICRON WITH PSILI AND VARIA: try adding greek-ext\n * U+1F4B GREEK CAPITAL LETTER OMICRON WITH DASIA AND VARIA: try adding greek-ext\n * U+1F4C GREEK CAPITAL LETTER OMICRON WITH PSILI AND OXIA: try adding greek-ext\n * U+1F4D GREEK CAPITAL LETTER OMICRON WITH DASIA AND OXIA: try adding greek-ext\n * U+1F50 GREEK SMALL LETTER UPSILON WITH PSILI: try adding greek-ext\n * U+1F51 GREEK SMALL LETTER UPSILON WITH DASIA: try adding greek-ext\n * U+1F52 GREEK SMALL LETTER UPSILON WITH PSILI AND VARIA: try adding greek-ext\n * U+1F53 GREEK SMALL LETTER UPSILON WITH DASIA AND VARIA: try adding greek-ext\n * U+1F54 GREEK SMALL LETTER UPSILON WITH PSILI AND OXIA: try adding greek-ext\n * U+1F55 GREEK SMALL LETTER UPSILON WITH DASIA AND OXIA: try adding greek-ext\n * U+1F56 GREEK SMALL LETTER UPSILON WITH PSILI AND PERISPOMENI: try adding greek-ext\n * U+1F57 GREEK SMALL LETTER UPSILON WITH DASIA AND PERISPOMENI: try adding greek-ext\n * U+1F59 GREEK CAPITAL LETTER UPSILON WITH DASIA: try adding greek-ext\n * U+1F5B GREEK CAPITAL LETTER UPSILON WITH DASIA AND VARIA: try adding greek-ext\n * U+1F5D GREEK CAPITAL LETTER UPSILON WITH DASIA AND OXIA: try adding greek-ext\n * U+1F5F GREEK CAPITAL LETTER UPSILON WITH DASIA AND PERISPOMENI: try adding greek-ext\n * U+1F60 GREEK SMALL LETTER OMEGA WITH PSILI: try adding greek-ext\n * U+1F61 GREEK SMALL LETTER OMEGA WITH DASIA: try adding greek-ext\n * U+1F62 GREEK SMALL LETTER OMEGA WITH PSILI AND VARIA: try adding greek-ext\n * U+1F63 GREEK SMALL LETTER OMEGA WITH DASIA AND VARIA: try adding greek-ext\n * U+1F64 GREEK SMALL LETTER OMEGA WITH PSILI AND OXIA: try adding greek-ext\n * U+1F65 GREEK SMALL LETTER OMEGA WITH DASIA AND OXIA: try adding greek-ext\n * U+1F66 GREEK SMALL LETTER OMEGA WITH PSILI AND PERISPOMENI: try adding greek-ext\n * U+1F67 GREEK SMALL LETTER OMEGA WITH DASIA AND PERISPOMENI: try adding greek-ext\n * U+1F68 GREEK CAPITAL LETTER OMEGA WITH PSILI: try adding greek-ext\n * U+1F69 GREEK CAPITAL LETTER OMEGA WITH DASIA: try adding greek-ext\n * U+1F6A GREEK CAPITAL LETTER OMEGA WITH PSILI AND VARIA: try adding greek-ext\n * U+1F6B GREEK CAPITAL LETTER OMEGA WITH DASIA AND VARIA: try adding greek-ext\n * U+1F6C GREEK CAPITAL LETTER OMEGA WITH PSILI AND OXIA: try adding greek-ext\n * U+1F6D GREEK CAPITAL LETTER OMEGA WITH DASIA AND OXIA: try adding greek-ext\n * U+1F6E GREEK CAPITAL LETTER OMEGA WITH PSILI AND PERISPOMENI: try adding greek-ext\n * U+1F6F GREEK CAPITAL LETTER OMEGA WITH DASIA AND PERISPOMENI: try adding greek-ext\n * U+1F70 GREEK SMALL LETTER ALPHA WITH VARIA: try adding greek-ext\n * U+1F71 GREEK SMALL LETTER ALPHA WITH OXIA: try adding greek-ext\n * U+1F72 GREEK SMALL LETTER EPSILON WITH VARIA: try adding greek-ext\n * U+1F73 GREEK SMALL LETTER EPSILON WITH OXIA: try adding greek-ext\n * U+1F74 GREEK SMALL LETTER ETA WITH VARIA: try adding greek-ext\n * U+1F75 GREEK SMALL LETTER ETA WITH OXIA: try adding greek-ext\n * U+1F76 GREEK SMALL LETTER IOTA WITH VARIA: try adding greek-ext\n * U+1F77 GREEK SMALL LETTER IOTA WITH OXIA: try adding greek-ext\n * U+1F78 GREEK SMALL LETTER OMICRON WITH VARIA: try adding greek-ext\n * U+1F79 GREEK SMALL LETTER OMICRON WITH OXIA: try adding greek-ext\n * U+1F7A GREEK SMALL LETTER UPSILON WITH VARIA: try adding greek-ext\n * U+1F7B GREEK SMALL LETTER UPSILON WITH OXIA: try adding greek-ext\n * U+1F7C GREEK SMALL LETTER OMEGA WITH VARIA: try adding greek-ext\n * U+1F7D GREEK SMALL LETTER OMEGA WITH OXIA: try adding greek-ext\n * U+1F80 GREEK SMALL LETTER ALPHA WITH PSILI AND YPOGEGRAMMENI: try adding greek-ext\n * U+1F81 GREEK SMALL LETTER ALPHA WITH DASIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1F82 GREEK SMALL LETTER ALPHA WITH PSILI AND VARIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1F83 GREEK SMALL LETTER ALPHA WITH DASIA AND VARIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1F84 GREEK SMALL LETTER ALPHA WITH PSILI AND OXIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1F85 GREEK SMALL LETTER ALPHA WITH DASIA AND OXIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1F86 GREEK SMALL LETTER ALPHA WITH PSILI AND PERISPOMENI AND YPOGEGRAMMENI: try adding greek-ext\n * U+1F87 GREEK SMALL LETTER ALPHA WITH DASIA AND PERISPOMENI AND YPOGEGRAMMENI: try adding greek-ext\n * U+1F88 GREEK CAPITAL LETTER ALPHA WITH PSILI AND PROSGEGRAMMENI: try adding greek-ext\n * U+1F89 GREEK CAPITAL LETTER ALPHA WITH DASIA AND PROSGEGRAMMENI: try adding greek-ext\n * U+1F8A GREEK CAPITAL LETTER ALPHA WITH PSILI AND VARIA AND PROSGEGRAMMENI: try adding greek-ext\n * U+1F8B GREEK CAPITAL LETTER ALPHA WITH DASIA AND VARIA AND PROSGEGRAMMENI: try adding greek-ext\n * U+1F8C GREEK CAPITAL LETTER ALPHA WITH PSILI AND OXIA AND PROSGEGRAMMENI: try adding greek-ext\n * U+1F8D GREEK CAPITAL LETTER ALPHA WITH DASIA AND OXIA AND PROSGEGRAMMENI: try adding greek-ext\n * U+1F8E GREEK CAPITAL LETTER ALPHA WITH PSILI AND PERISPOMENI AND PROSGEGRAMMENI: try adding greek-ext\n * U+1F8F GREEK CAPITAL LETTER ALPHA WITH DASIA AND PERISPOMENI AND PROSGEGRAMMENI: try adding greek-ext\n * U+1F90 GREEK SMALL LETTER ETA WITH PSILI AND YPOGEGRAMMENI: try adding greek-ext\n * U+1F91 GREEK SMALL LETTER ETA WITH DASIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1F92 GREEK SMALL LETTER ETA WITH PSILI AND VARIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1F93 GREEK SMALL LETTER ETA WITH DASIA AND VARIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1F94 GREEK SMALL LETTER ETA WITH PSILI AND OXIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1F95 GREEK SMALL LETTER ETA WITH DASIA AND OXIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1F96 GREEK SMALL LETTER ETA WITH PSILI AND PERISPOMENI AND YPOGEGRAMMENI: try adding greek-ext\n * U+1F97 GREEK SMALL LETTER ETA WITH DASIA AND PERISPOMENI AND YPOGEGRAMMENI: try adding greek-ext\n * U+1F98 GREEK CAPITAL LETTER ETA WITH PSILI AND PROSGEGRAMMENI: try adding greek-ext\n * U+1F99 GREEK CAPITAL LETTER ETA WITH DASIA AND PROSGEGRAMMENI: try adding greek-ext\n * U+1F9A GREEK CAPITAL LETTER ETA WITH PSILI AND VARIA AND PROSGEGRAMMENI: try adding greek-ext\n * U+1F9B GREEK CAPITAL LETTER ETA WITH DASIA AND VARIA AND PROSGEGRAMMENI: try adding greek-ext\n * U+1F9C GREEK CAPITAL LETTER ETA WITH PSILI AND OXIA AND PROSGEGRAMMENI: try adding greek-ext\n * U+1F9D GREEK CAPITAL LETTER ETA WITH DASIA AND OXIA AND PROSGEGRAMMENI: try adding greek-ext\n * U+1F9E GREEK CAPITAL LETTER ETA WITH PSILI AND PERISPOMENI AND PROSGEGRAMMENI: try adding greek-ext\n * U+1F9F GREEK CAPITAL LETTER ETA WITH DASIA AND PERISPOMENI AND PROSGEGRAMMENI: try adding greek-ext\n * U+1FA0 GREEK SMALL LETTER OMEGA WITH PSILI AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FA1 GREEK SMALL LETTER OMEGA WITH DASIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FA2 GREEK SMALL LETTER OMEGA WITH PSILI AND VARIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FA3 GREEK SMALL LETTER OMEGA WITH DASIA AND VARIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FA4 GREEK SMALL LETTER OMEGA WITH PSILI AND OXIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FA5 GREEK SMALL LETTER OMEGA WITH DASIA AND OXIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FA6 GREEK SMALL LETTER OMEGA WITH PSILI AND PERISPOMENI AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FA7 GREEK SMALL LETTER OMEGA WITH DASIA AND PERISPOMENI AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FA8 GREEK CAPITAL LETTER OMEGA WITH PSILI AND PROSGEGRAMMENI: try adding greek-ext\n * U+1FA9 GREEK CAPITAL LETTER OMEGA WITH DASIA AND PROSGEGRAMMENI: try adding greek-ext\n * U+1FAA GREEK CAPITAL LETTER OMEGA WITH PSILI AND VARIA AND PROSGEGRAMMENI: try adding greek-ext\n * U+1FAB GREEK CAPITAL LETTER OMEGA WITH DASIA AND VARIA AND PROSGEGRAMMENI: try adding greek-ext\n * U+1FAC GREEK CAPITAL LETTER OMEGA WITH PSILI AND OXIA AND PROSGEGRAMMENI: try adding greek-ext\n * U+1FAD GREEK CAPITAL LETTER OMEGA WITH DASIA AND OXIA AND PROSGEGRAMMENI: try adding greek-ext\n * U+1FAE GREEK CAPITAL LETTER OMEGA WITH PSILI AND PERISPOMENI AND PROSGEGRAMMENI: try adding greek-ext\n * U+1FAF GREEK CAPITAL LETTER OMEGA WITH DASIA AND PERISPOMENI AND PROSGEGRAMMENI: try adding greek-ext\n * U+1FB0 GREEK SMALL LETTER ALPHA WITH VRACHY: try adding greek-ext\n * U+1FB1 GREEK SMALL LETTER ALPHA WITH MACRON: try adding greek-ext\n * U+1FB2 GREEK SMALL LETTER ALPHA WITH VARIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FB3 GREEK SMALL LETTER ALPHA WITH YPOGEGRAMMENI: try adding greek-ext\n * U+1FB4 GREEK SMALL LETTER ALPHA WITH OXIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FB6 GREEK SMALL LETTER ALPHA WITH PERISPOMENI: try adding greek-ext\n * U+1FB7 GREEK SMALL LETTER ALPHA WITH PERISPOMENI AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FB8 GREEK CAPITAL LETTER ALPHA WITH VRACHY: try adding greek-ext\n * U+1FB9 GREEK CAPITAL LETTER ALPHA WITH MACRON: try adding greek-ext\n * U+1FBA GREEK CAPITAL LETTER ALPHA WITH VARIA: try adding greek-ext\n * U+1FBB GREEK CAPITAL LETTER ALPHA WITH OXIA: try adding greek-ext\n * U+1FBC GREEK CAPITAL LETTER ALPHA WITH PROSGEGRAMMENI: try adding greek-ext\n * U+1FBD GREEK KORONIS: try adding greek-ext\n * U+1FBE GREEK PROSGEGRAMMENI: try adding greek-ext\n * U+1FBF GREEK PSILI: try adding greek-ext\n * U+1FC0 GREEK PERISPOMENI: try adding greek-ext\n * U+1FC1 GREEK DIALYTIKA AND PERISPOMENI: try adding greek-ext\n * U+1FC2 GREEK SMALL LETTER ETA WITH VARIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FC3 GREEK SMALL LETTER ETA WITH YPOGEGRAMMENI: try adding greek-ext\n * U+1FC4 GREEK SMALL LETTER ETA WITH OXIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FC6 GREEK SMALL LETTER ETA WITH PERISPOMENI: try adding greek-ext\n * U+1FC7 GREEK SMALL LETTER ETA WITH PERISPOMENI AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FC8 GREEK CAPITAL LETTER EPSILON WITH VARIA: try adding greek-ext\n * U+1FC9 GREEK CAPITAL LETTER EPSILON WITH OXIA: try adding greek-ext\n * U+1FCA GREEK CAPITAL LETTER ETA WITH VARIA: try adding greek-ext\n * U+1FCB GREEK CAPITAL LETTER ETA WITH OXIA: try adding greek-ext\n * U+1FCC GREEK CAPITAL LETTER ETA WITH PROSGEGRAMMENI: try adding greek-ext\n * U+1FCD GREEK PSILI AND VARIA: try adding greek-ext\n * U+1FCE GREEK PSILI AND OXIA: try adding greek-ext\n * U+1FCF GREEK PSILI AND PERISPOMENI: try adding greek-ext\n * U+1FD0 GREEK SMALL LETTER IOTA WITH VRACHY: try adding greek-ext\n * U+1FD1 GREEK SMALL LETTER IOTA WITH MACRON: try adding greek-ext\n * U+1FD2 GREEK SMALL LETTER IOTA WITH DIALYTIKA AND VARIA: try adding greek-ext\n * U+1FD3 GREEK SMALL LETTER IOTA WITH DIALYTIKA AND OXIA: try adding greek-ext\n * U+1FD6 GREEK SMALL LETTER IOTA WITH PERISPOMENI: try adding greek-ext\n * U+1FD7 GREEK SMALL LETTER IOTA WITH DIALYTIKA AND PERISPOMENI: try adding greek-ext\n * U+1FD8 GREEK CAPITAL LETTER IOTA WITH VRACHY: try adding greek-ext\n * U+1FD9 GREEK CAPITAL LETTER IOTA WITH MACRON: try adding greek-ext\n * U+1FDA GREEK CAPITAL LETTER IOTA WITH VARIA: try adding greek-ext\n * U+1FDB GREEK CAPITAL LETTER IOTA WITH OXIA: try adding greek-ext\n * U+1FDD GREEK DASIA AND VARIA: try adding greek-ext\n * U+1FDE GREEK DASIA AND OXIA: try adding greek-ext\n * U+1FDF GREEK DASIA AND PERISPOMENI: try adding greek-ext\n * U+1FE0 GREEK SMALL LETTER UPSILON WITH VRACHY: try adding greek-ext\n * U+1FE1 GREEK SMALL LETTER UPSILON WITH MACRON: try adding greek-ext\n * U+1FE2 GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND VARIA: try adding greek-ext\n * U+1FE3 GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND OXIA: try adding greek-ext\n * U+1FE4 GREEK SMALL LETTER RHO WITH PSILI: try adding greek-ext\n * U+1FE5 GREEK SMALL LETTER RHO WITH DASIA: try adding greek-ext\n * U+1FE6 GREEK SMALL LETTER UPSILON WITH PERISPOMENI: try adding greek-ext\n * U+1FE7 GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND PERISPOMENI: try adding greek-ext\n * U+1FE8 GREEK CAPITAL LETTER UPSILON WITH VRACHY: try adding greek-ext\n * U+1FE9 GREEK CAPITAL LETTER UPSILON WITH MACRON: try adding greek-ext\n * U+1FEA GREEK CAPITAL LETTER UPSILON WITH VARIA: try adding greek-ext\n * U+1FEB GREEK CAPITAL LETTER UPSILON WITH OXIA: try adding greek-ext\n * U+1FEC GREEK CAPITAL LETTER RHO WITH DASIA: try adding greek-ext\n * U+1FED GREEK DIALYTIKA AND VARIA: try adding greek-ext\n * U+1FEE GREEK DIALYTIKA AND OXIA: try adding greek-ext\n * U+1FEF GREEK VARIA: try adding greek-ext\n * U+1FF2 GREEK SMALL LETTER OMEGA WITH VARIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FF3 GREEK SMALL LETTER OMEGA WITH YPOGEGRAMMENI: try adding greek-ext\n * U+1FF4 GREEK SMALL LETTER OMEGA WITH OXIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FF6 GREEK SMALL LETTER OMEGA WITH PERISPOMENI: try adding greek-ext\n * U+1FF7 GREEK SMALL LETTER OMEGA WITH PERISPOMENI AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FF8 GREEK CAPITAL LETTER OMICRON WITH VARIA: try adding greek-ext\n * U+1FF9 GREEK CAPITAL LETTER OMICRON WITH OXIA: try adding greek-ext\n * U+1FFA GREEK CAPITAL LETTER OMEGA WITH VARIA: try adding greek-ext\n * U+1FFB GREEK CAPITAL LETTER OMEGA WITH OXIA: try adding greek-ext\n * U+1FFC GREEK CAPITAL LETTER OMEGA WITH PROSGEGRAMMENI: try adding greek-ext\n * U+1FFD GREEK OXIA: try adding greek-ext\n * U+1FFE GREEK DASIA: try adding greek-ext\n * U+2012 FIGURE DASH: not included in any glyphset definition\n * U+2016 DOUBLE VERTICAL LINE: not included in any glyphset definition\n * U+2017 DOUBLE LOW LINE: not included in any glyphset definition\n * U+201B SINGLE HIGH-REVERSED-9 QUOTATION MARK: not included in any glyphset definition\n * U+2020 DAGGER: try adding latin-ext\n * U+2021 DOUBLE DAGGER: not included in any glyphset definition\n * U+2025 TWO DOT LEADER: try adding phags-pa\n * U+2030 PER MILLE SIGN: not included in any glyphset definition\n * U+203C DOUBLE EXCLAMATION MARK: not included in any glyphset definition\n * U+203D INTERROBANG: not included in any glyphset definition\n * U+203E OVERLINE: not included in any glyphset definition\n * U+2070 SUPERSCRIPT ZERO: not included in any glyphset definition\n * U+2075 SUPERSCRIPT FIVE: not included in any glyphset definition\n * U+2076 SUPERSCRIPT SIX: not included in any glyphset definition\n * U+2077 SUPERSCRIPT SEVEN: not included in any glyphset definition\n * U+2078 SUPERSCRIPT EIGHT: not included in any glyphset definition\n * U+2079 SUPERSCRIPT NINE: not included in any glyphset definition\n * U+207A SUPERSCRIPT PLUS SIGN: not included in any glyphset definition\n * U+207B SUPERSCRIPT MINUS: not included in any glyphset definition\n * U+207C SUPERSCRIPT EQUALS SIGN: not included in any glyphset definition\n * U+207D SUPERSCRIPT LEFT PARENTHESIS: not included in any glyphset definition\n * U+207E SUPERSCRIPT RIGHT PARENTHESIS: not included in any glyphset definition\n * U+207F SUPERSCRIPT LATIN SMALL LETTER N: not included in any glyphset definition\n * U+2080 SUBSCRIPT ZERO: not included in any glyphset definition\n * U+2081 SUBSCRIPT ONE: not included in any glyphset definition\n * U+2082 SUBSCRIPT TWO: not included in any glyphset definition\n * U+2083 SUBSCRIPT THREE: not included in any glyphset definition\n * U+2084 SUBSCRIPT FOUR: not included in any glyphset definition\n * U+2085 SUBSCRIPT FIVE: not included in any glyphset definition\n * U+2086 SUBSCRIPT SIX: not included in any glyphset definition\n * U+2087 SUBSCRIPT SEVEN: not included in any glyphset definition\n * U+2088 SUBSCRIPT EIGHT: not included in any glyphset definition\n * U+2089 SUBSCRIPT NINE: not included in any glyphset definition\n * U+208A SUBSCRIPT PLUS SIGN: not included in any glyphset definition\n * U+208B SUBSCRIPT MINUS: not included in any glyphset definition\n * U+208C SUBSCRIPT EQUALS SIGN: not included in any glyphset definition\n * U+208D SUBSCRIPT LEFT PARENTHESIS: not included in any glyphset definition\n * U+208E SUBSCRIPT RIGHT PARENTHESIS: not included in any glyphset definition\n * U+20A1 COLON SIGN: try adding latin-ext\n * U+20A2 CRUZEIRO SIGN: try adding latin-ext\n * U+20A3 FRENCH FRANC SIGN: try adding latin-ext\n * U+2116 NUMERO SIGN: try adding cyrillic\n * U+2126 OHM SIGN: not included in any glyphset definition\n * U+212E ESTIMATED SYMBOL: not included in any glyphset definition\n * U+2153 VULGAR FRACTION ONE THIRD: not included in any glyphset definition\n * U+2154 VULGAR FRACTION TWO THIRDS: not included in any glyphset definition\n * U+2155 VULGAR FRACTION ONE FIFTH: not included in any glyphset definition\n * U+2156 VULGAR FRACTION TWO FIFTHS: not included in any glyphset definition\n * U+2157 VULGAR FRACTION THREE FIFTHS: not included in any glyphset definition\n * U+2158 VULGAR FRACTION FOUR FIFTHS: not included in any glyphset definition\n * U+2159 VULGAR FRACTION ONE SIXTH: not included in any glyphset definition\n * U+215A VULGAR FRACTION FIVE SIXTHS: not included in any glyphset definition\n * U+215B VULGAR FRACTION ONE EIGHTH: not included in any glyphset definition\n * U+215C VULGAR FRACTION THREE EIGHTHS: not included in any glyphset definition\n * U+215D VULGAR FRACTION FIVE EIGHTHS: not included in any glyphset definition\n * U+215E VULGAR FRACTION SEVEN EIGHTHS: not included in any glyphset definition\n * U+215F FRACTION NUMERATOR ONE: not included in any glyphset definition\n * U+2202 PARTIAL DIFFERENTIAL: not included in any glyphset definition\n * U+2206 INCREMENT: not included in any glyphset definition\n * U+220F N-ARY PRODUCT: not included in any glyphset definition\n * U+2211 N-ARY SUMMATION: not included in any glyphset definition\n * U+221A SQUARE ROOT: not included in any glyphset definition\n * U+221E INFINITY: not included in any glyphset definition\n * U+2227 LOGICAL AND: not included in any glyphset definition\n * U+2228 LOGICAL OR: not included in any glyphset definition\n * U+2229 INTERSECTION: not included in any glyphset definition\n * U+222A UNION: not included in any glyphset definition\n * U+222B INTEGRAL: not included in any glyphset definition\n * U+2245 APPROXIMATELY EQUAL TO: not included in any glyphset definition\n * U+2248 ALMOST EQUAL TO: not included in any glyphset definition\n * U+2260 NOT EQUAL TO: not included in any glyphset definition\n * U+2261 IDENTICAL TO: not included in any glyphset definition\n * U+2264 LESS-THAN OR EQUAL TO: not included in any glyphset definition\n * U+2265 GREATER-THAN OR EQUAL TO: not included in any glyphset definition\n * U+2310 REVERSED NOT SIGN: not included in any glyphset definition\n * U+25CA LOZENGE: not included in any glyphset definition\n * U+25E6 WHITE BULLET: not included in any glyphset definition\n * U+E001 : not included in any glyphset definition\n * U+E002 : not included in any glyphset definition\n * U+E003 : not included in any glyphset definition\n * U+E004 : not included in any glyphset definition\n * U+E005 : not included in any glyphset definition\n * U+E006 : not included in any glyphset definition\n * U+F6DD : not included in any glyphset definition\n * U+FB00 LATIN SMALL LIGATURE FF: not included in any glyphset definition\n * U+FB01 LATIN SMALL LIGATURE FI: not included in any glyphset definition\n * U+FB02 LATIN SMALL LIGATURE FL: not included in any glyphset definition\n * U+FB03 LATIN SMALL LIGATURE FFI: not included in any glyphset definition\n * U+FB04 LATIN SMALL LIGATURE FFL: not included in any glyphset definition\n * U+FFFC OBJECT REPLACEMENT CHARACTER: not included in any glyphset definition\n\nOr you can add the above codepoints to one of the subsets supported by the font: `menu`, `greek` [code: unreachable-subsetting]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This check ensures that all encoded glyphs in the font are covered by a\n        subset declared in the METADATA.pb. Google Fonts splits the font into\n        a set of subset fonts based on the contents of the `subsets` field and\n        the subset definitions in the `glyphsets` repository.\n\n        Any encoded glyphs which are not by any of these subset definitions\n        will not be served in the subsetted fonts, and so will be unreachable to\n        the end user.\n    ",
                    "result": "WARN",
                    "severity": 2
                },
                {
                    "description": "Substitute copyright, registered and trademark symbols in name table entries.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/unwanted_chars>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "No need to substitute copyright, registered and trademark symbols in name table entries of this font.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Check the OS/2 usWeightClass is appropriate for the font's best SubFamily name.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/usweightclass>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2 usWeightClass is good",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Google Fonts expects variable fonts, static ttfs and static otfs to have\n        differing OS/2 usWeightClass values.\n\n        - For Variable Fonts, Thin-Black must be 100-900\n\n        - For static ttfs, Thin-Black can be 100-900 or 250-900\n\n        - For static otfs, Thin-Black must be 250-900\n\n        If static otfs are set lower than 250, text may appear blurry in\n        legacy Windows applications.\n\n        Glyphsapp users can change the usWeightClass value of an instance by adding\n        a 'weightClass' customParameter.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check font has a license.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/family/has_license>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Found license at '/Users/simon/others-repos/fonts/ofl/gfsneohellenic/OFL.txt'",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Check license file has good copyright string.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/license/OFL_copyright>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "First line in license file is:\n\n\"copyright (c) 2007, greek font society (www.greekfontsociety.org | gfs@greekfontsociety.org),\"\n\nwhich does not match the expected format, similar to:\n\n\"Copyright 2022 The Familyname Project Authors (git url)\" [code: bad-format]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        An OFL.txt file's first line should be the font copyright e.g:\n        \"Copyright 2019 The Montserrat Project Authors\n        (https://github.com/julietaula/montserrat)\"\n    ",
                    "result": "FAIL",
                    "severity": 10
                },
                {
                    "description": "Check OFL body text is correct.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/license/OFL_body_text>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OFL license body text is correct",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check OFL body text is correct.\n        Often users will accidently delete parts of the body text.\n    ",
                    "result": "PASS",
                    "severity": 10
                },
                {
                    "description": "Check copyright namerecords match license file.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/license>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font lacks NameID 13 (LICENSE DESCRIPTION). A proper licensing entry must be set. [code: missing]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        A known licensing description must be provided in the NameID 14\n        (LICENSE DESCRIPTION) entries of the name table.\n\n        The source of truth for this check (to determine which license is in use) is\n        a file placed side-by-side to your font project including the licensing terms.\n\n        Depending on the chosen license, one of the following string snippets is\n        expected to be found on the NameID 13 (LICENSE DESCRIPTION) entries of the\n        name table:\n\n        - \"This Font Software is licensed under the SIL Open Font License, Version 1.1.\n          This license is available with a FAQ at: https://scripts.sil.org/OFL\"\n\n        - \"Licensed under the Apache License, Version 2.0\"\n\n        - \"Licensed under the Ubuntu Font Licence 1.0.\"\n\n\n        Currently accepted licenses are Apache or Open Font License. For a small set\n        of legacy families the Ubuntu Font License may be acceptable as well.\n\n        When in doubt, please choose OFL for new font projects.\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "License URL matches License text on name table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/license_url>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Could not infer the font license. Please ensure NameID 13 (LICENSE DESCRIPTION) is properly set.",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        A known license URL must be provided in the NameID 14 (LICENSE INFO URL)\n        entry of the name table.\n\n        The source of truth for this check is the licensing text found on the NameID 13\n        entry (LICENSE DESCRIPTION).\n\n        The string snippets used for detecting licensing terms are:\n\n        - \"This Font Software is licensed under the SIL Open Font License, Version 1.1.\n          This license is available with a FAQ at: https://scripts.sil.org/OFL\"\n\n        - \"Licensed under the Apache License, Version 2.0\"\n\n        - \"Licensed under the Ubuntu Font Licence 1.0.\"\n\n\n        Currently accepted licenses are Apache or Open Font License. For a small set of\n        legacy families the Ubuntu Font License may be acceptable as well.\n\n        When in doubt, please choose OFL for new font projects.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Description strings in the name table must not exceed 200 characters.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/description_max_length>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "All description name records have reasonably small lengths.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        An old FontLab version had a bug which caused it to store copyright notices\n        in nameID 10 entries.\n\n        In order to detect those and distinguish them from actual legitimate usage of\n        this name table entry, we expect that such strings do not exceed a reasonable\n        length of 200 chars.\n\n        Longer strings are likely instances of the FontLab bug.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Show hinting filesize impact.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/hinting_impact>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Hinting filesize impact:\n\n |               | /Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf          |\n |:------------- | ---------------:|\n | Dehinted Size | 142.1kb |\n | Hinted Size   | 336.6kb   |\n | Increase      | 194.5kb      |\n | Change        | 136.9 %  |\n [code: size-impact]",
                            "status": "INFO",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This check is merely informative, displaying and useful comparison of filesizes\n        of hinted versus unhinted font files.\n    ",
                    "result": "INFO"
                },
                {
                    "description": "Ensure files are not too large.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/file_size>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font had a reasonable file size",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Serving extremely large font files on Google Fonts causes usability issues.\n        This check ensures that file sizes are reasonable.\n    ",
                    "result": "PASS",
                    "severity": 10
                },
                {
                    "description": "Version format is correct in 'name' table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/version_format>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Version format in NAME table entries is correct.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Font has ttfautohint params?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/has_ttfautohint_params>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font appears to our heuristic as not hinted using ttfautohint. [code: not-hinted]",
                            "status": "SKIP",
                            "traceback": null
                        },
                        {
                            "message": "Font appears to our heuristic as not hinted using ttfautohint. [code: not-hinted]",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "result": "SKIP"
                },
                {
                    "description": "Font has old ttfautohint applied?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/old_ttfautohint>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Could not detect which version of ttfautohint was used in this font. It is typically specified as a comment in the font version entries of the 'name' table. Such font version strings are currently: ['Version 1.0 ', 'Version 1.0 '] [code: version-not-detected]",
                            "status": "INFO",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check if font has been hinted with an outdated version of ttfautohint.\n    ",
                    "result": "INFO"
                },
                {
                    "description": "EPAR table present in font?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/epar>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "EPAR table not present in font. To learn more see https://github.com/fonttools/fontbakery/issues/818 [code: lacks-EPAR]",
                            "status": "INFO",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The EPAR table is/was a way of expressing common licensing permissions and\n        restrictions in metadata; while almost nothing supported it, Dave Crossland\n        wonders that adding it to everything in Google Fonts could help make it\n        more popular.\n\n        More info is available at:\n        https://davelab6.github.io/epar/\n    ",
                    "result": "INFO",
                    "severity": 1
                },
                {
                    "description": "Is the Grid-fitting and Scan-conversion Procedure ('gasp') table set to optimize rendering?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/gasp>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "These are the ppm ranges declared on the gasp table:\n\nPPM <= 8:\n\tflag = 0x02\n\t- Use grayscale rendering\nPPM <= 16:\n\tflag = 0x01\n\t- Use grid-fitting\nPPM <= 65535:\n\tflag = 0x03\n\t- Use grid-fitting\n\t- Use grayscale rendering\n [code: ranges]",
                            "status": "INFO",
                            "traceback": null
                        },
                        {
                            "message": "The gasp table has a range of 8 that may be unneccessary. [code: non-ffff-range]",
                            "status": "WARN",
                            "traceback": null
                        },
                        {
                            "message": "The gasp table has a range of 16 that may be unneccessary. [code: non-ffff-range]",
                            "status": "WARN",
                            "traceback": null
                        },
                        {
                            "message": "The gasp range 0xFFFF value 0x03 should be set to 0x0F. [code: unset-flags]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Traditionally version 0 'gasp' tables were set so that font sizes below 8 ppem\n        had no grid fitting but did have antialiasing. From 9-16 ppem, just grid\n        fitting.\n        And fonts above 17ppem had both antialiasing and grid fitting toggled on.\n        The use of accelerated graphics cards and higher resolution screens make this\n        approach obsolete. Microsoft's DirectWrite pushed this even further with much\n        improved rendering built into the OS and apps.\n\n        In this scenario it makes sense to simply toggle all 4 flags ON for all font\n        sizes.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Make sure family name does not begin with a digit.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/familyname_first_char>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font family name first character is not a digit.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Font family names which start with a numeral are often not discoverable\n        in Windows applications.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Are there non-ASCII characters in ASCII-only NAME table entries?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/ascii_only_entries>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "None of the ASCII-only NAME table entries contain non-ASCII characteres.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The OpenType spec requires ASCII for the POSTSCRIPT_NAME (nameID 6).\n\n        For COPYRIGHT_NOTICE (nameID 0) ASCII is required because that string should be\n        the same in CFF fonts which also have this requirement in the OpenType spec.\n\n        Note:\n        A common place where we find non-ASCII strings is on name table entries\n        with NameID > 18, which are expressly for localising the ASCII-only IDs\n        into Hindi / Arabic / etc.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: check if fonts field only has unique \"full_name\" values.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/unique_full_name_values>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb \"fonts\" field only has unique \"full_name\" values.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: check if fonts field only contains unique style:weight pairs.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/unique_weight_style_pairs>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb \"fonts\" field only has unique style:weight pairs.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb license is \"APACHE2\", \"UFL\" or \"OFL\"?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/license>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font license is declared in METADATA.pb as \"OFL\"",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb should contain at least \"menu\" and \"latin\" subsets.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/menu_and_latin>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Subsets \"menu\" and \"latin\" are mandatory, but METADATA.pb is missing \"latin\". [code: missing]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "result": "FAIL"
                },
                {
                    "description": "METADATA.pb subsets should be alphabetically ordered.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/subsets_order>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb subsets are not sorted in alphabetical order: Got ['menu', 'greek'] and expected ['greek', 'menu'] [code: not-sorted]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "result": "FAIL"
                },
                {
                    "description": "Check METADATA.pb includes production subsets.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/includes_production_subsets>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: listed_on_gfonts_api",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check METADATA.pb file includes the same subsets as the family in production.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "METADATA.pb: Copyright notice is the same in all fonts?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/copyright>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb: Copyright field value is inconsistent across family [code: inconsistency]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "result": "FAIL"
                },
                {
                    "description": "Check that METADATA.pb family values are all the same.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/familyname>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb: Family name is the same in all metadata \"fonts\" items.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: According to Google Fonts standards, families should have a Regular style.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/has_regular>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Family has a Regular style.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Regular should be 400.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/regular_is_400>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Regular has weight = 400.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Checks METADATA.pb font.name field matches family name declared on the name table.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/nameid/family_name>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Family name \"GFS Neohellenic\" is identical in METADATA.pb and on the TTF file.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Checks METADATA.pb font.post_script_name matches postscript name declared on the name table.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/nameid/post_script_name>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Postscript name \"GFSNeohellenic-Bold\" is identical in METADATA.pb and on the TTF file.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb font.full_name value matches fullname declared on the name table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/nameid/full_name>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font fullname \"GFS Neohellenic Bold\" is identical in METADATA.pb and on the TTF file.",
                            "status": "PASS",
                            "traceback": null
                        },
                        {
                            "message": "Font fullname \"GFS Neohellenic Bold\" is identical in METADATA.pb and on the TTF file.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb font.name value should be same as the family name declared on the name table.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/nameid/font_name>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: style",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This check ensures consistency between the font name declared on the name table\n        and the contents of the METADATA.pb file.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "METADATA.pb font.full_name and font.post_script_name fields have equivalent values ?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/match_fullname_postscript>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb font fields \"full_name\" and \"post_script_name\" have equivalent values.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb font.filename and font.post_script_name fields have equivalent values?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/match_filename_postscript>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb font filename = \"GFSNeohellenicBold.ttf\" does not match post_script_name=\"GFSNeohellenic-Bold\". [code: mismatch]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "result": "FAIL"
                },
                {
                    "description": "METADATA.pb font.name field contains font name in right format?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/valid_name_values>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: style",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "result": "SKIP"
                },
                {
                    "description": "METADATA.pb font.full_name field contains font name in right format?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/valid_full_name_values>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: style",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "result": "SKIP"
                },
                {
                    "description": "METADATA.pb font.filename field contains font name in right format?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/valid_filename_values>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: style",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "result": "SKIP"
                },
                {
                    "description": "METADATA.pb font.post_script_name field contains font name in right format?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/valid_post_script_name_values>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb postScriptName field contains font name in right format.",
                            "status": "PASS",
                            "traceback": null
                        },
                        {
                            "message": "METADATA.pb postScriptName field contains font name in right format.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Check name ID 25 to end with \"Italic\" for Italic VFs.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/valid_nameid25>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: style",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Due to a bug in (at least) Adobe Indesign, name ID 25\n        needs to be different for Italic VFs than their Upright counterparts.\n        Google Fonts chooses to append \"Italic\" here.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Copyright notices match canonical pattern in METADATA.pb",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/valid_copyright>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb: Copyright notices should match a pattern similar to:\n \"Copyright 2020 The Familyname Project Authors (git url)\"\nBut instead we have got:\n\"copyright (c) designed by takis katsoulidis and george d. matthiopoulos (gfs@greekfontsociety.gr)., 2001. all rights reserved.\" [code: bad-notice-format]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The expected pattern for the copyright string adheres to the following rules:\n\n        * It must say \"Copyright\" followed by a 4 digit year (optionally followed by\n          a hyphen and another 4 digit year)\n\n        * Then it must say \"The <familyname> Project Authors\"\n\n        * And within parentheses, a URL for a git repository must be provided\n\n        * The check is case insensitive and does not validate whether the familyname\n          is correct, even though we'd expect it is (and we may soon update the check\n          to validate that aspect as well!)\n\n\n        Here is an example of a valid copyright string:\n\n        \"Copyright 2017 The Archivo Black Project Authors\n         (https://github.com/Omnibus-Type/ArchivoBlack)\"\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "Copyright notices match canonical pattern in fonts",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/font_copyright>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Name Table entry: Copyright notices should match a pattern similar to: \"Copyright 2019 The Familyname Project Authors (git url)\"\nBut instead we have got:\n\"Copyright (c) Designed by Takis Katsoulidis and George D. Matthiopoulos., 2001. All rights reserved.\" [code: bad-notice-format]",
                            "status": "FAIL",
                            "traceback": null
                        },
                        {
                            "message": "Name Table entry: Copyright notices should match a pattern similar to: \"Copyright 2019 The Familyname Project Authors (git url)\"\nBut instead we have got:\n\"Copyright (c) Designed by Takis Katsoulidis and George D. Matthiopoulos., 2001. All rights reserved.\" [code: bad-notice-format]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "result": "FAIL"
                },
                {
                    "description": "Copyright notice on METADATA.pb should not contain 'Reserved Font Name'.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/reserved_font_name>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb copyright field does not contain \"Reserved Font Name\".",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Copyright notice shouldn't exceed 500 chars.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/copyright_max_length>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Copyright notice string is shorter than 500 chars.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Font filenames match font.filename entries?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/filenames>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Filenames in METADATA.pb look good.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Note:\n        This check only looks for files in the current directory.\n\n        Font files in subdirectories are checked by these other two checks:\n         - com.google.fonts/check/metadata/undeclared_fonts\n         - com.google.fonts/check/repo/vf_has_static_fonts\n\n        We may want to merge them all into a single check.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb font.style \"italic\" matches font internals?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/italic_style>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "This check only applies to italic fonts.",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "result": "SKIP"
                },
                {
                    "description": "METADATA.pb font.style \"normal\" matches font internals?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/normal_style>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb font.style \"normal\" matches font internals.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb font.name and font.full_name fields match the values declared on the name table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/nameid/family_and_full_names>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb familyname and fullName fields match corresponding name table entries.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Check font name is the same as family name.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/match_name_familyname>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font name is the same as family name.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Check that font weight has a canonical value.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/canonical_weight_value>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font weight has a canonical value.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Check METADATA.pb font weights are correct.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/os2_weightclass>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2 usWeightClass or wght axis value matches weight specified at METADATA.pb",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check METADATA.pb font weights are correct.\n\n        For static fonts, the metadata weight should be the same as the static font's\n        OS/2 usWeightClass.\n\n        For variable fonts, the weight value should be 400 if the font's wght axis range\n        includes 400, otherwise it should be the value closest to 400.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb weight matches postScriptName for static fonts.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/match_weight_postscript>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Weight value matches postScriptName.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Font styles are named canonically?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/canonical_style_names>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font styles are named canonically.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Check URL on copyright string is the same as in repository_url field.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/consistent_repo_urls>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Sometimes, perhaps due to copy-pasting, projects may declare different URLs\n        between the font.coyright and the family.sources.repository_url fields.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Check for primary_script",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/primary_script>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Try to guess font's primary script and see if that's set in METADATA.pb.\n        This is an educated guess based on the number of glyphs per script in the font\n        and should be taken with caution.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Stricter unitsPerEm criteria for Google Fonts.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/unitsperem_strict>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font em size is good (unitsPerEm = 1000).",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Even though the OpenType spec allows unitsPerEm to be any value between 16\n        and 16384, the Google Fonts project aims at a narrower set of reasonable values.\n\n        The spec suggests usage of powers of two in order to get some performance\n        improvements on legacy renderers, so those values are acceptable.\n\n        But values of 500 or 1000 are also acceptable, with the added benefit that it\n        makes upm math easier for designers, while the performance hit of not using a\n        power of two is most likely negligible nowadays.\n\n        Additionally, values above 2048 would likely result in unreasonable\n        filesize increases.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Glyphs are similiar to Google Fonts version?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/production_glyphs_similarity>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: api_gfonts_ttFont",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "result": "SKIP"
                },
                {
                    "description": "Checking direction of slnt axis angles",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/slant_direction>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The 'slnt' axis values are defined as negative values for a clockwise (right)\n        lean, and positive values for counter-clockwise lean. This is counter-intuitive\n        for many designers who are used to think of a positive slant as a lean to\n        the right.\n\n        This check ensures that the slant axis direction is consistent with the specs.\n\n        https://docs.microsoft.com/en-us/typography/opentype/spec/dvaraxistag_slnt\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check font names are correct",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/font_names>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font names are incorrect:\n\n| nameID | current | expected |\n| :--- | :--- | :--- |\n| Family Name | GFS Neohellenic | GFS Neohellenic |\n| Subfamily Name | Bold | Bold |\n| Full Name | GFS Neohellenic Bold | GFS Neohellenic Bold |\n| Poscript Name | GFSNeohellenic-Bold | GFSNeohellenic-Bold |\n| Typographic Family Name | GFS Neohellenic | N/A |\n| Typographic Subfamily Name | Bold | N/A | [code: bad-names]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Google Fonts has several rules which need to be adhered to when\n        setting a font's name table. Please read:\n        https://googlefonts.github.io/gf-guide/statics.html#supported-styles\n        https://googlefonts.github.io/gf-guide/statics.html#style-linking\n        https://googlefonts.github.io/gf-guide/statics.html#unsupported-styles\n        https://googlefonts.github.io/gf-guide/statics.html#single-weight-families\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "Copyright field for this font on METADATA.pb matches all copyright notice entries on the name table ?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/nameid/copyright>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Copyright field for this font on METADATA.pb (\"Copyright (c) Designed by Takis Katsoulidis and George D. Matthiopoulos (gfs@greekfontsociety.gr)., 2001. All rights reserved.\") differs from a copyright notice entry on the name table: \"Copyright (c) Designed by Takis Katsoulidis and George D. Matthiopoulos., 2001. All rights reserved.\" [code: mismatch]",
                            "status": "FAIL",
                            "traceback": null
                        },
                        {
                            "message": "Copyright field for this font on METADATA.pb (\"Copyright (c) Designed by Takis Katsoulidis and George D. Matthiopoulos (gfs@greekfontsociety.gr)., 2001. All rights reserved.\") differs from a copyright notice entry on the name table: \"Copyright (c) Designed by Takis Katsoulidis and George D. Matthiopoulos., 2001. All rights reserved.\" [code: mismatch]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "result": "FAIL"
                },
                {
                    "description": "Font has all mandatory 'name' table entries?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/mandatory_entries>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: style",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "result": "SKIP"
                },
                {
                    "description": "Length of copyright notice must not exceed 500 characters.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/copyright_length>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "All copyright notice name entries on the 'name' table are shorter than 500 characters.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This is an arbitrary max length for the copyright notice field of the name\n        table. We simply don't want such notices to be too long. Typically such notices\n        are actually much shorter than this with a length of roughly 70 or 80\n        characters.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check for font-v versioning.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/fontv>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Version string is: \"Version 1.0 \"\nThe version string must ideally include a git commit hash and either a \"dev\" or a \"release\" suffix such as in the example below:\n\"Version 1.3; git-0d08353-release\" [code: bad-format]",
                            "status": "INFO",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The git sha1 tagging and dev/release features of Source Foundry `font-v` tool\n        are awesome and we would love to consider upstreaming the approach into\n        fontmake someday. For now we only emit an INFO if a given font does not yet\n        follow the experimental versioning style, but at some point we may start\n        enforcing it.\n    ",
                    "result": "INFO"
                },
                {
                    "description": "Check glyphs do not have components which are themselves components.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/glyf_nested_components>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Glyphs do not contain nested components.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        There have been bugs rendering variable fonts with nested components.\n        Additionally, some static fonts with nested components have been reported\n        to have rendering and printing issues.\n\n        For more info, see:\n        * https://github.com/fonttools/fontbakery/issues/2961\n        * https://github.com/arrowtype/recursive/issues/412\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check a static ttf can be generated from a variable font.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/generate_static>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Google Fonts may serve static fonts which have been generated from variable\n        fonts. This test will attempt to generate a static ttf using fontTool's\n        varLib mutator.\n\n        The target font will be the mean of each axis e.g:\n\n        ## VF font axes\n\n        - min weight, max weight = 400, 800\n\n        - min width, max width = 50, 100\n\n        ## Target Instance\n\n        - weight = 600\n\n        - width = 75\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check that variable fonts have an HVAR table.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/has_HVAR>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Not having a HVAR table can lead to costly text-layout operations on some\n        platforms, which we want to avoid.\n\n        So, all variable fonts on the Google Fonts collection should have an HVAR\n        with valid values.\n\n        More info on the HVAR table can be found at:\n        https://docs.microsoft.com/en-us/typography/opentype/spec/otvaroverview#variation-data-tables-and-miscellaneous-requirements\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Font enables smart dropout control in \"prep\" table instructions?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/smart_dropout>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The 'prep' table does not contain TrueType instructions enabling smart dropout control. To fix, export the font with autohinting enabled, or run ttfautohint on the font, or run the `gftools fix-nonhinting` script. [code: lacks-smart-dropout]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This setup is meant to ensure consistent rendering quality for fonts across\n        all devices (with different rendering/hinting capabilities).\n\n        Below is the snippet of instructions we expect to see in the fonts:\n        B8 01 FF    PUSHW 0x01FF\n        85          SCANCTRL (unconditinally turn on\n                              dropout control mode)\n        B0 04       PUSHB 0x04\n        8D          SCANTYPE (enable smart dropout control)\n\n        \"Smart dropout control\" means activating rules 1, 2 and 5:\n        Rule 1: If a pixel's center falls within the glyph outline,\n                that pixel is turned on.\n        Rule 2: If a contour falls exactly on a pixel's center,\n                that pixel is turned on.\n        Rule 5: If a scan line between two adjacent pixel centers\n                (either vertical or horizontal) is intersected\n                by both an on-Transition contour and an off-Transition\n                contour and neither of the pixels was already turned on\n                by rules 1 and 2, turn on the pixel which is closer to\n                the midpoint between the on-Transition contour and\n                off-Transition contour. This is \"Smart\" dropout control.\n\n        For more detailed info (such as other rules not enabled in this snippet),\n        please refer to the TrueType Instruction Set documentation.\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "There must not be VTT Talk sources in the font.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/vttclean>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "There are no tables with VTT Talk sources embedded in the font.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The goal here is to reduce filesizes and improve pageloading when dealing\n        with webfonts.\n\n        The VTT Talk sources are not necessary at runtime and endup being just dead\n        weight when left embedded in the font binaries. The sources should be kept on\n        the project files but stripped out when building release binaries.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Are there unwanted Apple tables?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/aat>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "There are no unwanted AAT tables.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Apple's TrueType reference manual [1] describes SFNT tables not in the\n        Microsoft OpenType specification [2] and these can sometimes sneak into final\n        release files, but Google Fonts should only have OpenType tables.\n\n        [1] https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6.html\n        [2] https://docs.microsoft.com/en-us/typography/opentype/spec/\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check a font's STAT table contains compulsory Axis Values.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/STAT>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check a font's STAT table contains compulsory Axis Values which exist\n        in the Google Fonts Axis Registry.\n\n        We cannot determine what Axis Values the user will set for axes such as\n        opsz, GRAD since these axes are unique for each font so we'll skip them.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check variable font instances",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/fvar_instances>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check a font's fvar instance coordinates comply with our guidelines:\n        https://googlefonts.github.io/gf-guide/variable.html#fvar-instances\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "All name entries referenced by fvar instances exist on the name table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/fvar_name_entries>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The purpose of this check is to make sure that all name entries referenced\n        by variable font instances do exist in the name table.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "PPEM must be an integer on hinted fonts.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/integer_ppem_if_hinted>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Hinted fonts must have head table flag bit 3 set.\n\n        Per https://docs.microsoft.com/en-us/typography/opentype/spec/head,\n        bit 3 of Head::flags decides whether PPEM should be rounded. This bit should\n        always be set for hinted fonts.\n\n        Note:\n        Bit 3 = Force ppem to integer values for all internal scaler math;\n                May use fractional ppem sizes if this bit is clear;\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Are there caret positions declared for every ligature?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/ligature_carets>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "This font lacks caret position values for ligature glyphs on its GDEF table. [code: lacks-caret-pos]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        All ligatures in a font must have corresponding caret (text cursor) positions\n        defined in the GDEF table, otherwhise, users may experience issues with\n        caret rendering.\n\n        If using GlyphsApp or UFOs, ligature carets can be defined as anchors with\n        names starting with 'caret_'. These can be compiled with fontmake as of\n        version v2.4.0.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Is there kerning info for non-ligated sequences?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/kerning_for_non_ligated_sequences>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: has_kerning_info",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Fonts with ligatures should have kerning on the corresponding non-ligated\n        sequences for text where ligatures aren't used\n        (eg https://github.com/impallari/Raleway/issues/14).\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Combined length of family and style must not exceed 27 characters.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/family_and_style_max_length>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "All name entries are good.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to a GlyphsApp tutorial [1], in order to make sure all versions of\n        Windows recognize it as a valid font file, we must make sure that the\n        concatenated length of the familyname (NameID.FONT_FAMILY_NAME) and\n        style (NameID.FONT_SUBFAMILY_NAME) strings in the name table do not\n        exceed 20 characters.\n\n        After discussing the problem in more detail at FontBakery issue #2179 [2] we\n        decided that allowing up to 27 chars would still be on the safe side, though.\n\n        [1] https://glyphsapp.com/tutorials/multiple-masters-part-3-setting-up-instances\n        [2] https://github.com/fonttools/fontbakery/issues/2179\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Name table entries should not contain line-breaks.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/line_breaks>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Name table entries are all single-line (no line-breaks found).",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        There are some entries on the name table that may include more than one line\n        of text. The Google Fonts team, though, prefers to keep the name table entries\n        short and simple without line breaks.\n\n        For instance, some designers like to include the full text of a font license in\n        the \"copyright notice\" entry, but for the GFonts collection this entry should\n        only mention year, author and other basic info in a manner enforced by\n        com.google.fonts/check/font_copyright\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Name table strings must not contain the string 'Reserved Font Name'.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/rfn>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "None of the name table strings contain \"Reserved Font Name\".",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Some designers adopt the \"Reserved Font Name\" clause of the OFL license. This\n        means that the original author reserves the rights to the family name and other\n        people can only distribute modified versions using a different family name.\n\n        Google Fonts published updates to the fonts in the collection in order to fix\n        issues and/or implement further improvements to the fonts. It is important to\n        keep the family name so that users of the webfonts can benefit from the updates.\n        Since it would forbid such usage scenario, all families in the GFonts collection\n        are required to not adopt the RFN clause.\n\n        This check ensures \"Reserved Font Name\" is not mentioned in the name table.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check family name for GF Guide compliance.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/family_name_compliance>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "\"GFS Neohellenic\" contains an abbreviation. [code: abbreviation]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Checks the family name for compliance with the Google Fonts Guide.\n        https://googlefonts.github.io/gf-guide/onboarding.html#new-fonts\n\n        If you want to have your family name added to the CamelCase\n        exceptions list, please submit a pull request to the\n        camelcased_familyname_exceptions.txt file.\n\n        Similarly, abbreviations can be submitted to the\n        abbreviations_familyname_exceptions.txt file.\n\n        These are located in the Lib/fontbakery/data/googlefonts/ directory\n        of the FontBakery source code currently hosted at\n        https://github.com/fonttools/fontbakery/\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "Directory name in GFonts repo structure must match NameID 1 of the regular.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/repo/dirname_matches_nameid_1>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The font seems to lack a regular. If family consists of a single-weight non-Regular style only, consider the Google Fonts specs for this case: https://github.com/googlefonts/gf-docs/tree/main/Spec#single-weight-families [code: lacks-regular]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "result": "FAIL"
                },
                {
                    "description": "A static fonts directory with at least two fonts must accompany variable fonts",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/repo/vf_has_static_fonts>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Please consider adding a subdirectory called \"static/\" and including in it static font files. [code: missing]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Variable font family directories kept in the google/fonts git repo may include\n        a static/ subdir containing static fonts.\n\n        These files are meant to be served for users that still lack support for\n        variable fonts in their web browsers.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "A font repository should not include FontBakery report files",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/repo/fb_report>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        A FontBakery report is ephemeral and so should be used for posting issues on a\n        bug-tracker instead of being hosted in the font project repository.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check upstream.yaml file contains all required fields",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/repo/upstream_yaml_has_required_fields>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: upstream_yaml",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        If a family has been pushed using the gftools packager, we must check that all\n        the required fields in the upstream.yaml file have been populated.\n    ",
                    "result": "SKIP",
                    "severity": 10
                },
                {
                    "description": "A font repository should not include ZIP files",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/repo/zip_files>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Sometimes people check in ZIPs into their font project repositories. While we\n        accept the practice of checking in binaries, we believe that a ZIP is a step\n        too far ;)\n\n        Note: a source purist position is that only source files and build scripts\n        should be checked in.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check font follows the Google Fonts vertical metric schema",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/vertical_metrics>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2.sTypoLineGap is \"46\" it should be 0 [code: bad-OS/2.sTypoLineGap]",
                            "status": "FAIL",
                            "traceback": null
                        },
                        {
                            "message": "hhea.lineGap is \"22\" it should be 0 [code: bad-hhea.lineGap]",
                            "status": "FAIL",
                            "traceback": null
                        },
                        {
                            "message": "The sum of hhea.ascender + abs(hhea.descender) + hhea.lineGap is 1157 when it should be at least 1200 [code: bad-hhea-range]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This check generally enforces Google Fonts\u2019 vertical metrics specifications.\n        In particular:\n        * lineGap must be 0\n        * Sum of hhea ascender + abs(descender) + linegap must be\n          between 120% and 200% of UPM\n        * Warning if sum is over 150% of UPM\n\n        The threshold levels 150% (WARN) and 200% (FAIL) are somewhat arbitrarily chosen\n        and may hint at a glaring mistake in the metrics calculations or UPM settings.\n\n        Our documentation includes further information:\n        https://github.com/googlefonts/gf-docs/tree/main/VerticalMetrics\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "Check if the vertical metrics of a family are similar to the same family hosted on Google Fonts.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/vertical_metrics_regressions>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: regular_remote_style",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        If the family already exists on Google Fonts, we need to ensure that the\n        checked family's vertical metrics are similar. This check will test the\n        following schema which was outlined in Font Bakery issue #1162 [1]:\n\n        - The family should visually have the same vertical metrics as the Regular\n          style hosted on Google Fonts.\n\n        - If the family on Google Fonts has differing hhea and typo metrics, the family\n          being checked should use the typo metrics for both the hhea and typo entries.\n\n        - If the family on Google Fonts has use typo metrics not enabled and the family\n          being checked has it enabled, the hhea and typo metrics should use the family\n          on Google Fonts winAscent and winDescent values.\n\n        - If the upms differ, the values must be scaled so the visual appearance is\n          the same.\n\n        [1] https://github.com/fonttools/fontbakery/issues/1162\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check font follows the Google Fonts CJK vertical metric schema",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/cjk_vertical_metrics>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_cjk_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        CJK fonts have different vertical metrics when compared to Latin fonts.\n        We follow the schema developed by dr Ken Lunde for Source Han Sans and\n        the Noto CJK fonts.\n\n        Our documentation includes further information:\n        https://github.com/googlefonts/gf-docs/tree/main/Spec#cjk-vertical-metrics\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check if the vertical metrics of a CJK family are similar to the same family hosted on Google Fonts.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/cjk_vertical_metrics_regressions>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_cjk_font, regular_remote_style, regular_ttFont",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check CJK family has the same vertical metrics as the same family\n        hosted on Google Fonts.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Does the font contain less than 150 CJK characters?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/cjk_not_enough_glyphs>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_claiming_to_be_cjk_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Kana has 150 characters and it's the smallest CJK writing system.\n\n        If a font contains less CJK glyphs than this writing system, we inform the\n        user that some glyphs may be encoded incorrectly.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check variable font instances don't have duplicate names",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont_duplicate_instance_names>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This check's purpose is to detect duplicate named instances names in a\n        given variable font.\n        Repeating instance names may be the result of instances for several VF axes\n        defined in `fvar`, but since currently only weight+italic tokens are allowed\n        in instance names as per GF specs, they ended up repeating.\n        Instead, only a base set of fonts for the most default representation of the\n        family can be defined through instances in the `fvar` table, all other\n        instances will have to be left to access through the `STAT` table.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Ensure VFs do not contain the ital axis.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/unsupported_axes>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The 'ital' axis is not supported yet in Google Chrome.\n\n        For the time being, we need to ensure that VFs do not contain this axis.\n        Once browser support is better, we can deprecate this check.\n\n        For more info regarding browser support, see:\n        https://arrowtype.github.io/vf-slnt-test/\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Ensure VFs with duplexed axes do not vary horizontal advance.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/duplexed_axis_reflow>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Certain axes, such as grade (GRAD) or roundness (ROND), should not\n        change any advanceWidth or kerning data across the font's design space.\n        This is because altering the advance width of glyphs can cause text reflow.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validate METADATA.pb axes values are within gf_axisregistry bounds.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/gf_axisregistry_bounds>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Each axis range in a METADATA.pb file must be registered, and within the bounds\n        of the axis definition in the Google Fonts Axis Registry, available at\n        https://github.com/google/fonts/tree/main/axisregistry\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validate METADATA.pb axes tags are defined in gf_axisregistry.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/gf_axisregistry_valid_tags>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Ensure all axes in a METADATA.pb file are registered in the\n        Google Fonts Axis Registry, available at\n        https://github.com/google/fonts/tree/main/axisregistry\n\n        Why does Google Fonts have its own Axis Registry?\n\n        We support a superset of the OpenType axis registry axis set, and use\n        additional metadata for each axis. Axes present in a font file but not in this\n        registry will not function via our API. No variable font is expected to\n        support all of the axes here.\n\n        Any font foundry or distributor library that offers variable fonts has a\n        implicit, latent, de-facto axis registry, which can be extracted by scanning\n        the library for axes' tags, labels, and min/def/max values. While in 2016\n        Microsoft originally offered to include more axes in the OpenType 1.8\n        specification (github.com/microsoft/OpenTypeDesignVariationAxisTags), as of\n        August 2020, this effort has stalled. We hope more foundries and distributors\n        will publish documents like this that make their axes explicit, to encourage\n        of adoption of variable fonts throughout the industry, and provide source\n        material for a future update to the OpenType specification's axis registry.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validate defaults on fvar table match registered fallback names in GFAxisRegistry.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/gf_axisregistry/fvar_axis_defaults>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check that axis defaults have a corresponding fallback name registered at the\n        Google Fonts Axis Registry, available at\n        https://github.com/google/fonts/tree/main/axisregistry\n\n        This is necessary for the following reasons:\n\n        To get ZIP files downloads on Google Fonts to be accurate \u2014 otherwise the\n        chosen default font is not generated. The Newsreader family, for instance, has\n        a default value on the 'opsz' axis of 16pt. If 16pt was not a registered\n        fallback position, then the ZIP file would instead include another position\n        as default (such as 14pt).\n\n        For the Variable fonts to display the correct location on the specimen page.\n\n        For VF with no weight axis to be displayed at all. For instance, Ballet, which\n        has no weight axis, was not appearing in sandbox because default position on\n        'opsz' axis was 16pt, and it was not yet a registered fallback positon.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validate STAT particle names and values match the fallback names in GFAxisRegistry.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/STAT/gf_axisregistry>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check that particle names and values on STAT table match the fallback names\n        in each axis entry at the Google Fonts Axis Registry, available at\n        https://github.com/google/fonts/tree/main/axisregistry\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validate VF axes match the ones declared on METADATA.pb.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/consistent_axis_enumeration>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        All font variation axes present in the font files must be properly declared\n        on METADATA.pb so that they can be served by the GFonts API.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Ensure METADATA.pb does not use escaped strings.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/escaped_strings>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        In some cases we've seen designer names and other fields with escaped strings\n        in METADATA files. Nowadays the strings can be full unicode strings and\n        do not need escaping.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Designers are listed correctly on the Google Fonts catalog?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/designer_profiles>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "It seems that Greek Font Society is still not listed on the designers catalog. Please submit a photo and a link to a webpage where people can learn more about the work of this designer/typefoundry. [code: profile-not-found]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Google Fonts has a catalog of designers.\n\n        This check ensures that the online entries of the catalog can be found based\n        on the designer names listed on the METADATA.pb file.\n\n        It also validates the URLs and file formats are all correctly set.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Ensure variable fonts include an avar table.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/mandatory_avar_table>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Most variable fonts should include an avar table to correctly define\n        axes progression rates.\n\n        For example, a weight axis from 0% to 100% doesn't map directly to 100 to 1000,\n        because a 10% progression from 0% may be too much to define the 200,\n        while 90% may be too little to define the 900.\n\n        If the progression rates of axes is linear, this check can be ignored.\n        Fontmake will also skip adding an avar table if the progression rates\n        are linear. However, we still recommend designers visually proof each\n        instance is at the expected weight, width etc.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "On a family update, the DESCRIPTION.en_us.html file should ideally also be updated.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/description/family_update>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: github_gfonts_description",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        We want to ensure that any significant changes to the font family are\n        properly mentioned in the DESCRIPTION file.\n\n        In general, it means that the contents of the DESCRIPTION.en_us.html file\n        will typically change if when font files are updated. Please treat this check\n        as a reminder to do so whenever appropriate!\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check small caps glyphs are available.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/missing_small_caps_glyphs>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Ensure small caps glyphs are available if\n        a font declares smcp or c2sc OT features.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Ensure Stylistic Sets have description.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/stylisticset_description>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Stylistic sets should provide description text. Programs such as InDesign,\n        TextEdit and Inkscape use that info to display to the users so that they know\n        what a given stylistic set offers.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "OS/2.fsSelection bit 7 (USE_TYPO_METRICS) is set in all fonts.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/os2/use_typo_metrics>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2.fsSelection bit 7 (USE_TYPO_METRICS) wasNOT set in the following fonts: ['/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf', '/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf', '/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf', '/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf']. [code: missing-os2-fsselection-bit7]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        All fonts on the Google Fonts collection should have OS/2.fsSelection bit 7\n        (USE_TYPO_METRICS) set. This requirement is part of the vertical metrics scheme\n        established as a Google Fonts policy aiming at a common ground supported by\n        all major font rendering environments.\n\n        For more details, read:\n        https://github.com/googlefonts/gf-docs/blob/main/VerticalMetrics/README.md\n\n        Below is the portion of that document that is most relevant to this check:\n\n        Use_Typo_Metrics must be enabled. This will force MS Applications to use the\n        OS/2 Typo values instead of the Win values. By doing this, we can freely set\n        the Win values to avoid clipping and control the line height with the typo\n        values. It has the added benefit of future line height compatibility. When\n        a new script is added, we simply change the Win values to the new yMin\n        and yMax, without needing to worry if the line height have changed.\n    ",
                    "result": "FAIL",
                    "severity": 10
                },
                {
                    "description": "Ensure fonts have ScriptLangTags declared on the 'meta' table.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/meta/script_lang_tags>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "This font file does not have a 'meta' table. [code: lacks-meta-table]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The OpenType 'meta' table originated at Apple. Microsoft added it to OT with\n        just two DataMap records:\n\n        - dlng: comma-separated ScriptLangTags that indicate which scripts,\n          or languages and scripts, with possible variants, the font is designed for.\n\n        - slng: comma-separated ScriptLangTags that indicate which scripts,\n          or languages and scripts, with possible variants, the font supports.\n\n\n        The slng structure is intended to describe which languages and scripts the\n        font overall supports. For example, a Traditional Chinese font that also\n        contains Latin characters, can indicate Hant,Latn, showing that it supports\n        Hant, the Traditional Chinese variant of the Hani script, and it also\n        supports the Latn script.\n\n        The dlng structure is far more interesting. A font may contain various glyphs,\n        but only a particular subset of the glyphs may be truly \"leading\" in the design,\n        while other glyphs may have been included for technical reasons. Such a\n        Traditional Chinese font could only list Hant there, showing that it\u2019s designed\n        for Traditional Chinese, but the font would omit Latn, because the developers\n        don\u2019t think the font is really recommended for purely Latin-script use.\n\n        The tags used in the structures can comprise just script, or also language\n        and script. For example, if a font has Bulgarian Cyrillic alternates in the\n        locl feature for the cyrl BGR OT languagesystem, it could also indicate in\n        dlng explicitly that it supports bul-Cyrl. (Note that the scripts and languages\n        in meta use the ISO language and script codes, not the OpenType ones).\n\n        This check ensures that the font has the meta table containing the\n        slng and dlng structures.\n\n        All families in the Google Fonts collection should contain the 'meta' table.\n        Windows 10 already uses it when deciding on which fonts to fall back to.\n        The Google Fonts API and also other environments could use the data for\n        smarter filtering. Most importantly, those entries should be added\n        to the Noto fonts.\n\n        In the font making process, some environments store this data in external\n        files already. But the meta table provides a convenient way to store this\n        inside the font file, so some tools may add the data, and unrelated tools\n        may read this data. This makes the solution much more portable and universal.\n    ",
                    "result": "WARN",
                    "severity": 3
                },
                {
                    "description": "Ensure fonts do not contain any pre-production tables.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/no_debugging_tables>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "This font file contains the following pre-production tables: FFTM [code: has-debugging-tables]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Tables such as `Debg` are useful in the pre-production stages of font\n        development, but add unnecessary bloat to a production font and should\n        be removed before release.\n    ",
                    "result": "WARN",
                    "severity": 6
                },
                {
                    "description": "Check font family directory name.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/family_directory_name>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Directory name is \"gfsneohellenic\", as expected.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        We want the directory name of a font family to be predictable and directly\n        derived from the family name, all lowercased and removing spaces.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check font can render its own name.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/render_own_name>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font can successfully render its own name (GFS Neohellenic)",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        A base expectation is that a font family's regular/default (400 roman) style\n        can render its 'menu name' (nameID 1) in itself.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check samples can be rendered.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/can_render_samples>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        In order to prevent tofu from being seen on fonts.google.com, this check\n        verifies that all samples specified by METADATA.pb can be properly\n        rendered by the font.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check if category on METADATA.pb matches what can be inferred from the family name.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/category_hints>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Sometimes the font familyname contains words that hint at which is the most\n        likely correct category to be declared on METADATA.pb\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check font has the expected color font tables.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/colorfont_tables>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Looks Good!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        COLR v0 fonts are widely supported in most browsers so they do not require\n        an SVG color table. However, some environments (e.g. Safari, Adobe apps)\n        do not currently support COLR v1 so we need to add an SVG table to these fonts,\n        except in the case of variable fonts, since SVG does not support\n        OpenType Variations.\n\n        To automatically generate compatible SVG/COLR tables,\n        run the maximum_color tool in nanoemoji:\n        https://github.com/googlefonts/nanoemoji\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Color layers should have a minimum brightness",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/color_cpal_brightness>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Looks good!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Layers of a COLRv0 font should not be too dark or too bright. When layer colors\n        are set explicitly, they can't be changed and they may turn out illegible\n        against dark or bright backgrounds.\n\n        While traditional color-less fonts can be colored in design apps or CSS, a\n        black color definition in a COLRv0 font actually means that that layer will be\n        rendered in black regardless of the background color. This leads to text\n        becoming invisible against a dark background, for instance when using a dark\n        theme in a web browser or operating system.\n\n        This check ensures that layer colors are at least 10% bright and at most 90%\n        bright, when not already set to the current color (0xFFFF).\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Put an empty glyph on GID 1 right after the .notdef glyph for COLRv0 fonts.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/empty_glyph_on_gid1_for_colrv0>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Looks good!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        A rendering bug in Windows 10 paints whichever glyph is on GID 1 on top of\n        some glyphs, colored or not. This only occurs for COLR version 0 fonts.\n\n        Having a glyph with no contours on GID 1 is a practical workaround for that.\n\n        See https://github.com/googlefonts/gftools/issues/609\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Noto fonts must have an ARTICLE.en_us.html file",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/description/noto_has_article>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_noto",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Noto fonts are displayed in a different way on the fonts.google.com\n         web site, and so must also contain an article about them.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Checking file is named canonically.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/canonical_filename>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Expected \"GFSNeohellenic-BoldItalic.ttf. Got GFSNeohellenicBoldItalic.ttf. [code: bad-filename]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        A font's filename must be composed as \"<familyname>-<stylename>.ttf\":\n\n        - Nunito-Regular.ttf\n\n        - Oswald-BoldItalic.ttf\n\n\n        Variable fonts must list the axis tags in alphabetical order in\n        square brackets and separated by commas:\n\n        - Roboto[wdth,wght].ttf\n\n        - Familyname-Italic[wght].ttf\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "Does DESCRIPTION file contain broken links?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/description/broken_links>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: description_html",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The snippet of HTML in the DESCRIPTION.en_us.html file is added to the font\n        family webpage on the Google Fonts website. For that reason, all hyperlinks\n        in it must be properly working.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "URLs on DESCRIPTION file must not display http(s) prefix.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/description/urls>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: description_html",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The snippet of HTML in the DESCRIPTION.en_us.html file is added to the font\n        family webpage on the Google Fonts website.\n\n        Google Fonts has a content formatting policy for that snippet that expects the\n        text content of links not to include the http:// or https:// prefixes.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Does DESCRIPTION file contain a upstream Git repo URL?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/description/git_url>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: description_html",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The contents of the DESCRIPTION.en-us.html file are displayed on the\n        Google Fonts website in the about section of each font family specimen page.\n\n        Since all of the Google Fonts collection is composed of libre-licensed fonts,\n        this check enforces a policy that there must be a hypertext link in that page\n        directing users to the repository where the font project files are\n        made available.\n\n        Such hosting is typically done on sites like Github, Gitlab, GNU Savannah or\n        any other git-based version control service.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Is this a proper HTML snippet?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/description/valid_html>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/DESCRIPTION.en_us.html does not include an HTML <p> tag. [code: lacks-paragraph]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Sometimes people write malformed HTML markup. This check should ensure the\n        file is good.\n\n        Additionally, when packaging families for being pushed to the `google/fonts`\n        git repo, if there is no DESCRIPTION.en_us.html file, some older versions of\n        the `add_font.py` tool insert a placeholder description file which contains\n        invalid html. This file needs to either be replaced with an existing\n        description file or edited by hand.\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "DESCRIPTION.en_us.html must have more than 200 bytes.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/description/min_length>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "DESCRIPTION.en_us.html is larger than 200 bytes.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "DESCRIPTION.en_us.html should end in a linebreak.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/description/eof_linebreak>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The last characther on DESCRIPTION.en_us.html is not a line-break. Please add it. [code: missing-eof-linebreak]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Some older text-handling tools sometimes misbehave if the last line of data\n        in a text file is not terminated with a newline character (also known as '\\n').\n\n        We know that this is a very small detail, but for the sake of keeping all\n        DESCRIPTION.en_us.html files uniformly formatted throughout the GFonts\n        collection, we chose to adopt the practice of placing this final linebreak\n        character on them.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Check METADATA.pb parse correctly.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/parses>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb parsed successfuly.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The purpose of this check is to ensure that the METADATA.pb file is not\n        malformed.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Font designer field in METADATA.pb must not be 'unknown'.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/unknown_designer>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font designer field is not 'unknown'.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Font designer field in METADATA.pb must not contain 'Multiple designers'.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/multiple_designers>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Looks good.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        For a while the string \"Multiple designers\" was used as a placeholder on\n        METADATA.pb files. We should replace all those instances with actual designer\n        names so that proper credits are displayed on the Google Fonts family\n        specimen pages.\n\n        If there's more than a single designer, the designer names must be\n        separated by commas.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Multiple values in font designer field in METADATA.pb must be separated by commas.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/designer_values>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Looks good.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        We must use commas instead of forward slashes because the server-side code\n        at the fonts.google.com directory will segment the string on the commas into\n        a list of names and display the first item in the list as the\n        \"principal designer\" while the remaining names are identified as \"contributors\".\n\n        See eg https://fonts.google.com/specimen/Rubik\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Does METADATA.pb copyright field contain broken links?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/broken_links>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "All links in the METADATA.pb file look good!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Ensure METADATA.pb lists all font binaries.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/undeclared_fonts>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The set of font binaries available, except the ones on a \"static\" subdir,\n        must match exactly those declared on the METADATA.pb file.\n\n        Also, to avoid confusion, we expect that font files (other than statics)\n        are not placed on subdirectories.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Ensure METADATA.pb category field is valid.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/category>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        There are only five acceptable values for the category field in a METADATA.pb\n        file:\n\n        - MONOSPACE\n\n        - SANS_SERIF\n\n        - SERIF\n\n        - DISPLAY\n\n        - HANDWRITING\n\n        This check is meant to avoid typos in this field.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Checking OS/2 fsType does not impose restrictions.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/fstype>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2 fsType is properly set to zero.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The fsType in the OS/2 table is a legacy DRM-related field. Fonts in the\n        Google Fonts collection must have it set to zero (also known as\n        \"Installable Embedding\"). This setting indicates that the fonts can be\n        embedded in documents and permanently installed by applications on\n        remote systems.\n\n        More detailed info is available at:\n        https://docs.microsoft.com/en-us/typography/opentype/spec/os2#fstype\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Checking OS/2 achVendID.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/vendor_id>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2 VendorID value 'Alts' is not yet recognized. If you registered it recently, then it's safe to ignore this warning message. Otherwise, you should set it to your own unique 4 character code, and register it with Microsoft at https://www.microsoft.com/typography/links/vendorlist.aspx\n [code: unknown]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Microsoft keeps a list of font vendors and their respective contact info. This\n        list is updated regularly and is indexed by a 4-char \"Vendor ID\" which is\n        stored in the achVendID field of the OS/2 table.\n\n        Registering your ID is not mandatory, but it is a good practice since some\n        applications may display the type designer / type foundry contact info on some\n        dialog and also because that info will be visible on Microsoft's website:\n\n        https://docs.microsoft.com/en-us/typography/vendors/\n\n        This check verifies whether or not a given font's vendor ID is registered in\n        that list or if it has some of the default values used by the most common\n        font editors.\n\n        Each new FontBakery release includes a cached copy of that list of vendor IDs.\n        If you registered recently, you're safe to ignore warnings emitted by this\n        check, since your ID will soon be included in one of our upcoming releases.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Check Google Fonts glyph coverage.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/glyph_coverage>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Missing required codepoints:\n\n\t- 0x030B (COMBINING DOUBLE ACUTE ACCENT)\n\n\n\t- 0x0304 (COMBINING MACRON)\n\n\n\t- 0x1E9E (LATIN CAPITAL LETTER SHARP S)\n\n\n\t- 0x0237 (LATIN SMALL LETTER DOTLESS J)\n\n\n\t- 0x0307 (COMBINING DOT ABOVE)\n\n\n\t- 0x0302 (COMBINING CIRCUMFLEX ACCENT)\n\n\n\t- 0x030C (COMBINING CARON)\n\n\n\t- 0x0306 (COMBINING BREVE)\n\n\n\t- 0x030A (COMBINING RING ABOVE)\n [code: missing-codepoints]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Google Fonts expects that fonts in its collection support at least the minimal\n        set of characters defined in the `GF-latin-core` glyph-set.\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "Check for METADATA subsets with zero support.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/unsupported_subsets>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This check ensures that the subsets specified on a METADATA.pb file are\n        actually supported (even if only partially) by the font files.\n\n        Subsets for which none of the codepoints are supported will cause the\n        check to FAIL.\n    ",
                    "result": "PASS",
                    "severity": 10
                },
                {
                    "description": "Check for codepoints not covered by METADATA subsets.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/unreachable_subsetting>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The following codepoints supported by the font are not covered by\n    any subsets defined in the font's metadata file, and will never\n    be served. You can solve this by either manually adding additional\n    subset declarations to METADATA.pb, or by editing the glyphset\n    definitions.\n\n * U+0100 LATIN CAPITAL LETTER A WITH MACRON: try adding latin-ext\n * U+0101 LATIN SMALL LETTER A WITH MACRON: try adding latin-ext\n * U+0102 LATIN CAPITAL LETTER A WITH BREVE: try adding one of: vietnamese, latin-ext\n * U+0103 LATIN SMALL LETTER A WITH BREVE: try adding one of: vietnamese, latin-ext\n * U+0104 LATIN CAPITAL LETTER A WITH OGONEK: try adding latin-ext\n * U+0105 LATIN SMALL LETTER A WITH OGONEK: try adding latin-ext\n * U+0106 LATIN CAPITAL LETTER C WITH ACUTE: try adding latin-ext\n * U+0107 LATIN SMALL LETTER C WITH ACUTE: try adding latin-ext\n * U+0108 LATIN CAPITAL LETTER C WITH CIRCUMFLEX: try adding latin-ext\n * U+0109 LATIN SMALL LETTER C WITH CIRCUMFLEX: try adding latin-ext\n * U+010A LATIN CAPITAL LETTER C WITH DOT ABOVE: try adding latin-ext\n * U+010B LATIN SMALL LETTER C WITH DOT ABOVE: try adding latin-ext\n * U+010C LATIN CAPITAL LETTER C WITH CARON: try adding latin-ext\n * U+010D LATIN SMALL LETTER C WITH CARON: try adding latin-ext\n * U+010E LATIN CAPITAL LETTER D WITH CARON: try adding latin-ext\n * U+010F LATIN SMALL LETTER D WITH CARON: try adding latin-ext\n * U+0110 LATIN CAPITAL LETTER D WITH STROKE: try adding one of: vietnamese, latin-ext\n * U+0111 LATIN SMALL LETTER D WITH STROKE: try adding one of: vietnamese, latin-ext\n * U+0112 LATIN CAPITAL LETTER E WITH MACRON: try adding latin-ext\n * U+0113 LATIN SMALL LETTER E WITH MACRON: try adding latin-ext\n * U+0114 LATIN CAPITAL LETTER E WITH BREVE: try adding latin-ext\n * U+0115 LATIN SMALL LETTER E WITH BREVE: try adding latin-ext\n * U+0116 LATIN CAPITAL LETTER E WITH DOT ABOVE: try adding latin-ext\n * U+0117 LATIN SMALL LETTER E WITH DOT ABOVE: try adding latin-ext\n * U+0118 LATIN CAPITAL LETTER E WITH OGONEK: try adding latin-ext\n * U+0119 LATIN SMALL LETTER E WITH OGONEK: try adding latin-ext\n * U+011A LATIN CAPITAL LETTER E WITH CARON: try adding latin-ext\n * U+011B LATIN SMALL LETTER E WITH CARON: try adding latin-ext\n * U+011C LATIN CAPITAL LETTER G WITH CIRCUMFLEX: try adding latin-ext\n * U+011D LATIN SMALL LETTER G WITH CIRCUMFLEX: try adding latin-ext\n * U+011E LATIN CAPITAL LETTER G WITH BREVE: try adding latin-ext\n * U+011F LATIN SMALL LETTER G WITH BREVE: try adding latin-ext\n * U+0120 LATIN CAPITAL LETTER G WITH DOT ABOVE: try adding latin-ext\n * U+0121 LATIN SMALL LETTER G WITH DOT ABOVE: try adding latin-ext\n * U+0122 LATIN CAPITAL LETTER G WITH CEDILLA: try adding latin-ext\n * U+0123 LATIN SMALL LETTER G WITH CEDILLA: try adding latin-ext\n * U+0124 LATIN CAPITAL LETTER H WITH CIRCUMFLEX: try adding latin-ext\n * U+0125 LATIN SMALL LETTER H WITH CIRCUMFLEX: try adding latin-ext\n * U+0126 LATIN CAPITAL LETTER H WITH STROKE: try adding latin-ext\n * U+0127 LATIN SMALL LETTER H WITH STROKE: try adding latin-ext\n * U+0128 LATIN CAPITAL LETTER I WITH TILDE: try adding one of: vietnamese, latin-ext\n * U+0129 LATIN SMALL LETTER I WITH TILDE: try adding one of: vietnamese, latin-ext\n * U+012A LATIN CAPITAL LETTER I WITH MACRON: try adding latin-ext\n * U+012B LATIN SMALL LETTER I WITH MACRON: try adding latin-ext\n * U+012C LATIN CAPITAL LETTER I WITH BREVE: try adding latin-ext\n * U+012D LATIN SMALL LETTER I WITH BREVE: try adding latin-ext\n * U+012E LATIN CAPITAL LETTER I WITH OGONEK: try adding latin-ext\n * U+012F LATIN SMALL LETTER I WITH OGONEK: try adding latin-ext\n * U+0130 LATIN CAPITAL LETTER I WITH DOT ABOVE: try adding latin-ext\n * U+0132 LATIN CAPITAL LIGATURE IJ: try adding latin-ext\n * U+0133 LATIN SMALL LIGATURE IJ: try adding latin-ext\n * U+0134 LATIN CAPITAL LETTER J WITH CIRCUMFLEX: try adding latin-ext\n * U+0135 LATIN SMALL LETTER J WITH CIRCUMFLEX: try adding latin-ext\n * U+0136 LATIN CAPITAL LETTER K WITH CEDILLA: try adding latin-ext\n * U+0137 LATIN SMALL LETTER K WITH CEDILLA: try adding latin-ext\n * U+0139 LATIN CAPITAL LETTER L WITH ACUTE: try adding latin-ext\n * U+013A LATIN SMALL LETTER L WITH ACUTE: try adding latin-ext\n * U+013B LATIN CAPITAL LETTER L WITH CEDILLA: try adding latin-ext\n * U+013C LATIN SMALL LETTER L WITH CEDILLA: try adding latin-ext\n * U+013D LATIN CAPITAL LETTER L WITH CARON: try adding latin-ext\n * U+013E LATIN SMALL LETTER L WITH CARON: try adding latin-ext\n * U+013F LATIN CAPITAL LETTER L WITH MIDDLE DOT: try adding latin-ext\n * U+0140 LATIN SMALL LETTER L WITH MIDDLE DOT: try adding latin-ext\n * U+0141 LATIN CAPITAL LETTER L WITH STROKE: try adding latin-ext\n * U+0142 LATIN SMALL LETTER L WITH STROKE: try adding latin-ext\n * U+0143 LATIN CAPITAL LETTER N WITH ACUTE: try adding latin-ext\n * U+0144 LATIN SMALL LETTER N WITH ACUTE: try adding latin-ext\n * U+0145 LATIN CAPITAL LETTER N WITH CEDILLA: try adding latin-ext\n * U+0146 LATIN SMALL LETTER N WITH CEDILLA: try adding latin-ext\n * U+0147 LATIN CAPITAL LETTER N WITH CARON: try adding latin-ext\n * U+0148 LATIN SMALL LETTER N WITH CARON: try adding latin-ext\n * U+0149 LATIN SMALL LETTER N PRECEDED BY APOSTROPHE: try adding latin-ext\n * U+014A LATIN CAPITAL LETTER ENG: try adding latin-ext\n * U+014B LATIN SMALL LETTER ENG: try adding latin-ext\n * U+014C LATIN CAPITAL LETTER O WITH MACRON: try adding latin-ext\n * U+014D LATIN SMALL LETTER O WITH MACRON: try adding latin-ext\n * U+014E LATIN CAPITAL LETTER O WITH BREVE: try adding latin-ext\n * U+014F LATIN SMALL LETTER O WITH BREVE: try adding latin-ext\n * U+0150 LATIN CAPITAL LETTER O WITH DOUBLE ACUTE: try adding latin-ext\n * U+0151 LATIN SMALL LETTER O WITH DOUBLE ACUTE: try adding latin-ext\n * U+0154 LATIN CAPITAL LETTER R WITH ACUTE: try adding latin-ext\n * U+0155 LATIN SMALL LETTER R WITH ACUTE: try adding latin-ext\n * U+0156 LATIN CAPITAL LETTER R WITH CEDILLA: try adding latin-ext\n * U+0157 LATIN SMALL LETTER R WITH CEDILLA: try adding latin-ext\n * U+0158 LATIN CAPITAL LETTER R WITH CARON: try adding latin-ext\n * U+0159 LATIN SMALL LETTER R WITH CARON: try adding latin-ext\n * U+015A LATIN CAPITAL LETTER S WITH ACUTE: try adding latin-ext\n * U+015B LATIN SMALL LETTER S WITH ACUTE: try adding latin-ext\n * U+015C LATIN CAPITAL LETTER S WITH CIRCUMFLEX: try adding latin-ext\n * U+015D LATIN SMALL LETTER S WITH CIRCUMFLEX: try adding latin-ext\n * U+015E LATIN CAPITAL LETTER S WITH CEDILLA: try adding latin-ext\n * U+015F LATIN SMALL LETTER S WITH CEDILLA: try adding latin-ext\n * U+0160 LATIN CAPITAL LETTER S WITH CARON: try adding latin-ext\n * U+0161 LATIN SMALL LETTER S WITH CARON: try adding latin-ext\n * U+0162 LATIN CAPITAL LETTER T WITH CEDILLA: try adding latin-ext\n * U+0163 LATIN SMALL LETTER T WITH CEDILLA: try adding latin-ext\n * U+0164 LATIN CAPITAL LETTER T WITH CARON: try adding latin-ext\n * U+0165 LATIN SMALL LETTER T WITH CARON: try adding latin-ext\n * U+0166 LATIN CAPITAL LETTER T WITH STROKE: try adding latin-ext\n * U+0167 LATIN SMALL LETTER T WITH STROKE: try adding latin-ext\n * U+0168 LATIN CAPITAL LETTER U WITH TILDE: try adding one of: vietnamese, latin-ext\n * U+0169 LATIN SMALL LETTER U WITH TILDE: try adding one of: vietnamese, latin-ext\n * U+016A LATIN CAPITAL LETTER U WITH MACRON: try adding latin-ext\n * U+016B LATIN SMALL LETTER U WITH MACRON: try adding latin-ext\n * U+016C LATIN CAPITAL LETTER U WITH BREVE: try adding latin-ext\n * U+016D LATIN SMALL LETTER U WITH BREVE: try adding latin-ext\n * U+016E LATIN CAPITAL LETTER U WITH RING ABOVE: try adding latin-ext\n * U+016F LATIN SMALL LETTER U WITH RING ABOVE: try adding latin-ext\n * U+0170 LATIN CAPITAL LETTER U WITH DOUBLE ACUTE: try adding latin-ext\n * U+0171 LATIN SMALL LETTER U WITH DOUBLE ACUTE: try adding latin-ext\n * U+0172 LATIN CAPITAL LETTER U WITH OGONEK: try adding latin-ext\n * U+0173 LATIN SMALL LETTER U WITH OGONEK: try adding latin-ext\n * U+0174 LATIN CAPITAL LETTER W WITH CIRCUMFLEX: try adding latin-ext\n * U+0175 LATIN SMALL LETTER W WITH CIRCUMFLEX: try adding latin-ext\n * U+0176 LATIN CAPITAL LETTER Y WITH CIRCUMFLEX: try adding latin-ext\n * U+0177 LATIN SMALL LETTER Y WITH CIRCUMFLEX: try adding latin-ext\n * U+0178 LATIN CAPITAL LETTER Y WITH DIAERESIS: try adding latin-ext\n * U+0179 LATIN CAPITAL LETTER Z WITH ACUTE: try adding latin-ext\n * U+017A LATIN SMALL LETTER Z WITH ACUTE: try adding latin-ext\n * U+017B LATIN CAPITAL LETTER Z WITH DOT ABOVE: try adding latin-ext\n * U+017C LATIN SMALL LETTER Z WITH DOT ABOVE: try adding latin-ext\n * U+017D LATIN CAPITAL LETTER Z WITH CARON: try adding latin-ext\n * U+017E LATIN SMALL LETTER Z WITH CARON: try adding latin-ext\n * U+017F LATIN SMALL LETTER LONG S: try adding latin-ext\n * U+0192 LATIN SMALL LETTER F WITH HOOK: try adding latin-ext\n * U+01A0 LATIN CAPITAL LETTER O WITH HORN: try adding one of: vietnamese, latin-ext\n * U+01A1 LATIN SMALL LETTER O WITH HORN: try adding one of: vietnamese, latin-ext\n * U+01AF LATIN CAPITAL LETTER U WITH HORN: try adding one of: vietnamese, latin-ext\n * U+01B0 LATIN SMALL LETTER U WITH HORN: try adding one of: vietnamese, latin-ext\n * U+01B7 LATIN CAPITAL LETTER EZH: try adding latin-ext\n * U+01F4 LATIN CAPITAL LETTER G WITH ACUTE: try adding latin-ext\n * U+01F5 LATIN SMALL LETTER G WITH ACUTE: try adding latin-ext\n * U+01FA LATIN CAPITAL LETTER A WITH RING ABOVE AND ACUTE: try adding latin-ext\n * U+01FB LATIN SMALL LETTER A WITH RING ABOVE AND ACUTE: try adding latin-ext\n * U+01FC LATIN CAPITAL LETTER AE WITH ACUTE: try adding latin-ext\n * U+01FD LATIN SMALL LETTER AE WITH ACUTE: try adding latin-ext\n * U+01FE LATIN CAPITAL LETTER O WITH STROKE AND ACUTE: try adding latin-ext\n * U+01FF LATIN SMALL LETTER O WITH STROKE AND ACUTE: try adding latin-ext\n * U+0218 LATIN CAPITAL LETTER S WITH COMMA BELOW: try adding latin-ext\n * U+0219 LATIN SMALL LETTER S WITH COMMA BELOW: try adding latin-ext\n * U+0292 LATIN SMALL LETTER EZH: not included in any glyphset definition\n * U+02C7 CARON: try adding one of: canadian-aboriginal, tifinagh\n * U+02D8 BREVE: try adding canadian-aboriginal\n * U+02D9 DOT ABOVE: try adding canadian-aboriginal\n * U+02DB OGONEK: try adding canadian-aboriginal\n * U+02DD DOUBLE ACUTE ACCENT: not included in any glyphset definition\n * U+0300 COMBINING GRAVE ACCENT: try adding one of: tai-le, cherokee, coptic\n * U+0301 COMBINING ACUTE ACCENT: try adding one of: tai-le, tifinagh, cherokee, coptic\n * U+0303 COMBINING TILDE: not included in any glyphset definition\n * U+0308 COMBINING DIAERESIS: try adding one of: gothic, tai-le, coptic\n * U+0309 COMBINING HOOK ABOVE: try adding tifinagh\n * U+0312 COMBINING TURNED COMMA ABOVE: not included in any glyphset definition\n * U+0313 COMBINING COMMA ABOVE: not included in any glyphset definition\n * U+0314 COMBINING REVERSED COMMA ABOVE: not included in any glyphset definition\n * U+0323 COMBINING DOT BELOW: try adding one of: tifinagh, cherokee, coptic, malayalam\n * U+0326 COMBINING COMMA BELOW: not included in any glyphset definition\n * U+0327 COMBINING CEDILLA: not included in any glyphset definition\n * U+0328 COMBINING OGONEK: not included in any glyphset definition\n * U+0342 COMBINING GREEK PERISPOMENI: not included in any glyphset definition\n * U+0343 COMBINING GREEK KORONIS: not included in any glyphset definition\n * U+0345 COMBINING GREEK YPOGEGRAMMENI: not included in any glyphset definition\n * U+04D2 CYRILLIC CAPITAL LETTER A WITH DIAERESIS: try adding cyrillic-ext\n * U+04D3 CYRILLIC SMALL LETTER A WITH DIAERESIS: try adding cyrillic-ext\n * U+04D4 CYRILLIC CAPITAL LIGATURE A IE: try adding cyrillic-ext\n * U+04E6 CYRILLIC CAPITAL LETTER O WITH DIAERESIS: try adding cyrillic-ext\n * U+04E7 CYRILLIC SMALL LETTER O WITH DIAERESIS: try adding cyrillic-ext\n * U+1E80 LATIN CAPITAL LETTER W WITH GRAVE: try adding latin-ext\n * U+1E81 LATIN SMALL LETTER W WITH GRAVE: try adding latin-ext\n * U+1E82 LATIN CAPITAL LETTER W WITH ACUTE: try adding latin-ext\n * U+1E83 LATIN SMALL LETTER W WITH ACUTE: try adding latin-ext\n * U+1E84 LATIN CAPITAL LETTER W WITH DIAERESIS: try adding latin-ext\n * U+1E85 LATIN SMALL LETTER W WITH DIAERESIS: try adding latin-ext\n * U+1EA0 LATIN CAPITAL LETTER A WITH DOT BELOW: try adding vietnamese\n * U+1EA1 LATIN SMALL LETTER A WITH DOT BELOW: try adding vietnamese\n * U+1EA2 LATIN CAPITAL LETTER A WITH HOOK ABOVE: try adding vietnamese\n * U+1EA3 LATIN SMALL LETTER A WITH HOOK ABOVE: try adding vietnamese\n * U+1EA4 LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND ACUTE: try adding vietnamese\n * U+1EA5 LATIN SMALL LETTER A WITH CIRCUMFLEX AND ACUTE: try adding vietnamese\n * U+1EA6 LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND GRAVE: try adding vietnamese\n * U+1EA7 LATIN SMALL LETTER A WITH CIRCUMFLEX AND GRAVE: try adding vietnamese\n * U+1EA8 LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND HOOK ABOVE: try adding vietnamese\n * U+1EA9 LATIN SMALL LETTER A WITH CIRCUMFLEX AND HOOK ABOVE: try adding vietnamese\n * U+1EAA LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND TILDE: try adding vietnamese\n * U+1EAB LATIN SMALL LETTER A WITH CIRCUMFLEX AND TILDE: try adding vietnamese\n * U+1EAC LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND DOT BELOW: try adding vietnamese\n * U+1EAD LATIN SMALL LETTER A WITH CIRCUMFLEX AND DOT BELOW: try adding vietnamese\n * U+1EAE LATIN CAPITAL LETTER A WITH BREVE AND ACUTE: try adding vietnamese\n * U+1EAF LATIN SMALL LETTER A WITH BREVE AND ACUTE: try adding vietnamese\n * U+1EB0 LATIN CAPITAL LETTER A WITH BREVE AND GRAVE: try adding vietnamese\n * U+1EB1 LATIN SMALL LETTER A WITH BREVE AND GRAVE: try adding vietnamese\n * U+1EB2 LATIN CAPITAL LETTER A WITH BREVE AND HOOK ABOVE: try adding vietnamese\n * U+1EB3 LATIN SMALL LETTER A WITH BREVE AND HOOK ABOVE: try adding vietnamese\n * U+1EB4 LATIN CAPITAL LETTER A WITH BREVE AND TILDE: try adding vietnamese\n * U+1EB5 LATIN SMALL LETTER A WITH BREVE AND TILDE: try adding vietnamese\n * U+1EB6 LATIN CAPITAL LETTER A WITH BREVE AND DOT BELOW: try adding vietnamese\n * U+1EB7 LATIN SMALL LETTER A WITH BREVE AND DOT BELOW: try adding vietnamese\n * U+1EB8 LATIN CAPITAL LETTER E WITH DOT BELOW: try adding vietnamese\n * U+1EB9 LATIN SMALL LETTER E WITH DOT BELOW: try adding vietnamese\n * U+1EBA LATIN CAPITAL LETTER E WITH HOOK ABOVE: try adding vietnamese\n * U+1EBB LATIN SMALL LETTER E WITH HOOK ABOVE: try adding vietnamese\n * U+1EBC LATIN CAPITAL LETTER E WITH TILDE: try adding vietnamese\n * U+1EBD LATIN SMALL LETTER E WITH TILDE: try adding vietnamese\n * U+1EBE LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND ACUTE: try adding vietnamese\n * U+1EBF LATIN SMALL LETTER E WITH CIRCUMFLEX AND ACUTE: try adding vietnamese\n * U+1EC0 LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND GRAVE: try adding vietnamese\n * U+1EC1 LATIN SMALL LETTER E WITH CIRCUMFLEX AND GRAVE: try adding vietnamese\n * U+1EC2 LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND HOOK ABOVE: try adding vietnamese\n * U+1EC3 LATIN SMALL LETTER E WITH CIRCUMFLEX AND HOOK ABOVE: try adding vietnamese\n * U+1EC4 LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND TILDE: try adding vietnamese\n * U+1EC5 LATIN SMALL LETTER E WITH CIRCUMFLEX AND TILDE: try adding vietnamese\n * U+1EC6 LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND DOT BELOW: try adding vietnamese\n * U+1EC7 LATIN SMALL LETTER E WITH CIRCUMFLEX AND DOT BELOW: try adding vietnamese\n * U+1EC8 LATIN CAPITAL LETTER I WITH HOOK ABOVE: try adding vietnamese\n * U+1EC9 LATIN SMALL LETTER I WITH HOOK ABOVE: try adding vietnamese\n * U+1ECA LATIN CAPITAL LETTER I WITH DOT BELOW: try adding vietnamese\n * U+1ECB LATIN SMALL LETTER I WITH DOT BELOW: try adding vietnamese\n * U+1ECC LATIN CAPITAL LETTER O WITH DOT BELOW: try adding vietnamese\n * U+1ECD LATIN SMALL LETTER O WITH DOT BELOW: try adding vietnamese\n * U+1ECE LATIN CAPITAL LETTER O WITH HOOK ABOVE: try adding vietnamese\n * U+1ECF LATIN SMALL LETTER O WITH HOOK ABOVE: try adding vietnamese\n * U+1ED0 LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND ACUTE: try adding vietnamese\n * U+1ED1 LATIN SMALL LETTER O WITH CIRCUMFLEX AND ACUTE: try adding vietnamese\n * U+1ED2 LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND GRAVE: try adding vietnamese\n * U+1ED3 LATIN SMALL LETTER O WITH CIRCUMFLEX AND GRAVE: try adding vietnamese\n * U+1ED4 LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND HOOK ABOVE: try adding vietnamese\n * U+1ED5 LATIN SMALL LETTER O WITH CIRCUMFLEX AND HOOK ABOVE: try adding vietnamese\n * U+1ED6 LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND TILDE: try adding vietnamese\n * U+1ED7 LATIN SMALL LETTER O WITH CIRCUMFLEX AND TILDE: try adding vietnamese\n * U+1ED8 LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND DOT BELOW: try adding vietnamese\n * U+1ED9 LATIN SMALL LETTER O WITH CIRCUMFLEX AND DOT BELOW: try adding vietnamese\n * U+1EDA LATIN CAPITAL LETTER O WITH HORN AND ACUTE: try adding vietnamese\n * U+1EDB LATIN SMALL LETTER O WITH HORN AND ACUTE: try adding vietnamese\n * U+1EDC LATIN CAPITAL LETTER O WITH HORN AND GRAVE: try adding vietnamese\n * U+1EDD LATIN SMALL LETTER O WITH HORN AND GRAVE: try adding vietnamese\n * U+1EDE LATIN CAPITAL LETTER O WITH HORN AND HOOK ABOVE: try adding vietnamese\n * U+1EDF LATIN SMALL LETTER O WITH HORN AND HOOK ABOVE: try adding vietnamese\n * U+1EE0 LATIN CAPITAL LETTER O WITH HORN AND TILDE: try adding vietnamese\n * U+1EE1 LATIN SMALL LETTER O WITH HORN AND TILDE: try adding vietnamese\n * U+1EE2 LATIN CAPITAL LETTER O WITH HORN AND DOT BELOW: try adding vietnamese\n * U+1EE3 LATIN SMALL LETTER O WITH HORN AND DOT BELOW: try adding vietnamese\n * U+1EE4 LATIN CAPITAL LETTER U WITH DOT BELOW: try adding vietnamese\n * U+1EE5 LATIN SMALL LETTER U WITH DOT BELOW: try adding vietnamese\n * U+1EE6 LATIN CAPITAL LETTER U WITH HOOK ABOVE: try adding vietnamese\n * U+1EE7 LATIN SMALL LETTER U WITH HOOK ABOVE: try adding vietnamese\n * U+1EE8 LATIN CAPITAL LETTER U WITH HORN AND ACUTE: try adding vietnamese\n * U+1EE9 LATIN SMALL LETTER U WITH HORN AND ACUTE: try adding vietnamese\n * U+1EEA LATIN CAPITAL LETTER U WITH HORN AND GRAVE: try adding vietnamese\n * U+1EEB LATIN SMALL LETTER U WITH HORN AND GRAVE: try adding vietnamese\n * U+1EEC LATIN CAPITAL LETTER U WITH HORN AND HOOK ABOVE: try adding vietnamese\n * U+1EED LATIN SMALL LETTER U WITH HORN AND HOOK ABOVE: try adding vietnamese\n * U+1EEE LATIN CAPITAL LETTER U WITH HORN AND TILDE: try adding vietnamese\n * U+1EEF LATIN SMALL LETTER U WITH HORN AND TILDE: try adding vietnamese\n * U+1EF0 LATIN CAPITAL LETTER U WITH HORN AND DOT BELOW: try adding vietnamese\n * U+1EF1 LATIN SMALL LETTER U WITH HORN AND DOT BELOW: try adding vietnamese\n * U+1EF2 LATIN CAPITAL LETTER Y WITH GRAVE: try adding one of: vietnamese, latin-ext\n * U+1EF3 LATIN SMALL LETTER Y WITH GRAVE: try adding one of: vietnamese, latin-ext\n * U+1EF4 LATIN CAPITAL LETTER Y WITH DOT BELOW: try adding one of: vietnamese, latin-ext\n * U+1EF5 LATIN SMALL LETTER Y WITH DOT BELOW: try adding one of: vietnamese, latin-ext\n * U+1EF6 LATIN CAPITAL LETTER Y WITH HOOK ABOVE: try adding one of: vietnamese, latin-ext\n * U+1EF7 LATIN SMALL LETTER Y WITH HOOK ABOVE: try adding one of: vietnamese, latin-ext\n * U+1EF8 LATIN CAPITAL LETTER Y WITH TILDE: try adding one of: vietnamese, latin-ext\n * U+1EF9 LATIN SMALL LETTER Y WITH TILDE: try adding one of: vietnamese, latin-ext\n * U+1F00 GREEK SMALL LETTER ALPHA WITH PSILI: try adding greek-ext\n * U+1F01 GREEK SMALL LETTER ALPHA WITH DASIA: try adding greek-ext\n * U+1F02 GREEK SMALL LETTER ALPHA WITH PSILI AND VARIA: try adding greek-ext\n * U+1F03 GREEK SMALL LETTER ALPHA WITH DASIA AND VARIA: try adding greek-ext\n * U+1F04 GREEK SMALL LETTER ALPHA WITH PSILI AND OXIA: try adding greek-ext\n * U+1F05 GREEK SMALL LETTER ALPHA WITH DASIA AND OXIA: try adding greek-ext\n * U+1F06 GREEK SMALL LETTER ALPHA WITH PSILI AND PERISPOMENI: try adding greek-ext\n * U+1F07 GREEK SMALL LETTER ALPHA WITH DASIA AND PERISPOMENI: try adding greek-ext\n * U+1F08 GREEK CAPITAL LETTER ALPHA WITH PSILI: try adding greek-ext\n * U+1F09 GREEK CAPITAL LETTER ALPHA WITH DASIA: try adding greek-ext\n * U+1F0A GREEK CAPITAL LETTER ALPHA WITH PSILI AND VARIA: try adding greek-ext\n * U+1F0B GREEK CAPITAL LETTER ALPHA WITH DASIA AND VARIA: try adding greek-ext\n * U+1F0C GREEK CAPITAL LETTER ALPHA WITH PSILI AND OXIA: try adding greek-ext\n * U+1F0D GREEK CAPITAL LETTER ALPHA WITH DASIA AND OXIA: try adding greek-ext\n * U+1F0E GREEK CAPITAL LETTER ALPHA WITH PSILI AND PERISPOMENI: try adding greek-ext\n * U+1F0F GREEK CAPITAL LETTER ALPHA WITH DASIA AND PERISPOMENI: try adding greek-ext\n * U+1F10 GREEK SMALL LETTER EPSILON WITH PSILI: try adding greek-ext\n * U+1F11 GREEK SMALL LETTER EPSILON WITH DASIA: try adding greek-ext\n * U+1F12 GREEK SMALL LETTER EPSILON WITH PSILI AND VARIA: try adding greek-ext\n * U+1F13 GREEK SMALL LETTER EPSILON WITH DASIA AND VARIA: try adding greek-ext\n * U+1F14 GREEK SMALL LETTER EPSILON WITH PSILI AND OXIA: try adding greek-ext\n * U+1F15 GREEK SMALL LETTER EPSILON WITH DASIA AND OXIA: try adding greek-ext\n * U+1F18 GREEK CAPITAL LETTER EPSILON WITH PSILI: try adding greek-ext\n * U+1F19 GREEK CAPITAL LETTER EPSILON WITH DASIA: try adding greek-ext\n * U+1F1A GREEK CAPITAL LETTER EPSILON WITH PSILI AND VARIA: try adding greek-ext\n * U+1F1B GREEK CAPITAL LETTER EPSILON WITH DASIA AND VARIA: try adding greek-ext\n * U+1F1C GREEK CAPITAL LETTER EPSILON WITH PSILI AND OXIA: try adding greek-ext\n * U+1F1D GREEK CAPITAL LETTER EPSILON WITH DASIA AND OXIA: try adding greek-ext\n * U+1F20 GREEK SMALL LETTER ETA WITH PSILI: try adding greek-ext\n * U+1F21 GREEK SMALL LETTER ETA WITH DASIA: try adding greek-ext\n * U+1F22 GREEK SMALL LETTER ETA WITH PSILI AND VARIA: try adding greek-ext\n * U+1F23 GREEK SMALL LETTER ETA WITH DASIA AND VARIA: try adding greek-ext\n * U+1F24 GREEK SMALL LETTER ETA WITH PSILI AND OXIA: try adding greek-ext\n * U+1F25 GREEK SMALL LETTER ETA WITH DASIA AND OXIA: try adding greek-ext\n * U+1F26 GREEK SMALL LETTER ETA WITH PSILI AND PERISPOMENI: try adding greek-ext\n * U+1F27 GREEK SMALL LETTER ETA WITH DASIA AND PERISPOMENI: try adding greek-ext\n * U+1F28 GREEK CAPITAL LETTER ETA WITH PSILI: try adding greek-ext\n * U+1F29 GREEK CAPITAL LETTER ETA WITH DASIA: try adding greek-ext\n * U+1F2A GREEK CAPITAL LETTER ETA WITH PSILI AND VARIA: try adding greek-ext\n * U+1F2B GREEK CAPITAL LETTER ETA WITH DASIA AND VARIA: try adding greek-ext\n * U+1F2C GREEK CAPITAL LETTER ETA WITH PSILI AND OXIA: try adding greek-ext\n * U+1F2D GREEK CAPITAL LETTER ETA WITH DASIA AND OXIA: try adding greek-ext\n * U+1F2E GREEK CAPITAL LETTER ETA WITH PSILI AND PERISPOMENI: try adding greek-ext\n * U+1F2F GREEK CAPITAL LETTER ETA WITH DASIA AND PERISPOMENI: try adding greek-ext\n * U+1F30 GREEK SMALL LETTER IOTA WITH PSILI: try adding greek-ext\n * U+1F31 GREEK SMALL LETTER IOTA WITH DASIA: try adding greek-ext\n * U+1F32 GREEK SMALL LETTER IOTA WITH PSILI AND VARIA: try adding greek-ext\n * U+1F33 GREEK SMALL LETTER IOTA WITH DASIA AND VARIA: try adding greek-ext\n * U+1F34 GREEK SMALL LETTER IOTA WITH PSILI AND OXIA: try adding greek-ext\n * U+1F35 GREEK SMALL LETTER IOTA WITH DASIA AND OXIA: try adding greek-ext\n * U+1F36 GREEK SMALL LETTER IOTA WITH PSILI AND PERISPOMENI: try adding greek-ext\n * U+1F37 GREEK SMALL LETTER IOTA WITH DASIA AND PERISPOMENI: try adding greek-ext\n * U+1F38 GREEK CAPITAL LETTER IOTA WITH PSILI: try adding greek-ext\n * U+1F39 GREEK CAPITAL LETTER IOTA WITH DASIA: try adding greek-ext\n * U+1F3A GREEK CAPITAL LETTER IOTA WITH PSILI AND VARIA: try adding greek-ext\n * U+1F3B GREEK CAPITAL LETTER IOTA WITH DASIA AND VARIA: try adding greek-ext\n * U+1F3C GREEK CAPITAL LETTER IOTA WITH PSILI AND OXIA: try adding greek-ext\n * U+1F3D GREEK CAPITAL LETTER IOTA WITH DASIA AND OXIA: try adding greek-ext\n * U+1F3E GREEK CAPITAL LETTER IOTA WITH PSILI AND PERISPOMENI: try adding greek-ext\n * U+1F3F GREEK CAPITAL LETTER IOTA WITH DASIA AND PERISPOMENI: try adding greek-ext\n * U+1F40 GREEK SMALL LETTER OMICRON WITH PSILI: try adding greek-ext\n * U+1F41 GREEK SMALL LETTER OMICRON WITH DASIA: try adding greek-ext\n * U+1F42 GREEK SMALL LETTER OMICRON WITH PSILI AND VARIA: try adding greek-ext\n * U+1F43 GREEK SMALL LETTER OMICRON WITH DASIA AND VARIA: try adding greek-ext\n * U+1F44 GREEK SMALL LETTER OMICRON WITH PSILI AND OXIA: try adding greek-ext\n * U+1F45 GREEK SMALL LETTER OMICRON WITH DASIA AND OXIA: try adding greek-ext\n * U+1F48 GREEK CAPITAL LETTER OMICRON WITH PSILI: try adding greek-ext\n * U+1F49 GREEK CAPITAL LETTER OMICRON WITH DASIA: try adding greek-ext\n * U+1F4A GREEK CAPITAL LETTER OMICRON WITH PSILI AND VARIA: try adding greek-ext\n * U+1F4B GREEK CAPITAL LETTER OMICRON WITH DASIA AND VARIA: try adding greek-ext\n * U+1F4C GREEK CAPITAL LETTER OMICRON WITH PSILI AND OXIA: try adding greek-ext\n * U+1F4D GREEK CAPITAL LETTER OMICRON WITH DASIA AND OXIA: try adding greek-ext\n * U+1F50 GREEK SMALL LETTER UPSILON WITH PSILI: try adding greek-ext\n * U+1F51 GREEK SMALL LETTER UPSILON WITH DASIA: try adding greek-ext\n * U+1F52 GREEK SMALL LETTER UPSILON WITH PSILI AND VARIA: try adding greek-ext\n * U+1F53 GREEK SMALL LETTER UPSILON WITH DASIA AND VARIA: try adding greek-ext\n * U+1F54 GREEK SMALL LETTER UPSILON WITH PSILI AND OXIA: try adding greek-ext\n * U+1F55 GREEK SMALL LETTER UPSILON WITH DASIA AND OXIA: try adding greek-ext\n * U+1F56 GREEK SMALL LETTER UPSILON WITH PSILI AND PERISPOMENI: try adding greek-ext\n * U+1F57 GREEK SMALL LETTER UPSILON WITH DASIA AND PERISPOMENI: try adding greek-ext\n * U+1F59 GREEK CAPITAL LETTER UPSILON WITH DASIA: try adding greek-ext\n * U+1F5B GREEK CAPITAL LETTER UPSILON WITH DASIA AND VARIA: try adding greek-ext\n * U+1F5D GREEK CAPITAL LETTER UPSILON WITH DASIA AND OXIA: try adding greek-ext\n * U+1F5F GREEK CAPITAL LETTER UPSILON WITH DASIA AND PERISPOMENI: try adding greek-ext\n * U+1F60 GREEK SMALL LETTER OMEGA WITH PSILI: try adding greek-ext\n * U+1F61 GREEK SMALL LETTER OMEGA WITH DASIA: try adding greek-ext\n * U+1F62 GREEK SMALL LETTER OMEGA WITH PSILI AND VARIA: try adding greek-ext\n * U+1F63 GREEK SMALL LETTER OMEGA WITH DASIA AND VARIA: try adding greek-ext\n * U+1F64 GREEK SMALL LETTER OMEGA WITH PSILI AND OXIA: try adding greek-ext\n * U+1F65 GREEK SMALL LETTER OMEGA WITH DASIA AND OXIA: try adding greek-ext\n * U+1F66 GREEK SMALL LETTER OMEGA WITH PSILI AND PERISPOMENI: try adding greek-ext\n * U+1F67 GREEK SMALL LETTER OMEGA WITH DASIA AND PERISPOMENI: try adding greek-ext\n * U+1F68 GREEK CAPITAL LETTER OMEGA WITH PSILI: try adding greek-ext\n * U+1F69 GREEK CAPITAL LETTER OMEGA WITH DASIA: try adding greek-ext\n * U+1F6A GREEK CAPITAL LETTER OMEGA WITH PSILI AND VARIA: try adding greek-ext\n * U+1F6B GREEK CAPITAL LETTER OMEGA WITH DASIA AND VARIA: try adding greek-ext\n * U+1F6C GREEK CAPITAL LETTER OMEGA WITH PSILI AND OXIA: try adding greek-ext\n * U+1F6D GREEK CAPITAL LETTER OMEGA WITH DASIA AND OXIA: try adding greek-ext\n * U+1F6E GREEK CAPITAL LETTER OMEGA WITH PSILI AND PERISPOMENI: try adding greek-ext\n * U+1F6F GREEK CAPITAL LETTER OMEGA WITH DASIA AND PERISPOMENI: try adding greek-ext\n * U+1F70 GREEK SMALL LETTER ALPHA WITH VARIA: try adding greek-ext\n * U+1F71 GREEK SMALL LETTER ALPHA WITH OXIA: try adding greek-ext\n * U+1F72 GREEK SMALL LETTER EPSILON WITH VARIA: try adding greek-ext\n * U+1F73 GREEK SMALL LETTER EPSILON WITH OXIA: try adding greek-ext\n * U+1F74 GREEK SMALL LETTER ETA WITH VARIA: try adding greek-ext\n * U+1F75 GREEK SMALL LETTER ETA WITH OXIA: try adding greek-ext\n * U+1F76 GREEK SMALL LETTER IOTA WITH VARIA: try adding greek-ext\n * U+1F77 GREEK SMALL LETTER IOTA WITH OXIA: try adding greek-ext\n * U+1F78 GREEK SMALL LETTER OMICRON WITH VARIA: try adding greek-ext\n * U+1F79 GREEK SMALL LETTER OMICRON WITH OXIA: try adding greek-ext\n * U+1F7A GREEK SMALL LETTER UPSILON WITH VARIA: try adding greek-ext\n * U+1F7B GREEK SMALL LETTER UPSILON WITH OXIA: try adding greek-ext\n * U+1F7C GREEK SMALL LETTER OMEGA WITH VARIA: try adding greek-ext\n * U+1F7D GREEK SMALL LETTER OMEGA WITH OXIA: try adding greek-ext\n * U+1F80 GREEK SMALL LETTER ALPHA WITH PSILI AND YPOGEGRAMMENI: try adding greek-ext\n * U+1F81 GREEK SMALL LETTER ALPHA WITH DASIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1F82 GREEK SMALL LETTER ALPHA WITH PSILI AND VARIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1F83 GREEK SMALL LETTER ALPHA WITH DASIA AND VARIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1F84 GREEK SMALL LETTER ALPHA WITH PSILI AND OXIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1F85 GREEK SMALL LETTER ALPHA WITH DASIA AND OXIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1F86 GREEK SMALL LETTER ALPHA WITH PSILI AND PERISPOMENI AND YPOGEGRAMMENI: try adding greek-ext\n * U+1F87 GREEK SMALL LETTER ALPHA WITH DASIA AND PERISPOMENI AND YPOGEGRAMMENI: try adding greek-ext\n * U+1F88 GREEK CAPITAL LETTER ALPHA WITH PSILI AND PROSGEGRAMMENI: try adding greek-ext\n * U+1F89 GREEK CAPITAL LETTER ALPHA WITH DASIA AND PROSGEGRAMMENI: try adding greek-ext\n * U+1F8A GREEK CAPITAL LETTER ALPHA WITH PSILI AND VARIA AND PROSGEGRAMMENI: try adding greek-ext\n * U+1F8B GREEK CAPITAL LETTER ALPHA WITH DASIA AND VARIA AND PROSGEGRAMMENI: try adding greek-ext\n * U+1F8C GREEK CAPITAL LETTER ALPHA WITH PSILI AND OXIA AND PROSGEGRAMMENI: try adding greek-ext\n * U+1F8D GREEK CAPITAL LETTER ALPHA WITH DASIA AND OXIA AND PROSGEGRAMMENI: try adding greek-ext\n * U+1F8E GREEK CAPITAL LETTER ALPHA WITH PSILI AND PERISPOMENI AND PROSGEGRAMMENI: try adding greek-ext\n * U+1F8F GREEK CAPITAL LETTER ALPHA WITH DASIA AND PERISPOMENI AND PROSGEGRAMMENI: try adding greek-ext\n * U+1F90 GREEK SMALL LETTER ETA WITH PSILI AND YPOGEGRAMMENI: try adding greek-ext\n * U+1F91 GREEK SMALL LETTER ETA WITH DASIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1F92 GREEK SMALL LETTER ETA WITH PSILI AND VARIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1F93 GREEK SMALL LETTER ETA WITH DASIA AND VARIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1F94 GREEK SMALL LETTER ETA WITH PSILI AND OXIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1F95 GREEK SMALL LETTER ETA WITH DASIA AND OXIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1F96 GREEK SMALL LETTER ETA WITH PSILI AND PERISPOMENI AND YPOGEGRAMMENI: try adding greek-ext\n * U+1F97 GREEK SMALL LETTER ETA WITH DASIA AND PERISPOMENI AND YPOGEGRAMMENI: try adding greek-ext\n * U+1F98 GREEK CAPITAL LETTER ETA WITH PSILI AND PROSGEGRAMMENI: try adding greek-ext\n * U+1F99 GREEK CAPITAL LETTER ETA WITH DASIA AND PROSGEGRAMMENI: try adding greek-ext\n * U+1F9A GREEK CAPITAL LETTER ETA WITH PSILI AND VARIA AND PROSGEGRAMMENI: try adding greek-ext\n * U+1F9B GREEK CAPITAL LETTER ETA WITH DASIA AND VARIA AND PROSGEGRAMMENI: try adding greek-ext\n * U+1F9C GREEK CAPITAL LETTER ETA WITH PSILI AND OXIA AND PROSGEGRAMMENI: try adding greek-ext\n * U+1F9D GREEK CAPITAL LETTER ETA WITH DASIA AND OXIA AND PROSGEGRAMMENI: try adding greek-ext\n * U+1F9E GREEK CAPITAL LETTER ETA WITH PSILI AND PERISPOMENI AND PROSGEGRAMMENI: try adding greek-ext\n * U+1F9F GREEK CAPITAL LETTER ETA WITH DASIA AND PERISPOMENI AND PROSGEGRAMMENI: try adding greek-ext\n * U+1FA0 GREEK SMALL LETTER OMEGA WITH PSILI AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FA1 GREEK SMALL LETTER OMEGA WITH DASIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FA2 GREEK SMALL LETTER OMEGA WITH PSILI AND VARIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FA3 GREEK SMALL LETTER OMEGA WITH DASIA AND VARIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FA4 GREEK SMALL LETTER OMEGA WITH PSILI AND OXIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FA5 GREEK SMALL LETTER OMEGA WITH DASIA AND OXIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FA6 GREEK SMALL LETTER OMEGA WITH PSILI AND PERISPOMENI AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FA7 GREEK SMALL LETTER OMEGA WITH DASIA AND PERISPOMENI AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FA8 GREEK CAPITAL LETTER OMEGA WITH PSILI AND PROSGEGRAMMENI: try adding greek-ext\n * U+1FA9 GREEK CAPITAL LETTER OMEGA WITH DASIA AND PROSGEGRAMMENI: try adding greek-ext\n * U+1FAA GREEK CAPITAL LETTER OMEGA WITH PSILI AND VARIA AND PROSGEGRAMMENI: try adding greek-ext\n * U+1FAB GREEK CAPITAL LETTER OMEGA WITH DASIA AND VARIA AND PROSGEGRAMMENI: try adding greek-ext\n * U+1FAC GREEK CAPITAL LETTER OMEGA WITH PSILI AND OXIA AND PROSGEGRAMMENI: try adding greek-ext\n * U+1FAD GREEK CAPITAL LETTER OMEGA WITH DASIA AND OXIA AND PROSGEGRAMMENI: try adding greek-ext\n * U+1FAE GREEK CAPITAL LETTER OMEGA WITH PSILI AND PERISPOMENI AND PROSGEGRAMMENI: try adding greek-ext\n * U+1FAF GREEK CAPITAL LETTER OMEGA WITH DASIA AND PERISPOMENI AND PROSGEGRAMMENI: try adding greek-ext\n * U+1FB0 GREEK SMALL LETTER ALPHA WITH VRACHY: try adding greek-ext\n * U+1FB1 GREEK SMALL LETTER ALPHA WITH MACRON: try adding greek-ext\n * U+1FB2 GREEK SMALL LETTER ALPHA WITH VARIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FB3 GREEK SMALL LETTER ALPHA WITH YPOGEGRAMMENI: try adding greek-ext\n * U+1FB4 GREEK SMALL LETTER ALPHA WITH OXIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FB6 GREEK SMALL LETTER ALPHA WITH PERISPOMENI: try adding greek-ext\n * U+1FB7 GREEK SMALL LETTER ALPHA WITH PERISPOMENI AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FB8 GREEK CAPITAL LETTER ALPHA WITH VRACHY: try adding greek-ext\n * U+1FB9 GREEK CAPITAL LETTER ALPHA WITH MACRON: try adding greek-ext\n * U+1FBA GREEK CAPITAL LETTER ALPHA WITH VARIA: try adding greek-ext\n * U+1FBB GREEK CAPITAL LETTER ALPHA WITH OXIA: try adding greek-ext\n * U+1FBC GREEK CAPITAL LETTER ALPHA WITH PROSGEGRAMMENI: try adding greek-ext\n * U+1FBD GREEK KORONIS: try adding greek-ext\n * U+1FBE GREEK PROSGEGRAMMENI: try adding greek-ext\n * U+1FBF GREEK PSILI: try adding greek-ext\n * U+1FC0 GREEK PERISPOMENI: try adding greek-ext\n * U+1FC1 GREEK DIALYTIKA AND PERISPOMENI: try adding greek-ext\n * U+1FC2 GREEK SMALL LETTER ETA WITH VARIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FC3 GREEK SMALL LETTER ETA WITH YPOGEGRAMMENI: try adding greek-ext\n * U+1FC4 GREEK SMALL LETTER ETA WITH OXIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FC6 GREEK SMALL LETTER ETA WITH PERISPOMENI: try adding greek-ext\n * U+1FC7 GREEK SMALL LETTER ETA WITH PERISPOMENI AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FC8 GREEK CAPITAL LETTER EPSILON WITH VARIA: try adding greek-ext\n * U+1FC9 GREEK CAPITAL LETTER EPSILON WITH OXIA: try adding greek-ext\n * U+1FCA GREEK CAPITAL LETTER ETA WITH VARIA: try adding greek-ext\n * U+1FCB GREEK CAPITAL LETTER ETA WITH OXIA: try adding greek-ext\n * U+1FCC GREEK CAPITAL LETTER ETA WITH PROSGEGRAMMENI: try adding greek-ext\n * U+1FCD GREEK PSILI AND VARIA: try adding greek-ext\n * U+1FCE GREEK PSILI AND OXIA: try adding greek-ext\n * U+1FCF GREEK PSILI AND PERISPOMENI: try adding greek-ext\n * U+1FD0 GREEK SMALL LETTER IOTA WITH VRACHY: try adding greek-ext\n * U+1FD1 GREEK SMALL LETTER IOTA WITH MACRON: try adding greek-ext\n * U+1FD2 GREEK SMALL LETTER IOTA WITH DIALYTIKA AND VARIA: try adding greek-ext\n * U+1FD3 GREEK SMALL LETTER IOTA WITH DIALYTIKA AND OXIA: try adding greek-ext\n * U+1FD6 GREEK SMALL LETTER IOTA WITH PERISPOMENI: try adding greek-ext\n * U+1FD7 GREEK SMALL LETTER IOTA WITH DIALYTIKA AND PERISPOMENI: try adding greek-ext\n * U+1FD8 GREEK CAPITAL LETTER IOTA WITH VRACHY: try adding greek-ext\n * U+1FD9 GREEK CAPITAL LETTER IOTA WITH MACRON: try adding greek-ext\n * U+1FDA GREEK CAPITAL LETTER IOTA WITH VARIA: try adding greek-ext\n * U+1FDB GREEK CAPITAL LETTER IOTA WITH OXIA: try adding greek-ext\n * U+1FDD GREEK DASIA AND VARIA: try adding greek-ext\n * U+1FDE GREEK DASIA AND OXIA: try adding greek-ext\n * U+1FDF GREEK DASIA AND PERISPOMENI: try adding greek-ext\n * U+1FE0 GREEK SMALL LETTER UPSILON WITH VRACHY: try adding greek-ext\n * U+1FE1 GREEK SMALL LETTER UPSILON WITH MACRON: try adding greek-ext\n * U+1FE2 GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND VARIA: try adding greek-ext\n * U+1FE3 GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND OXIA: try adding greek-ext\n * U+1FE4 GREEK SMALL LETTER RHO WITH PSILI: try adding greek-ext\n * U+1FE5 GREEK SMALL LETTER RHO WITH DASIA: try adding greek-ext\n * U+1FE6 GREEK SMALL LETTER UPSILON WITH PERISPOMENI: try adding greek-ext\n * U+1FE7 GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND PERISPOMENI: try adding greek-ext\n * U+1FE8 GREEK CAPITAL LETTER UPSILON WITH VRACHY: try adding greek-ext\n * U+1FE9 GREEK CAPITAL LETTER UPSILON WITH MACRON: try adding greek-ext\n * U+1FEA GREEK CAPITAL LETTER UPSILON WITH VARIA: try adding greek-ext\n * U+1FEB GREEK CAPITAL LETTER UPSILON WITH OXIA: try adding greek-ext\n * U+1FEC GREEK CAPITAL LETTER RHO WITH DASIA: try adding greek-ext\n * U+1FED GREEK DIALYTIKA AND VARIA: try adding greek-ext\n * U+1FEE GREEK DIALYTIKA AND OXIA: try adding greek-ext\n * U+1FEF GREEK VARIA: try adding greek-ext\n * U+1FF2 GREEK SMALL LETTER OMEGA WITH VARIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FF3 GREEK SMALL LETTER OMEGA WITH YPOGEGRAMMENI: try adding greek-ext\n * U+1FF4 GREEK SMALL LETTER OMEGA WITH OXIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FF6 GREEK SMALL LETTER OMEGA WITH PERISPOMENI: try adding greek-ext\n * U+1FF7 GREEK SMALL LETTER OMEGA WITH PERISPOMENI AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FF8 GREEK CAPITAL LETTER OMICRON WITH VARIA: try adding greek-ext\n * U+1FF9 GREEK CAPITAL LETTER OMICRON WITH OXIA: try adding greek-ext\n * U+1FFA GREEK CAPITAL LETTER OMEGA WITH VARIA: try adding greek-ext\n * U+1FFB GREEK CAPITAL LETTER OMEGA WITH OXIA: try adding greek-ext\n * U+1FFC GREEK CAPITAL LETTER OMEGA WITH PROSGEGRAMMENI: try adding greek-ext\n * U+1FFD GREEK OXIA: try adding greek-ext\n * U+1FFE GREEK DASIA: try adding greek-ext\n * U+2012 FIGURE DASH: not included in any glyphset definition\n * U+2016 DOUBLE VERTICAL LINE: not included in any glyphset definition\n * U+2017 DOUBLE LOW LINE: not included in any glyphset definition\n * U+2020 DAGGER: try adding latin-ext\n * U+2021 DOUBLE DAGGER: not included in any glyphset definition\n * U+2025 TWO DOT LEADER: try adding phags-pa\n * U+2030 PER MILLE SIGN: not included in any glyphset definition\n * U+203C DOUBLE EXCLAMATION MARK: not included in any glyphset definition\n * U+203D INTERROBANG: not included in any glyphset definition\n * U+203E OVERLINE: not included in any glyphset definition\n * U+2045 LEFT SQUARE BRACKET WITH QUILL: not included in any glyphset definition\n * U+2048 QUESTION EXCLAMATION MARK: try adding mongolian\n * U+2070 SUPERSCRIPT ZERO: not included in any glyphset definition\n * U+2075 SUPERSCRIPT FIVE: not included in any glyphset definition\n * U+2076 SUPERSCRIPT SIX: not included in any glyphset definition\n * U+2077 SUPERSCRIPT SEVEN: not included in any glyphset definition\n * U+2078 SUPERSCRIPT EIGHT: not included in any glyphset definition\n * U+2079 SUPERSCRIPT NINE: not included in any glyphset definition\n * U+207A SUPERSCRIPT PLUS SIGN: not included in any glyphset definition\n * U+207B SUPERSCRIPT MINUS: not included in any glyphset definition\n * U+207C SUPERSCRIPT EQUALS SIGN: not included in any glyphset definition\n * U+207D SUPERSCRIPT LEFT PARENTHESIS: not included in any glyphset definition\n * U+207E SUPERSCRIPT RIGHT PARENTHESIS: not included in any glyphset definition\n * U+207F SUPERSCRIPT LATIN SMALL LETTER N: not included in any glyphset definition\n * U+2080 SUBSCRIPT ZERO: not included in any glyphset definition\n * U+2081 SUBSCRIPT ONE: not included in any glyphset definition\n * U+2082 SUBSCRIPT TWO: not included in any glyphset definition\n * U+2083 SUBSCRIPT THREE: not included in any glyphset definition\n * U+2084 SUBSCRIPT FOUR: not included in any glyphset definition\n * U+2085 SUBSCRIPT FIVE: not included in any glyphset definition\n * U+2086 SUBSCRIPT SIX: not included in any glyphset definition\n * U+2087 SUBSCRIPT SEVEN: not included in any glyphset definition\n * U+2088 SUBSCRIPT EIGHT: not included in any glyphset definition\n * U+2089 SUBSCRIPT NINE: not included in any glyphset definition\n * U+208A SUBSCRIPT PLUS SIGN: not included in any glyphset definition\n * U+208B SUBSCRIPT MINUS: not included in any glyphset definition\n * U+208C SUBSCRIPT EQUALS SIGN: not included in any glyphset definition\n * U+208D SUBSCRIPT LEFT PARENTHESIS: not included in any glyphset definition\n * U+208E SUBSCRIPT RIGHT PARENTHESIS: not included in any glyphset definition\n * U+20A1 COLON SIGN: try adding latin-ext\n * U+20A2 CRUZEIRO SIGN: try adding latin-ext\n * U+20A3 FRENCH FRANC SIGN: try adding latin-ext\n * U+20A8 RUPEE SIGN: try adding one of: latin-ext, devanagari\n * U+2126 OHM SIGN: not included in any glyphset definition\n * U+212E ESTIMATED SYMBOL: not included in any glyphset definition\n * U+2153 VULGAR FRACTION ONE THIRD: not included in any glyphset definition\n * U+2154 VULGAR FRACTION TWO THIRDS: not included in any glyphset definition\n * U+2155 VULGAR FRACTION ONE FIFTH: not included in any glyphset definition\n * U+2156 VULGAR FRACTION TWO FIFTHS: not included in any glyphset definition\n * U+2157 VULGAR FRACTION THREE FIFTHS: not included in any glyphset definition\n * U+2158 VULGAR FRACTION FOUR FIFTHS: not included in any glyphset definition\n * U+2159 VULGAR FRACTION ONE SIXTH: not included in any glyphset definition\n * U+215A VULGAR FRACTION FIVE SIXTHS: not included in any glyphset definition\n * U+215B VULGAR FRACTION ONE EIGHTH: not included in any glyphset definition\n * U+215C VULGAR FRACTION THREE EIGHTHS: not included in any glyphset definition\n * U+215D VULGAR FRACTION FIVE EIGHTHS: not included in any glyphset definition\n * U+215E VULGAR FRACTION SEVEN EIGHTHS: not included in any glyphset definition\n * U+215F FRACTION NUMERATOR ONE: not included in any glyphset definition\n * U+2202 PARTIAL DIFFERENTIAL: not included in any glyphset definition\n * U+2206 INCREMENT: not included in any glyphset definition\n * U+220F N-ARY PRODUCT: not included in any glyphset definition\n * U+2211 N-ARY SUMMATION: not included in any glyphset definition\n * U+221A SQUARE ROOT: not included in any glyphset definition\n * U+221E INFINITY: not included in any glyphset definition\n * U+2227 LOGICAL AND: not included in any glyphset definition\n * U+2228 LOGICAL OR: not included in any glyphset definition\n * U+2229 INTERSECTION: not included in any glyphset definition\n * U+222A UNION: not included in any glyphset definition\n * U+222B INTEGRAL: not included in any glyphset definition\n * U+2245 APPROXIMATELY EQUAL TO: not included in any glyphset definition\n * U+2248 ALMOST EQUAL TO: not included in any glyphset definition\n * U+2260 NOT EQUAL TO: not included in any glyphset definition\n * U+2261 IDENTICAL TO: not included in any glyphset definition\n * U+2264 LESS-THAN OR EQUAL TO: not included in any glyphset definition\n * U+2265 GREATER-THAN OR EQUAL TO: not included in any glyphset definition\n * U+2310 REVERSED NOT SIGN: not included in any glyphset definition\n * U+25CA LOZENGE: not included in any glyphset definition\n * U+25E6 WHITE BULLET: not included in any glyphset definition\n * U+E001 : not included in any glyphset definition\n * U+E002 : not included in any glyphset definition\n * U+E003 : not included in any glyphset definition\n * U+E004 : not included in any glyphset definition\n * U+E005 : not included in any glyphset definition\n * U+E006 : not included in any glyphset definition\n * U+FB00 LATIN SMALL LIGATURE FF: not included in any glyphset definition\n * U+FB01 LATIN SMALL LIGATURE FI: not included in any glyphset definition\n * U+FB02 LATIN SMALL LIGATURE FL: not included in any glyphset definition\n * U+FB03 LATIN SMALL LIGATURE FFI: not included in any glyphset definition\n * U+FB04 LATIN SMALL LIGATURE FFL: not included in any glyphset definition\n * U+FFFC OBJECT REPLACEMENT CHARACTER: not included in any glyphset definition\n\nOr you can add the above codepoints to one of the subsets supported by the font: `menu`, `greek` [code: unreachable-subsetting]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This check ensures that all encoded glyphs in the font are covered by a\n        subset declared in the METADATA.pb. Google Fonts splits the font into\n        a set of subset fonts based on the contents of the `subsets` field and\n        the subset definitions in the `glyphsets` repository.\n\n        Any encoded glyphs which are not by any of these subset definitions\n        will not be served in the subsetted fonts, and so will be unreachable to\n        the end user.\n    ",
                    "result": "WARN",
                    "severity": 2
                },
                {
                    "description": "Substitute copyright, registered and trademark symbols in name table entries.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/unwanted_chars>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "No need to substitute copyright, registered and trademark symbols in name table entries of this font.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Check the OS/2 usWeightClass is appropriate for the font's best SubFamily name.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/usweightclass>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2 usWeightClass is good",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Google Fonts expects variable fonts, static ttfs and static otfs to have\n        differing OS/2 usWeightClass values.\n\n        - For Variable Fonts, Thin-Black must be 100-900\n\n        - For static ttfs, Thin-Black can be 100-900 or 250-900\n\n        - For static otfs, Thin-Black must be 250-900\n\n        If static otfs are set lower than 250, text may appear blurry in\n        legacy Windows applications.\n\n        Glyphsapp users can change the usWeightClass value of an instance by adding\n        a 'weightClass' customParameter.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check font has a license.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/family/has_license>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Found license at '/Users/simon/others-repos/fonts/ofl/gfsneohellenic/OFL.txt'",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Check license file has good copyright string.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/license/OFL_copyright>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "First line in license file is:\n\n\"copyright (c) 2007, greek font society (www.greekfontsociety.org | gfs@greekfontsociety.org),\"\n\nwhich does not match the expected format, similar to:\n\n\"Copyright 2022 The Familyname Project Authors (git url)\" [code: bad-format]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        An OFL.txt file's first line should be the font copyright e.g:\n        \"Copyright 2019 The Montserrat Project Authors\n        (https://github.com/julietaula/montserrat)\"\n    ",
                    "result": "FAIL",
                    "severity": 10
                },
                {
                    "description": "Check OFL body text is correct.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/license/OFL_body_text>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OFL license body text is correct",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check OFL body text is correct.\n        Often users will accidently delete parts of the body text.\n    ",
                    "result": "PASS",
                    "severity": 10
                },
                {
                    "description": "Check copyright namerecords match license file.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/license>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font lacks NameID 13 (LICENSE DESCRIPTION). A proper licensing entry must be set. [code: missing]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        A known licensing description must be provided in the NameID 14\n        (LICENSE DESCRIPTION) entries of the name table.\n\n        The source of truth for this check (to determine which license is in use) is\n        a file placed side-by-side to your font project including the licensing terms.\n\n        Depending on the chosen license, one of the following string snippets is\n        expected to be found on the NameID 13 (LICENSE DESCRIPTION) entries of the\n        name table:\n\n        - \"This Font Software is licensed under the SIL Open Font License, Version 1.1.\n          This license is available with a FAQ at: https://scripts.sil.org/OFL\"\n\n        - \"Licensed under the Apache License, Version 2.0\"\n\n        - \"Licensed under the Ubuntu Font Licence 1.0.\"\n\n\n        Currently accepted licenses are Apache or Open Font License. For a small set\n        of legacy families the Ubuntu Font License may be acceptable as well.\n\n        When in doubt, please choose OFL for new font projects.\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "License URL matches License text on name table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/license_url>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Could not infer the font license. Please ensure NameID 13 (LICENSE DESCRIPTION) is properly set.",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        A known license URL must be provided in the NameID 14 (LICENSE INFO URL)\n        entry of the name table.\n\n        The source of truth for this check is the licensing text found on the NameID 13\n        entry (LICENSE DESCRIPTION).\n\n        The string snippets used for detecting licensing terms are:\n\n        - \"This Font Software is licensed under the SIL Open Font License, Version 1.1.\n          This license is available with a FAQ at: https://scripts.sil.org/OFL\"\n\n        - \"Licensed under the Apache License, Version 2.0\"\n\n        - \"Licensed under the Ubuntu Font Licence 1.0.\"\n\n\n        Currently accepted licenses are Apache or Open Font License. For a small set of\n        legacy families the Ubuntu Font License may be acceptable as well.\n\n        When in doubt, please choose OFL for new font projects.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Description strings in the name table must not exceed 200 characters.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/description_max_length>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "All description name records have reasonably small lengths.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        An old FontLab version had a bug which caused it to store copyright notices\n        in nameID 10 entries.\n\n        In order to detect those and distinguish them from actual legitimate usage of\n        this name table entry, we expect that such strings do not exceed a reasonable\n        length of 200 chars.\n\n        Longer strings are likely instances of the FontLab bug.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Show hinting filesize impact.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/hinting_impact>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Hinting filesize impact:\n\n |               | /Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf          |\n |:------------- | ---------------:|\n | Dehinted Size | 156.0kb |\n | Hinted Size   | 353.6kb   |\n | Increase      | 197.6kb      |\n | Change        | 126.7 %  |\n [code: size-impact]",
                            "status": "INFO",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This check is merely informative, displaying and useful comparison of filesizes\n        of hinted versus unhinted font files.\n    ",
                    "result": "INFO"
                },
                {
                    "description": "Ensure files are not too large.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/file_size>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font had a reasonable file size",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Serving extremely large font files on Google Fonts causes usability issues.\n        This check ensures that file sizes are reasonable.\n    ",
                    "result": "PASS",
                    "severity": 10
                },
                {
                    "description": "Version format is correct in 'name' table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/version_format>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Version format in NAME table entries is correct.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Font has ttfautohint params?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/has_ttfautohint_params>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font appears to our heuristic as not hinted using ttfautohint. [code: not-hinted]",
                            "status": "SKIP",
                            "traceback": null
                        },
                        {
                            "message": "Font appears to our heuristic as not hinted using ttfautohint. [code: not-hinted]",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "result": "SKIP"
                },
                {
                    "description": "Font has old ttfautohint applied?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/old_ttfautohint>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Could not detect which version of ttfautohint was used in this font. It is typically specified as a comment in the font version entries of the 'name' table. Such font version strings are currently: ['Version 1.0 ', 'Version 1.0 '] [code: version-not-detected]",
                            "status": "INFO",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check if font has been hinted with an outdated version of ttfautohint.\n    ",
                    "result": "INFO"
                },
                {
                    "description": "EPAR table present in font?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/epar>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "EPAR table not present in font. To learn more see https://github.com/fonttools/fontbakery/issues/818 [code: lacks-EPAR]",
                            "status": "INFO",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The EPAR table is/was a way of expressing common licensing permissions and\n        restrictions in metadata; while almost nothing supported it, Dave Crossland\n        wonders that adding it to everything in Google Fonts could help make it\n        more popular.\n\n        More info is available at:\n        https://davelab6.github.io/epar/\n    ",
                    "result": "INFO",
                    "severity": 1
                },
                {
                    "description": "Is the Grid-fitting and Scan-conversion Procedure ('gasp') table set to optimize rendering?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/gasp>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "These are the ppm ranges declared on the gasp table:\n\nPPM <= 8:\n\tflag = 0x02\n\t- Use grayscale rendering\nPPM <= 16:\n\tflag = 0x01\n\t- Use grid-fitting\nPPM <= 65535:\n\tflag = 0x03\n\t- Use grid-fitting\n\t- Use grayscale rendering\n [code: ranges]",
                            "status": "INFO",
                            "traceback": null
                        },
                        {
                            "message": "The gasp table has a range of 8 that may be unneccessary. [code: non-ffff-range]",
                            "status": "WARN",
                            "traceback": null
                        },
                        {
                            "message": "The gasp table has a range of 16 that may be unneccessary. [code: non-ffff-range]",
                            "status": "WARN",
                            "traceback": null
                        },
                        {
                            "message": "The gasp range 0xFFFF value 0x03 should be set to 0x0F. [code: unset-flags]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Traditionally version 0 'gasp' tables were set so that font sizes below 8 ppem\n        had no grid fitting but did have antialiasing. From 9-16 ppem, just grid\n        fitting.\n        And fonts above 17ppem had both antialiasing and grid fitting toggled on.\n        The use of accelerated graphics cards and higher resolution screens make this\n        approach obsolete. Microsoft's DirectWrite pushed this even further with much\n        improved rendering built into the OS and apps.\n\n        In this scenario it makes sense to simply toggle all 4 flags ON for all font\n        sizes.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Make sure family name does not begin with a digit.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/familyname_first_char>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font family name first character is not a digit.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Font family names which start with a numeral are often not discoverable\n        in Windows applications.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Are there non-ASCII characters in ASCII-only NAME table entries?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/ascii_only_entries>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "None of the ASCII-only NAME table entries contain non-ASCII characteres.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The OpenType spec requires ASCII for the POSTSCRIPT_NAME (nameID 6).\n\n        For COPYRIGHT_NOTICE (nameID 0) ASCII is required because that string should be\n        the same in CFF fonts which also have this requirement in the OpenType spec.\n\n        Note:\n        A common place where we find non-ASCII strings is on name table entries\n        with NameID > 18, which are expressly for localising the ASCII-only IDs\n        into Hindi / Arabic / etc.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: check if fonts field only has unique \"full_name\" values.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/unique_full_name_values>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb \"fonts\" field only has unique \"full_name\" values.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: check if fonts field only contains unique style:weight pairs.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/unique_weight_style_pairs>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb \"fonts\" field only has unique style:weight pairs.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb license is \"APACHE2\", \"UFL\" or \"OFL\"?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/license>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font license is declared in METADATA.pb as \"OFL\"",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb should contain at least \"menu\" and \"latin\" subsets.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/menu_and_latin>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Subsets \"menu\" and \"latin\" are mandatory, but METADATA.pb is missing \"latin\". [code: missing]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "result": "FAIL"
                },
                {
                    "description": "METADATA.pb subsets should be alphabetically ordered.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/subsets_order>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb subsets are not sorted in alphabetical order: Got ['menu', 'greek'] and expected ['greek', 'menu'] [code: not-sorted]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "result": "FAIL"
                },
                {
                    "description": "Check METADATA.pb includes production subsets.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/includes_production_subsets>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: listed_on_gfonts_api",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check METADATA.pb file includes the same subsets as the family in production.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "METADATA.pb: Copyright notice is the same in all fonts?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/copyright>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb: Copyright field value is inconsistent across family [code: inconsistency]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "result": "FAIL"
                },
                {
                    "description": "Check that METADATA.pb family values are all the same.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/familyname>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb: Family name is the same in all metadata \"fonts\" items.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: According to Google Fonts standards, families should have a Regular style.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/has_regular>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Family has a Regular style.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Regular should be 400.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/regular_is_400>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Regular has weight = 400.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Checks METADATA.pb font.name field matches family name declared on the name table.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/nameid/family_name>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Family name \"GFS Neohellenic\" is identical in METADATA.pb and on the TTF file.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Checks METADATA.pb font.post_script_name matches postscript name declared on the name table.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/nameid/post_script_name>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Postscript name \"GFSNeohellenic-BoldItalic\" is identical in METADATA.pb and on the TTF file.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb font.full_name value matches fullname declared on the name table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/nameid/full_name>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font fullname \"GFS Neohellenic Bold Italic\" is identical in METADATA.pb and on the TTF file.",
                            "status": "PASS",
                            "traceback": null
                        },
                        {
                            "message": "Font fullname \"GFS Neohellenic Bold Italic\" is identical in METADATA.pb and on the TTF file.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb font.name value should be same as the family name declared on the name table.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/nameid/font_name>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: style",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This check ensures consistency between the font name declared on the name table\n        and the contents of the METADATA.pb file.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "METADATA.pb font.full_name and font.post_script_name fields have equivalent values ?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/match_fullname_postscript>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb font fields \"full_name\" and \"post_script_name\" have equivalent values.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb font.filename and font.post_script_name fields have equivalent values?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/match_filename_postscript>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb font filename = \"GFSNeohellenicBoldItalic.ttf\" does not match post_script_name=\"GFSNeohellenic-BoldItalic\". [code: mismatch]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "result": "FAIL"
                },
                {
                    "description": "METADATA.pb font.name field contains font name in right format?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/valid_name_values>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: style",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "result": "SKIP"
                },
                {
                    "description": "METADATA.pb font.full_name field contains font name in right format?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/valid_full_name_values>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: style",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "result": "SKIP"
                },
                {
                    "description": "METADATA.pb font.filename field contains font name in right format?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/valid_filename_values>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: style",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "result": "SKIP"
                },
                {
                    "description": "METADATA.pb font.post_script_name field contains font name in right format?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/valid_post_script_name_values>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb postScriptName field contains font name in right format.",
                            "status": "PASS",
                            "traceback": null
                        },
                        {
                            "message": "METADATA.pb postScriptName field contains font name in right format.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Check name ID 25 to end with \"Italic\" for Italic VFs.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/valid_nameid25>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: style",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Due to a bug in (at least) Adobe Indesign, name ID 25\n        needs to be different for Italic VFs than their Upright counterparts.\n        Google Fonts chooses to append \"Italic\" here.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Copyright notices match canonical pattern in METADATA.pb",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/valid_copyright>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb: Copyright notices should match a pattern similar to:\n \"Copyright 2020 The Familyname Project Authors (git url)\"\nBut instead we have got:\n\"copyright (c) designed by takis katsoulidis and george d. matthiopoulos (gfs@greekfontsociety.gr)., 2001. all rights reserved.\" [code: bad-notice-format]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The expected pattern for the copyright string adheres to the following rules:\n\n        * It must say \"Copyright\" followed by a 4 digit year (optionally followed by\n          a hyphen and another 4 digit year)\n\n        * Then it must say \"The <familyname> Project Authors\"\n\n        * And within parentheses, a URL for a git repository must be provided\n\n        * The check is case insensitive and does not validate whether the familyname\n          is correct, even though we'd expect it is (and we may soon update the check\n          to validate that aspect as well!)\n\n\n        Here is an example of a valid copyright string:\n\n        \"Copyright 2017 The Archivo Black Project Authors\n         (https://github.com/Omnibus-Type/ArchivoBlack)\"\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "Copyright notices match canonical pattern in fonts",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/font_copyright>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Name Table entry: Copyright notices should match a pattern similar to: \"Copyright 2019 The Familyname Project Authors (git url)\"\nBut instead we have got:\n\"Copyright (c) Designed by Takis Katsoulidis and George D. Matthiopoulos., 2001. All rights reserved.\" [code: bad-notice-format]",
                            "status": "FAIL",
                            "traceback": null
                        },
                        {
                            "message": "Name Table entry: Copyright notices should match a pattern similar to: \"Copyright 2019 The Familyname Project Authors (git url)\"\nBut instead we have got:\n\"Copyright (c) Designed by Takis Katsoulidis and George D. Matthiopoulos., 2001. All rights reserved.\" [code: bad-notice-format]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "result": "FAIL"
                },
                {
                    "description": "Copyright notice on METADATA.pb should not contain 'Reserved Font Name'.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/reserved_font_name>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb copyright field does not contain \"Reserved Font Name\".",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Copyright notice shouldn't exceed 500 chars.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/copyright_max_length>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Copyright notice string is shorter than 500 chars.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Font filenames match font.filename entries?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/filenames>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Filenames in METADATA.pb look good.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Note:\n        This check only looks for files in the current directory.\n\n        Font files in subdirectories are checked by these other two checks:\n         - com.google.fonts/check/metadata/undeclared_fonts\n         - com.google.fonts/check/repo/vf_has_static_fonts\n\n        We may want to merge them all into a single check.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb font.style \"italic\" matches font internals?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/italic_style>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK: METADATA.pb font.style \"italic\" matches font internals.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb font.style \"normal\" matches font internals?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/normal_style>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "This check only applies to normal fonts.",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "result": "SKIP"
                },
                {
                    "description": "METADATA.pb font.name and font.full_name fields match the values declared on the name table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/nameid/family_and_full_names>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb familyname and fullName fields match corresponding name table entries.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Check font name is the same as family name.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/match_name_familyname>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font name is the same as family name.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Check that font weight has a canonical value.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/canonical_weight_value>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font weight has a canonical value.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Check METADATA.pb font weights are correct.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/os2_weightclass>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2 usWeightClass or wght axis value matches weight specified at METADATA.pb",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check METADATA.pb font weights are correct.\n\n        For static fonts, the metadata weight should be the same as the static font's\n        OS/2 usWeightClass.\n\n        For variable fonts, the weight value should be 400 if the font's wght axis range\n        includes 400, otherwise it should be the value closest to 400.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb weight matches postScriptName for static fonts.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/match_weight_postscript>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Weight value matches postScriptName.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Font styles are named canonically?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/canonical_style_names>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font styles are named canonically.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Check URL on copyright string is the same as in repository_url field.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/consistent_repo_urls>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Sometimes, perhaps due to copy-pasting, projects may declare different URLs\n        between the font.coyright and the family.sources.repository_url fields.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Check for primary_script",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/primary_script>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Try to guess font's primary script and see if that's set in METADATA.pb.\n        This is an educated guess based on the number of glyphs per script in the font\n        and should be taken with caution.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Stricter unitsPerEm criteria for Google Fonts.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/unitsperem_strict>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font em size is good (unitsPerEm = 1000).",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Even though the OpenType spec allows unitsPerEm to be any value between 16\n        and 16384, the Google Fonts project aims at a narrower set of reasonable values.\n\n        The spec suggests usage of powers of two in order to get some performance\n        improvements on legacy renderers, so those values are acceptable.\n\n        But values of 500 or 1000 are also acceptable, with the added benefit that it\n        makes upm math easier for designers, while the performance hit of not using a\n        power of two is most likely negligible nowadays.\n\n        Additionally, values above 2048 would likely result in unreasonable\n        filesize increases.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Glyphs are similiar to Google Fonts version?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/production_glyphs_similarity>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: api_gfonts_ttFont",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "result": "SKIP"
                },
                {
                    "description": "Checking direction of slnt axis angles",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/slant_direction>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The 'slnt' axis values are defined as negative values for a clockwise (right)\n        lean, and positive values for counter-clockwise lean. This is counter-intuitive\n        for many designers who are used to think of a positive slant as a lean to\n        the right.\n\n        This check ensures that the slant axis direction is consistent with the specs.\n\n        https://docs.microsoft.com/en-us/typography/opentype/spec/dvaraxistag_slnt\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check font names are correct",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/font_names>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font names are incorrect:\n\n| nameID | current | expected |\n| :--- | :--- | :--- |\n| Family Name | GFS Neohellenic | GFS Neohellenic |\n| Subfamily Name | Bold Italic | Bold Italic |\n| Full Name | GFS Neohellenic Bold Italic | GFS Neohellenic Bold Italic |\n| Poscript Name | GFSNeohellenic-BoldItalic | GFSNeohellenic-BoldItalic |\n| Typographic Family Name | GFS Neohellenic | N/A |\n| Typographic Subfamily Name | Bold Italic | N/A | [code: bad-names]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Google Fonts has several rules which need to be adhered to when\n        setting a font's name table. Please read:\n        https://googlefonts.github.io/gf-guide/statics.html#supported-styles\n        https://googlefonts.github.io/gf-guide/statics.html#style-linking\n        https://googlefonts.github.io/gf-guide/statics.html#unsupported-styles\n        https://googlefonts.github.io/gf-guide/statics.html#single-weight-families\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "Copyright field for this font on METADATA.pb matches all copyright notice entries on the name table ?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/nameid/copyright>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Copyright field for this font on METADATA.pb (\"Copyright (c) Designed by Takis Katsoulidis and George D. Matthiopoulos (gfs@greekfontsociety.gr)., 2001. All rights reserved.\") differs from a copyright notice entry on the name table: \"Copyright (c) Designed by Takis Katsoulidis and George D. Matthiopoulos., 2001. All rights reserved.\" [code: mismatch]",
                            "status": "FAIL",
                            "traceback": null
                        },
                        {
                            "message": "Copyright field for this font on METADATA.pb (\"Copyright (c) Designed by Takis Katsoulidis and George D. Matthiopoulos (gfs@greekfontsociety.gr)., 2001. All rights reserved.\") differs from a copyright notice entry on the name table: \"Copyright (c) Designed by Takis Katsoulidis and George D. Matthiopoulos., 2001. All rights reserved.\" [code: mismatch]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "result": "FAIL"
                },
                {
                    "description": "Font has all mandatory 'name' table entries?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/mandatory_entries>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: style",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "result": "SKIP"
                },
                {
                    "description": "Length of copyright notice must not exceed 500 characters.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/copyright_length>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "All copyright notice name entries on the 'name' table are shorter than 500 characters.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This is an arbitrary max length for the copyright notice field of the name\n        table. We simply don't want such notices to be too long. Typically such notices\n        are actually much shorter than this with a length of roughly 70 or 80\n        characters.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check for font-v versioning.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/fontv>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Version string is: \"Version 1.0 \"\nThe version string must ideally include a git commit hash and either a \"dev\" or a \"release\" suffix such as in the example below:\n\"Version 1.3; git-0d08353-release\" [code: bad-format]",
                            "status": "INFO",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The git sha1 tagging and dev/release features of Source Foundry `font-v` tool\n        are awesome and we would love to consider upstreaming the approach into\n        fontmake someday. For now we only emit an INFO if a given font does not yet\n        follow the experimental versioning style, but at some point we may start\n        enforcing it.\n    ",
                    "result": "INFO"
                },
                {
                    "description": "Check glyphs do not have components which are themselves components.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/glyf_nested_components>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Glyphs do not contain nested components.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        There have been bugs rendering variable fonts with nested components.\n        Additionally, some static fonts with nested components have been reported\n        to have rendering and printing issues.\n\n        For more info, see:\n        * https://github.com/fonttools/fontbakery/issues/2961\n        * https://github.com/arrowtype/recursive/issues/412\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check a static ttf can be generated from a variable font.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/generate_static>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Google Fonts may serve static fonts which have been generated from variable\n        fonts. This test will attempt to generate a static ttf using fontTool's\n        varLib mutator.\n\n        The target font will be the mean of each axis e.g:\n\n        ## VF font axes\n\n        - min weight, max weight = 400, 800\n\n        - min width, max width = 50, 100\n\n        ## Target Instance\n\n        - weight = 600\n\n        - width = 75\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check that variable fonts have an HVAR table.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/has_HVAR>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Not having a HVAR table can lead to costly text-layout operations on some\n        platforms, which we want to avoid.\n\n        So, all variable fonts on the Google Fonts collection should have an HVAR\n        with valid values.\n\n        More info on the HVAR table can be found at:\n        https://docs.microsoft.com/en-us/typography/opentype/spec/otvaroverview#variation-data-tables-and-miscellaneous-requirements\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Font enables smart dropout control in \"prep\" table instructions?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/smart_dropout>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The 'prep' table does not contain TrueType instructions enabling smart dropout control. To fix, export the font with autohinting enabled, or run ttfautohint on the font, or run the `gftools fix-nonhinting` script. [code: lacks-smart-dropout]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This setup is meant to ensure consistent rendering quality for fonts across\n        all devices (with different rendering/hinting capabilities).\n\n        Below is the snippet of instructions we expect to see in the fonts:\n        B8 01 FF    PUSHW 0x01FF\n        85          SCANCTRL (unconditinally turn on\n                              dropout control mode)\n        B0 04       PUSHB 0x04\n        8D          SCANTYPE (enable smart dropout control)\n\n        \"Smart dropout control\" means activating rules 1, 2 and 5:\n        Rule 1: If a pixel's center falls within the glyph outline,\n                that pixel is turned on.\n        Rule 2: If a contour falls exactly on a pixel's center,\n                that pixel is turned on.\n        Rule 5: If a scan line between two adjacent pixel centers\n                (either vertical or horizontal) is intersected\n                by both an on-Transition contour and an off-Transition\n                contour and neither of the pixels was already turned on\n                by rules 1 and 2, turn on the pixel which is closer to\n                the midpoint between the on-Transition contour and\n                off-Transition contour. This is \"Smart\" dropout control.\n\n        For more detailed info (such as other rules not enabled in this snippet),\n        please refer to the TrueType Instruction Set documentation.\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "There must not be VTT Talk sources in the font.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/vttclean>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "There are no tables with VTT Talk sources embedded in the font.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The goal here is to reduce filesizes and improve pageloading when dealing\n        with webfonts.\n\n        The VTT Talk sources are not necessary at runtime and endup being just dead\n        weight when left embedded in the font binaries. The sources should be kept on\n        the project files but stripped out when building release binaries.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Are there unwanted Apple tables?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/aat>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "There are no unwanted AAT tables.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Apple's TrueType reference manual [1] describes SFNT tables not in the\n        Microsoft OpenType specification [2] and these can sometimes sneak into final\n        release files, but Google Fonts should only have OpenType tables.\n\n        [1] https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6.html\n        [2] https://docs.microsoft.com/en-us/typography/opentype/spec/\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check a font's STAT table contains compulsory Axis Values.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/STAT>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check a font's STAT table contains compulsory Axis Values which exist\n        in the Google Fonts Axis Registry.\n\n        We cannot determine what Axis Values the user will set for axes such as\n        opsz, GRAD since these axes are unique for each font so we'll skip them.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check variable font instances",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/fvar_instances>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check a font's fvar instance coordinates comply with our guidelines:\n        https://googlefonts.github.io/gf-guide/variable.html#fvar-instances\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "All name entries referenced by fvar instances exist on the name table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/fvar_name_entries>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The purpose of this check is to make sure that all name entries referenced\n        by variable font instances do exist in the name table.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "PPEM must be an integer on hinted fonts.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/integer_ppem_if_hinted>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Hinted fonts must have head table flag bit 3 set.\n\n        Per https://docs.microsoft.com/en-us/typography/opentype/spec/head,\n        bit 3 of Head::flags decides whether PPEM should be rounded. This bit should\n        always be set for hinted fonts.\n\n        Note:\n        Bit 3 = Force ppem to integer values for all internal scaler math;\n                May use fractional ppem sizes if this bit is clear;\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Are there caret positions declared for every ligature?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/ligature_carets>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "This font lacks caret position values for ligature glyphs on its GDEF table. [code: lacks-caret-pos]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        All ligatures in a font must have corresponding caret (text cursor) positions\n        defined in the GDEF table, otherwhise, users may experience issues with\n        caret rendering.\n\n        If using GlyphsApp or UFOs, ligature carets can be defined as anchors with\n        names starting with 'caret_'. These can be compiled with fontmake as of\n        version v2.4.0.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Is there kerning info for non-ligated sequences?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/kerning_for_non_ligated_sequences>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "GPOS table lacks kerning info for the following non-ligated sequences:\n\n\t- f + f\n\n\t- f + l\n\n\t- l + f\n\n\t- f + i\n\n\t- i + f\n\n\t- l + i [code: lacks-kern-info]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Fonts with ligatures should have kerning on the corresponding non-ligated\n        sequences for text where ligatures aren't used\n        (eg https://github.com/impallari/Raleway/issues/14).\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Combined length of family and style must not exceed 27 characters.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/family_and_style_max_length>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "All name entries are good.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to a GlyphsApp tutorial [1], in order to make sure all versions of\n        Windows recognize it as a valid font file, we must make sure that the\n        concatenated length of the familyname (NameID.FONT_FAMILY_NAME) and\n        style (NameID.FONT_SUBFAMILY_NAME) strings in the name table do not\n        exceed 20 characters.\n\n        After discussing the problem in more detail at FontBakery issue #2179 [2] we\n        decided that allowing up to 27 chars would still be on the safe side, though.\n\n        [1] https://glyphsapp.com/tutorials/multiple-masters-part-3-setting-up-instances\n        [2] https://github.com/fonttools/fontbakery/issues/2179\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Name table entries should not contain line-breaks.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/line_breaks>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Name table entries are all single-line (no line-breaks found).",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        There are some entries on the name table that may include more than one line\n        of text. The Google Fonts team, though, prefers to keep the name table entries\n        short and simple without line breaks.\n\n        For instance, some designers like to include the full text of a font license in\n        the \"copyright notice\" entry, but for the GFonts collection this entry should\n        only mention year, author and other basic info in a manner enforced by\n        com.google.fonts/check/font_copyright\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Name table strings must not contain the string 'Reserved Font Name'.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/rfn>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "None of the name table strings contain \"Reserved Font Name\".",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Some designers adopt the \"Reserved Font Name\" clause of the OFL license. This\n        means that the original author reserves the rights to the family name and other\n        people can only distribute modified versions using a different family name.\n\n        Google Fonts published updates to the fonts in the collection in order to fix\n        issues and/or implement further improvements to the fonts. It is important to\n        keep the family name so that users of the webfonts can benefit from the updates.\n        Since it would forbid such usage scenario, all families in the GFonts collection\n        are required to not adopt the RFN clause.\n\n        This check ensures \"Reserved Font Name\" is not mentioned in the name table.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check family name for GF Guide compliance.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/family_name_compliance>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "\"GFS Neohellenic\" contains an abbreviation. [code: abbreviation]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Checks the family name for compliance with the Google Fonts Guide.\n        https://googlefonts.github.io/gf-guide/onboarding.html#new-fonts\n\n        If you want to have your family name added to the CamelCase\n        exceptions list, please submit a pull request to the\n        camelcased_familyname_exceptions.txt file.\n\n        Similarly, abbreviations can be submitted to the\n        abbreviations_familyname_exceptions.txt file.\n\n        These are located in the Lib/fontbakery/data/googlefonts/ directory\n        of the FontBakery source code currently hosted at\n        https://github.com/fonttools/fontbakery/\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "Directory name in GFonts repo structure must match NameID 1 of the regular.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/repo/dirname_matches_nameid_1>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The font seems to lack a regular. If family consists of a single-weight non-Regular style only, consider the Google Fonts specs for this case: https://github.com/googlefonts/gf-docs/tree/main/Spec#single-weight-families [code: lacks-regular]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "result": "FAIL"
                },
                {
                    "description": "A static fonts directory with at least two fonts must accompany variable fonts",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/repo/vf_has_static_fonts>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Please consider adding a subdirectory called \"static/\" and including in it static font files. [code: missing]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Variable font family directories kept in the google/fonts git repo may include\n        a static/ subdir containing static fonts.\n\n        These files are meant to be served for users that still lack support for\n        variable fonts in their web browsers.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "A font repository should not include FontBakery report files",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/repo/fb_report>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        A FontBakery report is ephemeral and so should be used for posting issues on a\n        bug-tracker instead of being hosted in the font project repository.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check upstream.yaml file contains all required fields",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/repo/upstream_yaml_has_required_fields>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: upstream_yaml",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        If a family has been pushed using the gftools packager, we must check that all\n        the required fields in the upstream.yaml file have been populated.\n    ",
                    "result": "SKIP",
                    "severity": 10
                },
                {
                    "description": "A font repository should not include ZIP files",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/repo/zip_files>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Sometimes people check in ZIPs into their font project repositories. While we\n        accept the practice of checking in binaries, we believe that a ZIP is a step\n        too far ;)\n\n        Note: a source purist position is that only source files and build scripts\n        should be checked in.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check font follows the Google Fonts vertical metric schema",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/vertical_metrics>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2.sTypoLineGap is \"46\" it should be 0 [code: bad-OS/2.sTypoLineGap]",
                            "status": "FAIL",
                            "traceback": null
                        },
                        {
                            "message": "hhea.lineGap is \"23\" it should be 0 [code: bad-hhea.lineGap]",
                            "status": "FAIL",
                            "traceback": null
                        },
                        {
                            "message": "The sum of hhea.ascender + abs(hhea.descender) + hhea.lineGap is 1159 when it should be at least 1200 [code: bad-hhea-range]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This check generally enforces Google Fonts\u2019 vertical metrics specifications.\n        In particular:\n        * lineGap must be 0\n        * Sum of hhea ascender + abs(descender) + linegap must be\n          between 120% and 200% of UPM\n        * Warning if sum is over 150% of UPM\n\n        The threshold levels 150% (WARN) and 200% (FAIL) are somewhat arbitrarily chosen\n        and may hint at a glaring mistake in the metrics calculations or UPM settings.\n\n        Our documentation includes further information:\n        https://github.com/googlefonts/gf-docs/tree/main/VerticalMetrics\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "Check if the vertical metrics of a family are similar to the same family hosted on Google Fonts.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/vertical_metrics_regressions>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: regular_remote_style",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        If the family already exists on Google Fonts, we need to ensure that the\n        checked family's vertical metrics are similar. This check will test the\n        following schema which was outlined in Font Bakery issue #1162 [1]:\n\n        - The family should visually have the same vertical metrics as the Regular\n          style hosted on Google Fonts.\n\n        - If the family on Google Fonts has differing hhea and typo metrics, the family\n          being checked should use the typo metrics for both the hhea and typo entries.\n\n        - If the family on Google Fonts has use typo metrics not enabled and the family\n          being checked has it enabled, the hhea and typo metrics should use the family\n          on Google Fonts winAscent and winDescent values.\n\n        - If the upms differ, the values must be scaled so the visual appearance is\n          the same.\n\n        [1] https://github.com/fonttools/fontbakery/issues/1162\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check font follows the Google Fonts CJK vertical metric schema",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/cjk_vertical_metrics>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_cjk_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        CJK fonts have different vertical metrics when compared to Latin fonts.\n        We follow the schema developed by dr Ken Lunde for Source Han Sans and\n        the Noto CJK fonts.\n\n        Our documentation includes further information:\n        https://github.com/googlefonts/gf-docs/tree/main/Spec#cjk-vertical-metrics\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check if the vertical metrics of a CJK family are similar to the same family hosted on Google Fonts.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/cjk_vertical_metrics_regressions>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_cjk_font, regular_remote_style, regular_ttFont",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check CJK family has the same vertical metrics as the same family\n        hosted on Google Fonts.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Does the font contain less than 150 CJK characters?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/cjk_not_enough_glyphs>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_claiming_to_be_cjk_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Kana has 150 characters and it's the smallest CJK writing system.\n\n        If a font contains less CJK glyphs than this writing system, we inform the\n        user that some glyphs may be encoded incorrectly.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check variable font instances don't have duplicate names",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont_duplicate_instance_names>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This check's purpose is to detect duplicate named instances names in a\n        given variable font.\n        Repeating instance names may be the result of instances for several VF axes\n        defined in `fvar`, but since currently only weight+italic tokens are allowed\n        in instance names as per GF specs, they ended up repeating.\n        Instead, only a base set of fonts for the most default representation of the\n        family can be defined through instances in the `fvar` table, all other\n        instances will have to be left to access through the `STAT` table.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Ensure VFs do not contain the ital axis.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/unsupported_axes>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The 'ital' axis is not supported yet in Google Chrome.\n\n        For the time being, we need to ensure that VFs do not contain this axis.\n        Once browser support is better, we can deprecate this check.\n\n        For more info regarding browser support, see:\n        https://arrowtype.github.io/vf-slnt-test/\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Ensure VFs with duplexed axes do not vary horizontal advance.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/duplexed_axis_reflow>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Certain axes, such as grade (GRAD) or roundness (ROND), should not\n        change any advanceWidth or kerning data across the font's design space.\n        This is because altering the advance width of glyphs can cause text reflow.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validate METADATA.pb axes values are within gf_axisregistry bounds.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/gf_axisregistry_bounds>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Each axis range in a METADATA.pb file must be registered, and within the bounds\n        of the axis definition in the Google Fonts Axis Registry, available at\n        https://github.com/google/fonts/tree/main/axisregistry\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validate METADATA.pb axes tags are defined in gf_axisregistry.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/gf_axisregistry_valid_tags>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Ensure all axes in a METADATA.pb file are registered in the\n        Google Fonts Axis Registry, available at\n        https://github.com/google/fonts/tree/main/axisregistry\n\n        Why does Google Fonts have its own Axis Registry?\n\n        We support a superset of the OpenType axis registry axis set, and use\n        additional metadata for each axis. Axes present in a font file but not in this\n        registry will not function via our API. No variable font is expected to\n        support all of the axes here.\n\n        Any font foundry or distributor library that offers variable fonts has a\n        implicit, latent, de-facto axis registry, which can be extracted by scanning\n        the library for axes' tags, labels, and min/def/max values. While in 2016\n        Microsoft originally offered to include more axes in the OpenType 1.8\n        specification (github.com/microsoft/OpenTypeDesignVariationAxisTags), as of\n        August 2020, this effort has stalled. We hope more foundries and distributors\n        will publish documents like this that make their axes explicit, to encourage\n        of adoption of variable fonts throughout the industry, and provide source\n        material for a future update to the OpenType specification's axis registry.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validate defaults on fvar table match registered fallback names in GFAxisRegistry.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/gf_axisregistry/fvar_axis_defaults>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check that axis defaults have a corresponding fallback name registered at the\n        Google Fonts Axis Registry, available at\n        https://github.com/google/fonts/tree/main/axisregistry\n\n        This is necessary for the following reasons:\n\n        To get ZIP files downloads on Google Fonts to be accurate \u2014 otherwise the\n        chosen default font is not generated. The Newsreader family, for instance, has\n        a default value on the 'opsz' axis of 16pt. If 16pt was not a registered\n        fallback position, then the ZIP file would instead include another position\n        as default (such as 14pt).\n\n        For the Variable fonts to display the correct location on the specimen page.\n\n        For VF with no weight axis to be displayed at all. For instance, Ballet, which\n        has no weight axis, was not appearing in sandbox because default position on\n        'opsz' axis was 16pt, and it was not yet a registered fallback positon.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validate STAT particle names and values match the fallback names in GFAxisRegistry.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/STAT/gf_axisregistry>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check that particle names and values on STAT table match the fallback names\n        in each axis entry at the Google Fonts Axis Registry, available at\n        https://github.com/google/fonts/tree/main/axisregistry\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validate VF axes match the ones declared on METADATA.pb.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/consistent_axis_enumeration>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        All font variation axes present in the font files must be properly declared\n        on METADATA.pb so that they can be served by the GFonts API.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Ensure METADATA.pb does not use escaped strings.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/escaped_strings>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        In some cases we've seen designer names and other fields with escaped strings\n        in METADATA files. Nowadays the strings can be full unicode strings and\n        do not need escaping.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Designers are listed correctly on the Google Fonts catalog?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/designer_profiles>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "It seems that Greek Font Society is still not listed on the designers catalog. Please submit a photo and a link to a webpage where people can learn more about the work of this designer/typefoundry. [code: profile-not-found]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Google Fonts has a catalog of designers.\n\n        This check ensures that the online entries of the catalog can be found based\n        on the designer names listed on the METADATA.pb file.\n\n        It also validates the URLs and file formats are all correctly set.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Ensure variable fonts include an avar table.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/mandatory_avar_table>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Most variable fonts should include an avar table to correctly define\n        axes progression rates.\n\n        For example, a weight axis from 0% to 100% doesn't map directly to 100 to 1000,\n        because a 10% progression from 0% may be too much to define the 200,\n        while 90% may be too little to define the 900.\n\n        If the progression rates of axes is linear, this check can be ignored.\n        Fontmake will also skip adding an avar table if the progression rates\n        are linear. However, we still recommend designers visually proof each\n        instance is at the expected weight, width etc.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "On a family update, the DESCRIPTION.en_us.html file should ideally also be updated.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/description/family_update>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: github_gfonts_description",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        We want to ensure that any significant changes to the font family are\n        properly mentioned in the DESCRIPTION file.\n\n        In general, it means that the contents of the DESCRIPTION.en_us.html file\n        will typically change if when font files are updated. Please treat this check\n        as a reminder to do so whenever appropriate!\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check small caps glyphs are available.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/missing_small_caps_glyphs>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Ensure small caps glyphs are available if\n        a font declares smcp or c2sc OT features.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Ensure Stylistic Sets have description.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/stylisticset_description>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Stylistic sets should provide description text. Programs such as InDesign,\n        TextEdit and Inkscape use that info to display to the users so that they know\n        what a given stylistic set offers.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "OS/2.fsSelection bit 7 (USE_TYPO_METRICS) is set in all fonts.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/os2/use_typo_metrics>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2.fsSelection bit 7 (USE_TYPO_METRICS) wasNOT set in the following fonts: ['/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf', '/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf', '/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf', '/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf']. [code: missing-os2-fsselection-bit7]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        All fonts on the Google Fonts collection should have OS/2.fsSelection bit 7\n        (USE_TYPO_METRICS) set. This requirement is part of the vertical metrics scheme\n        established as a Google Fonts policy aiming at a common ground supported by\n        all major font rendering environments.\n\n        For more details, read:\n        https://github.com/googlefonts/gf-docs/blob/main/VerticalMetrics/README.md\n\n        Below is the portion of that document that is most relevant to this check:\n\n        Use_Typo_Metrics must be enabled. This will force MS Applications to use the\n        OS/2 Typo values instead of the Win values. By doing this, we can freely set\n        the Win values to avoid clipping and control the line height with the typo\n        values. It has the added benefit of future line height compatibility. When\n        a new script is added, we simply change the Win values to the new yMin\n        and yMax, without needing to worry if the line height have changed.\n    ",
                    "result": "FAIL",
                    "severity": 10
                },
                {
                    "description": "Ensure fonts have ScriptLangTags declared on the 'meta' table.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/meta/script_lang_tags>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "This font file does not have a 'meta' table. [code: lacks-meta-table]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The OpenType 'meta' table originated at Apple. Microsoft added it to OT with\n        just two DataMap records:\n\n        - dlng: comma-separated ScriptLangTags that indicate which scripts,\n          or languages and scripts, with possible variants, the font is designed for.\n\n        - slng: comma-separated ScriptLangTags that indicate which scripts,\n          or languages and scripts, with possible variants, the font supports.\n\n\n        The slng structure is intended to describe which languages and scripts the\n        font overall supports. For example, a Traditional Chinese font that also\n        contains Latin characters, can indicate Hant,Latn, showing that it supports\n        Hant, the Traditional Chinese variant of the Hani script, and it also\n        supports the Latn script.\n\n        The dlng structure is far more interesting. A font may contain various glyphs,\n        but only a particular subset of the glyphs may be truly \"leading\" in the design,\n        while other glyphs may have been included for technical reasons. Such a\n        Traditional Chinese font could only list Hant there, showing that it\u2019s designed\n        for Traditional Chinese, but the font would omit Latn, because the developers\n        don\u2019t think the font is really recommended for purely Latin-script use.\n\n        The tags used in the structures can comprise just script, or also language\n        and script. For example, if a font has Bulgarian Cyrillic alternates in the\n        locl feature for the cyrl BGR OT languagesystem, it could also indicate in\n        dlng explicitly that it supports bul-Cyrl. (Note that the scripts and languages\n        in meta use the ISO language and script codes, not the OpenType ones).\n\n        This check ensures that the font has the meta table containing the\n        slng and dlng structures.\n\n        All families in the Google Fonts collection should contain the 'meta' table.\n        Windows 10 already uses it when deciding on which fonts to fall back to.\n        The Google Fonts API and also other environments could use the data for\n        smarter filtering. Most importantly, those entries should be added\n        to the Noto fonts.\n\n        In the font making process, some environments store this data in external\n        files already. But the meta table provides a convenient way to store this\n        inside the font file, so some tools may add the data, and unrelated tools\n        may read this data. This makes the solution much more portable and universal.\n    ",
                    "result": "WARN",
                    "severity": 3
                },
                {
                    "description": "Ensure fonts do not contain any pre-production tables.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/no_debugging_tables>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "This font file contains the following pre-production tables: FFTM [code: has-debugging-tables]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Tables such as `Debg` are useful in the pre-production stages of font\n        development, but add unnecessary bloat to a production font and should\n        be removed before release.\n    ",
                    "result": "WARN",
                    "severity": 6
                },
                {
                    "description": "Check font family directory name.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/family_directory_name>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Directory name is \"gfsneohellenic\", as expected.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        We want the directory name of a font family to be predictable and directly\n        derived from the family name, all lowercased and removing spaces.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check font can render its own name.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/render_own_name>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font can successfully render its own name (GFS Neohellenic)",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        A base expectation is that a font family's regular/default (400 roman) style\n        can render its 'menu name' (nameID 1) in itself.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check samples can be rendered.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/can_render_samples>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        In order to prevent tofu from being seen on fonts.google.com, this check\n        verifies that all samples specified by METADATA.pb can be properly\n        rendered by the font.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check if category on METADATA.pb matches what can be inferred from the family name.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/category_hints>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Sometimes the font familyname contains words that hint at which is the most\n        likely correct category to be declared on METADATA.pb\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check font has the expected color font tables.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/colorfont_tables>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Looks Good!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        COLR v0 fonts are widely supported in most browsers so they do not require\n        an SVG color table. However, some environments (e.g. Safari, Adobe apps)\n        do not currently support COLR v1 so we need to add an SVG table to these fonts,\n        except in the case of variable fonts, since SVG does not support\n        OpenType Variations.\n\n        To automatically generate compatible SVG/COLR tables,\n        run the maximum_color tool in nanoemoji:\n        https://github.com/googlefonts/nanoemoji\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Color layers should have a minimum brightness",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/color_cpal_brightness>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Looks good!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Layers of a COLRv0 font should not be too dark or too bright. When layer colors\n        are set explicitly, they can't be changed and they may turn out illegible\n        against dark or bright backgrounds.\n\n        While traditional color-less fonts can be colored in design apps or CSS, a\n        black color definition in a COLRv0 font actually means that that layer will be\n        rendered in black regardless of the background color. This leads to text\n        becoming invisible against a dark background, for instance when using a dark\n        theme in a web browser or operating system.\n\n        This check ensures that layer colors are at least 10% bright and at most 90%\n        bright, when not already set to the current color (0xFFFF).\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Put an empty glyph on GID 1 right after the .notdef glyph for COLRv0 fonts.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/empty_glyph_on_gid1_for_colrv0>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Looks good!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        A rendering bug in Windows 10 paints whichever glyph is on GID 1 on top of\n        some glyphs, colored or not. This only occurs for COLR version 0 fonts.\n\n        Having a glyph with no contours on GID 1 is a practical workaround for that.\n\n        See https://github.com/googlefonts/gftools/issues/609\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Noto fonts must have an ARTICLE.en_us.html file",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/description/noto_has_article>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_noto",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Noto fonts are displayed in a different way on the fonts.google.com\n         web site, and so must also contain an article about them.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Checking file is named canonically.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/canonical_filename>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Expected \"GFSNeohellenic-Regular.ttf. Got GFSNeohellenic.ttf. [code: bad-filename]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        A font's filename must be composed as \"<familyname>-<stylename>.ttf\":\n\n        - Nunito-Regular.ttf\n\n        - Oswald-BoldItalic.ttf\n\n\n        Variable fonts must list the axis tags in alphabetical order in\n        square brackets and separated by commas:\n\n        - Roboto[wdth,wght].ttf\n\n        - Familyname-Italic[wght].ttf\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "Does DESCRIPTION file contain broken links?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/description/broken_links>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: description_html",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The snippet of HTML in the DESCRIPTION.en_us.html file is added to the font\n        family webpage on the Google Fonts website. For that reason, all hyperlinks\n        in it must be properly working.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "URLs on DESCRIPTION file must not display http(s) prefix.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/description/urls>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: description_html",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The snippet of HTML in the DESCRIPTION.en_us.html file is added to the font\n        family webpage on the Google Fonts website.\n\n        Google Fonts has a content formatting policy for that snippet that expects the\n        text content of links not to include the http:// or https:// prefixes.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Does DESCRIPTION file contain a upstream Git repo URL?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/description/git_url>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: description_html",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The contents of the DESCRIPTION.en-us.html file are displayed on the\n        Google Fonts website in the about section of each font family specimen page.\n\n        Since all of the Google Fonts collection is composed of libre-licensed fonts,\n        this check enforces a policy that there must be a hypertext link in that page\n        directing users to the repository where the font project files are\n        made available.\n\n        Such hosting is typically done on sites like Github, Gitlab, GNU Savannah or\n        any other git-based version control service.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Is this a proper HTML snippet?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/description/valid_html>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/DESCRIPTION.en_us.html does not include an HTML <p> tag. [code: lacks-paragraph]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Sometimes people write malformed HTML markup. This check should ensure the\n        file is good.\n\n        Additionally, when packaging families for being pushed to the `google/fonts`\n        git repo, if there is no DESCRIPTION.en_us.html file, some older versions of\n        the `add_font.py` tool insert a placeholder description file which contains\n        invalid html. This file needs to either be replaced with an existing\n        description file or edited by hand.\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "DESCRIPTION.en_us.html must have more than 200 bytes.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/description/min_length>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "DESCRIPTION.en_us.html is larger than 200 bytes.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "DESCRIPTION.en_us.html should end in a linebreak.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/description/eof_linebreak>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The last characther on DESCRIPTION.en_us.html is not a line-break. Please add it. [code: missing-eof-linebreak]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Some older text-handling tools sometimes misbehave if the last line of data\n        in a text file is not terminated with a newline character (also known as '\\n').\n\n        We know that this is a very small detail, but for the sake of keeping all\n        DESCRIPTION.en_us.html files uniformly formatted throughout the GFonts\n        collection, we chose to adopt the practice of placing this final linebreak\n        character on them.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Check METADATA.pb parse correctly.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/parses>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb parsed successfuly.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The purpose of this check is to ensure that the METADATA.pb file is not\n        malformed.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Font designer field in METADATA.pb must not be 'unknown'.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/unknown_designer>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font designer field is not 'unknown'.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Font designer field in METADATA.pb must not contain 'Multiple designers'.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/multiple_designers>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Looks good.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        For a while the string \"Multiple designers\" was used as a placeholder on\n        METADATA.pb files. We should replace all those instances with actual designer\n        names so that proper credits are displayed on the Google Fonts family\n        specimen pages.\n\n        If there's more than a single designer, the designer names must be\n        separated by commas.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Multiple values in font designer field in METADATA.pb must be separated by commas.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/designer_values>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Looks good.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        We must use commas instead of forward slashes because the server-side code\n        at the fonts.google.com directory will segment the string on the commas into\n        a list of names and display the first item in the list as the\n        \"principal designer\" while the remaining names are identified as \"contributors\".\n\n        See eg https://fonts.google.com/specimen/Rubik\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Does METADATA.pb copyright field contain broken links?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/broken_links>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "All links in the METADATA.pb file look good!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Ensure METADATA.pb lists all font binaries.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/undeclared_fonts>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The set of font binaries available, except the ones on a \"static\" subdir,\n        must match exactly those declared on the METADATA.pb file.\n\n        Also, to avoid confusion, we expect that font files (other than statics)\n        are not placed on subdirectories.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Ensure METADATA.pb category field is valid.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/category>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        There are only five acceptable values for the category field in a METADATA.pb\n        file:\n\n        - MONOSPACE\n\n        - SANS_SERIF\n\n        - SERIF\n\n        - DISPLAY\n\n        - HANDWRITING\n\n        This check is meant to avoid typos in this field.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Checking OS/2 fsType does not impose restrictions.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/fstype>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2 fsType is properly set to zero.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The fsType in the OS/2 table is a legacy DRM-related field. Fonts in the\n        Google Fonts collection must have it set to zero (also known as\n        \"Installable Embedding\"). This setting indicates that the fonts can be\n        embedded in documents and permanently installed by applications on\n        remote systems.\n\n        More detailed info is available at:\n        https://docs.microsoft.com/en-us/typography/opentype/spec/os2#fstype\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Checking OS/2 achVendID.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/vendor_id>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2 VendorID value 'Alts' is not yet recognized. If you registered it recently, then it's safe to ignore this warning message. Otherwise, you should set it to your own unique 4 character code, and register it with Microsoft at https://www.microsoft.com/typography/links/vendorlist.aspx\n [code: unknown]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Microsoft keeps a list of font vendors and their respective contact info. This\n        list is updated regularly and is indexed by a 4-char \"Vendor ID\" which is\n        stored in the achVendID field of the OS/2 table.\n\n        Registering your ID is not mandatory, but it is a good practice since some\n        applications may display the type designer / type foundry contact info on some\n        dialog and also because that info will be visible on Microsoft's website:\n\n        https://docs.microsoft.com/en-us/typography/vendors/\n\n        This check verifies whether or not a given font's vendor ID is registered in\n        that list or if it has some of the default values used by the most common\n        font editors.\n\n        Each new FontBakery release includes a cached copy of that list of vendor IDs.\n        If you registered recently, you're safe to ignore warnings emitted by this\n        check, since your ID will soon be included in one of our upcoming releases.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Check Google Fonts glyph coverage.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/glyph_coverage>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Missing required codepoints:\n\n\t- 0x030B (COMBINING DOUBLE ACUTE ACCENT)\n\n\n\t- 0x0304 (COMBINING MACRON)\n\n\n\t- 0x1E9E (LATIN CAPITAL LETTER SHARP S)\n\n\n\t- 0x0237 (LATIN SMALL LETTER DOTLESS J)\n\n\n\t- 0x0307 (COMBINING DOT ABOVE)\n\n\n\t- 0x0302 (COMBINING CIRCUMFLEX ACCENT)\n\n\n\t- 0x030C (COMBINING CARON)\n\n\n\t- 0x0306 (COMBINING BREVE)\n\n\n\t- 0x030A (COMBINING RING ABOVE)\n [code: missing-codepoints]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Google Fonts expects that fonts in its collection support at least the minimal\n        set of characters defined in the `GF-latin-core` glyph-set.\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "Check for METADATA subsets with zero support.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/unsupported_subsets>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This check ensures that the subsets specified on a METADATA.pb file are\n        actually supported (even if only partially) by the font files.\n\n        Subsets for which none of the codepoints are supported will cause the\n        check to FAIL.\n    ",
                    "result": "PASS",
                    "severity": 10
                },
                {
                    "description": "Check for codepoints not covered by METADATA subsets.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/unreachable_subsetting>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The following codepoints supported by the font are not covered by\n    any subsets defined in the font's metadata file, and will never\n    be served. You can solve this by either manually adding additional\n    subset declarations to METADATA.pb, or by editing the glyphset\n    definitions.\n\n * U+0100 LATIN CAPITAL LETTER A WITH MACRON: try adding latin-ext\n * U+0101 LATIN SMALL LETTER A WITH MACRON: try adding latin-ext\n * U+0102 LATIN CAPITAL LETTER A WITH BREVE: try adding one of: latin-ext, vietnamese\n * U+0103 LATIN SMALL LETTER A WITH BREVE: try adding one of: latin-ext, vietnamese\n * U+0104 LATIN CAPITAL LETTER A WITH OGONEK: try adding latin-ext\n * U+0105 LATIN SMALL LETTER A WITH OGONEK: try adding latin-ext\n * U+0106 LATIN CAPITAL LETTER C WITH ACUTE: try adding latin-ext\n * U+0107 LATIN SMALL LETTER C WITH ACUTE: try adding latin-ext\n * U+0108 LATIN CAPITAL LETTER C WITH CIRCUMFLEX: try adding latin-ext\n * U+0109 LATIN SMALL LETTER C WITH CIRCUMFLEX: try adding latin-ext\n * U+010A LATIN CAPITAL LETTER C WITH DOT ABOVE: try adding latin-ext\n * U+010B LATIN SMALL LETTER C WITH DOT ABOVE: try adding latin-ext\n * U+010C LATIN CAPITAL LETTER C WITH CARON: try adding latin-ext\n * U+010D LATIN SMALL LETTER C WITH CARON: try adding latin-ext\n * U+010E LATIN CAPITAL LETTER D WITH CARON: try adding latin-ext\n * U+010F LATIN SMALL LETTER D WITH CARON: try adding latin-ext\n * U+0110 LATIN CAPITAL LETTER D WITH STROKE: try adding one of: latin-ext, vietnamese\n * U+0111 LATIN SMALL LETTER D WITH STROKE: try adding one of: latin-ext, vietnamese\n * U+0112 LATIN CAPITAL LETTER E WITH MACRON: try adding latin-ext\n * U+0113 LATIN SMALL LETTER E WITH MACRON: try adding latin-ext\n * U+0114 LATIN CAPITAL LETTER E WITH BREVE: try adding latin-ext\n * U+0115 LATIN SMALL LETTER E WITH BREVE: try adding latin-ext\n * U+0116 LATIN CAPITAL LETTER E WITH DOT ABOVE: try adding latin-ext\n * U+0117 LATIN SMALL LETTER E WITH DOT ABOVE: try adding latin-ext\n * U+0118 LATIN CAPITAL LETTER E WITH OGONEK: try adding latin-ext\n * U+0119 LATIN SMALL LETTER E WITH OGONEK: try adding latin-ext\n * U+011A LATIN CAPITAL LETTER E WITH CARON: try adding latin-ext\n * U+011B LATIN SMALL LETTER E WITH CARON: try adding latin-ext\n * U+011C LATIN CAPITAL LETTER G WITH CIRCUMFLEX: try adding latin-ext\n * U+011D LATIN SMALL LETTER G WITH CIRCUMFLEX: try adding latin-ext\n * U+011E LATIN CAPITAL LETTER G WITH BREVE: try adding latin-ext\n * U+011F LATIN SMALL LETTER G WITH BREVE: try adding latin-ext\n * U+0120 LATIN CAPITAL LETTER G WITH DOT ABOVE: try adding latin-ext\n * U+0121 LATIN SMALL LETTER G WITH DOT ABOVE: try adding latin-ext\n * U+0122 LATIN CAPITAL LETTER G WITH CEDILLA: try adding latin-ext\n * U+0123 LATIN SMALL LETTER G WITH CEDILLA: try adding latin-ext\n * U+0124 LATIN CAPITAL LETTER H WITH CIRCUMFLEX: try adding latin-ext\n * U+0125 LATIN SMALL LETTER H WITH CIRCUMFLEX: try adding latin-ext\n * U+0126 LATIN CAPITAL LETTER H WITH STROKE: try adding latin-ext\n * U+0127 LATIN SMALL LETTER H WITH STROKE: try adding latin-ext\n * U+0128 LATIN CAPITAL LETTER I WITH TILDE: try adding one of: latin-ext, vietnamese\n * U+0129 LATIN SMALL LETTER I WITH TILDE: try adding one of: latin-ext, vietnamese\n * U+012A LATIN CAPITAL LETTER I WITH MACRON: try adding latin-ext\n * U+012B LATIN SMALL LETTER I WITH MACRON: try adding latin-ext\n * U+012C LATIN CAPITAL LETTER I WITH BREVE: try adding latin-ext\n * U+012D LATIN SMALL LETTER I WITH BREVE: try adding latin-ext\n * U+012E LATIN CAPITAL LETTER I WITH OGONEK: try adding latin-ext\n * U+012F LATIN SMALL LETTER I WITH OGONEK: try adding latin-ext\n * U+0130 LATIN CAPITAL LETTER I WITH DOT ABOVE: try adding latin-ext\n * U+0132 LATIN CAPITAL LIGATURE IJ: try adding latin-ext\n * U+0133 LATIN SMALL LIGATURE IJ: try adding latin-ext\n * U+0134 LATIN CAPITAL LETTER J WITH CIRCUMFLEX: try adding latin-ext\n * U+0135 LATIN SMALL LETTER J WITH CIRCUMFLEX: try adding latin-ext\n * U+0136 LATIN CAPITAL LETTER K WITH CEDILLA: try adding latin-ext\n * U+0137 LATIN SMALL LETTER K WITH CEDILLA: try adding latin-ext\n * U+0139 LATIN CAPITAL LETTER L WITH ACUTE: try adding latin-ext\n * U+013A LATIN SMALL LETTER L WITH ACUTE: try adding latin-ext\n * U+013B LATIN CAPITAL LETTER L WITH CEDILLA: try adding latin-ext\n * U+013C LATIN SMALL LETTER L WITH CEDILLA: try adding latin-ext\n * U+013D LATIN CAPITAL LETTER L WITH CARON: try adding latin-ext\n * U+013E LATIN SMALL LETTER L WITH CARON: try adding latin-ext\n * U+013F LATIN CAPITAL LETTER L WITH MIDDLE DOT: try adding latin-ext\n * U+0140 LATIN SMALL LETTER L WITH MIDDLE DOT: try adding latin-ext\n * U+0141 LATIN CAPITAL LETTER L WITH STROKE: try adding latin-ext\n * U+0142 LATIN SMALL LETTER L WITH STROKE: try adding latin-ext\n * U+0143 LATIN CAPITAL LETTER N WITH ACUTE: try adding latin-ext\n * U+0144 LATIN SMALL LETTER N WITH ACUTE: try adding latin-ext\n * U+0145 LATIN CAPITAL LETTER N WITH CEDILLA: try adding latin-ext\n * U+0146 LATIN SMALL LETTER N WITH CEDILLA: try adding latin-ext\n * U+0147 LATIN CAPITAL LETTER N WITH CARON: try adding latin-ext\n * U+0148 LATIN SMALL LETTER N WITH CARON: try adding latin-ext\n * U+0149 LATIN SMALL LETTER N PRECEDED BY APOSTROPHE: try adding latin-ext\n * U+014A LATIN CAPITAL LETTER ENG: try adding latin-ext\n * U+014B LATIN SMALL LETTER ENG: try adding latin-ext\n * U+014C LATIN CAPITAL LETTER O WITH MACRON: try adding latin-ext\n * U+014D LATIN SMALL LETTER O WITH MACRON: try adding latin-ext\n * U+014E LATIN CAPITAL LETTER O WITH BREVE: try adding latin-ext\n * U+014F LATIN SMALL LETTER O WITH BREVE: try adding latin-ext\n * U+0150 LATIN CAPITAL LETTER O WITH DOUBLE ACUTE: try adding latin-ext\n * U+0151 LATIN SMALL LETTER O WITH DOUBLE ACUTE: try adding latin-ext\n * U+0154 LATIN CAPITAL LETTER R WITH ACUTE: try adding latin-ext\n * U+0155 LATIN SMALL LETTER R WITH ACUTE: try adding latin-ext\n * U+0156 LATIN CAPITAL LETTER R WITH CEDILLA: try adding latin-ext\n * U+0157 LATIN SMALL LETTER R WITH CEDILLA: try adding latin-ext\n * U+0158 LATIN CAPITAL LETTER R WITH CARON: try adding latin-ext\n * U+0159 LATIN SMALL LETTER R WITH CARON: try adding latin-ext\n * U+015A LATIN CAPITAL LETTER S WITH ACUTE: try adding latin-ext\n * U+015B LATIN SMALL LETTER S WITH ACUTE: try adding latin-ext\n * U+015C LATIN CAPITAL LETTER S WITH CIRCUMFLEX: try adding latin-ext\n * U+015D LATIN SMALL LETTER S WITH CIRCUMFLEX: try adding latin-ext\n * U+015E LATIN CAPITAL LETTER S WITH CEDILLA: try adding latin-ext\n * U+015F LATIN SMALL LETTER S WITH CEDILLA: try adding latin-ext\n * U+0160 LATIN CAPITAL LETTER S WITH CARON: try adding latin-ext\n * U+0161 LATIN SMALL LETTER S WITH CARON: try adding latin-ext\n * U+0162 LATIN CAPITAL LETTER T WITH CEDILLA: try adding latin-ext\n * U+0163 LATIN SMALL LETTER T WITH CEDILLA: try adding latin-ext\n * U+0164 LATIN CAPITAL LETTER T WITH CARON: try adding latin-ext\n * U+0165 LATIN SMALL LETTER T WITH CARON: try adding latin-ext\n * U+0166 LATIN CAPITAL LETTER T WITH STROKE: try adding latin-ext\n * U+0167 LATIN SMALL LETTER T WITH STROKE: try adding latin-ext\n * U+0168 LATIN CAPITAL LETTER U WITH TILDE: try adding one of: latin-ext, vietnamese\n * U+0169 LATIN SMALL LETTER U WITH TILDE: try adding one of: latin-ext, vietnamese\n * U+016A LATIN CAPITAL LETTER U WITH MACRON: try adding latin-ext\n * U+016B LATIN SMALL LETTER U WITH MACRON: try adding latin-ext\n * U+016C LATIN CAPITAL LETTER U WITH BREVE: try adding latin-ext\n * U+016D LATIN SMALL LETTER U WITH BREVE: try adding latin-ext\n * U+016E LATIN CAPITAL LETTER U WITH RING ABOVE: try adding latin-ext\n * U+016F LATIN SMALL LETTER U WITH RING ABOVE: try adding latin-ext\n * U+0170 LATIN CAPITAL LETTER U WITH DOUBLE ACUTE: try adding latin-ext\n * U+0171 LATIN SMALL LETTER U WITH DOUBLE ACUTE: try adding latin-ext\n * U+0172 LATIN CAPITAL LETTER U WITH OGONEK: try adding latin-ext\n * U+0173 LATIN SMALL LETTER U WITH OGONEK: try adding latin-ext\n * U+0174 LATIN CAPITAL LETTER W WITH CIRCUMFLEX: try adding latin-ext\n * U+0175 LATIN SMALL LETTER W WITH CIRCUMFLEX: try adding latin-ext\n * U+0176 LATIN CAPITAL LETTER Y WITH CIRCUMFLEX: try adding latin-ext\n * U+0177 LATIN SMALL LETTER Y WITH CIRCUMFLEX: try adding latin-ext\n * U+0178 LATIN CAPITAL LETTER Y WITH DIAERESIS: try adding latin-ext\n * U+0179 LATIN CAPITAL LETTER Z WITH ACUTE: try adding latin-ext\n * U+017A LATIN SMALL LETTER Z WITH ACUTE: try adding latin-ext\n * U+017B LATIN CAPITAL LETTER Z WITH DOT ABOVE: try adding latin-ext\n * U+017C LATIN SMALL LETTER Z WITH DOT ABOVE: try adding latin-ext\n * U+017D LATIN CAPITAL LETTER Z WITH CARON: try adding latin-ext\n * U+017E LATIN SMALL LETTER Z WITH CARON: try adding latin-ext\n * U+017F LATIN SMALL LETTER LONG S: try adding latin-ext\n * U+0192 LATIN SMALL LETTER F WITH HOOK: try adding latin-ext\n * U+01A0 LATIN CAPITAL LETTER O WITH HORN: try adding one of: latin-ext, vietnamese\n * U+01A1 LATIN SMALL LETTER O WITH HORN: try adding one of: latin-ext, vietnamese\n * U+01AF LATIN CAPITAL LETTER U WITH HORN: try adding one of: latin-ext, vietnamese\n * U+01B0 LATIN SMALL LETTER U WITH HORN: try adding one of: latin-ext, vietnamese\n * U+01B7 LATIN CAPITAL LETTER EZH: try adding latin-ext\n * U+01F4 LATIN CAPITAL LETTER G WITH ACUTE: try adding latin-ext\n * U+01F5 LATIN SMALL LETTER G WITH ACUTE: try adding latin-ext\n * U+01FA LATIN CAPITAL LETTER A WITH RING ABOVE AND ACUTE: try adding latin-ext\n * U+01FB LATIN SMALL LETTER A WITH RING ABOVE AND ACUTE: try adding latin-ext\n * U+01FC LATIN CAPITAL LETTER AE WITH ACUTE: try adding latin-ext\n * U+01FD LATIN SMALL LETTER AE WITH ACUTE: try adding latin-ext\n * U+01FE LATIN CAPITAL LETTER O WITH STROKE AND ACUTE: try adding latin-ext\n * U+01FF LATIN SMALL LETTER O WITH STROKE AND ACUTE: try adding latin-ext\n * U+0218 LATIN CAPITAL LETTER S WITH COMMA BELOW: try adding latin-ext\n * U+0219 LATIN SMALL LETTER S WITH COMMA BELOW: try adding latin-ext\n * U+0292 LATIN SMALL LETTER EZH: not included in any glyphset definition\n * U+02C7 CARON: try adding one of: canadian-aboriginal, tifinagh\n * U+02C9 MODIFIER LETTER MACRON: not included in any glyphset definition\n * U+02D8 BREVE: try adding canadian-aboriginal\n * U+02D9 DOT ABOVE: try adding canadian-aboriginal\n * U+02DB OGONEK: try adding canadian-aboriginal\n * U+02DD DOUBLE ACUTE ACCENT: not included in any glyphset definition\n * U+0300 COMBINING GRAVE ACCENT: try adding one of: cherokee, tai-le, coptic\n * U+0301 COMBINING ACUTE ACCENT: try adding one of: cherokee, tai-le, coptic, tifinagh\n * U+0303 COMBINING TILDE: not included in any glyphset definition\n * U+0308 COMBINING DIAERESIS: try adding one of: gothic, tai-le, coptic\n * U+0309 COMBINING HOOK ABOVE: try adding tifinagh\n * U+0312 COMBINING TURNED COMMA ABOVE: not included in any glyphset definition\n * U+0313 COMBINING COMMA ABOVE: not included in any glyphset definition\n * U+0314 COMBINING REVERSED COMMA ABOVE: not included in any glyphset definition\n * U+0323 COMBINING DOT BELOW: try adding one of: malayalam, cherokee, coptic, tifinagh\n * U+0326 COMBINING COMMA BELOW: not included in any glyphset definition\n * U+0327 COMBINING CEDILLA: not included in any glyphset definition\n * U+0328 COMBINING OGONEK: not included in any glyphset definition\n * U+0342 COMBINING GREEK PERISPOMENI: not included in any glyphset definition\n * U+0343 COMBINING GREEK KORONIS: not included in any glyphset definition\n * U+0345 COMBINING GREEK YPOGEGRAMMENI: not included in any glyphset definition\n * U+04D2 CYRILLIC CAPITAL LETTER A WITH DIAERESIS: try adding cyrillic-ext\n * U+04D3 CYRILLIC SMALL LETTER A WITH DIAERESIS: try adding cyrillic-ext\n * U+04E6 CYRILLIC CAPITAL LETTER O WITH DIAERESIS: try adding cyrillic-ext\n * U+04E7 CYRILLIC SMALL LETTER O WITH DIAERESIS: try adding cyrillic-ext\n * U+1E80 LATIN CAPITAL LETTER W WITH GRAVE: try adding latin-ext\n * U+1E81 LATIN SMALL LETTER W WITH GRAVE: try adding latin-ext\n * U+1E82 LATIN CAPITAL LETTER W WITH ACUTE: try adding latin-ext\n * U+1E83 LATIN SMALL LETTER W WITH ACUTE: try adding latin-ext\n * U+1E84 LATIN CAPITAL LETTER W WITH DIAERESIS: try adding latin-ext\n * U+1E85 LATIN SMALL LETTER W WITH DIAERESIS: try adding latin-ext\n * U+1EA0 LATIN CAPITAL LETTER A WITH DOT BELOW: try adding vietnamese\n * U+1EA1 LATIN SMALL LETTER A WITH DOT BELOW: try adding vietnamese\n * U+1EA2 LATIN CAPITAL LETTER A WITH HOOK ABOVE: try adding vietnamese\n * U+1EA3 LATIN SMALL LETTER A WITH HOOK ABOVE: try adding vietnamese\n * U+1EA4 LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND ACUTE: try adding vietnamese\n * U+1EA5 LATIN SMALL LETTER A WITH CIRCUMFLEX AND ACUTE: try adding vietnamese\n * U+1EA6 LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND GRAVE: try adding vietnamese\n * U+1EA7 LATIN SMALL LETTER A WITH CIRCUMFLEX AND GRAVE: try adding vietnamese\n * U+1EA8 LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND HOOK ABOVE: try adding vietnamese\n * U+1EA9 LATIN SMALL LETTER A WITH CIRCUMFLEX AND HOOK ABOVE: try adding vietnamese\n * U+1EAA LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND TILDE: try adding vietnamese\n * U+1EAB LATIN SMALL LETTER A WITH CIRCUMFLEX AND TILDE: try adding vietnamese\n * U+1EAC LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND DOT BELOW: try adding vietnamese\n * U+1EAD LATIN SMALL LETTER A WITH CIRCUMFLEX AND DOT BELOW: try adding vietnamese\n * U+1EAE LATIN CAPITAL LETTER A WITH BREVE AND ACUTE: try adding vietnamese\n * U+1EAF LATIN SMALL LETTER A WITH BREVE AND ACUTE: try adding vietnamese\n * U+1EB0 LATIN CAPITAL LETTER A WITH BREVE AND GRAVE: try adding vietnamese\n * U+1EB1 LATIN SMALL LETTER A WITH BREVE AND GRAVE: try adding vietnamese\n * U+1EB2 LATIN CAPITAL LETTER A WITH BREVE AND HOOK ABOVE: try adding vietnamese\n * U+1EB3 LATIN SMALL LETTER A WITH BREVE AND HOOK ABOVE: try adding vietnamese\n * U+1EB4 LATIN CAPITAL LETTER A WITH BREVE AND TILDE: try adding vietnamese\n * U+1EB5 LATIN SMALL LETTER A WITH BREVE AND TILDE: try adding vietnamese\n * U+1EB6 LATIN CAPITAL LETTER A WITH BREVE AND DOT BELOW: try adding vietnamese\n * U+1EB7 LATIN SMALL LETTER A WITH BREVE AND DOT BELOW: try adding vietnamese\n * U+1EB8 LATIN CAPITAL LETTER E WITH DOT BELOW: try adding vietnamese\n * U+1EB9 LATIN SMALL LETTER E WITH DOT BELOW: try adding vietnamese\n * U+1EBA LATIN CAPITAL LETTER E WITH HOOK ABOVE: try adding vietnamese\n * U+1EBB LATIN SMALL LETTER E WITH HOOK ABOVE: try adding vietnamese\n * U+1EBC LATIN CAPITAL LETTER E WITH TILDE: try adding vietnamese\n * U+1EBD LATIN SMALL LETTER E WITH TILDE: try adding vietnamese\n * U+1EBE LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND ACUTE: try adding vietnamese\n * U+1EBF LATIN SMALL LETTER E WITH CIRCUMFLEX AND ACUTE: try adding vietnamese\n * U+1EC0 LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND GRAVE: try adding vietnamese\n * U+1EC1 LATIN SMALL LETTER E WITH CIRCUMFLEX AND GRAVE: try adding vietnamese\n * U+1EC2 LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND HOOK ABOVE: try adding vietnamese\n * U+1EC3 LATIN SMALL LETTER E WITH CIRCUMFLEX AND HOOK ABOVE: try adding vietnamese\n * U+1EC4 LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND TILDE: try adding vietnamese\n * U+1EC5 LATIN SMALL LETTER E WITH CIRCUMFLEX AND TILDE: try adding vietnamese\n * U+1EC6 LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND DOT BELOW: try adding vietnamese\n * U+1EC7 LATIN SMALL LETTER E WITH CIRCUMFLEX AND DOT BELOW: try adding vietnamese\n * U+1EC8 LATIN CAPITAL LETTER I WITH HOOK ABOVE: try adding vietnamese\n * U+1EC9 LATIN SMALL LETTER I WITH HOOK ABOVE: try adding vietnamese\n * U+1ECA LATIN CAPITAL LETTER I WITH DOT BELOW: try adding vietnamese\n * U+1ECB LATIN SMALL LETTER I WITH DOT BELOW: try adding vietnamese\n * U+1ECC LATIN CAPITAL LETTER O WITH DOT BELOW: try adding vietnamese\n * U+1ECD LATIN SMALL LETTER O WITH DOT BELOW: try adding vietnamese\n * U+1ECE LATIN CAPITAL LETTER O WITH HOOK ABOVE: try adding vietnamese\n * U+1ECF LATIN SMALL LETTER O WITH HOOK ABOVE: try adding vietnamese\n * U+1ED0 LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND ACUTE: try adding vietnamese\n * U+1ED1 LATIN SMALL LETTER O WITH CIRCUMFLEX AND ACUTE: try adding vietnamese\n * U+1ED2 LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND GRAVE: try adding vietnamese\n * U+1ED3 LATIN SMALL LETTER O WITH CIRCUMFLEX AND GRAVE: try adding vietnamese\n * U+1ED4 LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND HOOK ABOVE: try adding vietnamese\n * U+1ED5 LATIN SMALL LETTER O WITH CIRCUMFLEX AND HOOK ABOVE: try adding vietnamese\n * U+1ED6 LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND TILDE: try adding vietnamese\n * U+1ED7 LATIN SMALL LETTER O WITH CIRCUMFLEX AND TILDE: try adding vietnamese\n * U+1ED8 LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND DOT BELOW: try adding vietnamese\n * U+1ED9 LATIN SMALL LETTER O WITH CIRCUMFLEX AND DOT BELOW: try adding vietnamese\n * U+1EDA LATIN CAPITAL LETTER O WITH HORN AND ACUTE: try adding vietnamese\n * U+1EDB LATIN SMALL LETTER O WITH HORN AND ACUTE: try adding vietnamese\n * U+1EDC LATIN CAPITAL LETTER O WITH HORN AND GRAVE: try adding vietnamese\n * U+1EDD LATIN SMALL LETTER O WITH HORN AND GRAVE: try adding vietnamese\n * U+1EDE LATIN CAPITAL LETTER O WITH HORN AND HOOK ABOVE: try adding vietnamese\n * U+1EDF LATIN SMALL LETTER O WITH HORN AND HOOK ABOVE: try adding vietnamese\n * U+1EE0 LATIN CAPITAL LETTER O WITH HORN AND TILDE: try adding vietnamese\n * U+1EE1 LATIN SMALL LETTER O WITH HORN AND TILDE: try adding vietnamese\n * U+1EE2 LATIN CAPITAL LETTER O WITH HORN AND DOT BELOW: try adding vietnamese\n * U+1EE3 LATIN SMALL LETTER O WITH HORN AND DOT BELOW: try adding vietnamese\n * U+1EE4 LATIN CAPITAL LETTER U WITH DOT BELOW: try adding vietnamese\n * U+1EE5 LATIN SMALL LETTER U WITH DOT BELOW: try adding vietnamese\n * U+1EE6 LATIN CAPITAL LETTER U WITH HOOK ABOVE: try adding vietnamese\n * U+1EE7 LATIN SMALL LETTER U WITH HOOK ABOVE: try adding vietnamese\n * U+1EE8 LATIN CAPITAL LETTER U WITH HORN AND ACUTE: try adding vietnamese\n * U+1EE9 LATIN SMALL LETTER U WITH HORN AND ACUTE: try adding vietnamese\n * U+1EEA LATIN CAPITAL LETTER U WITH HORN AND GRAVE: try adding vietnamese\n * U+1EEB LATIN SMALL LETTER U WITH HORN AND GRAVE: try adding vietnamese\n * U+1EEC LATIN CAPITAL LETTER U WITH HORN AND HOOK ABOVE: try adding vietnamese\n * U+1EED LATIN SMALL LETTER U WITH HORN AND HOOK ABOVE: try adding vietnamese\n * U+1EEE LATIN CAPITAL LETTER U WITH HORN AND TILDE: try adding vietnamese\n * U+1EEF LATIN SMALL LETTER U WITH HORN AND TILDE: try adding vietnamese\n * U+1EF0 LATIN CAPITAL LETTER U WITH HORN AND DOT BELOW: try adding vietnamese\n * U+1EF1 LATIN SMALL LETTER U WITH HORN AND DOT BELOW: try adding vietnamese\n * U+1EF2 LATIN CAPITAL LETTER Y WITH GRAVE: try adding one of: latin-ext, vietnamese\n * U+1EF3 LATIN SMALL LETTER Y WITH GRAVE: try adding one of: latin-ext, vietnamese\n * U+1EF4 LATIN CAPITAL LETTER Y WITH DOT BELOW: try adding one of: latin-ext, vietnamese\n * U+1EF5 LATIN SMALL LETTER Y WITH DOT BELOW: try adding one of: latin-ext, vietnamese\n * U+1EF6 LATIN CAPITAL LETTER Y WITH HOOK ABOVE: try adding one of: latin-ext, vietnamese\n * U+1EF7 LATIN SMALL LETTER Y WITH HOOK ABOVE: try adding one of: latin-ext, vietnamese\n * U+1EF8 LATIN CAPITAL LETTER Y WITH TILDE: try adding one of: latin-ext, vietnamese\n * U+1EF9 LATIN SMALL LETTER Y WITH TILDE: try adding one of: latin-ext, vietnamese\n * U+1F00 GREEK SMALL LETTER ALPHA WITH PSILI: try adding greek-ext\n * U+1F01 GREEK SMALL LETTER ALPHA WITH DASIA: try adding greek-ext\n * U+1F02 GREEK SMALL LETTER ALPHA WITH PSILI AND VARIA: try adding greek-ext\n * U+1F03 GREEK SMALL LETTER ALPHA WITH DASIA AND VARIA: try adding greek-ext\n * U+1F04 GREEK SMALL LETTER ALPHA WITH PSILI AND OXIA: try adding greek-ext\n * U+1F05 GREEK SMALL LETTER ALPHA WITH DASIA AND OXIA: try adding greek-ext\n * U+1F06 GREEK SMALL LETTER ALPHA WITH PSILI AND PERISPOMENI: try adding greek-ext\n * U+1F07 GREEK SMALL LETTER ALPHA WITH DASIA AND PERISPOMENI: try adding greek-ext\n * U+1F08 GREEK CAPITAL LETTER ALPHA WITH PSILI: try adding greek-ext\n * U+1F09 GREEK CAPITAL LETTER ALPHA WITH DASIA: try adding greek-ext\n * U+1F0A GREEK CAPITAL LETTER ALPHA WITH PSILI AND VARIA: try adding greek-ext\n * U+1F0B GREEK CAPITAL LETTER ALPHA WITH DASIA AND VARIA: try adding greek-ext\n * U+1F0C GREEK CAPITAL LETTER ALPHA WITH PSILI AND OXIA: try adding greek-ext\n * U+1F0D GREEK CAPITAL LETTER ALPHA WITH DASIA AND OXIA: try adding greek-ext\n * U+1F0E GREEK CAPITAL LETTER ALPHA WITH PSILI AND PERISPOMENI: try adding greek-ext\n * U+1F0F GREEK CAPITAL LETTER ALPHA WITH DASIA AND PERISPOMENI: try adding greek-ext\n * U+1F10 GREEK SMALL LETTER EPSILON WITH PSILI: try adding greek-ext\n * U+1F11 GREEK SMALL LETTER EPSILON WITH DASIA: try adding greek-ext\n * U+1F12 GREEK SMALL LETTER EPSILON WITH PSILI AND VARIA: try adding greek-ext\n * U+1F13 GREEK SMALL LETTER EPSILON WITH DASIA AND VARIA: try adding greek-ext\n * U+1F14 GREEK SMALL LETTER EPSILON WITH PSILI AND OXIA: try adding greek-ext\n * U+1F15 GREEK SMALL LETTER EPSILON WITH DASIA AND OXIA: try adding greek-ext\n * U+1F18 GREEK CAPITAL LETTER EPSILON WITH PSILI: try adding greek-ext\n * U+1F19 GREEK CAPITAL LETTER EPSILON WITH DASIA: try adding greek-ext\n * U+1F1A GREEK CAPITAL LETTER EPSILON WITH PSILI AND VARIA: try adding greek-ext\n * U+1F1B GREEK CAPITAL LETTER EPSILON WITH DASIA AND VARIA: try adding greek-ext\n * U+1F1C GREEK CAPITAL LETTER EPSILON WITH PSILI AND OXIA: try adding greek-ext\n * U+1F1D GREEK CAPITAL LETTER EPSILON WITH DASIA AND OXIA: try adding greek-ext\n * U+1F20 GREEK SMALL LETTER ETA WITH PSILI: try adding greek-ext\n * U+1F21 GREEK SMALL LETTER ETA WITH DASIA: try adding greek-ext\n * U+1F22 GREEK SMALL LETTER ETA WITH PSILI AND VARIA: try adding greek-ext\n * U+1F23 GREEK SMALL LETTER ETA WITH DASIA AND VARIA: try adding greek-ext\n * U+1F24 GREEK SMALL LETTER ETA WITH PSILI AND OXIA: try adding greek-ext\n * U+1F25 GREEK SMALL LETTER ETA WITH DASIA AND OXIA: try adding greek-ext\n * U+1F26 GREEK SMALL LETTER ETA WITH PSILI AND PERISPOMENI: try adding greek-ext\n * U+1F27 GREEK SMALL LETTER ETA WITH DASIA AND PERISPOMENI: try adding greek-ext\n * U+1F28 GREEK CAPITAL LETTER ETA WITH PSILI: try adding greek-ext\n * U+1F29 GREEK CAPITAL LETTER ETA WITH DASIA: try adding greek-ext\n * U+1F2A GREEK CAPITAL LETTER ETA WITH PSILI AND VARIA: try adding greek-ext\n * U+1F2B GREEK CAPITAL LETTER ETA WITH DASIA AND VARIA: try adding greek-ext\n * U+1F2C GREEK CAPITAL LETTER ETA WITH PSILI AND OXIA: try adding greek-ext\n * U+1F2D GREEK CAPITAL LETTER ETA WITH DASIA AND OXIA: try adding greek-ext\n * U+1F2E GREEK CAPITAL LETTER ETA WITH PSILI AND PERISPOMENI: try adding greek-ext\n * U+1F2F GREEK CAPITAL LETTER ETA WITH DASIA AND PERISPOMENI: try adding greek-ext\n * U+1F30 GREEK SMALL LETTER IOTA WITH PSILI: try adding greek-ext\n * U+1F31 GREEK SMALL LETTER IOTA WITH DASIA: try adding greek-ext\n * U+1F32 GREEK SMALL LETTER IOTA WITH PSILI AND VARIA: try adding greek-ext\n * U+1F33 GREEK SMALL LETTER IOTA WITH DASIA AND VARIA: try adding greek-ext\n * U+1F34 GREEK SMALL LETTER IOTA WITH PSILI AND OXIA: try adding greek-ext\n * U+1F35 GREEK SMALL LETTER IOTA WITH DASIA AND OXIA: try adding greek-ext\n * U+1F36 GREEK SMALL LETTER IOTA WITH PSILI AND PERISPOMENI: try adding greek-ext\n * U+1F37 GREEK SMALL LETTER IOTA WITH DASIA AND PERISPOMENI: try adding greek-ext\n * U+1F38 GREEK CAPITAL LETTER IOTA WITH PSILI: try adding greek-ext\n * U+1F39 GREEK CAPITAL LETTER IOTA WITH DASIA: try adding greek-ext\n * U+1F3A GREEK CAPITAL LETTER IOTA WITH PSILI AND VARIA: try adding greek-ext\n * U+1F3B GREEK CAPITAL LETTER IOTA WITH DASIA AND VARIA: try adding greek-ext\n * U+1F3C GREEK CAPITAL LETTER IOTA WITH PSILI AND OXIA: try adding greek-ext\n * U+1F3D GREEK CAPITAL LETTER IOTA WITH DASIA AND OXIA: try adding greek-ext\n * U+1F3E GREEK CAPITAL LETTER IOTA WITH PSILI AND PERISPOMENI: try adding greek-ext\n * U+1F3F GREEK CAPITAL LETTER IOTA WITH DASIA AND PERISPOMENI: try adding greek-ext\n * U+1F40 GREEK SMALL LETTER OMICRON WITH PSILI: try adding greek-ext\n * U+1F41 GREEK SMALL LETTER OMICRON WITH DASIA: try adding greek-ext\n * U+1F42 GREEK SMALL LETTER OMICRON WITH PSILI AND VARIA: try adding greek-ext\n * U+1F43 GREEK SMALL LETTER OMICRON WITH DASIA AND VARIA: try adding greek-ext\n * U+1F44 GREEK SMALL LETTER OMICRON WITH PSILI AND OXIA: try adding greek-ext\n * U+1F45 GREEK SMALL LETTER OMICRON WITH DASIA AND OXIA: try adding greek-ext\n * U+1F48 GREEK CAPITAL LETTER OMICRON WITH PSILI: try adding greek-ext\n * U+1F49 GREEK CAPITAL LETTER OMICRON WITH DASIA: try adding greek-ext\n * U+1F4A GREEK CAPITAL LETTER OMICRON WITH PSILI AND VARIA: try adding greek-ext\n * U+1F4B GREEK CAPITAL LETTER OMICRON WITH DASIA AND VARIA: try adding greek-ext\n * U+1F4C GREEK CAPITAL LETTER OMICRON WITH PSILI AND OXIA: try adding greek-ext\n * U+1F4D GREEK CAPITAL LETTER OMICRON WITH DASIA AND OXIA: try adding greek-ext\n * U+1F50 GREEK SMALL LETTER UPSILON WITH PSILI: try adding greek-ext\n * U+1F51 GREEK SMALL LETTER UPSILON WITH DASIA: try adding greek-ext\n * U+1F52 GREEK SMALL LETTER UPSILON WITH PSILI AND VARIA: try adding greek-ext\n * U+1F53 GREEK SMALL LETTER UPSILON WITH DASIA AND VARIA: try adding greek-ext\n * U+1F54 GREEK SMALL LETTER UPSILON WITH PSILI AND OXIA: try adding greek-ext\n * U+1F55 GREEK SMALL LETTER UPSILON WITH DASIA AND OXIA: try adding greek-ext\n * U+1F56 GREEK SMALL LETTER UPSILON WITH PSILI AND PERISPOMENI: try adding greek-ext\n * U+1F57 GREEK SMALL LETTER UPSILON WITH DASIA AND PERISPOMENI: try adding greek-ext\n * U+1F59 GREEK CAPITAL LETTER UPSILON WITH DASIA: try adding greek-ext\n * U+1F5B GREEK CAPITAL LETTER UPSILON WITH DASIA AND VARIA: try adding greek-ext\n * U+1F5D GREEK CAPITAL LETTER UPSILON WITH DASIA AND OXIA: try adding greek-ext\n * U+1F5F GREEK CAPITAL LETTER UPSILON WITH DASIA AND PERISPOMENI: try adding greek-ext\n * U+1F60 GREEK SMALL LETTER OMEGA WITH PSILI: try adding greek-ext\n * U+1F61 GREEK SMALL LETTER OMEGA WITH DASIA: try adding greek-ext\n * U+1F62 GREEK SMALL LETTER OMEGA WITH PSILI AND VARIA: try adding greek-ext\n * U+1F63 GREEK SMALL LETTER OMEGA WITH DASIA AND VARIA: try adding greek-ext\n * U+1F64 GREEK SMALL LETTER OMEGA WITH PSILI AND OXIA: try adding greek-ext\n * U+1F65 GREEK SMALL LETTER OMEGA WITH DASIA AND OXIA: try adding greek-ext\n * U+1F66 GREEK SMALL LETTER OMEGA WITH PSILI AND PERISPOMENI: try adding greek-ext\n * U+1F67 GREEK SMALL LETTER OMEGA WITH DASIA AND PERISPOMENI: try adding greek-ext\n * U+1F68 GREEK CAPITAL LETTER OMEGA WITH PSILI: try adding greek-ext\n * U+1F69 GREEK CAPITAL LETTER OMEGA WITH DASIA: try adding greek-ext\n * U+1F6A GREEK CAPITAL LETTER OMEGA WITH PSILI AND VARIA: try adding greek-ext\n * U+1F6B GREEK CAPITAL LETTER OMEGA WITH DASIA AND VARIA: try adding greek-ext\n * U+1F6C GREEK CAPITAL LETTER OMEGA WITH PSILI AND OXIA: try adding greek-ext\n * U+1F6D GREEK CAPITAL LETTER OMEGA WITH DASIA AND OXIA: try adding greek-ext\n * U+1F6E GREEK CAPITAL LETTER OMEGA WITH PSILI AND PERISPOMENI: try adding greek-ext\n * U+1F6F GREEK CAPITAL LETTER OMEGA WITH DASIA AND PERISPOMENI: try adding greek-ext\n * U+1F70 GREEK SMALL LETTER ALPHA WITH VARIA: try adding greek-ext\n * U+1F71 GREEK SMALL LETTER ALPHA WITH OXIA: try adding greek-ext\n * U+1F72 GREEK SMALL LETTER EPSILON WITH VARIA: try adding greek-ext\n * U+1F73 GREEK SMALL LETTER EPSILON WITH OXIA: try adding greek-ext\n * U+1F74 GREEK SMALL LETTER ETA WITH VARIA: try adding greek-ext\n * U+1F75 GREEK SMALL LETTER ETA WITH OXIA: try adding greek-ext\n * U+1F76 GREEK SMALL LETTER IOTA WITH VARIA: try adding greek-ext\n * U+1F77 GREEK SMALL LETTER IOTA WITH OXIA: try adding greek-ext\n * U+1F78 GREEK SMALL LETTER OMICRON WITH VARIA: try adding greek-ext\n * U+1F79 GREEK SMALL LETTER OMICRON WITH OXIA: try adding greek-ext\n * U+1F7A GREEK SMALL LETTER UPSILON WITH VARIA: try adding greek-ext\n * U+1F7B GREEK SMALL LETTER UPSILON WITH OXIA: try adding greek-ext\n * U+1F7C GREEK SMALL LETTER OMEGA WITH VARIA: try adding greek-ext\n * U+1F7D GREEK SMALL LETTER OMEGA WITH OXIA: try adding greek-ext\n * U+1F80 GREEK SMALL LETTER ALPHA WITH PSILI AND YPOGEGRAMMENI: try adding greek-ext\n * U+1F81 GREEK SMALL LETTER ALPHA WITH DASIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1F82 GREEK SMALL LETTER ALPHA WITH PSILI AND VARIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1F83 GREEK SMALL LETTER ALPHA WITH DASIA AND VARIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1F84 GREEK SMALL LETTER ALPHA WITH PSILI AND OXIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1F85 GREEK SMALL LETTER ALPHA WITH DASIA AND OXIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1F86 GREEK SMALL LETTER ALPHA WITH PSILI AND PERISPOMENI AND YPOGEGRAMMENI: try adding greek-ext\n * U+1F87 GREEK SMALL LETTER ALPHA WITH DASIA AND PERISPOMENI AND YPOGEGRAMMENI: try adding greek-ext\n * U+1F88 GREEK CAPITAL LETTER ALPHA WITH PSILI AND PROSGEGRAMMENI: try adding greek-ext\n * U+1F89 GREEK CAPITAL LETTER ALPHA WITH DASIA AND PROSGEGRAMMENI: try adding greek-ext\n * U+1F8A GREEK CAPITAL LETTER ALPHA WITH PSILI AND VARIA AND PROSGEGRAMMENI: try adding greek-ext\n * U+1F8B GREEK CAPITAL LETTER ALPHA WITH DASIA AND VARIA AND PROSGEGRAMMENI: try adding greek-ext\n * U+1F8C GREEK CAPITAL LETTER ALPHA WITH PSILI AND OXIA AND PROSGEGRAMMENI: try adding greek-ext\n * U+1F8D GREEK CAPITAL LETTER ALPHA WITH DASIA AND OXIA AND PROSGEGRAMMENI: try adding greek-ext\n * U+1F8E GREEK CAPITAL LETTER ALPHA WITH PSILI AND PERISPOMENI AND PROSGEGRAMMENI: try adding greek-ext\n * U+1F8F GREEK CAPITAL LETTER ALPHA WITH DASIA AND PERISPOMENI AND PROSGEGRAMMENI: try adding greek-ext\n * U+1F90 GREEK SMALL LETTER ETA WITH PSILI AND YPOGEGRAMMENI: try adding greek-ext\n * U+1F91 GREEK SMALL LETTER ETA WITH DASIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1F92 GREEK SMALL LETTER ETA WITH PSILI AND VARIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1F93 GREEK SMALL LETTER ETA WITH DASIA AND VARIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1F94 GREEK SMALL LETTER ETA WITH PSILI AND OXIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1F95 GREEK SMALL LETTER ETA WITH DASIA AND OXIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1F96 GREEK SMALL LETTER ETA WITH PSILI AND PERISPOMENI AND YPOGEGRAMMENI: try adding greek-ext\n * U+1F97 GREEK SMALL LETTER ETA WITH DASIA AND PERISPOMENI AND YPOGEGRAMMENI: try adding greek-ext\n * U+1F98 GREEK CAPITAL LETTER ETA WITH PSILI AND PROSGEGRAMMENI: try adding greek-ext\n * U+1F99 GREEK CAPITAL LETTER ETA WITH DASIA AND PROSGEGRAMMENI: try adding greek-ext\n * U+1F9A GREEK CAPITAL LETTER ETA WITH PSILI AND VARIA AND PROSGEGRAMMENI: try adding greek-ext\n * U+1F9B GREEK CAPITAL LETTER ETA WITH DASIA AND VARIA AND PROSGEGRAMMENI: try adding greek-ext\n * U+1F9C GREEK CAPITAL LETTER ETA WITH PSILI AND OXIA AND PROSGEGRAMMENI: try adding greek-ext\n * U+1F9D GREEK CAPITAL LETTER ETA WITH DASIA AND OXIA AND PROSGEGRAMMENI: try adding greek-ext\n * U+1F9E GREEK CAPITAL LETTER ETA WITH PSILI AND PERISPOMENI AND PROSGEGRAMMENI: try adding greek-ext\n * U+1F9F GREEK CAPITAL LETTER ETA WITH DASIA AND PERISPOMENI AND PROSGEGRAMMENI: try adding greek-ext\n * U+1FA0 GREEK SMALL LETTER OMEGA WITH PSILI AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FA1 GREEK SMALL LETTER OMEGA WITH DASIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FA2 GREEK SMALL LETTER OMEGA WITH PSILI AND VARIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FA3 GREEK SMALL LETTER OMEGA WITH DASIA AND VARIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FA4 GREEK SMALL LETTER OMEGA WITH PSILI AND OXIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FA5 GREEK SMALL LETTER OMEGA WITH DASIA AND OXIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FA6 GREEK SMALL LETTER OMEGA WITH PSILI AND PERISPOMENI AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FA7 GREEK SMALL LETTER OMEGA WITH DASIA AND PERISPOMENI AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FA8 GREEK CAPITAL LETTER OMEGA WITH PSILI AND PROSGEGRAMMENI: try adding greek-ext\n * U+1FA9 GREEK CAPITAL LETTER OMEGA WITH DASIA AND PROSGEGRAMMENI: try adding greek-ext\n * U+1FAA GREEK CAPITAL LETTER OMEGA WITH PSILI AND VARIA AND PROSGEGRAMMENI: try adding greek-ext\n * U+1FAB GREEK CAPITAL LETTER OMEGA WITH DASIA AND VARIA AND PROSGEGRAMMENI: try adding greek-ext\n * U+1FAC GREEK CAPITAL LETTER OMEGA WITH PSILI AND OXIA AND PROSGEGRAMMENI: try adding greek-ext\n * U+1FAD GREEK CAPITAL LETTER OMEGA WITH DASIA AND OXIA AND PROSGEGRAMMENI: try adding greek-ext\n * U+1FAE GREEK CAPITAL LETTER OMEGA WITH PSILI AND PERISPOMENI AND PROSGEGRAMMENI: try adding greek-ext\n * U+1FAF GREEK CAPITAL LETTER OMEGA WITH DASIA AND PERISPOMENI AND PROSGEGRAMMENI: try adding greek-ext\n * U+1FB0 GREEK SMALL LETTER ALPHA WITH VRACHY: try adding greek-ext\n * U+1FB1 GREEK SMALL LETTER ALPHA WITH MACRON: try adding greek-ext\n * U+1FB2 GREEK SMALL LETTER ALPHA WITH VARIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FB3 GREEK SMALL LETTER ALPHA WITH YPOGEGRAMMENI: try adding greek-ext\n * U+1FB4 GREEK SMALL LETTER ALPHA WITH OXIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FB6 GREEK SMALL LETTER ALPHA WITH PERISPOMENI: try adding greek-ext\n * U+1FB7 GREEK SMALL LETTER ALPHA WITH PERISPOMENI AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FB8 GREEK CAPITAL LETTER ALPHA WITH VRACHY: try adding greek-ext\n * U+1FB9 GREEK CAPITAL LETTER ALPHA WITH MACRON: try adding greek-ext\n * U+1FBA GREEK CAPITAL LETTER ALPHA WITH VARIA: try adding greek-ext\n * U+1FBB GREEK CAPITAL LETTER ALPHA WITH OXIA: try adding greek-ext\n * U+1FBC GREEK CAPITAL LETTER ALPHA WITH PROSGEGRAMMENI: try adding greek-ext\n * U+1FBD GREEK KORONIS: try adding greek-ext\n * U+1FBE GREEK PROSGEGRAMMENI: try adding greek-ext\n * U+1FBF GREEK PSILI: try adding greek-ext\n * U+1FC0 GREEK PERISPOMENI: try adding greek-ext\n * U+1FC1 GREEK DIALYTIKA AND PERISPOMENI: try adding greek-ext\n * U+1FC2 GREEK SMALL LETTER ETA WITH VARIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FC3 GREEK SMALL LETTER ETA WITH YPOGEGRAMMENI: try adding greek-ext\n * U+1FC4 GREEK SMALL LETTER ETA WITH OXIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FC6 GREEK SMALL LETTER ETA WITH PERISPOMENI: try adding greek-ext\n * U+1FC7 GREEK SMALL LETTER ETA WITH PERISPOMENI AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FC8 GREEK CAPITAL LETTER EPSILON WITH VARIA: try adding greek-ext\n * U+1FC9 GREEK CAPITAL LETTER EPSILON WITH OXIA: try adding greek-ext\n * U+1FCA GREEK CAPITAL LETTER ETA WITH VARIA: try adding greek-ext\n * U+1FCB GREEK CAPITAL LETTER ETA WITH OXIA: try adding greek-ext\n * U+1FCC GREEK CAPITAL LETTER ETA WITH PROSGEGRAMMENI: try adding greek-ext\n * U+1FCD GREEK PSILI AND VARIA: try adding greek-ext\n * U+1FCE GREEK PSILI AND OXIA: try adding greek-ext\n * U+1FCF GREEK PSILI AND PERISPOMENI: try adding greek-ext\n * U+1FD0 GREEK SMALL LETTER IOTA WITH VRACHY: try adding greek-ext\n * U+1FD1 GREEK SMALL LETTER IOTA WITH MACRON: try adding greek-ext\n * U+1FD2 GREEK SMALL LETTER IOTA WITH DIALYTIKA AND VARIA: try adding greek-ext\n * U+1FD3 GREEK SMALL LETTER IOTA WITH DIALYTIKA AND OXIA: try adding greek-ext\n * U+1FD6 GREEK SMALL LETTER IOTA WITH PERISPOMENI: try adding greek-ext\n * U+1FD7 GREEK SMALL LETTER IOTA WITH DIALYTIKA AND PERISPOMENI: try adding greek-ext\n * U+1FD8 GREEK CAPITAL LETTER IOTA WITH VRACHY: try adding greek-ext\n * U+1FD9 GREEK CAPITAL LETTER IOTA WITH MACRON: try adding greek-ext\n * U+1FDA GREEK CAPITAL LETTER IOTA WITH VARIA: try adding greek-ext\n * U+1FDB GREEK CAPITAL LETTER IOTA WITH OXIA: try adding greek-ext\n * U+1FDD GREEK DASIA AND VARIA: try adding greek-ext\n * U+1FDE GREEK DASIA AND OXIA: try adding greek-ext\n * U+1FDF GREEK DASIA AND PERISPOMENI: try adding greek-ext\n * U+1FE0 GREEK SMALL LETTER UPSILON WITH VRACHY: try adding greek-ext\n * U+1FE1 GREEK SMALL LETTER UPSILON WITH MACRON: try adding greek-ext\n * U+1FE2 GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND VARIA: try adding greek-ext\n * U+1FE3 GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND OXIA: try adding greek-ext\n * U+1FE4 GREEK SMALL LETTER RHO WITH PSILI: try adding greek-ext\n * U+1FE5 GREEK SMALL LETTER RHO WITH DASIA: try adding greek-ext\n * U+1FE6 GREEK SMALL LETTER UPSILON WITH PERISPOMENI: try adding greek-ext\n * U+1FE7 GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND PERISPOMENI: try adding greek-ext\n * U+1FE8 GREEK CAPITAL LETTER UPSILON WITH VRACHY: try adding greek-ext\n * U+1FE9 GREEK CAPITAL LETTER UPSILON WITH MACRON: try adding greek-ext\n * U+1FEA GREEK CAPITAL LETTER UPSILON WITH VARIA: try adding greek-ext\n * U+1FEB GREEK CAPITAL LETTER UPSILON WITH OXIA: try adding greek-ext\n * U+1FEC GREEK CAPITAL LETTER RHO WITH DASIA: try adding greek-ext\n * U+1FED GREEK DIALYTIKA AND VARIA: try adding greek-ext\n * U+1FEE GREEK DIALYTIKA AND OXIA: try adding greek-ext\n * U+1FEF GREEK VARIA: try adding greek-ext\n * U+1FF2 GREEK SMALL LETTER OMEGA WITH VARIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FF3 GREEK SMALL LETTER OMEGA WITH YPOGEGRAMMENI: try adding greek-ext\n * U+1FF4 GREEK SMALL LETTER OMEGA WITH OXIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FF6 GREEK SMALL LETTER OMEGA WITH PERISPOMENI: try adding greek-ext\n * U+1FF7 GREEK SMALL LETTER OMEGA WITH PERISPOMENI AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FF8 GREEK CAPITAL LETTER OMICRON WITH VARIA: try adding greek-ext\n * U+1FF9 GREEK CAPITAL LETTER OMICRON WITH OXIA: try adding greek-ext\n * U+1FFA GREEK CAPITAL LETTER OMEGA WITH VARIA: try adding greek-ext\n * U+1FFB GREEK CAPITAL LETTER OMEGA WITH OXIA: try adding greek-ext\n * U+1FFC GREEK CAPITAL LETTER OMEGA WITH PROSGEGRAMMENI: try adding greek-ext\n * U+1FFD GREEK OXIA: try adding greek-ext\n * U+1FFE GREEK DASIA: try adding greek-ext\n * U+2010 HYPHEN: try adding one of: lisu, kharoshthi, coptic, cham, syloti-nagri, kayah-li, kaithi, arabic, sundanese\n * U+2012 FIGURE DASH: not included in any glyphset definition\n * U+2016 DOUBLE VERTICAL LINE: not included in any glyphset definition\n * U+2017 DOUBLE LOW LINE: not included in any glyphset definition\n * U+201B SINGLE HIGH-REVERSED-9 QUOTATION MARK: not included in any glyphset definition\n * U+2020 DAGGER: try adding latin-ext\n * U+2021 DOUBLE DAGGER: not included in any glyphset definition\n * U+2025 TWO DOT LEADER: try adding phags-pa\n * U+2030 PER MILLE SIGN: not included in any glyphset definition\n * U+203C DOUBLE EXCLAMATION MARK: not included in any glyphset definition\n * U+203D INTERROBANG: not included in any glyphset definition\n * U+203E OVERLINE: not included in any glyphset definition\n * U+2070 SUPERSCRIPT ZERO: not included in any glyphset definition\n * U+2075 SUPERSCRIPT FIVE: not included in any glyphset definition\n * U+2076 SUPERSCRIPT SIX: not included in any glyphset definition\n * U+2077 SUPERSCRIPT SEVEN: not included in any glyphset definition\n * U+2078 SUPERSCRIPT EIGHT: not included in any glyphset definition\n * U+2079 SUPERSCRIPT NINE: not included in any glyphset definition\n * U+207A SUPERSCRIPT PLUS SIGN: not included in any glyphset definition\n * U+207B SUPERSCRIPT MINUS: not included in any glyphset definition\n * U+207C SUPERSCRIPT EQUALS SIGN: not included in any glyphset definition\n * U+207D SUPERSCRIPT LEFT PARENTHESIS: not included in any glyphset definition\n * U+207E SUPERSCRIPT RIGHT PARENTHESIS: not included in any glyphset definition\n * U+207F SUPERSCRIPT LATIN SMALL LETTER N: not included in any glyphset definition\n * U+2080 SUBSCRIPT ZERO: not included in any glyphset definition\n * U+2081 SUBSCRIPT ONE: not included in any glyphset definition\n * U+2082 SUBSCRIPT TWO: not included in any glyphset definition\n * U+2083 SUBSCRIPT THREE: not included in any glyphset definition\n * U+2084 SUBSCRIPT FOUR: not included in any glyphset definition\n * U+2085 SUBSCRIPT FIVE: not included in any glyphset definition\n * U+2086 SUBSCRIPT SIX: not included in any glyphset definition\n * U+2087 SUBSCRIPT SEVEN: not included in any glyphset definition\n * U+2088 SUBSCRIPT EIGHT: not included in any glyphset definition\n * U+2089 SUBSCRIPT NINE: not included in any glyphset definition\n * U+208A SUBSCRIPT PLUS SIGN: not included in any glyphset definition\n * U+208B SUBSCRIPT MINUS: not included in any glyphset definition\n * U+208C SUBSCRIPT EQUALS SIGN: not included in any glyphset definition\n * U+208D SUBSCRIPT LEFT PARENTHESIS: not included in any glyphset definition\n * U+208E SUBSCRIPT RIGHT PARENTHESIS: not included in any glyphset definition\n * U+20A1 COLON SIGN: try adding latin-ext\n * U+20A2 CRUZEIRO SIGN: try adding latin-ext\n * U+20A3 FRENCH FRANC SIGN: try adding latin-ext\n * U+20A4 LIRA SIGN: try adding latin-ext\n * U+2116 NUMERO SIGN: try adding cyrillic\n * U+2126 OHM SIGN: not included in any glyphset definition\n * U+212E ESTIMATED SYMBOL: not included in any glyphset definition\n * U+2153 VULGAR FRACTION ONE THIRD: not included in any glyphset definition\n * U+2154 VULGAR FRACTION TWO THIRDS: not included in any glyphset definition\n * U+2155 VULGAR FRACTION ONE FIFTH: not included in any glyphset definition\n * U+2156 VULGAR FRACTION TWO FIFTHS: not included in any glyphset definition\n * U+2157 VULGAR FRACTION THREE FIFTHS: not included in any glyphset definition\n * U+2158 VULGAR FRACTION FOUR FIFTHS: not included in any glyphset definition\n * U+2159 VULGAR FRACTION ONE SIXTH: not included in any glyphset definition\n * U+215A VULGAR FRACTION FIVE SIXTHS: not included in any glyphset definition\n * U+215B VULGAR FRACTION ONE EIGHTH: not included in any glyphset definition\n * U+215C VULGAR FRACTION THREE EIGHTHS: not included in any glyphset definition\n * U+215D VULGAR FRACTION FIVE EIGHTHS: not included in any glyphset definition\n * U+215E VULGAR FRACTION SEVEN EIGHTHS: not included in any glyphset definition\n * U+215F FRACTION NUMERATOR ONE: not included in any glyphset definition\n * U+2202 PARTIAL DIFFERENTIAL: not included in any glyphset definition\n * U+2206 INCREMENT: not included in any glyphset definition\n * U+220F N-ARY PRODUCT: not included in any glyphset definition\n * U+2211 N-ARY SUMMATION: not included in any glyphset definition\n * U+221A SQUARE ROOT: not included in any glyphset definition\n * U+221E INFINITY: not included in any glyphset definition\n * U+2227 LOGICAL AND: not included in any glyphset definition\n * U+2228 LOGICAL OR: not included in any glyphset definition\n * U+2229 INTERSECTION: not included in any glyphset definition\n * U+222A UNION: not included in any glyphset definition\n * U+222B INTEGRAL: not included in any glyphset definition\n * U+2245 APPROXIMATELY EQUAL TO: not included in any glyphset definition\n * U+2248 ALMOST EQUAL TO: not included in any glyphset definition\n * U+2260 NOT EQUAL TO: not included in any glyphset definition\n * U+2261 IDENTICAL TO: not included in any glyphset definition\n * U+2264 LESS-THAN OR EQUAL TO: not included in any glyphset definition\n * U+2265 GREATER-THAN OR EQUAL TO: not included in any glyphset definition\n * U+2310 REVERSED NOT SIGN: not included in any glyphset definition\n * U+25CA LOZENGE: not included in any glyphset definition\n * U+25E6 WHITE BULLET: not included in any glyphset definition\n * U+E001 : not included in any glyphset definition\n * U+E002 : not included in any glyphset definition\n * U+E003 : not included in any glyphset definition\n * U+E004 : not included in any glyphset definition\n * U+E005 : not included in any glyphset definition\n * U+E006 : not included in any glyphset definition\n * U+F500 : not included in any glyphset definition\n * U+F501 : not included in any glyphset definition\n * U+F502 : not included in any glyphset definition\n * U+F503 : not included in any glyphset definition\n * U+F504 : not included in any glyphset definition\n * U+F505 : not included in any glyphset definition\n * U+F506 : not included in any glyphset definition\n * U+F507 : not included in any glyphset definition\n * U+F508 : not included in any glyphset definition\n * U+F509 : not included in any glyphset definition\n * U+F50A : not included in any glyphset definition\n * U+F50B : not included in any glyphset definition\n * U+F50C : not included in any glyphset definition\n * U+F50D : not included in any glyphset definition\n * U+F50E : not included in any glyphset definition\n * U+F50F : not included in any glyphset definition\n * U+F510 : not included in any glyphset definition\n * U+F512 : not included in any glyphset definition\n * U+F513 : not included in any glyphset definition\n * U+F514 : not included in any glyphset definition\n * U+F515 : not included in any glyphset definition\n * U+F516 : not included in any glyphset definition\n * U+F517 : not included in any glyphset definition\n * U+F518 : not included in any glyphset definition\n * U+F519 : not included in any glyphset definition\n * U+F51A : not included in any glyphset definition\n * U+F639 : not included in any glyphset definition\n * U+F63A : not included in any glyphset definition\n * U+F63B : not included in any glyphset definition\n * U+F63C : not included in any glyphset definition\n * U+F63D : not included in any glyphset definition\n * U+F63E : not included in any glyphset definition\n * U+F63F : not included in any glyphset definition\n * U+F640 : not included in any glyphset definition\n * U+F641 : not included in any glyphset definition\n * U+F642 : not included in any glyphset definition\n * U+F650 : not included in any glyphset definition\n * U+F651 : not included in any glyphset definition\n * U+F655 : not included in any glyphset definition\n * U+F656 : not included in any glyphset definition\n * U+F657 : not included in any glyphset definition\n * U+F658 : not included in any glyphset definition\n * U+F659 : not included in any glyphset definition\n * U+F65A : not included in any glyphset definition\n * U+F65B : not included in any glyphset definition\n * U+F65C : not included in any glyphset definition\n * U+F65D : not included in any glyphset definition\n * U+F65E : not included in any glyphset definition\n * U+F661 : not included in any glyphset definition\n * U+F662 : not included in any glyphset definition\n * U+F663 : not included in any glyphset definition\n * U+F664 : not included in any glyphset definition\n * U+F665 : not included in any glyphset definition\n * U+F666 : not included in any glyphset definition\n * U+F667 : not included in any glyphset definition\n * U+F668 : not included in any glyphset definition\n * U+F669 : not included in any glyphset definition\n * U+F66A : not included in any glyphset definition\n * U+F66D : not included in any glyphset definition\n * U+F66E : not included in any glyphset definition\n * U+F66F : not included in any glyphset definition\n * U+F670 : not included in any glyphset definition\n * U+F671 : not included in any glyphset definition\n * U+F672 : not included in any glyphset definition\n * U+F673 : not included in any glyphset definition\n * U+F674 : not included in any glyphset definition\n * U+F675 : not included in any glyphset definition\n * U+F676 : not included in any glyphset definition\n * U+F677 : not included in any glyphset definition\n * U+F678 : not included in any glyphset definition\n * U+F679 : not included in any glyphset definition\n * U+F67A : not included in any glyphset definition\n * U+F67B : not included in any glyphset definition\n * U+F67C : not included in any glyphset definition\n * U+F67D : not included in any glyphset definition\n * U+F67E : not included in any glyphset definition\n * U+F67F : not included in any glyphset definition\n * U+F680 : not included in any glyphset definition\n * U+F681 : not included in any glyphset definition\n * U+F682 : not included in any glyphset definition\n * U+F683 : not included in any glyphset definition\n * U+F684 : not included in any glyphset definition\n * U+F685 : not included in any glyphset definition\n * U+F686 : not included in any glyphset definition\n * U+F687 : not included in any glyphset definition\n * U+F688 : not included in any glyphset definition\n * U+F689 : not included in any glyphset definition\n * U+F68A : not included in any glyphset definition\n * U+F68B : not included in any glyphset definition\n * U+F68C : not included in any glyphset definition\n * U+F68D : not included in any glyphset definition\n * U+F68E : not included in any glyphset definition\n * U+F68F : not included in any glyphset definition\n * U+F690 : not included in any glyphset definition\n * U+F691 : not included in any glyphset definition\n * U+F692 : not included in any glyphset definition\n * U+F693 : not included in any glyphset definition\n * U+F694 : not included in any glyphset definition\n * U+F695 : not included in any glyphset definition\n * U+F696 : not included in any glyphset definition\n * U+F697 : not included in any glyphset definition\n * U+F698 : not included in any glyphset definition\n * U+F699 : not included in any glyphset definition\n * U+F69A : not included in any glyphset definition\n * U+F69B : not included in any glyphset definition\n * U+F69C : not included in any glyphset definition\n * U+F69D : not included in any glyphset definition\n * U+F69E : not included in any glyphset definition\n * U+F69F : not included in any glyphset definition\n * U+F6A0 : not included in any glyphset definition\n * U+F6A1 : not included in any glyphset definition\n * U+F6A2 : not included in any glyphset definition\n * U+F6A3 : not included in any glyphset definition\n * U+F6A4 : not included in any glyphset definition\n * U+F6A5 : not included in any glyphset definition\n * U+F6A6 : not included in any glyphset definition\n * U+F6A7 : not included in any glyphset definition\n * U+F6A8 : not included in any glyphset definition\n * U+F6A9 : not included in any glyphset definition\n * U+F6AA : not included in any glyphset definition\n * U+F6AB : not included in any glyphset definition\n * U+F6AC : not included in any glyphset definition\n * U+F6AD : not included in any glyphset definition\n * U+F6C3 : not included in any glyphset definition\n * U+F6C9 : not included in any glyphset definition\n * U+F6CA : not included in any glyphset definition\n * U+F6CB : not included in any glyphset definition\n * U+F6CE : not included in any glyphset definition\n * U+F6CF : not included in any glyphset definition\n * U+F6D0 : not included in any glyphset definition\n * U+F6DC : not included in any glyphset definition\n * U+F6DD : not included in any glyphset definition\n * U+F6F4 : not included in any glyphset definition\n * U+F6F5 : not included in any glyphset definition\n * U+F6F6 : not included in any glyphset definition\n * U+F6F7 : not included in any glyphset definition\n * U+F6F8 : not included in any glyphset definition\n * U+F6F9 : not included in any glyphset definition\n * U+F6FA : not included in any glyphset definition\n * U+F6FB : not included in any glyphset definition\n * U+F6FC : not included in any glyphset definition\n * U+F6FD : not included in any glyphset definition\n * U+F6FE : not included in any glyphset definition\n * U+F6FF : not included in any glyphset definition\n * U+F721 : not included in any glyphset definition\n * U+F724 : not included in any glyphset definition\n * U+F726 : not included in any glyphset definition\n * U+F730 : not included in any glyphset definition\n * U+F731 : not included in any glyphset definition\n * U+F732 : not included in any glyphset definition\n * U+F733 : not included in any glyphset definition\n * U+F734 : not included in any glyphset definition\n * U+F735 : not included in any glyphset definition\n * U+F736 : not included in any glyphset definition\n * U+F737 : not included in any glyphset definition\n * U+F738 : not included in any glyphset definition\n * U+F739 : not included in any glyphset definition\n * U+F73F : not included in any glyphset definition\n * U+F760 : not included in any glyphset definition\n * U+F761 : not included in any glyphset definition\n * U+F762 : not included in any glyphset definition\n * U+F763 : not included in any glyphset definition\n * U+F764 : not included in any glyphset definition\n * U+F765 : not included in any glyphset definition\n * U+F766 : not included in any glyphset definition\n * U+F767 : not included in any glyphset definition\n * U+F768 : not included in any glyphset definition\n * U+F769 : not included in any glyphset definition\n * U+F76A : not included in any glyphset definition\n * U+F76B : not included in any glyphset definition\n * U+F76C : not included in any glyphset definition\n * U+F76D : not included in any glyphset definition\n * U+F76E : not included in any glyphset definition\n * U+F76F : not included in any glyphset definition\n * U+F770 : not included in any glyphset definition\n * U+F771 : not included in any glyphset definition\n * U+F772 : not included in any glyphset definition\n * U+F773 : not included in any glyphset definition\n * U+F774 : not included in any glyphset definition\n * U+F775 : not included in any glyphset definition\n * U+F776 : not included in any glyphset definition\n * U+F777 : not included in any glyphset definition\n * U+F778 : not included in any glyphset definition\n * U+F779 : not included in any glyphset definition\n * U+F77A : not included in any glyphset definition\n * U+F7A1 : not included in any glyphset definition\n * U+F7A2 : not included in any glyphset definition\n * U+F7A8 : not included in any glyphset definition\n * U+F7AF : not included in any glyphset definition\n * U+F7B4 : not included in any glyphset definition\n * U+F7B8 : not included in any glyphset definition\n * U+F7BF : not included in any glyphset definition\n * U+F7E0 : not included in any glyphset definition\n * U+F7E1 : not included in any glyphset definition\n * U+F7E2 : not included in any glyphset definition\n * U+F7E3 : not included in any glyphset definition\n * U+F7E4 : not included in any glyphset definition\n * U+F7E5 : not included in any glyphset definition\n * U+F7E6 : not included in any glyphset definition\n * U+F7E7 : not included in any glyphset definition\n * U+F7E8 : not included in any glyphset definition\n * U+F7E9 : not included in any glyphset definition\n * U+F7EA : not included in any glyphset definition\n * U+F7EB : not included in any glyphset definition\n * U+F7EC : not included in any glyphset definition\n * U+F7ED : not included in any glyphset definition\n * U+F7EE : not included in any glyphset definition\n * U+F7EF : not included in any glyphset definition\n * U+F7F0 : not included in any glyphset definition\n * U+F7F1 : not included in any glyphset definition\n * U+F7F2 : not included in any glyphset definition\n * U+F7F3 : not included in any glyphset definition\n * U+F7F4 : not included in any glyphset definition\n * U+F7F5 : not included in any glyphset definition\n * U+F7F6 : not included in any glyphset definition\n * U+F7F8 : not included in any glyphset definition\n * U+F7F9 : not included in any glyphset definition\n * U+F7FA : not included in any glyphset definition\n * U+F7FB : not included in any glyphset definition\n * U+F7FC : not included in any glyphset definition\n * U+F7FD : not included in any glyphset definition\n * U+F7FE : not included in any glyphset definition\n * U+F7FF : not included in any glyphset definition\n * U+FB00 LATIN SMALL LIGATURE FF: not included in any glyphset definition\n * U+FB01 LATIN SMALL LIGATURE FI: not included in any glyphset definition\n * U+FB02 LATIN SMALL LIGATURE FL: not included in any glyphset definition\n * U+FB03 LATIN SMALL LIGATURE FFI: not included in any glyphset definition\n * U+FB04 LATIN SMALL LIGATURE FFL: not included in any glyphset definition\n * U+FFFC OBJECT REPLACEMENT CHARACTER: not included in any glyphset definition\n\nOr you can add the above codepoints to one of the subsets supported by the font: `menu`, `greek` [code: unreachable-subsetting]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This check ensures that all encoded glyphs in the font are covered by a\n        subset declared in the METADATA.pb. Google Fonts splits the font into\n        a set of subset fonts based on the contents of the `subsets` field and\n        the subset definitions in the `glyphsets` repository.\n\n        Any encoded glyphs which are not by any of these subset definitions\n        will not be served in the subsetted fonts, and so will be unreachable to\n        the end user.\n    ",
                    "result": "WARN",
                    "severity": 2
                },
                {
                    "description": "Substitute copyright, registered and trademark symbols in name table entries.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/unwanted_chars>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "No need to substitute copyright, registered and trademark symbols in name table entries of this font.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Check the OS/2 usWeightClass is appropriate for the font's best SubFamily name.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/usweightclass>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2 usWeightClass is good",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Google Fonts expects variable fonts, static ttfs and static otfs to have\n        differing OS/2 usWeightClass values.\n\n        - For Variable Fonts, Thin-Black must be 100-900\n\n        - For static ttfs, Thin-Black can be 100-900 or 250-900\n\n        - For static otfs, Thin-Black must be 250-900\n\n        If static otfs are set lower than 250, text may appear blurry in\n        legacy Windows applications.\n\n        Glyphsapp users can change the usWeightClass value of an instance by adding\n        a 'weightClass' customParameter.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check font has a license.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/family/has_license>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Found license at '/Users/simon/others-repos/fonts/ofl/gfsneohellenic/OFL.txt'",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Check license file has good copyright string.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/license/OFL_copyright>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "First line in license file is:\n\n\"copyright (c) 2007, greek font society (www.greekfontsociety.org | gfs@greekfontsociety.org),\"\n\nwhich does not match the expected format, similar to:\n\n\"Copyright 2022 The Familyname Project Authors (git url)\" [code: bad-format]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        An OFL.txt file's first line should be the font copyright e.g:\n        \"Copyright 2019 The Montserrat Project Authors\n        (https://github.com/julietaula/montserrat)\"\n    ",
                    "result": "FAIL",
                    "severity": 10
                },
                {
                    "description": "Check OFL body text is correct.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/license/OFL_body_text>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OFL license body text is correct",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check OFL body text is correct.\n        Often users will accidently delete parts of the body text.\n    ",
                    "result": "PASS",
                    "severity": 10
                },
                {
                    "description": "Check copyright namerecords match license file.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/license>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font lacks NameID 13 (LICENSE DESCRIPTION). A proper licensing entry must be set. [code: missing]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        A known licensing description must be provided in the NameID 14\n        (LICENSE DESCRIPTION) entries of the name table.\n\n        The source of truth for this check (to determine which license is in use) is\n        a file placed side-by-side to your font project including the licensing terms.\n\n        Depending on the chosen license, one of the following string snippets is\n        expected to be found on the NameID 13 (LICENSE DESCRIPTION) entries of the\n        name table:\n\n        - \"This Font Software is licensed under the SIL Open Font License, Version 1.1.\n          This license is available with a FAQ at: https://scripts.sil.org/OFL\"\n\n        - \"Licensed under the Apache License, Version 2.0\"\n\n        - \"Licensed under the Ubuntu Font Licence 1.0.\"\n\n\n        Currently accepted licenses are Apache or Open Font License. For a small set\n        of legacy families the Ubuntu Font License may be acceptable as well.\n\n        When in doubt, please choose OFL for new font projects.\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "License URL matches License text on name table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/license_url>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Could not infer the font license. Please ensure NameID 13 (LICENSE DESCRIPTION) is properly set.",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        A known license URL must be provided in the NameID 14 (LICENSE INFO URL)\n        entry of the name table.\n\n        The source of truth for this check is the licensing text found on the NameID 13\n        entry (LICENSE DESCRIPTION).\n\n        The string snippets used for detecting licensing terms are:\n\n        - \"This Font Software is licensed under the SIL Open Font License, Version 1.1.\n          This license is available with a FAQ at: https://scripts.sil.org/OFL\"\n\n        - \"Licensed under the Apache License, Version 2.0\"\n\n        - \"Licensed under the Ubuntu Font Licence 1.0.\"\n\n\n        Currently accepted licenses are Apache or Open Font License. For a small set of\n        legacy families the Ubuntu Font License may be acceptable as well.\n\n        When in doubt, please choose OFL for new font projects.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Description strings in the name table must not exceed 200 characters.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/description_max_length>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "All description name records have reasonably small lengths.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        An old FontLab version had a bug which caused it to store copyright notices\n        in nameID 10 entries.\n\n        In order to detect those and distinguish them from actual legitimate usage of\n        this name table entry, we expect that such strings do not exceed a reasonable\n        length of 200 chars.\n\n        Longer strings are likely instances of the FontLab bug.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Show hinting filesize impact.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/hinting_impact>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Hinting filesize impact:\n\n |               | /Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf          |\n |:------------- | ---------------:|\n | Dehinted Size | 183.3kb |\n | Hinted Size   | 449.3kb   |\n | Increase      | 266.0kb      |\n | Change        | 145.1 %  |\n [code: size-impact]",
                            "status": "INFO",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This check is merely informative, displaying and useful comparison of filesizes\n        of hinted versus unhinted font files.\n    ",
                    "result": "INFO"
                },
                {
                    "description": "Ensure files are not too large.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/file_size>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font had a reasonable file size",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Serving extremely large font files on Google Fonts causes usability issues.\n        This check ensures that file sizes are reasonable.\n    ",
                    "result": "PASS",
                    "severity": 10
                },
                {
                    "description": "Version format is correct in 'name' table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/version_format>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Version format in NAME table entries is correct.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Font has ttfautohint params?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/has_ttfautohint_params>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font appears to our heuristic as not hinted using ttfautohint. [code: not-hinted]",
                            "status": "SKIP",
                            "traceback": null
                        },
                        {
                            "message": "Font appears to our heuristic as not hinted using ttfautohint. [code: not-hinted]",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "result": "SKIP"
                },
                {
                    "description": "Font has old ttfautohint applied?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/old_ttfautohint>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Could not detect which version of ttfautohint was used in this font. It is typically specified as a comment in the font version entries of the 'name' table. Such font version strings are currently: ['Version 1.0 ', 'Version 1.0 '] [code: version-not-detected]",
                            "status": "INFO",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check if font has been hinted with an outdated version of ttfautohint.\n    ",
                    "result": "INFO"
                },
                {
                    "description": "EPAR table present in font?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/epar>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "EPAR table not present in font. To learn more see https://github.com/fonttools/fontbakery/issues/818 [code: lacks-EPAR]",
                            "status": "INFO",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The EPAR table is/was a way of expressing common licensing permissions and\n        restrictions in metadata; while almost nothing supported it, Dave Crossland\n        wonders that adding it to everything in Google Fonts could help make it\n        more popular.\n\n        More info is available at:\n        https://davelab6.github.io/epar/\n    ",
                    "result": "INFO",
                    "severity": 1
                },
                {
                    "description": "Is the Grid-fitting and Scan-conversion Procedure ('gasp') table set to optimize rendering?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/gasp>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font is missing the 'gasp' table. Try exporting the font with autohinting enabled.\nIf you are dealing with an unhinted font, it can be fixed by running the fonts through the command 'gftools fix-nonhinting'\nGFTools is available at https://pypi.org/project/gftools/ [code: lacks-gasp]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Traditionally version 0 'gasp' tables were set so that font sizes below 8 ppem\n        had no grid fitting but did have antialiasing. From 9-16 ppem, just grid\n        fitting.\n        And fonts above 17ppem had both antialiasing and grid fitting toggled on.\n        The use of accelerated graphics cards and higher resolution screens make this\n        approach obsolete. Microsoft's DirectWrite pushed this even further with much\n        improved rendering built into the OS and apps.\n\n        In this scenario it makes sense to simply toggle all 4 flags ON for all font\n        sizes.\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "Make sure family name does not begin with a digit.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/familyname_first_char>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font family name first character is not a digit.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Font family names which start with a numeral are often not discoverable\n        in Windows applications.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Are there non-ASCII characters in ASCII-only NAME table entries?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/ascii_only_entries>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "None of the ASCII-only NAME table entries contain non-ASCII characteres.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The OpenType spec requires ASCII for the POSTSCRIPT_NAME (nameID 6).\n\n        For COPYRIGHT_NOTICE (nameID 0) ASCII is required because that string should be\n        the same in CFF fonts which also have this requirement in the OpenType spec.\n\n        Note:\n        A common place where we find non-ASCII strings is on name table entries\n        with NameID > 18, which are expressly for localising the ASCII-only IDs\n        into Hindi / Arabic / etc.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: check if fonts field only has unique \"full_name\" values.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/unique_full_name_values>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb \"fonts\" field only has unique \"full_name\" values.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: check if fonts field only contains unique style:weight pairs.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/unique_weight_style_pairs>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb \"fonts\" field only has unique style:weight pairs.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb license is \"APACHE2\", \"UFL\" or \"OFL\"?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/license>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font license is declared in METADATA.pb as \"OFL\"",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb should contain at least \"menu\" and \"latin\" subsets.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/menu_and_latin>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Subsets \"menu\" and \"latin\" are mandatory, but METADATA.pb is missing \"latin\". [code: missing]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "result": "FAIL"
                },
                {
                    "description": "METADATA.pb subsets should be alphabetically ordered.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/subsets_order>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb subsets are not sorted in alphabetical order: Got ['menu', 'greek'] and expected ['greek', 'menu'] [code: not-sorted]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "result": "FAIL"
                },
                {
                    "description": "Check METADATA.pb includes production subsets.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/includes_production_subsets>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: listed_on_gfonts_api",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check METADATA.pb file includes the same subsets as the family in production.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "METADATA.pb: Copyright notice is the same in all fonts?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/copyright>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb: Copyright field value is inconsistent across family [code: inconsistency]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "result": "FAIL"
                },
                {
                    "description": "Check that METADATA.pb family values are all the same.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/familyname>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb: Family name is the same in all metadata \"fonts\" items.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: According to Google Fonts standards, families should have a Regular style.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/has_regular>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Family has a Regular style.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Regular should be 400.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/regular_is_400>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Regular has weight = 400.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Checks METADATA.pb font.name field matches family name declared on the name table.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/nameid/family_name>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Family name \"GFS Neohellenic\" is identical in METADATA.pb and on the TTF file.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Checks METADATA.pb font.post_script_name matches postscript name declared on the name table.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/nameid/post_script_name>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Postscript name \"GFSNeohellenic-Regular\" is identical in METADATA.pb and on the TTF file.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb font.full_name value matches fullname declared on the name table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/nameid/full_name>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font fullname \"GFS Neohellenic Regular\" is identical in METADATA.pb and on the TTF file.",
                            "status": "PASS",
                            "traceback": null
                        },
                        {
                            "message": "Font fullname \"GFS Neohellenic Regular\" is identical in METADATA.pb and on the TTF file.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb font.name value should be same as the family name declared on the name table.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/nameid/font_name>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: style",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This check ensures consistency between the font name declared on the name table\n        and the contents of the METADATA.pb file.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "METADATA.pb font.full_name and font.post_script_name fields have equivalent values ?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/match_fullname_postscript>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb font fields \"full_name\" and \"post_script_name\" have equivalent values.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb font.filename and font.post_script_name fields have equivalent values?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/match_filename_postscript>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb font filename = \"GFSNeohellenic.ttf\" does not match post_script_name=\"GFSNeohellenic-Regular\". [code: mismatch]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "result": "FAIL"
                },
                {
                    "description": "METADATA.pb font.name field contains font name in right format?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/valid_name_values>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: style",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "result": "SKIP"
                },
                {
                    "description": "METADATA.pb font.full_name field contains font name in right format?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/valid_full_name_values>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: style",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "result": "SKIP"
                },
                {
                    "description": "METADATA.pb font.filename field contains font name in right format?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/valid_filename_values>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: style",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "result": "SKIP"
                },
                {
                    "description": "METADATA.pb font.post_script_name field contains font name in right format?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/valid_post_script_name_values>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb postScriptName field contains font name in right format.",
                            "status": "PASS",
                            "traceback": null
                        },
                        {
                            "message": "METADATA.pb postScriptName field contains font name in right format.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Check name ID 25 to end with \"Italic\" for Italic VFs.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/valid_nameid25>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: style",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Due to a bug in (at least) Adobe Indesign, name ID 25\n        needs to be different for Italic VFs than their Upright counterparts.\n        Google Fonts chooses to append \"Italic\" here.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Copyright notices match canonical pattern in METADATA.pb",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/valid_copyright>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb: Copyright notices should match a pattern similar to:\n \"Copyright 2020 The Familyname Project Authors (git url)\"\nBut instead we have got:\n\"copyright (c) takis katsoulidis and george d. matthiopoulos (gfs@greekfontsociety.gr), 1993-2001. all rights reserved.\" [code: bad-notice-format]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The expected pattern for the copyright string adheres to the following rules:\n\n        * It must say \"Copyright\" followed by a 4 digit year (optionally followed by\n          a hyphen and another 4 digit year)\n\n        * Then it must say \"The <familyname> Project Authors\"\n\n        * And within parentheses, a URL for a git repository must be provided\n\n        * The check is case insensitive and does not validate whether the familyname\n          is correct, even though we'd expect it is (and we may soon update the check\n          to validate that aspect as well!)\n\n\n        Here is an example of a valid copyright string:\n\n        \"Copyright 2017 The Archivo Black Project Authors\n         (https://github.com/Omnibus-Type/ArchivoBlack)\"\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "Copyright notices match canonical pattern in fonts",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/font_copyright>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Name Table entry: Copyright notices should match a pattern similar to: \"Copyright 2019 The Familyname Project Authors (git url)\"\nBut instead we have got:\n\"Copyright (c) Takis Katsoulidis and George D. Matthiopoulos, 1993-2001. All rights reserved.\" [code: bad-notice-format]",
                            "status": "FAIL",
                            "traceback": null
                        },
                        {
                            "message": "Name Table entry: Copyright notices should match a pattern similar to: \"Copyright 2019 The Familyname Project Authors (git url)\"\nBut instead we have got:\n\"Copyright (c) Takis Katsoulidis and George D. Matthiopoulos, 1993-2001. All rights reserved.\" [code: bad-notice-format]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "result": "FAIL"
                },
                {
                    "description": "Copyright notice on METADATA.pb should not contain 'Reserved Font Name'.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/reserved_font_name>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb copyright field does not contain \"Reserved Font Name\".",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Copyright notice shouldn't exceed 500 chars.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/copyright_max_length>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Copyright notice string is shorter than 500 chars.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Font filenames match font.filename entries?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/filenames>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Filenames in METADATA.pb look good.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Note:\n        This check only looks for files in the current directory.\n\n        Font files in subdirectories are checked by these other two checks:\n         - com.google.fonts/check/metadata/undeclared_fonts\n         - com.google.fonts/check/repo/vf_has_static_fonts\n\n        We may want to merge them all into a single check.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb font.style \"italic\" matches font internals?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/italic_style>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "This check only applies to italic fonts.",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "result": "SKIP"
                },
                {
                    "description": "METADATA.pb font.style \"normal\" matches font internals?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/normal_style>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb font.style \"normal\" matches font internals.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb font.name and font.full_name fields match the values declared on the name table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/nameid/family_and_full_names>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb familyname and fullName fields match corresponding name table entries.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Check font name is the same as family name.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/match_name_familyname>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font name is the same as family name.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Check that font weight has a canonical value.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/canonical_weight_value>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font weight has a canonical value.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Check METADATA.pb font weights are correct.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/os2_weightclass>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2 usWeightClass or wght axis value matches weight specified at METADATA.pb",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check METADATA.pb font weights are correct.\n\n        For static fonts, the metadata weight should be the same as the static font's\n        OS/2 usWeightClass.\n\n        For variable fonts, the weight value should be 400 if the font's wght axis range\n        includes 400, otherwise it should be the value closest to 400.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb weight matches postScriptName for static fonts.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/match_weight_postscript>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Weight value matches postScriptName.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Font styles are named canonically?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/canonical_style_names>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font styles are named canonically.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Check URL on copyright string is the same as in repository_url field.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/consistent_repo_urls>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Sometimes, perhaps due to copy-pasting, projects may declare different URLs\n        between the font.coyright and the family.sources.repository_url fields.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Check for primary_script",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/primary_script>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Try to guess font's primary script and see if that's set in METADATA.pb.\n        This is an educated guess based on the number of glyphs per script in the font\n        and should be taken with caution.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Stricter unitsPerEm criteria for Google Fonts.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/unitsperem_strict>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font em size is good (unitsPerEm = 1000).",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Even though the OpenType spec allows unitsPerEm to be any value between 16\n        and 16384, the Google Fonts project aims at a narrower set of reasonable values.\n\n        The spec suggests usage of powers of two in order to get some performance\n        improvements on legacy renderers, so those values are acceptable.\n\n        But values of 500 or 1000 are also acceptable, with the added benefit that it\n        makes upm math easier for designers, while the performance hit of not using a\n        power of two is most likely negligible nowadays.\n\n        Additionally, values above 2048 would likely result in unreasonable\n        filesize increases.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Glyphs are similiar to Google Fonts version?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/production_glyphs_similarity>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: api_gfonts_ttFont",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "result": "SKIP"
                },
                {
                    "description": "Checking direction of slnt axis angles",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/slant_direction>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The 'slnt' axis values are defined as negative values for a clockwise (right)\n        lean, and positive values for counter-clockwise lean. This is counter-intuitive\n        for many designers who are used to think of a positive slant as a lean to\n        the right.\n\n        This check ensures that the slant axis direction is consistent with the specs.\n\n        https://docs.microsoft.com/en-us/typography/opentype/spec/dvaraxistag_slnt\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check font names are correct",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/font_names>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font names are incorrect:\n\n| nameID | current | expected |\n| :--- | :--- | :--- |\n| Family Name | GFS Neohellenic | GFS Neohellenic |\n| Subfamily Name | Regular | Regular |\n| Full Name | GFS Neohellenic Regular | GFS Neohellenic Regular |\n| Poscript Name | GFSNeohellenic-Regular | GFSNeohellenic-Regular |\n| Typographic Family Name | GFS Neohellenic | N/A |\n| Typographic Subfamily Name | Regular | N/A | [code: bad-names]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Google Fonts has several rules which need to be adhered to when\n        setting a font's name table. Please read:\n        https://googlefonts.github.io/gf-guide/statics.html#supported-styles\n        https://googlefonts.github.io/gf-guide/statics.html#style-linking\n        https://googlefonts.github.io/gf-guide/statics.html#unsupported-styles\n        https://googlefonts.github.io/gf-guide/statics.html#single-weight-families\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "Copyright field for this font on METADATA.pb matches all copyright notice entries on the name table ?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/nameid/copyright>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Copyright field for this font on METADATA.pb (\"Copyright (c) Takis Katsoulidis and George D. Matthiopoulos (gfs@greekfontsociety.gr), 1993-2001. All rights reserved.\") differs from a copyright notice entry on the name table: \"Copyright (c) Takis Katsoulidis and George D. Matthiopoulos, 1993-2001. All rights reserved.\" [code: mismatch]",
                            "status": "FAIL",
                            "traceback": null
                        },
                        {
                            "message": "Copyright field for this font on METADATA.pb (\"Copyright (c) Takis Katsoulidis and George D. Matthiopoulos (gfs@greekfontsociety.gr), 1993-2001. All rights reserved.\") differs from a copyright notice entry on the name table: \"Copyright (c) Takis Katsoulidis and George D. Matthiopoulos, 1993-2001. All rights reserved.\" [code: mismatch]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "result": "FAIL"
                },
                {
                    "description": "Font has all mandatory 'name' table entries?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/mandatory_entries>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: style",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "result": "SKIP"
                },
                {
                    "description": "Length of copyright notice must not exceed 500 characters.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/copyright_length>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "All copyright notice name entries on the 'name' table are shorter than 500 characters.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This is an arbitrary max length for the copyright notice field of the name\n        table. We simply don't want such notices to be too long. Typically such notices\n        are actually much shorter than this with a length of roughly 70 or 80\n        characters.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check for font-v versioning.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/fontv>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Version string is: \"Version 1.0 \"\nThe version string must ideally include a git commit hash and either a \"dev\" or a \"release\" suffix such as in the example below:\n\"Version 1.3; git-0d08353-release\" [code: bad-format]",
                            "status": "INFO",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The git sha1 tagging and dev/release features of Source Foundry `font-v` tool\n        are awesome and we would love to consider upstreaming the approach into\n        fontmake someday. For now we only emit an INFO if a given font does not yet\n        follow the experimental versioning style, but at some point we may start\n        enforcing it.\n    ",
                    "result": "INFO"
                },
                {
                    "description": "Check glyphs do not have components which are themselves components.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/glyf_nested_components>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Glyphs do not contain nested components.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        There have been bugs rendering variable fonts with nested components.\n        Additionally, some static fonts with nested components have been reported\n        to have rendering and printing issues.\n\n        For more info, see:\n        * https://github.com/fonttools/fontbakery/issues/2961\n        * https://github.com/arrowtype/recursive/issues/412\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check a static ttf can be generated from a variable font.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/generate_static>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Google Fonts may serve static fonts which have been generated from variable\n        fonts. This test will attempt to generate a static ttf using fontTool's\n        varLib mutator.\n\n        The target font will be the mean of each axis e.g:\n\n        ## VF font axes\n\n        - min weight, max weight = 400, 800\n\n        - min width, max width = 50, 100\n\n        ## Target Instance\n\n        - weight = 600\n\n        - width = 75\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check that variable fonts have an HVAR table.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/has_HVAR>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Not having a HVAR table can lead to costly text-layout operations on some\n        platforms, which we want to avoid.\n\n        So, all variable fonts on the Google Fonts collection should have an HVAR\n        with valid values.\n\n        More info on the HVAR table can be found at:\n        https://docs.microsoft.com/en-us/typography/opentype/spec/otvaroverview#variation-data-tables-and-miscellaneous-requirements\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Font enables smart dropout control in \"prep\" table instructions?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/smart_dropout>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The 'prep' table does not contain TrueType instructions enabling smart dropout control. To fix, export the font with autohinting enabled, or run ttfautohint on the font, or run the `gftools fix-nonhinting` script. [code: lacks-smart-dropout]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This setup is meant to ensure consistent rendering quality for fonts across\n        all devices (with different rendering/hinting capabilities).\n\n        Below is the snippet of instructions we expect to see in the fonts:\n        B8 01 FF    PUSHW 0x01FF\n        85          SCANCTRL (unconditinally turn on\n                              dropout control mode)\n        B0 04       PUSHB 0x04\n        8D          SCANTYPE (enable smart dropout control)\n\n        \"Smart dropout control\" means activating rules 1, 2 and 5:\n        Rule 1: If a pixel's center falls within the glyph outline,\n                that pixel is turned on.\n        Rule 2: If a contour falls exactly on a pixel's center,\n                that pixel is turned on.\n        Rule 5: If a scan line between two adjacent pixel centers\n                (either vertical or horizontal) is intersected\n                by both an on-Transition contour and an off-Transition\n                contour and neither of the pixels was already turned on\n                by rules 1 and 2, turn on the pixel which is closer to\n                the midpoint between the on-Transition contour and\n                off-Transition contour. This is \"Smart\" dropout control.\n\n        For more detailed info (such as other rules not enabled in this snippet),\n        please refer to the TrueType Instruction Set documentation.\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "There must not be VTT Talk sources in the font.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/vttclean>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "There are no tables with VTT Talk sources embedded in the font.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The goal here is to reduce filesizes and improve pageloading when dealing\n        with webfonts.\n\n        The VTT Talk sources are not necessary at runtime and endup being just dead\n        weight when left embedded in the font binaries. The sources should be kept on\n        the project files but stripped out when building release binaries.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Are there unwanted Apple tables?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/aat>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "There are no unwanted AAT tables.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Apple's TrueType reference manual [1] describes SFNT tables not in the\n        Microsoft OpenType specification [2] and these can sometimes sneak into final\n        release files, but Google Fonts should only have OpenType tables.\n\n        [1] https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6.html\n        [2] https://docs.microsoft.com/en-us/typography/opentype/spec/\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check a font's STAT table contains compulsory Axis Values.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/STAT>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check a font's STAT table contains compulsory Axis Values which exist\n        in the Google Fonts Axis Registry.\n\n        We cannot determine what Axis Values the user will set for axes such as\n        opsz, GRAD since these axes are unique for each font so we'll skip them.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check variable font instances",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/fvar_instances>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check a font's fvar instance coordinates comply with our guidelines:\n        https://googlefonts.github.io/gf-guide/variable.html#fvar-instances\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "All name entries referenced by fvar instances exist on the name table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/fvar_name_entries>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The purpose of this check is to make sure that all name entries referenced\n        by variable font instances do exist in the name table.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "PPEM must be an integer on hinted fonts.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/integer_ppem_if_hinted>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Hinted fonts must have head table flag bit 3 set.\n\n        Per https://docs.microsoft.com/en-us/typography/opentype/spec/head,\n        bit 3 of Head::flags decides whether PPEM should be rounded. This bit should\n        always be set for hinted fonts.\n\n        Note:\n        Bit 3 = Force ppem to integer values for all internal scaler math;\n                May use fractional ppem sizes if this bit is clear;\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Are there caret positions declared for every ligature?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/ligature_carets>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "This font lacks caret position values for ligature glyphs on its GDEF table. [code: lacks-caret-pos]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        All ligatures in a font must have corresponding caret (text cursor) positions\n        defined in the GDEF table, otherwhise, users may experience issues with\n        caret rendering.\n\n        If using GlyphsApp or UFOs, ligature carets can be defined as anchors with\n        names starting with 'caret_'. These can be compiled with fontmake as of\n        version v2.4.0.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Is there kerning info for non-ligated sequences?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/kerning_for_non_ligated_sequences>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "GPOS table lacks kerning info for the following non-ligated sequences:\n\n\t- f + f\n\n\t- f + l\n\n\t- l + f\n\n\t- f + i\n\n\t- i + f\n\n\t- l + i [code: lacks-kern-info]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Fonts with ligatures should have kerning on the corresponding non-ligated\n        sequences for text where ligatures aren't used\n        (eg https://github.com/impallari/Raleway/issues/14).\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Combined length of family and style must not exceed 27 characters.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/family_and_style_max_length>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "All name entries are good.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to a GlyphsApp tutorial [1], in order to make sure all versions of\n        Windows recognize it as a valid font file, we must make sure that the\n        concatenated length of the familyname (NameID.FONT_FAMILY_NAME) and\n        style (NameID.FONT_SUBFAMILY_NAME) strings in the name table do not\n        exceed 20 characters.\n\n        After discussing the problem in more detail at FontBakery issue #2179 [2] we\n        decided that allowing up to 27 chars would still be on the safe side, though.\n\n        [1] https://glyphsapp.com/tutorials/multiple-masters-part-3-setting-up-instances\n        [2] https://github.com/fonttools/fontbakery/issues/2179\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Name table entries should not contain line-breaks.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/line_breaks>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Name table entries are all single-line (no line-breaks found).",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        There are some entries on the name table that may include more than one line\n        of text. The Google Fonts team, though, prefers to keep the name table entries\n        short and simple without line breaks.\n\n        For instance, some designers like to include the full text of a font license in\n        the \"copyright notice\" entry, but for the GFonts collection this entry should\n        only mention year, author and other basic info in a manner enforced by\n        com.google.fonts/check/font_copyright\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Name table strings must not contain the string 'Reserved Font Name'.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/rfn>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "None of the name table strings contain \"Reserved Font Name\".",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Some designers adopt the \"Reserved Font Name\" clause of the OFL license. This\n        means that the original author reserves the rights to the family name and other\n        people can only distribute modified versions using a different family name.\n\n        Google Fonts published updates to the fonts in the collection in order to fix\n        issues and/or implement further improvements to the fonts. It is important to\n        keep the family name so that users of the webfonts can benefit from the updates.\n        Since it would forbid such usage scenario, all families in the GFonts collection\n        are required to not adopt the RFN clause.\n\n        This check ensures \"Reserved Font Name\" is not mentioned in the name table.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check family name for GF Guide compliance.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/family_name_compliance>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "\"GFS Neohellenic\" contains an abbreviation. [code: abbreviation]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Checks the family name for compliance with the Google Fonts Guide.\n        https://googlefonts.github.io/gf-guide/onboarding.html#new-fonts\n\n        If you want to have your family name added to the CamelCase\n        exceptions list, please submit a pull request to the\n        camelcased_familyname_exceptions.txt file.\n\n        Similarly, abbreviations can be submitted to the\n        abbreviations_familyname_exceptions.txt file.\n\n        These are located in the Lib/fontbakery/data/googlefonts/ directory\n        of the FontBakery source code currently hosted at\n        https://github.com/fonttools/fontbakery/\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "Directory name in GFonts repo structure must match NameID 1 of the regular.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/repo/dirname_matches_nameid_1>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The font seems to lack a regular. If family consists of a single-weight non-Regular style only, consider the Google Fonts specs for this case: https://github.com/googlefonts/gf-docs/tree/main/Spec#single-weight-families [code: lacks-regular]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "result": "FAIL"
                },
                {
                    "description": "A static fonts directory with at least two fonts must accompany variable fonts",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/repo/vf_has_static_fonts>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Please consider adding a subdirectory called \"static/\" and including in it static font files. [code: missing]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Variable font family directories kept in the google/fonts git repo may include\n        a static/ subdir containing static fonts.\n\n        These files are meant to be served for users that still lack support for\n        variable fonts in their web browsers.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "A font repository should not include FontBakery report files",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/repo/fb_report>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        A FontBakery report is ephemeral and so should be used for posting issues on a\n        bug-tracker instead of being hosted in the font project repository.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check upstream.yaml file contains all required fields",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/repo/upstream_yaml_has_required_fields>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: upstream_yaml",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        If a family has been pushed using the gftools packager, we must check that all\n        the required fields in the upstream.yaml file have been populated.\n    ",
                    "result": "SKIP",
                    "severity": 10
                },
                {
                    "description": "A font repository should not include ZIP files",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/repo/zip_files>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Sometimes people check in ZIPs into their font project repositories. While we\n        accept the practice of checking in binaries, we believe that a ZIP is a step\n        too far ;)\n\n        Note: a source purist position is that only source files and build scripts\n        should be checked in.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check font follows the Google Fonts vertical metric schema",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/vertical_metrics>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: not remote_styles",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This check generally enforces Google Fonts\u2019 vertical metrics specifications.\n        In particular:\n        * lineGap must be 0\n        * Sum of hhea ascender + abs(descender) + linegap must be\n          between 120% and 200% of UPM\n        * Warning if sum is over 150% of UPM\n\n        The threshold levels 150% (WARN) and 200% (FAIL) are somewhat arbitrarily chosen\n        and may hint at a glaring mistake in the metrics calculations or UPM settings.\n\n        Our documentation includes further information:\n        https://github.com/googlefonts/gf-docs/tree/main/VerticalMetrics\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check if the vertical metrics of a family are similar to the same family hosted on Google Fonts.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/vertical_metrics_regressions>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Could not identify a local Regular style font [code: couldnt-find-local-regular]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        If the family already exists on Google Fonts, we need to ensure that the\n        checked family's vertical metrics are similar. This check will test the\n        following schema which was outlined in Font Bakery issue #1162 [1]:\n\n        - The family should visually have the same vertical metrics as the Regular\n          style hosted on Google Fonts.\n\n        - If the family on Google Fonts has differing hhea and typo metrics, the family\n          being checked should use the typo metrics for both the hhea and typo entries.\n\n        - If the family on Google Fonts has use typo metrics not enabled and the family\n          being checked has it enabled, the hhea and typo metrics should use the family\n          on Google Fonts winAscent and winDescent values.\n\n        - If the upms differ, the values must be scaled so the visual appearance is\n          the same.\n\n        [1] https://github.com/fonttools/fontbakery/issues/1162\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "Check font follows the Google Fonts CJK vertical metric schema",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/cjk_vertical_metrics>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_cjk_font, not remote_styles",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        CJK fonts have different vertical metrics when compared to Latin fonts.\n        We follow the schema developed by dr Ken Lunde for Source Han Sans and\n        the Noto CJK fonts.\n\n        Our documentation includes further information:\n        https://github.com/googlefonts/gf-docs/tree/main/Spec#cjk-vertical-metrics\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check if the vertical metrics of a CJK family are similar to the same family hosted on Google Fonts.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/cjk_vertical_metrics_regressions>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_cjk_font, regular_ttFont",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check CJK family has the same vertical metrics as the same family\n        hosted on Google Fonts.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Does the font contain less than 150 CJK characters?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/cjk_not_enough_glyphs>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_claiming_to_be_cjk_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Kana has 150 characters and it's the smallest CJK writing system.\n\n        If a font contains less CJK glyphs than this writing system, we inform the\n        user that some glyphs may be encoded incorrectly.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check variable font instances don't have duplicate names",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont_duplicate_instance_names>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This check's purpose is to detect duplicate named instances names in a\n        given variable font.\n        Repeating instance names may be the result of instances for several VF axes\n        defined in `fvar`, but since currently only weight+italic tokens are allowed\n        in instance names as per GF specs, they ended up repeating.\n        Instead, only a base set of fonts for the most default representation of the\n        family can be defined through instances in the `fvar` table, all other\n        instances will have to be left to access through the `STAT` table.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Ensure VFs do not contain the ital axis.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/unsupported_axes>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The 'ital' axis is not supported yet in Google Chrome.\n\n        For the time being, we need to ensure that VFs do not contain this axis.\n        Once browser support is better, we can deprecate this check.\n\n        For more info regarding browser support, see:\n        https://arrowtype.github.io/vf-slnt-test/\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Ensure VFs with duplexed axes do not vary horizontal advance.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/duplexed_axis_reflow>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Certain axes, such as grade (GRAD) or roundness (ROND), should not\n        change any advanceWidth or kerning data across the font's design space.\n        This is because altering the advance width of glyphs can cause text reflow.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validate METADATA.pb axes values are within gf_axisregistry bounds.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/gf_axisregistry_bounds>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Each axis range in a METADATA.pb file must be registered, and within the bounds\n        of the axis definition in the Google Fonts Axis Registry, available at\n        https://github.com/google/fonts/tree/main/axisregistry\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validate METADATA.pb axes tags are defined in gf_axisregistry.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/gf_axisregistry_valid_tags>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Ensure all axes in a METADATA.pb file are registered in the\n        Google Fonts Axis Registry, available at\n        https://github.com/google/fonts/tree/main/axisregistry\n\n        Why does Google Fonts have its own Axis Registry?\n\n        We support a superset of the OpenType axis registry axis set, and use\n        additional metadata for each axis. Axes present in a font file but not in this\n        registry will not function via our API. No variable font is expected to\n        support all of the axes here.\n\n        Any font foundry or distributor library that offers variable fonts has a\n        implicit, latent, de-facto axis registry, which can be extracted by scanning\n        the library for axes' tags, labels, and min/def/max values. While in 2016\n        Microsoft originally offered to include more axes in the OpenType 1.8\n        specification (github.com/microsoft/OpenTypeDesignVariationAxisTags), as of\n        August 2020, this effort has stalled. We hope more foundries and distributors\n        will publish documents like this that make their axes explicit, to encourage\n        of adoption of variable fonts throughout the industry, and provide source\n        material for a future update to the OpenType specification's axis registry.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validate defaults on fvar table match registered fallback names in GFAxisRegistry.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/gf_axisregistry/fvar_axis_defaults>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check that axis defaults have a corresponding fallback name registered at the\n        Google Fonts Axis Registry, available at\n        https://github.com/google/fonts/tree/main/axisregistry\n\n        This is necessary for the following reasons:\n\n        To get ZIP files downloads on Google Fonts to be accurate \u2014 otherwise the\n        chosen default font is not generated. The Newsreader family, for instance, has\n        a default value on the 'opsz' axis of 16pt. If 16pt was not a registered\n        fallback position, then the ZIP file would instead include another position\n        as default (such as 14pt).\n\n        For the Variable fonts to display the correct location on the specimen page.\n\n        For VF with no weight axis to be displayed at all. For instance, Ballet, which\n        has no weight axis, was not appearing in sandbox because default position on\n        'opsz' axis was 16pt, and it was not yet a registered fallback positon.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validate STAT particle names and values match the fallback names in GFAxisRegistry.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/STAT/gf_axisregistry>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check that particle names and values on STAT table match the fallback names\n        in each axis entry at the Google Fonts Axis Registry, available at\n        https://github.com/google/fonts/tree/main/axisregistry\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validate VF axes match the ones declared on METADATA.pb.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/consistent_axis_enumeration>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        All font variation axes present in the font files must be properly declared\n        on METADATA.pb so that they can be served by the GFonts API.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Ensure METADATA.pb does not use escaped strings.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/escaped_strings>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        In some cases we've seen designer names and other fields with escaped strings\n        in METADATA files. Nowadays the strings can be full unicode strings and\n        do not need escaping.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Designers are listed correctly on the Google Fonts catalog?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/designer_profiles>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "It seems that Greek Font Society is still not listed on the designers catalog. Please submit a photo and a link to a webpage where people can learn more about the work of this designer/typefoundry. [code: profile-not-found]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Google Fonts has a catalog of designers.\n\n        This check ensures that the online entries of the catalog can be found based\n        on the designer names listed on the METADATA.pb file.\n\n        It also validates the URLs and file formats are all correctly set.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Ensure variable fonts include an avar table.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/mandatory_avar_table>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Most variable fonts should include an avar table to correctly define\n        axes progression rates.\n\n        For example, a weight axis from 0% to 100% doesn't map directly to 100 to 1000,\n        because a 10% progression from 0% may be too much to define the 200,\n        while 90% may be too little to define the 900.\n\n        If the progression rates of axes is linear, this check can be ignored.\n        Fontmake will also skip adding an avar table if the progression rates\n        are linear. However, we still recommend designers visually proof each\n        instance is at the expected weight, width etc.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "On a family update, the DESCRIPTION.en_us.html file should ideally also be updated.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/description/family_update>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: github_gfonts_description",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        We want to ensure that any significant changes to the font family are\n        properly mentioned in the DESCRIPTION file.\n\n        In general, it means that the contents of the DESCRIPTION.en_us.html file\n        will typically change if when font files are updated. Please treat this check\n        as a reminder to do so whenever appropriate!\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check small caps glyphs are available.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/missing_small_caps_glyphs>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Ensure small caps glyphs are available if\n        a font declares smcp or c2sc OT features.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Ensure Stylistic Sets have description.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/stylisticset_description>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Stylistic sets should provide description text. Programs such as InDesign,\n        TextEdit and Inkscape use that info to display to the users so that they know\n        what a given stylistic set offers.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "OS/2.fsSelection bit 7 (USE_TYPO_METRICS) is set in all fonts.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/os2/use_typo_metrics>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2.fsSelection bit 7 (USE_TYPO_METRICS) wasNOT set in the following fonts: ['/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf', '/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf', '/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf', '/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf']. [code: missing-os2-fsselection-bit7]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        All fonts on the Google Fonts collection should have OS/2.fsSelection bit 7\n        (USE_TYPO_METRICS) set. This requirement is part of the vertical metrics scheme\n        established as a Google Fonts policy aiming at a common ground supported by\n        all major font rendering environments.\n\n        For more details, read:\n        https://github.com/googlefonts/gf-docs/blob/main/VerticalMetrics/README.md\n\n        Below is the portion of that document that is most relevant to this check:\n\n        Use_Typo_Metrics must be enabled. This will force MS Applications to use the\n        OS/2 Typo values instead of the Win values. By doing this, we can freely set\n        the Win values to avoid clipping and control the line height with the typo\n        values. It has the added benefit of future line height compatibility. When\n        a new script is added, we simply change the Win values to the new yMin\n        and yMax, without needing to worry if the line height have changed.\n    ",
                    "result": "FAIL",
                    "severity": 10
                },
                {
                    "description": "Ensure fonts have ScriptLangTags declared on the 'meta' table.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/meta/script_lang_tags>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "This font file does not have a 'meta' table. [code: lacks-meta-table]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The OpenType 'meta' table originated at Apple. Microsoft added it to OT with\n        just two DataMap records:\n\n        - dlng: comma-separated ScriptLangTags that indicate which scripts,\n          or languages and scripts, with possible variants, the font is designed for.\n\n        - slng: comma-separated ScriptLangTags that indicate which scripts,\n          or languages and scripts, with possible variants, the font supports.\n\n\n        The slng structure is intended to describe which languages and scripts the\n        font overall supports. For example, a Traditional Chinese font that also\n        contains Latin characters, can indicate Hant,Latn, showing that it supports\n        Hant, the Traditional Chinese variant of the Hani script, and it also\n        supports the Latn script.\n\n        The dlng structure is far more interesting. A font may contain various glyphs,\n        but only a particular subset of the glyphs may be truly \"leading\" in the design,\n        while other glyphs may have been included for technical reasons. Such a\n        Traditional Chinese font could only list Hant there, showing that it\u2019s designed\n        for Traditional Chinese, but the font would omit Latn, because the developers\n        don\u2019t think the font is really recommended for purely Latin-script use.\n\n        The tags used in the structures can comprise just script, or also language\n        and script. For example, if a font has Bulgarian Cyrillic alternates in the\n        locl feature for the cyrl BGR OT languagesystem, it could also indicate in\n        dlng explicitly that it supports bul-Cyrl. (Note that the scripts and languages\n        in meta use the ISO language and script codes, not the OpenType ones).\n\n        This check ensures that the font has the meta table containing the\n        slng and dlng structures.\n\n        All families in the Google Fonts collection should contain the 'meta' table.\n        Windows 10 already uses it when deciding on which fonts to fall back to.\n        The Google Fonts API and also other environments could use the data for\n        smarter filtering. Most importantly, those entries should be added\n        to the Noto fonts.\n\n        In the font making process, some environments store this data in external\n        files already. But the meta table provides a convenient way to store this\n        inside the font file, so some tools may add the data, and unrelated tools\n        may read this data. This makes the solution much more portable and universal.\n    ",
                    "result": "WARN",
                    "severity": 3
                },
                {
                    "description": "Ensure fonts do not contain any pre-production tables.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/no_debugging_tables>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "This font file contains the following pre-production tables: FFTM [code: has-debugging-tables]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Tables such as `Debg` are useful in the pre-production stages of font\n        development, but add unnecessary bloat to a production font and should\n        be removed before release.\n    ",
                    "result": "WARN",
                    "severity": 6
                },
                {
                    "description": "Check font family directory name.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/family_directory_name>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Directory name is \"gfsneohellenic\", as expected.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        We want the directory name of a font family to be predictable and directly\n        derived from the family name, all lowercased and removing spaces.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check font can render its own name.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/render_own_name>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font can successfully render its own name (GFS Neohellenic)",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        A base expectation is that a font family's regular/default (400 roman) style\n        can render its 'menu name' (nameID 1) in itself.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check samples can be rendered.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/can_render_samples>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        In order to prevent tofu from being seen on fonts.google.com, this check\n        verifies that all samples specified by METADATA.pb can be properly\n        rendered by the font.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check if category on METADATA.pb matches what can be inferred from the family name.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/category_hints>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Sometimes the font familyname contains words that hint at which is the most\n        likely correct category to be declared on METADATA.pb\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check font has the expected color font tables.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/colorfont_tables>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Looks Good!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        COLR v0 fonts are widely supported in most browsers so they do not require\n        an SVG color table. However, some environments (e.g. Safari, Adobe apps)\n        do not currently support COLR v1 so we need to add an SVG table to these fonts,\n        except in the case of variable fonts, since SVG does not support\n        OpenType Variations.\n\n        To automatically generate compatible SVG/COLR tables,\n        run the maximum_color tool in nanoemoji:\n        https://github.com/googlefonts/nanoemoji\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Color layers should have a minimum brightness",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/color_cpal_brightness>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Looks good!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Layers of a COLRv0 font should not be too dark or too bright. When layer colors\n        are set explicitly, they can't be changed and they may turn out illegible\n        against dark or bright backgrounds.\n\n        While traditional color-less fonts can be colored in design apps or CSS, a\n        black color definition in a COLRv0 font actually means that that layer will be\n        rendered in black regardless of the background color. This leads to text\n        becoming invisible against a dark background, for instance when using a dark\n        theme in a web browser or operating system.\n\n        This check ensures that layer colors are at least 10% bright and at most 90%\n        bright, when not already set to the current color (0xFFFF).\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Put an empty glyph on GID 1 right after the .notdef glyph for COLRv0 fonts.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/empty_glyph_on_gid1_for_colrv0>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Looks good!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        A rendering bug in Windows 10 paints whichever glyph is on GID 1 on top of\n        some glyphs, colored or not. This only occurs for COLR version 0 fonts.\n\n        Having a glyph with no contours on GID 1 is a practical workaround for that.\n\n        See https://github.com/googlefonts/gftools/issues/609\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Noto fonts must have an ARTICLE.en_us.html file",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/description/noto_has_article>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_noto",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Noto fonts are displayed in a different way on the fonts.google.com\n         web site, and so must also contain an article about them.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Checking file is named canonically.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/canonical_filename>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Expected \"GFSNeohellenic-Italic.ttf. Got GFSNeohellenicItalic.ttf. [code: bad-filename]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        A font's filename must be composed as \"<familyname>-<stylename>.ttf\":\n\n        - Nunito-Regular.ttf\n\n        - Oswald-BoldItalic.ttf\n\n\n        Variable fonts must list the axis tags in alphabetical order in\n        square brackets and separated by commas:\n\n        - Roboto[wdth,wght].ttf\n\n        - Familyname-Italic[wght].ttf\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "Does DESCRIPTION file contain broken links?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/description/broken_links>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: description_html",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The snippet of HTML in the DESCRIPTION.en_us.html file is added to the font\n        family webpage on the Google Fonts website. For that reason, all hyperlinks\n        in it must be properly working.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "URLs on DESCRIPTION file must not display http(s) prefix.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/description/urls>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: description_html",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The snippet of HTML in the DESCRIPTION.en_us.html file is added to the font\n        family webpage on the Google Fonts website.\n\n        Google Fonts has a content formatting policy for that snippet that expects the\n        text content of links not to include the http:// or https:// prefixes.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Does DESCRIPTION file contain a upstream Git repo URL?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/description/git_url>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: description_html",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The contents of the DESCRIPTION.en-us.html file are displayed on the\n        Google Fonts website in the about section of each font family specimen page.\n\n        Since all of the Google Fonts collection is composed of libre-licensed fonts,\n        this check enforces a policy that there must be a hypertext link in that page\n        directing users to the repository where the font project files are\n        made available.\n\n        Such hosting is typically done on sites like Github, Gitlab, GNU Savannah or\n        any other git-based version control service.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Is this a proper HTML snippet?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/description/valid_html>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/DESCRIPTION.en_us.html does not include an HTML <p> tag. [code: lacks-paragraph]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Sometimes people write malformed HTML markup. This check should ensure the\n        file is good.\n\n        Additionally, when packaging families for being pushed to the `google/fonts`\n        git repo, if there is no DESCRIPTION.en_us.html file, some older versions of\n        the `add_font.py` tool insert a placeholder description file which contains\n        invalid html. This file needs to either be replaced with an existing\n        description file or edited by hand.\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "DESCRIPTION.en_us.html must have more than 200 bytes.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/description/min_length>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "DESCRIPTION.en_us.html is larger than 200 bytes.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "DESCRIPTION.en_us.html should end in a linebreak.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/description/eof_linebreak>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The last characther on DESCRIPTION.en_us.html is not a line-break. Please add it. [code: missing-eof-linebreak]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Some older text-handling tools sometimes misbehave if the last line of data\n        in a text file is not terminated with a newline character (also known as '\\n').\n\n        We know that this is a very small detail, but for the sake of keeping all\n        DESCRIPTION.en_us.html files uniformly formatted throughout the GFonts\n        collection, we chose to adopt the practice of placing this final linebreak\n        character on them.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Check METADATA.pb parse correctly.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/parses>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb parsed successfuly.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The purpose of this check is to ensure that the METADATA.pb file is not\n        malformed.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Font designer field in METADATA.pb must not be 'unknown'.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/unknown_designer>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font designer field is not 'unknown'.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Font designer field in METADATA.pb must not contain 'Multiple designers'.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/multiple_designers>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Looks good.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        For a while the string \"Multiple designers\" was used as a placeholder on\n        METADATA.pb files. We should replace all those instances with actual designer\n        names so that proper credits are displayed on the Google Fonts family\n        specimen pages.\n\n        If there's more than a single designer, the designer names must be\n        separated by commas.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Multiple values in font designer field in METADATA.pb must be separated by commas.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/designer_values>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Looks good.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        We must use commas instead of forward slashes because the server-side code\n        at the fonts.google.com directory will segment the string on the commas into\n        a list of names and display the first item in the list as the\n        \"principal designer\" while the remaining names are identified as \"contributors\".\n\n        See eg https://fonts.google.com/specimen/Rubik\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Does METADATA.pb copyright field contain broken links?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/broken_links>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "All links in the METADATA.pb file look good!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Ensure METADATA.pb lists all font binaries.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/undeclared_fonts>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The set of font binaries available, except the ones on a \"static\" subdir,\n        must match exactly those declared on the METADATA.pb file.\n\n        Also, to avoid confusion, we expect that font files (other than statics)\n        are not placed on subdirectories.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Ensure METADATA.pb category field is valid.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/category>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        There are only five acceptable values for the category field in a METADATA.pb\n        file:\n\n        - MONOSPACE\n\n        - SANS_SERIF\n\n        - SERIF\n\n        - DISPLAY\n\n        - HANDWRITING\n\n        This check is meant to avoid typos in this field.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Checking OS/2 fsType does not impose restrictions.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/fstype>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2 fsType is properly set to zero.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The fsType in the OS/2 table is a legacy DRM-related field. Fonts in the\n        Google Fonts collection must have it set to zero (also known as\n        \"Installable Embedding\"). This setting indicates that the fonts can be\n        embedded in documents and permanently installed by applications on\n        remote systems.\n\n        More detailed info is available at:\n        https://docs.microsoft.com/en-us/typography/opentype/spec/os2#fstype\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Checking OS/2 achVendID.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/vendor_id>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2 VendorID value 'Alts' is not yet recognized. If you registered it recently, then it's safe to ignore this warning message. Otherwise, you should set it to your own unique 4 character code, and register it with Microsoft at https://www.microsoft.com/typography/links/vendorlist.aspx\n [code: unknown]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Microsoft keeps a list of font vendors and their respective contact info. This\n        list is updated regularly and is indexed by a 4-char \"Vendor ID\" which is\n        stored in the achVendID field of the OS/2 table.\n\n        Registering your ID is not mandatory, but it is a good practice since some\n        applications may display the type designer / type foundry contact info on some\n        dialog and also because that info will be visible on Microsoft's website:\n\n        https://docs.microsoft.com/en-us/typography/vendors/\n\n        This check verifies whether or not a given font's vendor ID is registered in\n        that list or if it has some of the default values used by the most common\n        font editors.\n\n        Each new FontBakery release includes a cached copy of that list of vendor IDs.\n        If you registered recently, you're safe to ignore warnings emitted by this\n        check, since your ID will soon be included in one of our upcoming releases.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Check Google Fonts glyph coverage.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/glyph_coverage>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Missing required codepoints:\n\n\t- 0x030B (COMBINING DOUBLE ACUTE ACCENT)\n\n\n\t- 0x0304 (COMBINING MACRON)\n\n\n\t- 0x1E9E (LATIN CAPITAL LETTER SHARP S)\n\n\n\t- 0x0237 (LATIN SMALL LETTER DOTLESS J)\n\n\n\t- 0x0307 (COMBINING DOT ABOVE)\n\n\n\t- 0x0302 (COMBINING CIRCUMFLEX ACCENT)\n\n\n\t- 0x030C (COMBINING CARON)\n\n\n\t- 0x0306 (COMBINING BREVE)\n\n\n\t- 0x030A (COMBINING RING ABOVE)\n [code: missing-codepoints]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Google Fonts expects that fonts in its collection support at least the minimal\n        set of characters defined in the `GF-latin-core` glyph-set.\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "Check for METADATA subsets with zero support.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/unsupported_subsets>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This check ensures that the subsets specified on a METADATA.pb file are\n        actually supported (even if only partially) by the font files.\n\n        Subsets for which none of the codepoints are supported will cause the\n        check to FAIL.\n    ",
                    "result": "PASS",
                    "severity": 10
                },
                {
                    "description": "Check for codepoints not covered by METADATA subsets.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/unreachable_subsetting>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The following codepoints supported by the font are not covered by\n    any subsets defined in the font's metadata file, and will never\n    be served. You can solve this by either manually adding additional\n    subset declarations to METADATA.pb, or by editing the glyphset\n    definitions.\n\n * U+0100 LATIN CAPITAL LETTER A WITH MACRON: try adding latin-ext\n * U+0101 LATIN SMALL LETTER A WITH MACRON: try adding latin-ext\n * U+0102 LATIN CAPITAL LETTER A WITH BREVE: try adding one of: latin-ext, vietnamese\n * U+0103 LATIN SMALL LETTER A WITH BREVE: try adding one of: latin-ext, vietnamese\n * U+0104 LATIN CAPITAL LETTER A WITH OGONEK: try adding latin-ext\n * U+0105 LATIN SMALL LETTER A WITH OGONEK: try adding latin-ext\n * U+0106 LATIN CAPITAL LETTER C WITH ACUTE: try adding latin-ext\n * U+0107 LATIN SMALL LETTER C WITH ACUTE: try adding latin-ext\n * U+0108 LATIN CAPITAL LETTER C WITH CIRCUMFLEX: try adding latin-ext\n * U+0109 LATIN SMALL LETTER C WITH CIRCUMFLEX: try adding latin-ext\n * U+010A LATIN CAPITAL LETTER C WITH DOT ABOVE: try adding latin-ext\n * U+010B LATIN SMALL LETTER C WITH DOT ABOVE: try adding latin-ext\n * U+010C LATIN CAPITAL LETTER C WITH CARON: try adding latin-ext\n * U+010D LATIN SMALL LETTER C WITH CARON: try adding latin-ext\n * U+010E LATIN CAPITAL LETTER D WITH CARON: try adding latin-ext\n * U+010F LATIN SMALL LETTER D WITH CARON: try adding latin-ext\n * U+0110 LATIN CAPITAL LETTER D WITH STROKE: try adding one of: latin-ext, vietnamese\n * U+0111 LATIN SMALL LETTER D WITH STROKE: try adding one of: latin-ext, vietnamese\n * U+0112 LATIN CAPITAL LETTER E WITH MACRON: try adding latin-ext\n * U+0113 LATIN SMALL LETTER E WITH MACRON: try adding latin-ext\n * U+0114 LATIN CAPITAL LETTER E WITH BREVE: try adding latin-ext\n * U+0115 LATIN SMALL LETTER E WITH BREVE: try adding latin-ext\n * U+0116 LATIN CAPITAL LETTER E WITH DOT ABOVE: try adding latin-ext\n * U+0117 LATIN SMALL LETTER E WITH DOT ABOVE: try adding latin-ext\n * U+0118 LATIN CAPITAL LETTER E WITH OGONEK: try adding latin-ext\n * U+0119 LATIN SMALL LETTER E WITH OGONEK: try adding latin-ext\n * U+011A LATIN CAPITAL LETTER E WITH CARON: try adding latin-ext\n * U+011B LATIN SMALL LETTER E WITH CARON: try adding latin-ext\n * U+011C LATIN CAPITAL LETTER G WITH CIRCUMFLEX: try adding latin-ext\n * U+011D LATIN SMALL LETTER G WITH CIRCUMFLEX: try adding latin-ext\n * U+011E LATIN CAPITAL LETTER G WITH BREVE: try adding latin-ext\n * U+011F LATIN SMALL LETTER G WITH BREVE: try adding latin-ext\n * U+0120 LATIN CAPITAL LETTER G WITH DOT ABOVE: try adding latin-ext\n * U+0121 LATIN SMALL LETTER G WITH DOT ABOVE: try adding latin-ext\n * U+0122 LATIN CAPITAL LETTER G WITH CEDILLA: try adding latin-ext\n * U+0123 LATIN SMALL LETTER G WITH CEDILLA: try adding latin-ext\n * U+0124 LATIN CAPITAL LETTER H WITH CIRCUMFLEX: try adding latin-ext\n * U+0125 LATIN SMALL LETTER H WITH CIRCUMFLEX: try adding latin-ext\n * U+0126 LATIN CAPITAL LETTER H WITH STROKE: try adding latin-ext\n * U+0127 LATIN SMALL LETTER H WITH STROKE: try adding latin-ext\n * U+0128 LATIN CAPITAL LETTER I WITH TILDE: try adding one of: latin-ext, vietnamese\n * U+0129 LATIN SMALL LETTER I WITH TILDE: try adding one of: latin-ext, vietnamese\n * U+012A LATIN CAPITAL LETTER I WITH MACRON: try adding latin-ext\n * U+012B LATIN SMALL LETTER I WITH MACRON: try adding latin-ext\n * U+012C LATIN CAPITAL LETTER I WITH BREVE: try adding latin-ext\n * U+012D LATIN SMALL LETTER I WITH BREVE: try adding latin-ext\n * U+012E LATIN CAPITAL LETTER I WITH OGONEK: try adding latin-ext\n * U+012F LATIN SMALL LETTER I WITH OGONEK: try adding latin-ext\n * U+0130 LATIN CAPITAL LETTER I WITH DOT ABOVE: try adding latin-ext\n * U+0132 LATIN CAPITAL LIGATURE IJ: try adding latin-ext\n * U+0133 LATIN SMALL LIGATURE IJ: try adding latin-ext\n * U+0134 LATIN CAPITAL LETTER J WITH CIRCUMFLEX: try adding latin-ext\n * U+0135 LATIN SMALL LETTER J WITH CIRCUMFLEX: try adding latin-ext\n * U+0136 LATIN CAPITAL LETTER K WITH CEDILLA: try adding latin-ext\n * U+0137 LATIN SMALL LETTER K WITH CEDILLA: try adding latin-ext\n * U+0139 LATIN CAPITAL LETTER L WITH ACUTE: try adding latin-ext\n * U+013A LATIN SMALL LETTER L WITH ACUTE: try adding latin-ext\n * U+013B LATIN CAPITAL LETTER L WITH CEDILLA: try adding latin-ext\n * U+013C LATIN SMALL LETTER L WITH CEDILLA: try adding latin-ext\n * U+013D LATIN CAPITAL LETTER L WITH CARON: try adding latin-ext\n * U+013E LATIN SMALL LETTER L WITH CARON: try adding latin-ext\n * U+013F LATIN CAPITAL LETTER L WITH MIDDLE DOT: try adding latin-ext\n * U+0140 LATIN SMALL LETTER L WITH MIDDLE DOT: try adding latin-ext\n * U+0141 LATIN CAPITAL LETTER L WITH STROKE: try adding latin-ext\n * U+0142 LATIN SMALL LETTER L WITH STROKE: try adding latin-ext\n * U+0143 LATIN CAPITAL LETTER N WITH ACUTE: try adding latin-ext\n * U+0144 LATIN SMALL LETTER N WITH ACUTE: try adding latin-ext\n * U+0145 LATIN CAPITAL LETTER N WITH CEDILLA: try adding latin-ext\n * U+0146 LATIN SMALL LETTER N WITH CEDILLA: try adding latin-ext\n * U+0147 LATIN CAPITAL LETTER N WITH CARON: try adding latin-ext\n * U+0148 LATIN SMALL LETTER N WITH CARON: try adding latin-ext\n * U+0149 LATIN SMALL LETTER N PRECEDED BY APOSTROPHE: try adding latin-ext\n * U+014A LATIN CAPITAL LETTER ENG: try adding latin-ext\n * U+014B LATIN SMALL LETTER ENG: try adding latin-ext\n * U+014C LATIN CAPITAL LETTER O WITH MACRON: try adding latin-ext\n * U+014D LATIN SMALL LETTER O WITH MACRON: try adding latin-ext\n * U+014E LATIN CAPITAL LETTER O WITH BREVE: try adding latin-ext\n * U+014F LATIN SMALL LETTER O WITH BREVE: try adding latin-ext\n * U+0150 LATIN CAPITAL LETTER O WITH DOUBLE ACUTE: try adding latin-ext\n * U+0151 LATIN SMALL LETTER O WITH DOUBLE ACUTE: try adding latin-ext\n * U+0154 LATIN CAPITAL LETTER R WITH ACUTE: try adding latin-ext\n * U+0155 LATIN SMALL LETTER R WITH ACUTE: try adding latin-ext\n * U+0156 LATIN CAPITAL LETTER R WITH CEDILLA: try adding latin-ext\n * U+0157 LATIN SMALL LETTER R WITH CEDILLA: try adding latin-ext\n * U+0158 LATIN CAPITAL LETTER R WITH CARON: try adding latin-ext\n * U+0159 LATIN SMALL LETTER R WITH CARON: try adding latin-ext\n * U+015A LATIN CAPITAL LETTER S WITH ACUTE: try adding latin-ext\n * U+015B LATIN SMALL LETTER S WITH ACUTE: try adding latin-ext\n * U+015C LATIN CAPITAL LETTER S WITH CIRCUMFLEX: try adding latin-ext\n * U+015D LATIN SMALL LETTER S WITH CIRCUMFLEX: try adding latin-ext\n * U+015E LATIN CAPITAL LETTER S WITH CEDILLA: try adding latin-ext\n * U+015F LATIN SMALL LETTER S WITH CEDILLA: try adding latin-ext\n * U+0160 LATIN CAPITAL LETTER S WITH CARON: try adding latin-ext\n * U+0161 LATIN SMALL LETTER S WITH CARON: try adding latin-ext\n * U+0162 LATIN CAPITAL LETTER T WITH CEDILLA: try adding latin-ext\n * U+0163 LATIN SMALL LETTER T WITH CEDILLA: try adding latin-ext\n * U+0164 LATIN CAPITAL LETTER T WITH CARON: try adding latin-ext\n * U+0165 LATIN SMALL LETTER T WITH CARON: try adding latin-ext\n * U+0166 LATIN CAPITAL LETTER T WITH STROKE: try adding latin-ext\n * U+0167 LATIN SMALL LETTER T WITH STROKE: try adding latin-ext\n * U+0168 LATIN CAPITAL LETTER U WITH TILDE: try adding one of: latin-ext, vietnamese\n * U+0169 LATIN SMALL LETTER U WITH TILDE: try adding one of: latin-ext, vietnamese\n * U+016A LATIN CAPITAL LETTER U WITH MACRON: try adding latin-ext\n * U+016B LATIN SMALL LETTER U WITH MACRON: try adding latin-ext\n * U+016C LATIN CAPITAL LETTER U WITH BREVE: try adding latin-ext\n * U+016D LATIN SMALL LETTER U WITH BREVE: try adding latin-ext\n * U+016E LATIN CAPITAL LETTER U WITH RING ABOVE: try adding latin-ext\n * U+016F LATIN SMALL LETTER U WITH RING ABOVE: try adding latin-ext\n * U+0170 LATIN CAPITAL LETTER U WITH DOUBLE ACUTE: try adding latin-ext\n * U+0171 LATIN SMALL LETTER U WITH DOUBLE ACUTE: try adding latin-ext\n * U+0172 LATIN CAPITAL LETTER U WITH OGONEK: try adding latin-ext\n * U+0173 LATIN SMALL LETTER U WITH OGONEK: try adding latin-ext\n * U+0174 LATIN CAPITAL LETTER W WITH CIRCUMFLEX: try adding latin-ext\n * U+0175 LATIN SMALL LETTER W WITH CIRCUMFLEX: try adding latin-ext\n * U+0176 LATIN CAPITAL LETTER Y WITH CIRCUMFLEX: try adding latin-ext\n * U+0177 LATIN SMALL LETTER Y WITH CIRCUMFLEX: try adding latin-ext\n * U+0178 LATIN CAPITAL LETTER Y WITH DIAERESIS: try adding latin-ext\n * U+0179 LATIN CAPITAL LETTER Z WITH ACUTE: try adding latin-ext\n * U+017A LATIN SMALL LETTER Z WITH ACUTE: try adding latin-ext\n * U+017B LATIN CAPITAL LETTER Z WITH DOT ABOVE: try adding latin-ext\n * U+017C LATIN SMALL LETTER Z WITH DOT ABOVE: try adding latin-ext\n * U+017D LATIN CAPITAL LETTER Z WITH CARON: try adding latin-ext\n * U+017E LATIN SMALL LETTER Z WITH CARON: try adding latin-ext\n * U+017F LATIN SMALL LETTER LONG S: try adding latin-ext\n * U+0192 LATIN SMALL LETTER F WITH HOOK: try adding latin-ext\n * U+01A0 LATIN CAPITAL LETTER O WITH HORN: try adding one of: latin-ext, vietnamese\n * U+01A1 LATIN SMALL LETTER O WITH HORN: try adding one of: latin-ext, vietnamese\n * U+01AF LATIN CAPITAL LETTER U WITH HORN: try adding one of: latin-ext, vietnamese\n * U+01B0 LATIN SMALL LETTER U WITH HORN: try adding one of: latin-ext, vietnamese\n * U+01F4 LATIN CAPITAL LETTER G WITH ACUTE: try adding latin-ext\n * U+01F5 LATIN SMALL LETTER G WITH ACUTE: try adding latin-ext\n * U+01FA LATIN CAPITAL LETTER A WITH RING ABOVE AND ACUTE: try adding latin-ext\n * U+01FB LATIN SMALL LETTER A WITH RING ABOVE AND ACUTE: try adding latin-ext\n * U+01FC LATIN CAPITAL LETTER AE WITH ACUTE: try adding latin-ext\n * U+01FD LATIN SMALL LETTER AE WITH ACUTE: try adding latin-ext\n * U+01FE LATIN CAPITAL LETTER O WITH STROKE AND ACUTE: try adding latin-ext\n * U+01FF LATIN SMALL LETTER O WITH STROKE AND ACUTE: try adding latin-ext\n * U+0218 LATIN CAPITAL LETTER S WITH COMMA BELOW: try adding latin-ext\n * U+0219 LATIN SMALL LETTER S WITH COMMA BELOW: try adding latin-ext\n * U+02C7 CARON: try adding one of: tifinagh, canadian-aboriginal\n * U+02C9 MODIFIER LETTER MACRON: not included in any glyphset definition\n * U+02D8 BREVE: try adding canadian-aboriginal\n * U+02D9 DOT ABOVE: try adding canadian-aboriginal\n * U+02DB OGONEK: try adding canadian-aboriginal\n * U+02DD DOUBLE ACUTE ACCENT: not included in any glyphset definition\n * U+0300 COMBINING GRAVE ACCENT: try adding one of: coptic, cherokee, tai-le\n * U+0301 COMBINING ACUTE ACCENT: try adding one of: coptic, cherokee, tai-le, tifinagh\n * U+0303 COMBINING TILDE: not included in any glyphset definition\n * U+0308 COMBINING DIAERESIS: try adding one of: gothic, coptic, tai-le\n * U+0309 COMBINING HOOK ABOVE: try adding tifinagh\n * U+0312 COMBINING TURNED COMMA ABOVE: not included in any glyphset definition\n * U+0313 COMBINING COMMA ABOVE: not included in any glyphset definition\n * U+0314 COMBINING REVERSED COMMA ABOVE: not included in any glyphset definition\n * U+0323 COMBINING DOT BELOW: try adding one of: coptic, cherokee, malayalam, tifinagh\n * U+0326 COMBINING COMMA BELOW: not included in any glyphset definition\n * U+0327 COMBINING CEDILLA: not included in any glyphset definition\n * U+0328 COMBINING OGONEK: not included in any glyphset definition\n * U+0342 COMBINING GREEK PERISPOMENI: not included in any glyphset definition\n * U+0343 COMBINING GREEK KORONIS: not included in any glyphset definition\n * U+0345 COMBINING GREEK YPOGEGRAMMENI: not included in any glyphset definition\n * U+048C CYRILLIC CAPITAL LETTER SEMISOFT SIGN: try adding cyrillic-ext\n * U+048D CYRILLIC SMALL LETTER SEMISOFT SIGN: try adding cyrillic-ext\n * U+04D2 CYRILLIC CAPITAL LETTER A WITH DIAERESIS: try adding cyrillic-ext\n * U+04D3 CYRILLIC SMALL LETTER A WITH DIAERESIS: try adding cyrillic-ext\n * U+04E6 CYRILLIC CAPITAL LETTER O WITH DIAERESIS: try adding cyrillic-ext\n * U+04E7 CYRILLIC SMALL LETTER O WITH DIAERESIS: try adding cyrillic-ext\n * U+1E80 LATIN CAPITAL LETTER W WITH GRAVE: try adding latin-ext\n * U+1E81 LATIN SMALL LETTER W WITH GRAVE: try adding latin-ext\n * U+1E82 LATIN CAPITAL LETTER W WITH ACUTE: try adding latin-ext\n * U+1E83 LATIN SMALL LETTER W WITH ACUTE: try adding latin-ext\n * U+1E84 LATIN CAPITAL LETTER W WITH DIAERESIS: try adding latin-ext\n * U+1E85 LATIN SMALL LETTER W WITH DIAERESIS: try adding latin-ext\n * U+1EA0 LATIN CAPITAL LETTER A WITH DOT BELOW: try adding vietnamese\n * U+1EA1 LATIN SMALL LETTER A WITH DOT BELOW: try adding vietnamese\n * U+1EA2 LATIN CAPITAL LETTER A WITH HOOK ABOVE: try adding vietnamese\n * U+1EA3 LATIN SMALL LETTER A WITH HOOK ABOVE: try adding vietnamese\n * U+1EA4 LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND ACUTE: try adding vietnamese\n * U+1EA5 LATIN SMALL LETTER A WITH CIRCUMFLEX AND ACUTE: try adding vietnamese\n * U+1EA6 LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND GRAVE: try adding vietnamese\n * U+1EA7 LATIN SMALL LETTER A WITH CIRCUMFLEX AND GRAVE: try adding vietnamese\n * U+1EA8 LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND HOOK ABOVE: try adding vietnamese\n * U+1EA9 LATIN SMALL LETTER A WITH CIRCUMFLEX AND HOOK ABOVE: try adding vietnamese\n * U+1EAA LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND TILDE: try adding vietnamese\n * U+1EAB LATIN SMALL LETTER A WITH CIRCUMFLEX AND TILDE: try adding vietnamese\n * U+1EAC LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND DOT BELOW: try adding vietnamese\n * U+1EAD LATIN SMALL LETTER A WITH CIRCUMFLEX AND DOT BELOW: try adding vietnamese\n * U+1EAE LATIN CAPITAL LETTER A WITH BREVE AND ACUTE: try adding vietnamese\n * U+1EAF LATIN SMALL LETTER A WITH BREVE AND ACUTE: try adding vietnamese\n * U+1EB0 LATIN CAPITAL LETTER A WITH BREVE AND GRAVE: try adding vietnamese\n * U+1EB1 LATIN SMALL LETTER A WITH BREVE AND GRAVE: try adding vietnamese\n * U+1EB2 LATIN CAPITAL LETTER A WITH BREVE AND HOOK ABOVE: try adding vietnamese\n * U+1EB3 LATIN SMALL LETTER A WITH BREVE AND HOOK ABOVE: try adding vietnamese\n * U+1EB4 LATIN CAPITAL LETTER A WITH BREVE AND TILDE: try adding vietnamese\n * U+1EB5 LATIN SMALL LETTER A WITH BREVE AND TILDE: try adding vietnamese\n * U+1EB6 LATIN CAPITAL LETTER A WITH BREVE AND DOT BELOW: try adding vietnamese\n * U+1EB7 LATIN SMALL LETTER A WITH BREVE AND DOT BELOW: try adding vietnamese\n * U+1EB8 LATIN CAPITAL LETTER E WITH DOT BELOW: try adding vietnamese\n * U+1EB9 LATIN SMALL LETTER E WITH DOT BELOW: try adding vietnamese\n * U+1EBA LATIN CAPITAL LETTER E WITH HOOK ABOVE: try adding vietnamese\n * U+1EBB LATIN SMALL LETTER E WITH HOOK ABOVE: try adding vietnamese\n * U+1EBC LATIN CAPITAL LETTER E WITH TILDE: try adding vietnamese\n * U+1EBD LATIN SMALL LETTER E WITH TILDE: try adding vietnamese\n * U+1EBE LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND ACUTE: try adding vietnamese\n * U+1EBF LATIN SMALL LETTER E WITH CIRCUMFLEX AND ACUTE: try adding vietnamese\n * U+1EC0 LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND GRAVE: try adding vietnamese\n * U+1EC1 LATIN SMALL LETTER E WITH CIRCUMFLEX AND GRAVE: try adding vietnamese\n * U+1EC2 LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND HOOK ABOVE: try adding vietnamese\n * U+1EC3 LATIN SMALL LETTER E WITH CIRCUMFLEX AND HOOK ABOVE: try adding vietnamese\n * U+1EC4 LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND TILDE: try adding vietnamese\n * U+1EC5 LATIN SMALL LETTER E WITH CIRCUMFLEX AND TILDE: try adding vietnamese\n * U+1EC6 LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND DOT BELOW: try adding vietnamese\n * U+1EC7 LATIN SMALL LETTER E WITH CIRCUMFLEX AND DOT BELOW: try adding vietnamese\n * U+1EC8 LATIN CAPITAL LETTER I WITH HOOK ABOVE: try adding vietnamese\n * U+1EC9 LATIN SMALL LETTER I WITH HOOK ABOVE: try adding vietnamese\n * U+1ECA LATIN CAPITAL LETTER I WITH DOT BELOW: try adding vietnamese\n * U+1ECB LATIN SMALL LETTER I WITH DOT BELOW: try adding vietnamese\n * U+1ECC LATIN CAPITAL LETTER O WITH DOT BELOW: try adding vietnamese\n * U+1ECD LATIN SMALL LETTER O WITH DOT BELOW: try adding vietnamese\n * U+1ECE LATIN CAPITAL LETTER O WITH HOOK ABOVE: try adding vietnamese\n * U+1ECF LATIN SMALL LETTER O WITH HOOK ABOVE: try adding vietnamese\n * U+1ED0 LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND ACUTE: try adding vietnamese\n * U+1ED1 LATIN SMALL LETTER O WITH CIRCUMFLEX AND ACUTE: try adding vietnamese\n * U+1ED2 LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND GRAVE: try adding vietnamese\n * U+1ED3 LATIN SMALL LETTER O WITH CIRCUMFLEX AND GRAVE: try adding vietnamese\n * U+1ED4 LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND HOOK ABOVE: try adding vietnamese\n * U+1ED5 LATIN SMALL LETTER O WITH CIRCUMFLEX AND HOOK ABOVE: try adding vietnamese\n * U+1ED6 LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND TILDE: try adding vietnamese\n * U+1ED7 LATIN SMALL LETTER O WITH CIRCUMFLEX AND TILDE: try adding vietnamese\n * U+1ED8 LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND DOT BELOW: try adding vietnamese\n * U+1ED9 LATIN SMALL LETTER O WITH CIRCUMFLEX AND DOT BELOW: try adding vietnamese\n * U+1EDA LATIN CAPITAL LETTER O WITH HORN AND ACUTE: try adding vietnamese\n * U+1EDB LATIN SMALL LETTER O WITH HORN AND ACUTE: try adding vietnamese\n * U+1EDC LATIN CAPITAL LETTER O WITH HORN AND GRAVE: try adding vietnamese\n * U+1EDD LATIN SMALL LETTER O WITH HORN AND GRAVE: try adding vietnamese\n * U+1EDE LATIN CAPITAL LETTER O WITH HORN AND HOOK ABOVE: try adding vietnamese\n * U+1EDF LATIN SMALL LETTER O WITH HORN AND HOOK ABOVE: try adding vietnamese\n * U+1EE0 LATIN CAPITAL LETTER O WITH HORN AND TILDE: try adding vietnamese\n * U+1EE1 LATIN SMALL LETTER O WITH HORN AND TILDE: try adding vietnamese\n * U+1EE2 LATIN CAPITAL LETTER O WITH HORN AND DOT BELOW: try adding vietnamese\n * U+1EE3 LATIN SMALL LETTER O WITH HORN AND DOT BELOW: try adding vietnamese\n * U+1EE4 LATIN CAPITAL LETTER U WITH DOT BELOW: try adding vietnamese\n * U+1EE5 LATIN SMALL LETTER U WITH DOT BELOW: try adding vietnamese\n * U+1EE6 LATIN CAPITAL LETTER U WITH HOOK ABOVE: try adding vietnamese\n * U+1EE7 LATIN SMALL LETTER U WITH HOOK ABOVE: try adding vietnamese\n * U+1EE8 LATIN CAPITAL LETTER U WITH HORN AND ACUTE: try adding vietnamese\n * U+1EE9 LATIN SMALL LETTER U WITH HORN AND ACUTE: try adding vietnamese\n * U+1EEA LATIN CAPITAL LETTER U WITH HORN AND GRAVE: try adding vietnamese\n * U+1EEB LATIN SMALL LETTER U WITH HORN AND GRAVE: try adding vietnamese\n * U+1EEC LATIN CAPITAL LETTER U WITH HORN AND HOOK ABOVE: try adding vietnamese\n * U+1EED LATIN SMALL LETTER U WITH HORN AND HOOK ABOVE: try adding vietnamese\n * U+1EEE LATIN CAPITAL LETTER U WITH HORN AND TILDE: try adding vietnamese\n * U+1EEF LATIN SMALL LETTER U WITH HORN AND TILDE: try adding vietnamese\n * U+1EF0 LATIN CAPITAL LETTER U WITH HORN AND DOT BELOW: try adding vietnamese\n * U+1EF1 LATIN SMALL LETTER U WITH HORN AND DOT BELOW: try adding vietnamese\n * U+1EF2 LATIN CAPITAL LETTER Y WITH GRAVE: try adding one of: latin-ext, vietnamese\n * U+1EF3 LATIN SMALL LETTER Y WITH GRAVE: try adding one of: latin-ext, vietnamese\n * U+1EF4 LATIN CAPITAL LETTER Y WITH DOT BELOW: try adding one of: latin-ext, vietnamese\n * U+1EF5 LATIN SMALL LETTER Y WITH DOT BELOW: try adding one of: latin-ext, vietnamese\n * U+1EF6 LATIN CAPITAL LETTER Y WITH HOOK ABOVE: try adding one of: latin-ext, vietnamese\n * U+1EF7 LATIN SMALL LETTER Y WITH HOOK ABOVE: try adding one of: latin-ext, vietnamese\n * U+1EF8 LATIN CAPITAL LETTER Y WITH TILDE: try adding one of: latin-ext, vietnamese\n * U+1EF9 LATIN SMALL LETTER Y WITH TILDE: try adding one of: latin-ext, vietnamese\n * U+1F00 GREEK SMALL LETTER ALPHA WITH PSILI: try adding greek-ext\n * U+1F01 GREEK SMALL LETTER ALPHA WITH DASIA: try adding greek-ext\n * U+1F02 GREEK SMALL LETTER ALPHA WITH PSILI AND VARIA: try adding greek-ext\n * U+1F03 GREEK SMALL LETTER ALPHA WITH DASIA AND VARIA: try adding greek-ext\n * U+1F04 GREEK SMALL LETTER ALPHA WITH PSILI AND OXIA: try adding greek-ext\n * U+1F05 GREEK SMALL LETTER ALPHA WITH DASIA AND OXIA: try adding greek-ext\n * U+1F06 GREEK SMALL LETTER ALPHA WITH PSILI AND PERISPOMENI: try adding greek-ext\n * U+1F07 GREEK SMALL LETTER ALPHA WITH DASIA AND PERISPOMENI: try adding greek-ext\n * U+1F08 GREEK CAPITAL LETTER ALPHA WITH PSILI: try adding greek-ext\n * U+1F09 GREEK CAPITAL LETTER ALPHA WITH DASIA: try adding greek-ext\n * U+1F0A GREEK CAPITAL LETTER ALPHA WITH PSILI AND VARIA: try adding greek-ext\n * U+1F0B GREEK CAPITAL LETTER ALPHA WITH DASIA AND VARIA: try adding greek-ext\n * U+1F0C GREEK CAPITAL LETTER ALPHA WITH PSILI AND OXIA: try adding greek-ext\n * U+1F0D GREEK CAPITAL LETTER ALPHA WITH DASIA AND OXIA: try adding greek-ext\n * U+1F0E GREEK CAPITAL LETTER ALPHA WITH PSILI AND PERISPOMENI: try adding greek-ext\n * U+1F0F GREEK CAPITAL LETTER ALPHA WITH DASIA AND PERISPOMENI: try adding greek-ext\n * U+1F10 GREEK SMALL LETTER EPSILON WITH PSILI: try adding greek-ext\n * U+1F11 GREEK SMALL LETTER EPSILON WITH DASIA: try adding greek-ext\n * U+1F12 GREEK SMALL LETTER EPSILON WITH PSILI AND VARIA: try adding greek-ext\n * U+1F13 GREEK SMALL LETTER EPSILON WITH DASIA AND VARIA: try adding greek-ext\n * U+1F14 GREEK SMALL LETTER EPSILON WITH PSILI AND OXIA: try adding greek-ext\n * U+1F15 GREEK SMALL LETTER EPSILON WITH DASIA AND OXIA: try adding greek-ext\n * U+1F18 GREEK CAPITAL LETTER EPSILON WITH PSILI: try adding greek-ext\n * U+1F19 GREEK CAPITAL LETTER EPSILON WITH DASIA: try adding greek-ext\n * U+1F1A GREEK CAPITAL LETTER EPSILON WITH PSILI AND VARIA: try adding greek-ext\n * U+1F1B GREEK CAPITAL LETTER EPSILON WITH DASIA AND VARIA: try adding greek-ext\n * U+1F1C GREEK CAPITAL LETTER EPSILON WITH PSILI AND OXIA: try adding greek-ext\n * U+1F1D GREEK CAPITAL LETTER EPSILON WITH DASIA AND OXIA: try adding greek-ext\n * U+1F20 GREEK SMALL LETTER ETA WITH PSILI: try adding greek-ext\n * U+1F21 GREEK SMALL LETTER ETA WITH DASIA: try adding greek-ext\n * U+1F22 GREEK SMALL LETTER ETA WITH PSILI AND VARIA: try adding greek-ext\n * U+1F23 GREEK SMALL LETTER ETA WITH DASIA AND VARIA: try adding greek-ext\n * U+1F24 GREEK SMALL LETTER ETA WITH PSILI AND OXIA: try adding greek-ext\n * U+1F25 GREEK SMALL LETTER ETA WITH DASIA AND OXIA: try adding greek-ext\n * U+1F26 GREEK SMALL LETTER ETA WITH PSILI AND PERISPOMENI: try adding greek-ext\n * U+1F27 GREEK SMALL LETTER ETA WITH DASIA AND PERISPOMENI: try adding greek-ext\n * U+1F28 GREEK CAPITAL LETTER ETA WITH PSILI: try adding greek-ext\n * U+1F29 GREEK CAPITAL LETTER ETA WITH DASIA: try adding greek-ext\n * U+1F2A GREEK CAPITAL LETTER ETA WITH PSILI AND VARIA: try adding greek-ext\n * U+1F2B GREEK CAPITAL LETTER ETA WITH DASIA AND VARIA: try adding greek-ext\n * U+1F2C GREEK CAPITAL LETTER ETA WITH PSILI AND OXIA: try adding greek-ext\n * U+1F2D GREEK CAPITAL LETTER ETA WITH DASIA AND OXIA: try adding greek-ext\n * U+1F2E GREEK CAPITAL LETTER ETA WITH PSILI AND PERISPOMENI: try adding greek-ext\n * U+1F2F GREEK CAPITAL LETTER ETA WITH DASIA AND PERISPOMENI: try adding greek-ext\n * U+1F30 GREEK SMALL LETTER IOTA WITH PSILI: try adding greek-ext\n * U+1F31 GREEK SMALL LETTER IOTA WITH DASIA: try adding greek-ext\n * U+1F32 GREEK SMALL LETTER IOTA WITH PSILI AND VARIA: try adding greek-ext\n * U+1F33 GREEK SMALL LETTER IOTA WITH DASIA AND VARIA: try adding greek-ext\n * U+1F34 GREEK SMALL LETTER IOTA WITH PSILI AND OXIA: try adding greek-ext\n * U+1F35 GREEK SMALL LETTER IOTA WITH DASIA AND OXIA: try adding greek-ext\n * U+1F36 GREEK SMALL LETTER IOTA WITH PSILI AND PERISPOMENI: try adding greek-ext\n * U+1F37 GREEK SMALL LETTER IOTA WITH DASIA AND PERISPOMENI: try adding greek-ext\n * U+1F38 GREEK CAPITAL LETTER IOTA WITH PSILI: try adding greek-ext\n * U+1F39 GREEK CAPITAL LETTER IOTA WITH DASIA: try adding greek-ext\n * U+1F3A GREEK CAPITAL LETTER IOTA WITH PSILI AND VARIA: try adding greek-ext\n * U+1F3B GREEK CAPITAL LETTER IOTA WITH DASIA AND VARIA: try adding greek-ext\n * U+1F3C GREEK CAPITAL LETTER IOTA WITH PSILI AND OXIA: try adding greek-ext\n * U+1F3D GREEK CAPITAL LETTER IOTA WITH DASIA AND OXIA: try adding greek-ext\n * U+1F3E GREEK CAPITAL LETTER IOTA WITH PSILI AND PERISPOMENI: try adding greek-ext\n * U+1F3F GREEK CAPITAL LETTER IOTA WITH DASIA AND PERISPOMENI: try adding greek-ext\n * U+1F40 GREEK SMALL LETTER OMICRON WITH PSILI: try adding greek-ext\n * U+1F41 GREEK SMALL LETTER OMICRON WITH DASIA: try adding greek-ext\n * U+1F42 GREEK SMALL LETTER OMICRON WITH PSILI AND VARIA: try adding greek-ext\n * U+1F43 GREEK SMALL LETTER OMICRON WITH DASIA AND VARIA: try adding greek-ext\n * U+1F44 GREEK SMALL LETTER OMICRON WITH PSILI AND OXIA: try adding greek-ext\n * U+1F45 GREEK SMALL LETTER OMICRON WITH DASIA AND OXIA: try adding greek-ext\n * U+1F48 GREEK CAPITAL LETTER OMICRON WITH PSILI: try adding greek-ext\n * U+1F49 GREEK CAPITAL LETTER OMICRON WITH DASIA: try adding greek-ext\n * U+1F4A GREEK CAPITAL LETTER OMICRON WITH PSILI AND VARIA: try adding greek-ext\n * U+1F4B GREEK CAPITAL LETTER OMICRON WITH DASIA AND VARIA: try adding greek-ext\n * U+1F4C GREEK CAPITAL LETTER OMICRON WITH PSILI AND OXIA: try adding greek-ext\n * U+1F4D GREEK CAPITAL LETTER OMICRON WITH DASIA AND OXIA: try adding greek-ext\n * U+1F50 GREEK SMALL LETTER UPSILON WITH PSILI: try adding greek-ext\n * U+1F51 GREEK SMALL LETTER UPSILON WITH DASIA: try adding greek-ext\n * U+1F52 GREEK SMALL LETTER UPSILON WITH PSILI AND VARIA: try adding greek-ext\n * U+1F53 GREEK SMALL LETTER UPSILON WITH DASIA AND VARIA: try adding greek-ext\n * U+1F54 GREEK SMALL LETTER UPSILON WITH PSILI AND OXIA: try adding greek-ext\n * U+1F55 GREEK SMALL LETTER UPSILON WITH DASIA AND OXIA: try adding greek-ext\n * U+1F56 GREEK SMALL LETTER UPSILON WITH PSILI AND PERISPOMENI: try adding greek-ext\n * U+1F57 GREEK SMALL LETTER UPSILON WITH DASIA AND PERISPOMENI: try adding greek-ext\n * U+1F59 GREEK CAPITAL LETTER UPSILON WITH DASIA: try adding greek-ext\n * U+1F5B GREEK CAPITAL LETTER UPSILON WITH DASIA AND VARIA: try adding greek-ext\n * U+1F5D GREEK CAPITAL LETTER UPSILON WITH DASIA AND OXIA: try adding greek-ext\n * U+1F5F GREEK CAPITAL LETTER UPSILON WITH DASIA AND PERISPOMENI: try adding greek-ext\n * U+1F60 GREEK SMALL LETTER OMEGA WITH PSILI: try adding greek-ext\n * U+1F61 GREEK SMALL LETTER OMEGA WITH DASIA: try adding greek-ext\n * U+1F62 GREEK SMALL LETTER OMEGA WITH PSILI AND VARIA: try adding greek-ext\n * U+1F63 GREEK SMALL LETTER OMEGA WITH DASIA AND VARIA: try adding greek-ext\n * U+1F64 GREEK SMALL LETTER OMEGA WITH PSILI AND OXIA: try adding greek-ext\n * U+1F65 GREEK SMALL LETTER OMEGA WITH DASIA AND OXIA: try adding greek-ext\n * U+1F66 GREEK SMALL LETTER OMEGA WITH PSILI AND PERISPOMENI: try adding greek-ext\n * U+1F67 GREEK SMALL LETTER OMEGA WITH DASIA AND PERISPOMENI: try adding greek-ext\n * U+1F68 GREEK CAPITAL LETTER OMEGA WITH PSILI: try adding greek-ext\n * U+1F69 GREEK CAPITAL LETTER OMEGA WITH DASIA: try adding greek-ext\n * U+1F6A GREEK CAPITAL LETTER OMEGA WITH PSILI AND VARIA: try adding greek-ext\n * U+1F6B GREEK CAPITAL LETTER OMEGA WITH DASIA AND VARIA: try adding greek-ext\n * U+1F6C GREEK CAPITAL LETTER OMEGA WITH PSILI AND OXIA: try adding greek-ext\n * U+1F6D GREEK CAPITAL LETTER OMEGA WITH DASIA AND OXIA: try adding greek-ext\n * U+1F6E GREEK CAPITAL LETTER OMEGA WITH PSILI AND PERISPOMENI: try adding greek-ext\n * U+1F6F GREEK CAPITAL LETTER OMEGA WITH DASIA AND PERISPOMENI: try adding greek-ext\n * U+1F70 GREEK SMALL LETTER ALPHA WITH VARIA: try adding greek-ext\n * U+1F71 GREEK SMALL LETTER ALPHA WITH OXIA: try adding greek-ext\n * U+1F72 GREEK SMALL LETTER EPSILON WITH VARIA: try adding greek-ext\n * U+1F73 GREEK SMALL LETTER EPSILON WITH OXIA: try adding greek-ext\n * U+1F74 GREEK SMALL LETTER ETA WITH VARIA: try adding greek-ext\n * U+1F75 GREEK SMALL LETTER ETA WITH OXIA: try adding greek-ext\n * U+1F76 GREEK SMALL LETTER IOTA WITH VARIA: try adding greek-ext\n * U+1F77 GREEK SMALL LETTER IOTA WITH OXIA: try adding greek-ext\n * U+1F78 GREEK SMALL LETTER OMICRON WITH VARIA: try adding greek-ext\n * U+1F79 GREEK SMALL LETTER OMICRON WITH OXIA: try adding greek-ext\n * U+1F7A GREEK SMALL LETTER UPSILON WITH VARIA: try adding greek-ext\n * U+1F7B GREEK SMALL LETTER UPSILON WITH OXIA: try adding greek-ext\n * U+1F7C GREEK SMALL LETTER OMEGA WITH VARIA: try adding greek-ext\n * U+1F7D GREEK SMALL LETTER OMEGA WITH OXIA: try adding greek-ext\n * U+1F80 GREEK SMALL LETTER ALPHA WITH PSILI AND YPOGEGRAMMENI: try adding greek-ext\n * U+1F81 GREEK SMALL LETTER ALPHA WITH DASIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1F82 GREEK SMALL LETTER ALPHA WITH PSILI AND VARIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1F83 GREEK SMALL LETTER ALPHA WITH DASIA AND VARIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1F84 GREEK SMALL LETTER ALPHA WITH PSILI AND OXIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1F85 GREEK SMALL LETTER ALPHA WITH DASIA AND OXIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1F86 GREEK SMALL LETTER ALPHA WITH PSILI AND PERISPOMENI AND YPOGEGRAMMENI: try adding greek-ext\n * U+1F87 GREEK SMALL LETTER ALPHA WITH DASIA AND PERISPOMENI AND YPOGEGRAMMENI: try adding greek-ext\n * U+1F88 GREEK CAPITAL LETTER ALPHA WITH PSILI AND PROSGEGRAMMENI: try adding greek-ext\n * U+1F89 GREEK CAPITAL LETTER ALPHA WITH DASIA AND PROSGEGRAMMENI: try adding greek-ext\n * U+1F8A GREEK CAPITAL LETTER ALPHA WITH PSILI AND VARIA AND PROSGEGRAMMENI: try adding greek-ext\n * U+1F8B GREEK CAPITAL LETTER ALPHA WITH DASIA AND VARIA AND PROSGEGRAMMENI: try adding greek-ext\n * U+1F8C GREEK CAPITAL LETTER ALPHA WITH PSILI AND OXIA AND PROSGEGRAMMENI: try adding greek-ext\n * U+1F8D GREEK CAPITAL LETTER ALPHA WITH DASIA AND OXIA AND PROSGEGRAMMENI: try adding greek-ext\n * U+1F8E GREEK CAPITAL LETTER ALPHA WITH PSILI AND PERISPOMENI AND PROSGEGRAMMENI: try adding greek-ext\n * U+1F8F GREEK CAPITAL LETTER ALPHA WITH DASIA AND PERISPOMENI AND PROSGEGRAMMENI: try adding greek-ext\n * U+1F90 GREEK SMALL LETTER ETA WITH PSILI AND YPOGEGRAMMENI: try adding greek-ext\n * U+1F91 GREEK SMALL LETTER ETA WITH DASIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1F92 GREEK SMALL LETTER ETA WITH PSILI AND VARIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1F93 GREEK SMALL LETTER ETA WITH DASIA AND VARIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1F94 GREEK SMALL LETTER ETA WITH PSILI AND OXIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1F95 GREEK SMALL LETTER ETA WITH DASIA AND OXIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1F96 GREEK SMALL LETTER ETA WITH PSILI AND PERISPOMENI AND YPOGEGRAMMENI: try adding greek-ext\n * U+1F97 GREEK SMALL LETTER ETA WITH DASIA AND PERISPOMENI AND YPOGEGRAMMENI: try adding greek-ext\n * U+1F98 GREEK CAPITAL LETTER ETA WITH PSILI AND PROSGEGRAMMENI: try adding greek-ext\n * U+1F99 GREEK CAPITAL LETTER ETA WITH DASIA AND PROSGEGRAMMENI: try adding greek-ext\n * U+1F9A GREEK CAPITAL LETTER ETA WITH PSILI AND VARIA AND PROSGEGRAMMENI: try adding greek-ext\n * U+1F9B GREEK CAPITAL LETTER ETA WITH DASIA AND VARIA AND PROSGEGRAMMENI: try adding greek-ext\n * U+1F9C GREEK CAPITAL LETTER ETA WITH PSILI AND OXIA AND PROSGEGRAMMENI: try adding greek-ext\n * U+1F9D GREEK CAPITAL LETTER ETA WITH DASIA AND OXIA AND PROSGEGRAMMENI: try adding greek-ext\n * U+1F9E GREEK CAPITAL LETTER ETA WITH PSILI AND PERISPOMENI AND PROSGEGRAMMENI: try adding greek-ext\n * U+1F9F GREEK CAPITAL LETTER ETA WITH DASIA AND PERISPOMENI AND PROSGEGRAMMENI: try adding greek-ext\n * U+1FA0 GREEK SMALL LETTER OMEGA WITH PSILI AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FA1 GREEK SMALL LETTER OMEGA WITH DASIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FA2 GREEK SMALL LETTER OMEGA WITH PSILI AND VARIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FA3 GREEK SMALL LETTER OMEGA WITH DASIA AND VARIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FA4 GREEK SMALL LETTER OMEGA WITH PSILI AND OXIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FA5 GREEK SMALL LETTER OMEGA WITH DASIA AND OXIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FA6 GREEK SMALL LETTER OMEGA WITH PSILI AND PERISPOMENI AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FA7 GREEK SMALL LETTER OMEGA WITH DASIA AND PERISPOMENI AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FA8 GREEK CAPITAL LETTER OMEGA WITH PSILI AND PROSGEGRAMMENI: try adding greek-ext\n * U+1FA9 GREEK CAPITAL LETTER OMEGA WITH DASIA AND PROSGEGRAMMENI: try adding greek-ext\n * U+1FAA GREEK CAPITAL LETTER OMEGA WITH PSILI AND VARIA AND PROSGEGRAMMENI: try adding greek-ext\n * U+1FAB GREEK CAPITAL LETTER OMEGA WITH DASIA AND VARIA AND PROSGEGRAMMENI: try adding greek-ext\n * U+1FAC GREEK CAPITAL LETTER OMEGA WITH PSILI AND OXIA AND PROSGEGRAMMENI: try adding greek-ext\n * U+1FAD GREEK CAPITAL LETTER OMEGA WITH DASIA AND OXIA AND PROSGEGRAMMENI: try adding greek-ext\n * U+1FAE GREEK CAPITAL LETTER OMEGA WITH PSILI AND PERISPOMENI AND PROSGEGRAMMENI: try adding greek-ext\n * U+1FAF GREEK CAPITAL LETTER OMEGA WITH DASIA AND PERISPOMENI AND PROSGEGRAMMENI: try adding greek-ext\n * U+1FB0 GREEK SMALL LETTER ALPHA WITH VRACHY: try adding greek-ext\n * U+1FB1 GREEK SMALL LETTER ALPHA WITH MACRON: try adding greek-ext\n * U+1FB2 GREEK SMALL LETTER ALPHA WITH VARIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FB3 GREEK SMALL LETTER ALPHA WITH YPOGEGRAMMENI: try adding greek-ext\n * U+1FB4 GREEK SMALL LETTER ALPHA WITH OXIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FB6 GREEK SMALL LETTER ALPHA WITH PERISPOMENI: try adding greek-ext\n * U+1FB7 GREEK SMALL LETTER ALPHA WITH PERISPOMENI AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FB8 GREEK CAPITAL LETTER ALPHA WITH VRACHY: try adding greek-ext\n * U+1FB9 GREEK CAPITAL LETTER ALPHA WITH MACRON: try adding greek-ext\n * U+1FBA GREEK CAPITAL LETTER ALPHA WITH VARIA: try adding greek-ext\n * U+1FBB GREEK CAPITAL LETTER ALPHA WITH OXIA: try adding greek-ext\n * U+1FBC GREEK CAPITAL LETTER ALPHA WITH PROSGEGRAMMENI: try adding greek-ext\n * U+1FBD GREEK KORONIS: try adding greek-ext\n * U+1FBE GREEK PROSGEGRAMMENI: try adding greek-ext\n * U+1FBF GREEK PSILI: try adding greek-ext\n * U+1FC0 GREEK PERISPOMENI: try adding greek-ext\n * U+1FC1 GREEK DIALYTIKA AND PERISPOMENI: try adding greek-ext\n * U+1FC2 GREEK SMALL LETTER ETA WITH VARIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FC3 GREEK SMALL LETTER ETA WITH YPOGEGRAMMENI: try adding greek-ext\n * U+1FC4 GREEK SMALL LETTER ETA WITH OXIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FC6 GREEK SMALL LETTER ETA WITH PERISPOMENI: try adding greek-ext\n * U+1FC7 GREEK SMALL LETTER ETA WITH PERISPOMENI AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FC8 GREEK CAPITAL LETTER EPSILON WITH VARIA: try adding greek-ext\n * U+1FC9 GREEK CAPITAL LETTER EPSILON WITH OXIA: try adding greek-ext\n * U+1FCA GREEK CAPITAL LETTER ETA WITH VARIA: try adding greek-ext\n * U+1FCB GREEK CAPITAL LETTER ETA WITH OXIA: try adding greek-ext\n * U+1FCC GREEK CAPITAL LETTER ETA WITH PROSGEGRAMMENI: try adding greek-ext\n * U+1FCD GREEK PSILI AND VARIA: try adding greek-ext\n * U+1FCE GREEK PSILI AND OXIA: try adding greek-ext\n * U+1FCF GREEK PSILI AND PERISPOMENI: try adding greek-ext\n * U+1FD0 GREEK SMALL LETTER IOTA WITH VRACHY: try adding greek-ext\n * U+1FD1 GREEK SMALL LETTER IOTA WITH MACRON: try adding greek-ext\n * U+1FD2 GREEK SMALL LETTER IOTA WITH DIALYTIKA AND VARIA: try adding greek-ext\n * U+1FD3 GREEK SMALL LETTER IOTA WITH DIALYTIKA AND OXIA: try adding greek-ext\n * U+1FD6 GREEK SMALL LETTER IOTA WITH PERISPOMENI: try adding greek-ext\n * U+1FD7 GREEK SMALL LETTER IOTA WITH DIALYTIKA AND PERISPOMENI: try adding greek-ext\n * U+1FD8 GREEK CAPITAL LETTER IOTA WITH VRACHY: try adding greek-ext\n * U+1FD9 GREEK CAPITAL LETTER IOTA WITH MACRON: try adding greek-ext\n * U+1FDA GREEK CAPITAL LETTER IOTA WITH VARIA: try adding greek-ext\n * U+1FDB GREEK CAPITAL LETTER IOTA WITH OXIA: try adding greek-ext\n * U+1FDD GREEK DASIA AND VARIA: try adding greek-ext\n * U+1FDE GREEK DASIA AND OXIA: try adding greek-ext\n * U+1FDF GREEK DASIA AND PERISPOMENI: try adding greek-ext\n * U+1FE0 GREEK SMALL LETTER UPSILON WITH VRACHY: try adding greek-ext\n * U+1FE1 GREEK SMALL LETTER UPSILON WITH MACRON: try adding greek-ext\n * U+1FE2 GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND VARIA: try adding greek-ext\n * U+1FE3 GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND OXIA: try adding greek-ext\n * U+1FE4 GREEK SMALL LETTER RHO WITH PSILI: try adding greek-ext\n * U+1FE5 GREEK SMALL LETTER RHO WITH DASIA: try adding greek-ext\n * U+1FE6 GREEK SMALL LETTER UPSILON WITH PERISPOMENI: try adding greek-ext\n * U+1FE7 GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND PERISPOMENI: try adding greek-ext\n * U+1FE8 GREEK CAPITAL LETTER UPSILON WITH VRACHY: try adding greek-ext\n * U+1FE9 GREEK CAPITAL LETTER UPSILON WITH MACRON: try adding greek-ext\n * U+1FEA GREEK CAPITAL LETTER UPSILON WITH VARIA: try adding greek-ext\n * U+1FEB GREEK CAPITAL LETTER UPSILON WITH OXIA: try adding greek-ext\n * U+1FEC GREEK CAPITAL LETTER RHO WITH DASIA: try adding greek-ext\n * U+1FED GREEK DIALYTIKA AND VARIA: try adding greek-ext\n * U+1FEE GREEK DIALYTIKA AND OXIA: try adding greek-ext\n * U+1FEF GREEK VARIA: try adding greek-ext\n * U+1FF2 GREEK SMALL LETTER OMEGA WITH VARIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FF3 GREEK SMALL LETTER OMEGA WITH YPOGEGRAMMENI: try adding greek-ext\n * U+1FF4 GREEK SMALL LETTER OMEGA WITH OXIA AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FF6 GREEK SMALL LETTER OMEGA WITH PERISPOMENI: try adding greek-ext\n * U+1FF7 GREEK SMALL LETTER OMEGA WITH PERISPOMENI AND YPOGEGRAMMENI: try adding greek-ext\n * U+1FF8 GREEK CAPITAL LETTER OMICRON WITH VARIA: try adding greek-ext\n * U+1FF9 GREEK CAPITAL LETTER OMICRON WITH OXIA: try adding greek-ext\n * U+1FFA GREEK CAPITAL LETTER OMEGA WITH VARIA: try adding greek-ext\n * U+1FFB GREEK CAPITAL LETTER OMEGA WITH OXIA: try adding greek-ext\n * U+1FFC GREEK CAPITAL LETTER OMEGA WITH PROSGEGRAMMENI: try adding greek-ext\n * U+1FFD GREEK OXIA: try adding greek-ext\n * U+1FFE GREEK DASIA: try adding greek-ext\n * U+2012 FIGURE DASH: not included in any glyphset definition\n * U+2016 DOUBLE VERTICAL LINE: not included in any glyphset definition\n * U+2017 DOUBLE LOW LINE: not included in any glyphset definition\n * U+2020 DAGGER: try adding latin-ext\n * U+2021 DOUBLE DAGGER: not included in any glyphset definition\n * U+2025 TWO DOT LEADER: try adding phags-pa\n * U+2030 PER MILLE SIGN: not included in any glyphset definition\n * U+203C DOUBLE EXCLAMATION MARK: not included in any glyphset definition\n * U+203D INTERROBANG: not included in any glyphset definition\n * U+203E OVERLINE: not included in any glyphset definition\n * U+2045 LEFT SQUARE BRACKET WITH QUILL: not included in any glyphset definition\n * U+2048 QUESTION EXCLAMATION MARK: try adding mongolian\n * U+2070 SUPERSCRIPT ZERO: not included in any glyphset definition\n * U+2075 SUPERSCRIPT FIVE: not included in any glyphset definition\n * U+2076 SUPERSCRIPT SIX: not included in any glyphset definition\n * U+2077 SUPERSCRIPT SEVEN: not included in any glyphset definition\n * U+2078 SUPERSCRIPT EIGHT: not included in any glyphset definition\n * U+2079 SUPERSCRIPT NINE: not included in any glyphset definition\n * U+207A SUPERSCRIPT PLUS SIGN: not included in any glyphset definition\n * U+207B SUPERSCRIPT MINUS: not included in any glyphset definition\n * U+207C SUPERSCRIPT EQUALS SIGN: not included in any glyphset definition\n * U+207D SUPERSCRIPT LEFT PARENTHESIS: not included in any glyphset definition\n * U+207E SUPERSCRIPT RIGHT PARENTHESIS: not included in any glyphset definition\n * U+207F SUPERSCRIPT LATIN SMALL LETTER N: not included in any glyphset definition\n * U+2080 SUBSCRIPT ZERO: not included in any glyphset definition\n * U+2081 SUBSCRIPT ONE: not included in any glyphset definition\n * U+2082 SUBSCRIPT TWO: not included in any glyphset definition\n * U+2083 SUBSCRIPT THREE: not included in any glyphset definition\n * U+2084 SUBSCRIPT FOUR: not included in any glyphset definition\n * U+2085 SUBSCRIPT FIVE: not included in any glyphset definition\n * U+2086 SUBSCRIPT SIX: not included in any glyphset definition\n * U+2087 SUBSCRIPT SEVEN: not included in any glyphset definition\n * U+2088 SUBSCRIPT EIGHT: not included in any glyphset definition\n * U+2089 SUBSCRIPT NINE: not included in any glyphset definition\n * U+208A SUBSCRIPT PLUS SIGN: not included in any glyphset definition\n * U+208B SUBSCRIPT MINUS: not included in any glyphset definition\n * U+208C SUBSCRIPT EQUALS SIGN: not included in any glyphset definition\n * U+208D SUBSCRIPT LEFT PARENTHESIS: not included in any glyphset definition\n * U+208E SUBSCRIPT RIGHT PARENTHESIS: not included in any glyphset definition\n * U+20A1 COLON SIGN: try adding latin-ext\n * U+20A2 CRUZEIRO SIGN: try adding latin-ext\n * U+20A3 FRENCH FRANC SIGN: try adding latin-ext\n * U+20A8 RUPEE SIGN: try adding one of: latin-ext, devanagari\n * U+2126 OHM SIGN: not included in any glyphset definition\n * U+212E ESTIMATED SYMBOL: not included in any glyphset definition\n * U+2153 VULGAR FRACTION ONE THIRD: not included in any glyphset definition\n * U+2154 VULGAR FRACTION TWO THIRDS: not included in any glyphset definition\n * U+2155 VULGAR FRACTION ONE FIFTH: not included in any glyphset definition\n * U+2156 VULGAR FRACTION TWO FIFTHS: not included in any glyphset definition\n * U+2157 VULGAR FRACTION THREE FIFTHS: not included in any glyphset definition\n * U+2158 VULGAR FRACTION FOUR FIFTHS: not included in any glyphset definition\n * U+2159 VULGAR FRACTION ONE SIXTH: not included in any glyphset definition\n * U+215A VULGAR FRACTION FIVE SIXTHS: not included in any glyphset definition\n * U+215B VULGAR FRACTION ONE EIGHTH: not included in any glyphset definition\n * U+215C VULGAR FRACTION THREE EIGHTHS: not included in any glyphset definition\n * U+215D VULGAR FRACTION FIVE EIGHTHS: not included in any glyphset definition\n * U+215E VULGAR FRACTION SEVEN EIGHTHS: not included in any glyphset definition\n * U+215F FRACTION NUMERATOR ONE: not included in any glyphset definition\n * U+2202 PARTIAL DIFFERENTIAL: not included in any glyphset definition\n * U+2206 INCREMENT: not included in any glyphset definition\n * U+220F N-ARY PRODUCT: not included in any glyphset definition\n * U+2211 N-ARY SUMMATION: not included in any glyphset definition\n * U+221A SQUARE ROOT: not included in any glyphset definition\n * U+221E INFINITY: not included in any glyphset definition\n * U+2227 LOGICAL AND: not included in any glyphset definition\n * U+2228 LOGICAL OR: not included in any glyphset definition\n * U+2229 INTERSECTION: not included in any glyphset definition\n * U+222A UNION: not included in any glyphset definition\n * U+222B INTEGRAL: not included in any glyphset definition\n * U+2245 APPROXIMATELY EQUAL TO: not included in any glyphset definition\n * U+2248 ALMOST EQUAL TO: not included in any glyphset definition\n * U+2260 NOT EQUAL TO: not included in any glyphset definition\n * U+2261 IDENTICAL TO: not included in any glyphset definition\n * U+2264 LESS-THAN OR EQUAL TO: not included in any glyphset definition\n * U+2265 GREATER-THAN OR EQUAL TO: not included in any glyphset definition\n * U+2310 REVERSED NOT SIGN: not included in any glyphset definition\n * U+25CA LOZENGE: not included in any glyphset definition\n * U+25E6 WHITE BULLET: not included in any glyphset definition\n * U+E001 : not included in any glyphset definition\n * U+E002 : not included in any glyphset definition\n * U+E003 : not included in any glyphset definition\n * U+E004 : not included in any glyphset definition\n * U+E005 : not included in any glyphset definition\n * U+E006 : not included in any glyphset definition\n * U+FB00 LATIN SMALL LIGATURE FF: not included in any glyphset definition\n * U+FB01 LATIN SMALL LIGATURE FI: not included in any glyphset definition\n * U+FB02 LATIN SMALL LIGATURE FL: not included in any glyphset definition\n * U+FB03 LATIN SMALL LIGATURE FFI: not included in any glyphset definition\n * U+FB04 LATIN SMALL LIGATURE FFL: not included in any glyphset definition\n * U+FFFC OBJECT REPLACEMENT CHARACTER: not included in any glyphset definition\n\nOr you can add the above codepoints to one of the subsets supported by the font: `menu`, `greek` [code: unreachable-subsetting]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This check ensures that all encoded glyphs in the font are covered by a\n        subset declared in the METADATA.pb. Google Fonts splits the font into\n        a set of subset fonts based on the contents of the `subsets` field and\n        the subset definitions in the `glyphsets` repository.\n\n        Any encoded glyphs which are not by any of these subset definitions\n        will not be served in the subsetted fonts, and so will be unreachable to\n        the end user.\n    ",
                    "result": "WARN",
                    "severity": 2
                },
                {
                    "description": "Substitute copyright, registered and trademark symbols in name table entries.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/unwanted_chars>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "No need to substitute copyright, registered and trademark symbols in name table entries of this font.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Check the OS/2 usWeightClass is appropriate for the font's best SubFamily name.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/usweightclass>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2 usWeightClass is good",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Google Fonts expects variable fonts, static ttfs and static otfs to have\n        differing OS/2 usWeightClass values.\n\n        - For Variable Fonts, Thin-Black must be 100-900\n\n        - For static ttfs, Thin-Black can be 100-900 or 250-900\n\n        - For static otfs, Thin-Black must be 250-900\n\n        If static otfs are set lower than 250, text may appear blurry in\n        legacy Windows applications.\n\n        Glyphsapp users can change the usWeightClass value of an instance by adding\n        a 'weightClass' customParameter.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check font has a license.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/family/has_license>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Found license at '/Users/simon/others-repos/fonts/ofl/gfsneohellenic/OFL.txt'",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Check license file has good copyright string.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/license/OFL_copyright>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "First line in license file is:\n\n\"copyright (c) 2007, greek font society (www.greekfontsociety.org | gfs@greekfontsociety.org),\"\n\nwhich does not match the expected format, similar to:\n\n\"Copyright 2022 The Familyname Project Authors (git url)\" [code: bad-format]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        An OFL.txt file's first line should be the font copyright e.g:\n        \"Copyright 2019 The Montserrat Project Authors\n        (https://github.com/julietaula/montserrat)\"\n    ",
                    "result": "FAIL",
                    "severity": 10
                },
                {
                    "description": "Check OFL body text is correct.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/license/OFL_body_text>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OFL license body text is correct",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check OFL body text is correct.\n        Often users will accidently delete parts of the body text.\n    ",
                    "result": "PASS",
                    "severity": 10
                },
                {
                    "description": "Check copyright namerecords match license file.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/license>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font lacks NameID 13 (LICENSE DESCRIPTION). A proper licensing entry must be set. [code: missing]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        A known licensing description must be provided in the NameID 14\n        (LICENSE DESCRIPTION) entries of the name table.\n\n        The source of truth for this check (to determine which license is in use) is\n        a file placed side-by-side to your font project including the licensing terms.\n\n        Depending on the chosen license, one of the following string snippets is\n        expected to be found on the NameID 13 (LICENSE DESCRIPTION) entries of the\n        name table:\n\n        - \"This Font Software is licensed under the SIL Open Font License, Version 1.1.\n          This license is available with a FAQ at: https://scripts.sil.org/OFL\"\n\n        - \"Licensed under the Apache License, Version 2.0\"\n\n        - \"Licensed under the Ubuntu Font Licence 1.0.\"\n\n\n        Currently accepted licenses are Apache or Open Font License. For a small set\n        of legacy families the Ubuntu Font License may be acceptable as well.\n\n        When in doubt, please choose OFL for new font projects.\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "License URL matches License text on name table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/license_url>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Could not infer the font license. Please ensure NameID 13 (LICENSE DESCRIPTION) is properly set.",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        A known license URL must be provided in the NameID 14 (LICENSE INFO URL)\n        entry of the name table.\n\n        The source of truth for this check is the licensing text found on the NameID 13\n        entry (LICENSE DESCRIPTION).\n\n        The string snippets used for detecting licensing terms are:\n\n        - \"This Font Software is licensed under the SIL Open Font License, Version 1.1.\n          This license is available with a FAQ at: https://scripts.sil.org/OFL\"\n\n        - \"Licensed under the Apache License, Version 2.0\"\n\n        - \"Licensed under the Ubuntu Font Licence 1.0.\"\n\n\n        Currently accepted licenses are Apache or Open Font License. For a small set of\n        legacy families the Ubuntu Font License may be acceptable as well.\n\n        When in doubt, please choose OFL for new font projects.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Description strings in the name table must not exceed 200 characters.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/description_max_length>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "All description name records have reasonably small lengths.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        An old FontLab version had a bug which caused it to store copyright notices\n        in nameID 10 entries.\n\n        In order to detect those and distinguish them from actual legitimate usage of\n        this name table entry, we expect that such strings do not exceed a reasonable\n        length of 200 chars.\n\n        Longer strings are likely instances of the FontLab bug.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Show hinting filesize impact.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/hinting_impact>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Hinting filesize impact:\n\n |               | /Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf          |\n |:------------- | ---------------:|\n | Dehinted Size | 159.0kb |\n | Hinted Size   | 360.4kb   |\n | Increase      | 201.4kb      |\n | Change        | 126.7 %  |\n [code: size-impact]",
                            "status": "INFO",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This check is merely informative, displaying and useful comparison of filesizes\n        of hinted versus unhinted font files.\n    ",
                    "result": "INFO"
                },
                {
                    "description": "Ensure files are not too large.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/file_size>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font had a reasonable file size",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Serving extremely large font files on Google Fonts causes usability issues.\n        This check ensures that file sizes are reasonable.\n    ",
                    "result": "PASS",
                    "severity": 10
                },
                {
                    "description": "Version format is correct in 'name' table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/version_format>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Version format in NAME table entries is correct.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Font has ttfautohint params?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/has_ttfautohint_params>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font appears to our heuristic as not hinted using ttfautohint. [code: not-hinted]",
                            "status": "SKIP",
                            "traceback": null
                        },
                        {
                            "message": "Font appears to our heuristic as not hinted using ttfautohint. [code: not-hinted]",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "result": "SKIP"
                },
                {
                    "description": "Font has old ttfautohint applied?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/old_ttfautohint>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Could not detect which version of ttfautohint was used in this font. It is typically specified as a comment in the font version entries of the 'name' table. Such font version strings are currently: ['Version 1.0 ', 'Version 1.0 '] [code: version-not-detected]",
                            "status": "INFO",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check if font has been hinted with an outdated version of ttfautohint.\n    ",
                    "result": "INFO"
                },
                {
                    "description": "EPAR table present in font?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/epar>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "EPAR table not present in font. To learn more see https://github.com/fonttools/fontbakery/issues/818 [code: lacks-EPAR]",
                            "status": "INFO",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The EPAR table is/was a way of expressing common licensing permissions and\n        restrictions in metadata; while almost nothing supported it, Dave Crossland\n        wonders that adding it to everything in Google Fonts could help make it\n        more popular.\n\n        More info is available at:\n        https://davelab6.github.io/epar/\n    ",
                    "result": "INFO",
                    "severity": 1
                },
                {
                    "description": "Is the Grid-fitting and Scan-conversion Procedure ('gasp') table set to optimize rendering?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/gasp>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "These are the ppm ranges declared on the gasp table:\n\nPPM <= 8:\n\tflag = 0x02\n\t- Use grayscale rendering\nPPM <= 16:\n\tflag = 0x01\n\t- Use grid-fitting\nPPM <= 65535:\n\tflag = 0x03\n\t- Use grid-fitting\n\t- Use grayscale rendering\n [code: ranges]",
                            "status": "INFO",
                            "traceback": null
                        },
                        {
                            "message": "The gasp table has a range of 8 that may be unneccessary. [code: non-ffff-range]",
                            "status": "WARN",
                            "traceback": null
                        },
                        {
                            "message": "The gasp table has a range of 16 that may be unneccessary. [code: non-ffff-range]",
                            "status": "WARN",
                            "traceback": null
                        },
                        {
                            "message": "The gasp range 0xFFFF value 0x03 should be set to 0x0F. [code: unset-flags]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Traditionally version 0 'gasp' tables were set so that font sizes below 8 ppem\n        had no grid fitting but did have antialiasing. From 9-16 ppem, just grid\n        fitting.\n        And fonts above 17ppem had both antialiasing and grid fitting toggled on.\n        The use of accelerated graphics cards and higher resolution screens make this\n        approach obsolete. Microsoft's DirectWrite pushed this even further with much\n        improved rendering built into the OS and apps.\n\n        In this scenario it makes sense to simply toggle all 4 flags ON for all font\n        sizes.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Make sure family name does not begin with a digit.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/familyname_first_char>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font family name first character is not a digit.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Font family names which start with a numeral are often not discoverable\n        in Windows applications.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Are there non-ASCII characters in ASCII-only NAME table entries?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/ascii_only_entries>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "None of the ASCII-only NAME table entries contain non-ASCII characteres.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The OpenType spec requires ASCII for the POSTSCRIPT_NAME (nameID 6).\n\n        For COPYRIGHT_NOTICE (nameID 0) ASCII is required because that string should be\n        the same in CFF fonts which also have this requirement in the OpenType spec.\n\n        Note:\n        A common place where we find non-ASCII strings is on name table entries\n        with NameID > 18, which are expressly for localising the ASCII-only IDs\n        into Hindi / Arabic / etc.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: check if fonts field only has unique \"full_name\" values.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/unique_full_name_values>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb \"fonts\" field only has unique \"full_name\" values.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: check if fonts field only contains unique style:weight pairs.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/unique_weight_style_pairs>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb \"fonts\" field only has unique style:weight pairs.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb license is \"APACHE2\", \"UFL\" or \"OFL\"?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/license>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font license is declared in METADATA.pb as \"OFL\"",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb should contain at least \"menu\" and \"latin\" subsets.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/menu_and_latin>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Subsets \"menu\" and \"latin\" are mandatory, but METADATA.pb is missing \"latin\". [code: missing]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "result": "FAIL"
                },
                {
                    "description": "METADATA.pb subsets should be alphabetically ordered.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/subsets_order>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb subsets are not sorted in alphabetical order: Got ['menu', 'greek'] and expected ['greek', 'menu'] [code: not-sorted]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "result": "FAIL"
                },
                {
                    "description": "Check METADATA.pb includes production subsets.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/includes_production_subsets>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: listed_on_gfonts_api",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check METADATA.pb file includes the same subsets as the family in production.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "METADATA.pb: Copyright notice is the same in all fonts?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/copyright>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb: Copyright field value is inconsistent across family [code: inconsistency]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "result": "FAIL"
                },
                {
                    "description": "Check that METADATA.pb family values are all the same.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/familyname>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb: Family name is the same in all metadata \"fonts\" items.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: According to Google Fonts standards, families should have a Regular style.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/has_regular>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Family has a Regular style.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Regular should be 400.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/regular_is_400>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Regular has weight = 400.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Checks METADATA.pb font.name field matches family name declared on the name table.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/nameid/family_name>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Family name \"GFS Neohellenic\" is identical in METADATA.pb and on the TTF file.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Checks METADATA.pb font.post_script_name matches postscript name declared on the name table.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/nameid/post_script_name>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Postscript name \"GFSNeohellenic-Italic\" is identical in METADATA.pb and on the TTF file.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb font.full_name value matches fullname declared on the name table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/nameid/full_name>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font fullname \"GFS Neohellenic Italic\" is identical in METADATA.pb and on the TTF file.",
                            "status": "PASS",
                            "traceback": null
                        },
                        {
                            "message": "Font fullname \"GFS Neohellenic Italic\" is identical in METADATA.pb and on the TTF file.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb font.name value should be same as the family name declared on the name table.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/nameid/font_name>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: style",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This check ensures consistency between the font name declared on the name table\n        and the contents of the METADATA.pb file.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "METADATA.pb font.full_name and font.post_script_name fields have equivalent values ?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/match_fullname_postscript>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb font fields \"full_name\" and \"post_script_name\" have equivalent values.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb font.filename and font.post_script_name fields have equivalent values?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/match_filename_postscript>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb font filename = \"GFSNeohellenicItalic.ttf\" does not match post_script_name=\"GFSNeohellenic-Italic\". [code: mismatch]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "result": "FAIL"
                },
                {
                    "description": "METADATA.pb font.name field contains font name in right format?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/valid_name_values>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: style",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "result": "SKIP"
                },
                {
                    "description": "METADATA.pb font.full_name field contains font name in right format?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/valid_full_name_values>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: style",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "result": "SKIP"
                },
                {
                    "description": "METADATA.pb font.filename field contains font name in right format?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/valid_filename_values>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: style",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "result": "SKIP"
                },
                {
                    "description": "METADATA.pb font.post_script_name field contains font name in right format?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/valid_post_script_name_values>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb postScriptName field contains font name in right format.",
                            "status": "PASS",
                            "traceback": null
                        },
                        {
                            "message": "METADATA.pb postScriptName field contains font name in right format.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Check name ID 25 to end with \"Italic\" for Italic VFs.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/valid_nameid25>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: style",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Due to a bug in (at least) Adobe Indesign, name ID 25\n        needs to be different for Italic VFs than their Upright counterparts.\n        Google Fonts chooses to append \"Italic\" here.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Copyright notices match canonical pattern in METADATA.pb",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/valid_copyright>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb: Copyright notices should match a pattern similar to:\n \"Copyright 2020 The Familyname Project Authors (git url)\"\nBut instead we have got:\n\"copyright (c) takis katsoulidis and george d. matthiopoulos (gfs@greekfontsociety.gr) , 2001. all rights reserved.\" [code: bad-notice-format]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The expected pattern for the copyright string adheres to the following rules:\n\n        * It must say \"Copyright\" followed by a 4 digit year (optionally followed by\n          a hyphen and another 4 digit year)\n\n        * Then it must say \"The <familyname> Project Authors\"\n\n        * And within parentheses, a URL for a git repository must be provided\n\n        * The check is case insensitive and does not validate whether the familyname\n          is correct, even though we'd expect it is (and we may soon update the check\n          to validate that aspect as well!)\n\n\n        Here is an example of a valid copyright string:\n\n        \"Copyright 2017 The Archivo Black Project Authors\n         (https://github.com/Omnibus-Type/ArchivoBlack)\"\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "Copyright notices match canonical pattern in fonts",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/font_copyright>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Name Table entry: Copyright notices should match a pattern similar to: \"Copyright 2019 The Familyname Project Authors (git url)\"\nBut instead we have got:\n\"Copyright (c) Takis Katsoulidis and George D. Matthiopoulos  , 2001. All rights reserved.\" [code: bad-notice-format]",
                            "status": "FAIL",
                            "traceback": null
                        },
                        {
                            "message": "Name Table entry: Copyright notices should match a pattern similar to: \"Copyright 2019 The Familyname Project Authors (git url)\"\nBut instead we have got:\n\"Copyright (c) Takis Katsoulidis and George D. Matthiopoulos  , 2001. All rights reserved.\" [code: bad-notice-format]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "result": "FAIL"
                },
                {
                    "description": "Copyright notice on METADATA.pb should not contain 'Reserved Font Name'.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/reserved_font_name>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb copyright field does not contain \"Reserved Font Name\".",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Copyright notice shouldn't exceed 500 chars.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/copyright_max_length>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Copyright notice string is shorter than 500 chars.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Font filenames match font.filename entries?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/filenames>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Filenames in METADATA.pb look good.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Note:\n        This check only looks for files in the current directory.\n\n        Font files in subdirectories are checked by these other two checks:\n         - com.google.fonts/check/metadata/undeclared_fonts\n         - com.google.fonts/check/repo/vf_has_static_fonts\n\n        We may want to merge them all into a single check.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb font.style \"italic\" matches font internals?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/italic_style>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK: METADATA.pb font.style \"italic\" matches font internals.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb font.style \"normal\" matches font internals?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/normal_style>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "This check only applies to normal fonts.",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "result": "SKIP"
                },
                {
                    "description": "METADATA.pb font.name and font.full_name fields match the values declared on the name table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/nameid/family_and_full_names>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb familyname and fullName fields match corresponding name table entries.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Check font name is the same as family name.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/match_name_familyname>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font name is the same as family name.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Check that font weight has a canonical value.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/canonical_weight_value>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font weight has a canonical value.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Check METADATA.pb font weights are correct.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/os2_weightclass>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2 usWeightClass or wght axis value matches weight specified at METADATA.pb",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check METADATA.pb font weights are correct.\n\n        For static fonts, the metadata weight should be the same as the static font's\n        OS/2 usWeightClass.\n\n        For variable fonts, the weight value should be 400 if the font's wght axis range\n        includes 400, otherwise it should be the value closest to 400.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb weight matches postScriptName for static fonts.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/match_weight_postscript>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Weight value matches postScriptName.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Font styles are named canonically?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/canonical_style_names>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font styles are named canonically.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Check URL on copyright string is the same as in repository_url field.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/consistent_repo_urls>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Sometimes, perhaps due to copy-pasting, projects may declare different URLs\n        between the font.coyright and the family.sources.repository_url fields.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Check for primary_script",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/primary_script>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Try to guess font's primary script and see if that's set in METADATA.pb.\n        This is an educated guess based on the number of glyphs per script in the font\n        and should be taken with caution.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Stricter unitsPerEm criteria for Google Fonts.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/unitsperem_strict>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font em size is good (unitsPerEm = 1000).",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Even though the OpenType spec allows unitsPerEm to be any value between 16\n        and 16384, the Google Fonts project aims at a narrower set of reasonable values.\n\n        The spec suggests usage of powers of two in order to get some performance\n        improvements on legacy renderers, so those values are acceptable.\n\n        But values of 500 or 1000 are also acceptable, with the added benefit that it\n        makes upm math easier for designers, while the performance hit of not using a\n        power of two is most likely negligible nowadays.\n\n        Additionally, values above 2048 would likely result in unreasonable\n        filesize increases.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Glyphs are similiar to Google Fonts version?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/production_glyphs_similarity>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: api_gfonts_ttFont",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "result": "SKIP"
                },
                {
                    "description": "Checking direction of slnt axis angles",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/slant_direction>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The 'slnt' axis values are defined as negative values for a clockwise (right)\n        lean, and positive values for counter-clockwise lean. This is counter-intuitive\n        for many designers who are used to think of a positive slant as a lean to\n        the right.\n\n        This check ensures that the slant axis direction is consistent with the specs.\n\n        https://docs.microsoft.com/en-us/typography/opentype/spec/dvaraxistag_slnt\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check font names are correct",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/font_names>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font names are incorrect:\n\n| nameID | current | expected |\n| :--- | :--- | :--- |\n| Family Name | GFS Neohellenic | GFS Neohellenic |\n| Subfamily Name | Italic | Italic |\n| Full Name | GFS Neohellenic Italic | GFS Neohellenic Italic |\n| Poscript Name | GFSNeohellenic-Italic | GFSNeohellenic-Italic |\n| Typographic Family Name | GFS Neohellenic | N/A |\n| Typographic Subfamily Name | Italic | N/A | [code: bad-names]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Google Fonts has several rules which need to be adhered to when\n        setting a font's name table. Please read:\n        https://googlefonts.github.io/gf-guide/statics.html#supported-styles\n        https://googlefonts.github.io/gf-guide/statics.html#style-linking\n        https://googlefonts.github.io/gf-guide/statics.html#unsupported-styles\n        https://googlefonts.github.io/gf-guide/statics.html#single-weight-families\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "Copyright field for this font on METADATA.pb matches all copyright notice entries on the name table ?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/nameid/copyright>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Copyright field for this font on METADATA.pb (\"Copyright (c) Takis Katsoulidis and George D. Matthiopoulos (gfs@greekfontsociety.gr) , 2001. All rights reserved.\") differs from a copyright notice entry on the name table: \"Copyright (c) Takis Katsoulidis and George D. Matthiopoulos  , 2001. All rights reserved.\" [code: mismatch]",
                            "status": "FAIL",
                            "traceback": null
                        },
                        {
                            "message": "Copyright field for this font on METADATA.pb (\"Copyright (c) Takis Katsoulidis and George D. Matthiopoulos (gfs@greekfontsociety.gr) , 2001. All rights reserved.\") differs from a copyright notice entry on the name table: \"Copyright (c) Takis Katsoulidis and George D. Matthiopoulos  , 2001. All rights reserved.\" [code: mismatch]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "result": "FAIL"
                },
                {
                    "description": "Font has all mandatory 'name' table entries?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/mandatory_entries>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: style",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "result": "SKIP"
                },
                {
                    "description": "Length of copyright notice must not exceed 500 characters.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/copyright_length>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "All copyright notice name entries on the 'name' table are shorter than 500 characters.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This is an arbitrary max length for the copyright notice field of the name\n        table. We simply don't want such notices to be too long. Typically such notices\n        are actually much shorter than this with a length of roughly 70 or 80\n        characters.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check for font-v versioning.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/fontv>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Version string is: \"Version 1.0 \"\nThe version string must ideally include a git commit hash and either a \"dev\" or a \"release\" suffix such as in the example below:\n\"Version 1.3; git-0d08353-release\" [code: bad-format]",
                            "status": "INFO",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The git sha1 tagging and dev/release features of Source Foundry `font-v` tool\n        are awesome and we would love to consider upstreaming the approach into\n        fontmake someday. For now we only emit an INFO if a given font does not yet\n        follow the experimental versioning style, but at some point we may start\n        enforcing it.\n    ",
                    "result": "INFO"
                },
                {
                    "description": "Check glyphs do not have components which are themselves components.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/glyf_nested_components>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Glyphs do not contain nested components.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        There have been bugs rendering variable fonts with nested components.\n        Additionally, some static fonts with nested components have been reported\n        to have rendering and printing issues.\n\n        For more info, see:\n        * https://github.com/fonttools/fontbakery/issues/2961\n        * https://github.com/arrowtype/recursive/issues/412\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check a static ttf can be generated from a variable font.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/generate_static>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Google Fonts may serve static fonts which have been generated from variable\n        fonts. This test will attempt to generate a static ttf using fontTool's\n        varLib mutator.\n\n        The target font will be the mean of each axis e.g:\n\n        ## VF font axes\n\n        - min weight, max weight = 400, 800\n\n        - min width, max width = 50, 100\n\n        ## Target Instance\n\n        - weight = 600\n\n        - width = 75\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check that variable fonts have an HVAR table.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/has_HVAR>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Not having a HVAR table can lead to costly text-layout operations on some\n        platforms, which we want to avoid.\n\n        So, all variable fonts on the Google Fonts collection should have an HVAR\n        with valid values.\n\n        More info on the HVAR table can be found at:\n        https://docs.microsoft.com/en-us/typography/opentype/spec/otvaroverview#variation-data-tables-and-miscellaneous-requirements\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Font enables smart dropout control in \"prep\" table instructions?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/smart_dropout>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The 'prep' table does not contain TrueType instructions enabling smart dropout control. To fix, export the font with autohinting enabled, or run ttfautohint on the font, or run the `gftools fix-nonhinting` script. [code: lacks-smart-dropout]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This setup is meant to ensure consistent rendering quality for fonts across\n        all devices (with different rendering/hinting capabilities).\n\n        Below is the snippet of instructions we expect to see in the fonts:\n        B8 01 FF    PUSHW 0x01FF\n        85          SCANCTRL (unconditinally turn on\n                              dropout control mode)\n        B0 04       PUSHB 0x04\n        8D          SCANTYPE (enable smart dropout control)\n\n        \"Smart dropout control\" means activating rules 1, 2 and 5:\n        Rule 1: If a pixel's center falls within the glyph outline,\n                that pixel is turned on.\n        Rule 2: If a contour falls exactly on a pixel's center,\n                that pixel is turned on.\n        Rule 5: If a scan line between two adjacent pixel centers\n                (either vertical or horizontal) is intersected\n                by both an on-Transition contour and an off-Transition\n                contour and neither of the pixels was already turned on\n                by rules 1 and 2, turn on the pixel which is closer to\n                the midpoint between the on-Transition contour and\n                off-Transition contour. This is \"Smart\" dropout control.\n\n        For more detailed info (such as other rules not enabled in this snippet),\n        please refer to the TrueType Instruction Set documentation.\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "There must not be VTT Talk sources in the font.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/vttclean>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "There are no tables with VTT Talk sources embedded in the font.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The goal here is to reduce filesizes and improve pageloading when dealing\n        with webfonts.\n\n        The VTT Talk sources are not necessary at runtime and endup being just dead\n        weight when left embedded in the font binaries. The sources should be kept on\n        the project files but stripped out when building release binaries.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Are there unwanted Apple tables?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/aat>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "There are no unwanted AAT tables.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Apple's TrueType reference manual [1] describes SFNT tables not in the\n        Microsoft OpenType specification [2] and these can sometimes sneak into final\n        release files, but Google Fonts should only have OpenType tables.\n\n        [1] https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6.html\n        [2] https://docs.microsoft.com/en-us/typography/opentype/spec/\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check a font's STAT table contains compulsory Axis Values.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/STAT>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check a font's STAT table contains compulsory Axis Values which exist\n        in the Google Fonts Axis Registry.\n\n        We cannot determine what Axis Values the user will set for axes such as\n        opsz, GRAD since these axes are unique for each font so we'll skip them.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check variable font instances",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/fvar_instances>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check a font's fvar instance coordinates comply with our guidelines:\n        https://googlefonts.github.io/gf-guide/variable.html#fvar-instances\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "All name entries referenced by fvar instances exist on the name table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/fvar_name_entries>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The purpose of this check is to make sure that all name entries referenced\n        by variable font instances do exist in the name table.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "PPEM must be an integer on hinted fonts.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/integer_ppem_if_hinted>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Hinted fonts must have head table flag bit 3 set.\n\n        Per https://docs.microsoft.com/en-us/typography/opentype/spec/head,\n        bit 3 of Head::flags decides whether PPEM should be rounded. This bit should\n        always be set for hinted fonts.\n\n        Note:\n        Bit 3 = Force ppem to integer values for all internal scaler math;\n                May use fractional ppem sizes if this bit is clear;\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Are there caret positions declared for every ligature?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/ligature_carets>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "This font lacks caret position values for ligature glyphs on its GDEF table. [code: lacks-caret-pos]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        All ligatures in a font must have corresponding caret (text cursor) positions\n        defined in the GDEF table, otherwhise, users may experience issues with\n        caret rendering.\n\n        If using GlyphsApp or UFOs, ligature carets can be defined as anchors with\n        names starting with 'caret_'. These can be compiled with fontmake as of\n        version v2.4.0.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Is there kerning info for non-ligated sequences?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/kerning_for_non_ligated_sequences>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "GPOS table lacks kerning info for the following non-ligated sequences:\n\n\t- f + f\n\n\t- f + l\n\n\t- l + f\n\n\t- f + i\n\n\t- i + f\n\n\t- l + i [code: lacks-kern-info]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Fonts with ligatures should have kerning on the corresponding non-ligated\n        sequences for text where ligatures aren't used\n        (eg https://github.com/impallari/Raleway/issues/14).\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Combined length of family and style must not exceed 27 characters.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/family_and_style_max_length>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "All name entries are good.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to a GlyphsApp tutorial [1], in order to make sure all versions of\n        Windows recognize it as a valid font file, we must make sure that the\n        concatenated length of the familyname (NameID.FONT_FAMILY_NAME) and\n        style (NameID.FONT_SUBFAMILY_NAME) strings in the name table do not\n        exceed 20 characters.\n\n        After discussing the problem in more detail at FontBakery issue #2179 [2] we\n        decided that allowing up to 27 chars would still be on the safe side, though.\n\n        [1] https://glyphsapp.com/tutorials/multiple-masters-part-3-setting-up-instances\n        [2] https://github.com/fonttools/fontbakery/issues/2179\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Name table entries should not contain line-breaks.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/line_breaks>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Name table entries are all single-line (no line-breaks found).",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        There are some entries on the name table that may include more than one line\n        of text. The Google Fonts team, though, prefers to keep the name table entries\n        short and simple without line breaks.\n\n        For instance, some designers like to include the full text of a font license in\n        the \"copyright notice\" entry, but for the GFonts collection this entry should\n        only mention year, author and other basic info in a manner enforced by\n        com.google.fonts/check/font_copyright\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Name table strings must not contain the string 'Reserved Font Name'.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/rfn>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "None of the name table strings contain \"Reserved Font Name\".",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Some designers adopt the \"Reserved Font Name\" clause of the OFL license. This\n        means that the original author reserves the rights to the family name and other\n        people can only distribute modified versions using a different family name.\n\n        Google Fonts published updates to the fonts in the collection in order to fix\n        issues and/or implement further improvements to the fonts. It is important to\n        keep the family name so that users of the webfonts can benefit from the updates.\n        Since it would forbid such usage scenario, all families in the GFonts collection\n        are required to not adopt the RFN clause.\n\n        This check ensures \"Reserved Font Name\" is not mentioned in the name table.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check family name for GF Guide compliance.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/family_name_compliance>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "\"GFS Neohellenic\" contains an abbreviation. [code: abbreviation]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Checks the family name for compliance with the Google Fonts Guide.\n        https://googlefonts.github.io/gf-guide/onboarding.html#new-fonts\n\n        If you want to have your family name added to the CamelCase\n        exceptions list, please submit a pull request to the\n        camelcased_familyname_exceptions.txt file.\n\n        Similarly, abbreviations can be submitted to the\n        abbreviations_familyname_exceptions.txt file.\n\n        These are located in the Lib/fontbakery/data/googlefonts/ directory\n        of the FontBakery source code currently hosted at\n        https://github.com/fonttools/fontbakery/\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "Directory name in GFonts repo structure must match NameID 1 of the regular.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/repo/dirname_matches_nameid_1>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The font seems to lack a regular. If family consists of a single-weight non-Regular style only, consider the Google Fonts specs for this case: https://github.com/googlefonts/gf-docs/tree/main/Spec#single-weight-families [code: lacks-regular]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "result": "FAIL"
                },
                {
                    "description": "A static fonts directory with at least two fonts must accompany variable fonts",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/repo/vf_has_static_fonts>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Please consider adding a subdirectory called \"static/\" and including in it static font files. [code: missing]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Variable font family directories kept in the google/fonts git repo may include\n        a static/ subdir containing static fonts.\n\n        These files are meant to be served for users that still lack support for\n        variable fonts in their web browsers.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "A font repository should not include FontBakery report files",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/repo/fb_report>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        A FontBakery report is ephemeral and so should be used for posting issues on a\n        bug-tracker instead of being hosted in the font project repository.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check upstream.yaml file contains all required fields",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/repo/upstream_yaml_has_required_fields>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: upstream_yaml",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        If a family has been pushed using the gftools packager, we must check that all\n        the required fields in the upstream.yaml file have been populated.\n    ",
                    "result": "SKIP",
                    "severity": 10
                },
                {
                    "description": "A font repository should not include ZIP files",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/repo/zip_files>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Sometimes people check in ZIPs into their font project repositories. While we\n        accept the practice of checking in binaries, we believe that a ZIP is a step\n        too far ;)\n\n        Note: a source purist position is that only source files and build scripts\n        should be checked in.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check font follows the Google Fonts vertical metric schema",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/vertical_metrics>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2.sTypoLineGap is \"48\" it should be 0 [code: bad-OS/2.sTypoLineGap]",
                            "status": "FAIL",
                            "traceback": null
                        },
                        {
                            "message": "hhea.lineGap is \"24\" it should be 0 [code: bad-hhea.lineGap]",
                            "status": "FAIL",
                            "traceback": null
                        },
                        {
                            "message": "The sum of hhea.ascender + abs(hhea.descender) + hhea.lineGap is 1143 when it should be at least 1200 [code: bad-hhea-range]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This check generally enforces Google Fonts\u2019 vertical metrics specifications.\n        In particular:\n        * lineGap must be 0\n        * Sum of hhea ascender + abs(descender) + linegap must be\n          between 120% and 200% of UPM\n        * Warning if sum is over 150% of UPM\n\n        The threshold levels 150% (WARN) and 200% (FAIL) are somewhat arbitrarily chosen\n        and may hint at a glaring mistake in the metrics calculations or UPM settings.\n\n        Our documentation includes further information:\n        https://github.com/googlefonts/gf-docs/tree/main/VerticalMetrics\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "Check if the vertical metrics of a family are similar to the same family hosted on Google Fonts.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/vertical_metrics_regressions>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: regular_remote_style",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        If the family already exists on Google Fonts, we need to ensure that the\n        checked family's vertical metrics are similar. This check will test the\n        following schema which was outlined in Font Bakery issue #1162 [1]:\n\n        - The family should visually have the same vertical metrics as the Regular\n          style hosted on Google Fonts.\n\n        - If the family on Google Fonts has differing hhea and typo metrics, the family\n          being checked should use the typo metrics for both the hhea and typo entries.\n\n        - If the family on Google Fonts has use typo metrics not enabled and the family\n          being checked has it enabled, the hhea and typo metrics should use the family\n          on Google Fonts winAscent and winDescent values.\n\n        - If the upms differ, the values must be scaled so the visual appearance is\n          the same.\n\n        [1] https://github.com/fonttools/fontbakery/issues/1162\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check font follows the Google Fonts CJK vertical metric schema",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/cjk_vertical_metrics>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_cjk_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        CJK fonts have different vertical metrics when compared to Latin fonts.\n        We follow the schema developed by dr Ken Lunde for Source Han Sans and\n        the Noto CJK fonts.\n\n        Our documentation includes further information:\n        https://github.com/googlefonts/gf-docs/tree/main/Spec#cjk-vertical-metrics\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check if the vertical metrics of a CJK family are similar to the same family hosted on Google Fonts.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/cjk_vertical_metrics_regressions>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_cjk_font, regular_remote_style, regular_ttFont",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check CJK family has the same vertical metrics as the same family\n        hosted on Google Fonts.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Does the font contain less than 150 CJK characters?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/cjk_not_enough_glyphs>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_claiming_to_be_cjk_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Kana has 150 characters and it's the smallest CJK writing system.\n\n        If a font contains less CJK glyphs than this writing system, we inform the\n        user that some glyphs may be encoded incorrectly.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check variable font instances don't have duplicate names",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont_duplicate_instance_names>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This check's purpose is to detect duplicate named instances names in a\n        given variable font.\n        Repeating instance names may be the result of instances for several VF axes\n        defined in `fvar`, but since currently only weight+italic tokens are allowed\n        in instance names as per GF specs, they ended up repeating.\n        Instead, only a base set of fonts for the most default representation of the\n        family can be defined through instances in the `fvar` table, all other\n        instances will have to be left to access through the `STAT` table.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Ensure VFs do not contain the ital axis.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/unsupported_axes>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The 'ital' axis is not supported yet in Google Chrome.\n\n        For the time being, we need to ensure that VFs do not contain this axis.\n        Once browser support is better, we can deprecate this check.\n\n        For more info regarding browser support, see:\n        https://arrowtype.github.io/vf-slnt-test/\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Ensure VFs with duplexed axes do not vary horizontal advance.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/duplexed_axis_reflow>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Certain axes, such as grade (GRAD) or roundness (ROND), should not\n        change any advanceWidth or kerning data across the font's design space.\n        This is because altering the advance width of glyphs can cause text reflow.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validate METADATA.pb axes values are within gf_axisregistry bounds.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/gf_axisregistry_bounds>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Each axis range in a METADATA.pb file must be registered, and within the bounds\n        of the axis definition in the Google Fonts Axis Registry, available at\n        https://github.com/google/fonts/tree/main/axisregistry\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validate METADATA.pb axes tags are defined in gf_axisregistry.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/gf_axisregistry_valid_tags>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Ensure all axes in a METADATA.pb file are registered in the\n        Google Fonts Axis Registry, available at\n        https://github.com/google/fonts/tree/main/axisregistry\n\n        Why does Google Fonts have its own Axis Registry?\n\n        We support a superset of the OpenType axis registry axis set, and use\n        additional metadata for each axis. Axes present in a font file but not in this\n        registry will not function via our API. No variable font is expected to\n        support all of the axes here.\n\n        Any font foundry or distributor library that offers variable fonts has a\n        implicit, latent, de-facto axis registry, which can be extracted by scanning\n        the library for axes' tags, labels, and min/def/max values. While in 2016\n        Microsoft originally offered to include more axes in the OpenType 1.8\n        specification (github.com/microsoft/OpenTypeDesignVariationAxisTags), as of\n        August 2020, this effort has stalled. We hope more foundries and distributors\n        will publish documents like this that make their axes explicit, to encourage\n        of adoption of variable fonts throughout the industry, and provide source\n        material for a future update to the OpenType specification's axis registry.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validate defaults on fvar table match registered fallback names in GFAxisRegistry.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/gf_axisregistry/fvar_axis_defaults>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check that axis defaults have a corresponding fallback name registered at the\n        Google Fonts Axis Registry, available at\n        https://github.com/google/fonts/tree/main/axisregistry\n\n        This is necessary for the following reasons:\n\n        To get ZIP files downloads on Google Fonts to be accurate \u2014 otherwise the\n        chosen default font is not generated. The Newsreader family, for instance, has\n        a default value on the 'opsz' axis of 16pt. If 16pt was not a registered\n        fallback position, then the ZIP file would instead include another position\n        as default (such as 14pt).\n\n        For the Variable fonts to display the correct location on the specimen page.\n\n        For VF with no weight axis to be displayed at all. For instance, Ballet, which\n        has no weight axis, was not appearing in sandbox because default position on\n        'opsz' axis was 16pt, and it was not yet a registered fallback positon.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validate STAT particle names and values match the fallback names in GFAxisRegistry.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/STAT/gf_axisregistry>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check that particle names and values on STAT table match the fallback names\n        in each axis entry at the Google Fonts Axis Registry, available at\n        https://github.com/google/fonts/tree/main/axisregistry\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validate VF axes match the ones declared on METADATA.pb.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/consistent_axis_enumeration>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        All font variation axes present in the font files must be properly declared\n        on METADATA.pb so that they can be served by the GFonts API.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Ensure METADATA.pb does not use escaped strings.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/escaped_strings>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        In some cases we've seen designer names and other fields with escaped strings\n        in METADATA files. Nowadays the strings can be full unicode strings and\n        do not need escaping.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Designers are listed correctly on the Google Fonts catalog?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/designer_profiles>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "It seems that Greek Font Society is still not listed on the designers catalog. Please submit a photo and a link to a webpage where people can learn more about the work of this designer/typefoundry. [code: profile-not-found]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Google Fonts has a catalog of designers.\n\n        This check ensures that the online entries of the catalog can be found based\n        on the designer names listed on the METADATA.pb file.\n\n        It also validates the URLs and file formats are all correctly set.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Ensure variable fonts include an avar table.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/mandatory_avar_table>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Most variable fonts should include an avar table to correctly define\n        axes progression rates.\n\n        For example, a weight axis from 0% to 100% doesn't map directly to 100 to 1000,\n        because a 10% progression from 0% may be too much to define the 200,\n        while 90% may be too little to define the 900.\n\n        If the progression rates of axes is linear, this check can be ignored.\n        Fontmake will also skip adding an avar table if the progression rates\n        are linear. However, we still recommend designers visually proof each\n        instance is at the expected weight, width etc.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "On a family update, the DESCRIPTION.en_us.html file should ideally also be updated.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/description/family_update>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: github_gfonts_description",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        We want to ensure that any significant changes to the font family are\n        properly mentioned in the DESCRIPTION file.\n\n        In general, it means that the contents of the DESCRIPTION.en_us.html file\n        will typically change if when font files are updated. Please treat this check\n        as a reminder to do so whenever appropriate!\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check small caps glyphs are available.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/missing_small_caps_glyphs>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Ensure small caps glyphs are available if\n        a font declares smcp or c2sc OT features.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Ensure Stylistic Sets have description.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/stylisticset_description>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Stylistic sets should provide description text. Programs such as InDesign,\n        TextEdit and Inkscape use that info to display to the users so that they know\n        what a given stylistic set offers.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "OS/2.fsSelection bit 7 (USE_TYPO_METRICS) is set in all fonts.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/os2/use_typo_metrics>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2.fsSelection bit 7 (USE_TYPO_METRICS) wasNOT set in the following fonts: ['/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf', '/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf', '/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf', '/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf']. [code: missing-os2-fsselection-bit7]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        All fonts on the Google Fonts collection should have OS/2.fsSelection bit 7\n        (USE_TYPO_METRICS) set. This requirement is part of the vertical metrics scheme\n        established as a Google Fonts policy aiming at a common ground supported by\n        all major font rendering environments.\n\n        For more details, read:\n        https://github.com/googlefonts/gf-docs/blob/main/VerticalMetrics/README.md\n\n        Below is the portion of that document that is most relevant to this check:\n\n        Use_Typo_Metrics must be enabled. This will force MS Applications to use the\n        OS/2 Typo values instead of the Win values. By doing this, we can freely set\n        the Win values to avoid clipping and control the line height with the typo\n        values. It has the added benefit of future line height compatibility. When\n        a new script is added, we simply change the Win values to the new yMin\n        and yMax, without needing to worry if the line height have changed.\n    ",
                    "result": "FAIL",
                    "severity": 10
                },
                {
                    "description": "Ensure fonts have ScriptLangTags declared on the 'meta' table.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/meta/script_lang_tags>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "This font file does not have a 'meta' table. [code: lacks-meta-table]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The OpenType 'meta' table originated at Apple. Microsoft added it to OT with\n        just two DataMap records:\n\n        - dlng: comma-separated ScriptLangTags that indicate which scripts,\n          or languages and scripts, with possible variants, the font is designed for.\n\n        - slng: comma-separated ScriptLangTags that indicate which scripts,\n          or languages and scripts, with possible variants, the font supports.\n\n\n        The slng structure is intended to describe which languages and scripts the\n        font overall supports. For example, a Traditional Chinese font that also\n        contains Latin characters, can indicate Hant,Latn, showing that it supports\n        Hant, the Traditional Chinese variant of the Hani script, and it also\n        supports the Latn script.\n\n        The dlng structure is far more interesting. A font may contain various glyphs,\n        but only a particular subset of the glyphs may be truly \"leading\" in the design,\n        while other glyphs may have been included for technical reasons. Such a\n        Traditional Chinese font could only list Hant there, showing that it\u2019s designed\n        for Traditional Chinese, but the font would omit Latn, because the developers\n        don\u2019t think the font is really recommended for purely Latin-script use.\n\n        The tags used in the structures can comprise just script, or also language\n        and script. For example, if a font has Bulgarian Cyrillic alternates in the\n        locl feature for the cyrl BGR OT languagesystem, it could also indicate in\n        dlng explicitly that it supports bul-Cyrl. (Note that the scripts and languages\n        in meta use the ISO language and script codes, not the OpenType ones).\n\n        This check ensures that the font has the meta table containing the\n        slng and dlng structures.\n\n        All families in the Google Fonts collection should contain the 'meta' table.\n        Windows 10 already uses it when deciding on which fonts to fall back to.\n        The Google Fonts API and also other environments could use the data for\n        smarter filtering. Most importantly, those entries should be added\n        to the Noto fonts.\n\n        In the font making process, some environments store this data in external\n        files already. But the meta table provides a convenient way to store this\n        inside the font file, so some tools may add the data, and unrelated tools\n        may read this data. This makes the solution much more portable and universal.\n    ",
                    "result": "WARN",
                    "severity": 3
                },
                {
                    "description": "Ensure fonts do not contain any pre-production tables.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/no_debugging_tables>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "This font file contains the following pre-production tables: FFTM [code: has-debugging-tables]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Tables such as `Debg` are useful in the pre-production stages of font\n        development, but add unnecessary bloat to a production font and should\n        be removed before release.\n    ",
                    "result": "WARN",
                    "severity": 6
                },
                {
                    "description": "Check font family directory name.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/family_directory_name>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Directory name is \"gfsneohellenic\", as expected.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        We want the directory name of a font family to be predictable and directly\n        derived from the family name, all lowercased and removing spaces.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check font can render its own name.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/render_own_name>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font can successfully render its own name (GFS Neohellenic)",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        A base expectation is that a font family's regular/default (400 roman) style\n        can render its 'menu name' (nameID 1) in itself.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check samples can be rendered.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/can_render_samples>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        In order to prevent tofu from being seen on fonts.google.com, this check\n        verifies that all samples specified by METADATA.pb can be properly\n        rendered by the font.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check if category on METADATA.pb matches what can be inferred from the family name.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/category_hints>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Sometimes the font familyname contains words that hint at which is the most\n        likely correct category to be declared on METADATA.pb\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check font has the expected color font tables.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/colorfont_tables>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Looks Good!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        COLR v0 fonts are widely supported in most browsers so they do not require\n        an SVG color table. However, some environments (e.g. Safari, Adobe apps)\n        do not currently support COLR v1 so we need to add an SVG table to these fonts,\n        except in the case of variable fonts, since SVG does not support\n        OpenType Variations.\n\n        To automatically generate compatible SVG/COLR tables,\n        run the maximum_color tool in nanoemoji:\n        https://github.com/googlefonts/nanoemoji\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Color layers should have a minimum brightness",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/color_cpal_brightness>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Looks good!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Layers of a COLRv0 font should not be too dark or too bright. When layer colors\n        are set explicitly, they can't be changed and they may turn out illegible\n        against dark or bright backgrounds.\n\n        While traditional color-less fonts can be colored in design apps or CSS, a\n        black color definition in a COLRv0 font actually means that that layer will be\n        rendered in black regardless of the background color. This leads to text\n        becoming invisible against a dark background, for instance when using a dark\n        theme in a web browser or operating system.\n\n        This check ensures that layer colors are at least 10% bright and at most 90%\n        bright, when not already set to the current color (0xFFFF).\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Put an empty glyph on GID 1 right after the .notdef glyph for COLRv0 fonts.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/empty_glyph_on_gid1_for_colrv0>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Looks good!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        A rendering bug in Windows 10 paints whichever glyph is on GID 1 on top of\n        some glyphs, colored or not. This only occurs for COLR version 0 fonts.\n\n        Having a glyph with no contours on GID 1 is a practical workaround for that.\n\n        See https://github.com/googlefonts/gftools/issues/609\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Noto fonts must have an ARTICLE.en_us.html file",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/description/noto_has_article>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_noto",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Noto fonts are displayed in a different way on the fonts.google.com\n         web site, and so must also contain an article about them.\n    ",
                    "result": "SKIP"
                }
            ],
            "key": [
                "<Section: Google Fonts>",
                null,
                null
            ],
            "result": {
                "FAIL": 73,
                "INFO": 17,
                "PASS": 253,
                "SKIP": 148,
                "WARN": 39
            }
        },
        {
            "checks": [
                {
                    "description": "Checking all files are in the same directory.",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/family/single_directory>",
                        []
                    ],
                    "logs": [
                        {
                            "message": "All files are in the same directory.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        If the set of font files passed in the command line is not all in the\n        same directory, then we warn the user since the tool will interpret the\n        set of files as belonging to a single family (and it is unlikely that\n        the user would store the files from a single family spreaded\n        in several separate directories).\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Each font in a family must have the same set of vertical metrics values.",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/family/vertical_metrics>",
                        []
                    ],
                    "logs": [
                        {
                            "message": "sTypoAscender is not the same across the family:\nGFS Neohellenic Bold: 625\nGFS Neohellenic Bold Italic: 630\nGFS Neohellenic: 600\nGFS Neohellenic Italic: 631 [code: sTypoAscender-mismatch]",
                            "status": "FAIL",
                            "traceback": null
                        },
                        {
                            "message": "sTypoDescender is not the same across the family:\nGFS Neohellenic Bold: -223\nGFS Neohellenic Bold Italic: -223\nGFS Neohellenic: -222\nGFS Neohellenic Italic: -222 [code: sTypoDescender-mismatch]",
                            "status": "FAIL",
                            "traceback": null
                        },
                        {
                            "message": "sTypoLineGap is not the same across the family:\nGFS Neohellenic Bold: 46\nGFS Neohellenic Bold Italic: 46\nGFS Neohellenic: 47\nGFS Neohellenic Italic: 48 [code: sTypoLineGap-mismatch]",
                            "status": "FAIL",
                            "traceback": null
                        },
                        {
                            "message": "usWinAscent is not the same across the family:\nGFS Neohellenic Bold: 871\nGFS Neohellenic Bold Italic: 872\nGFS Neohellenic: 873\nGFS Neohellenic Italic: 877 [code: usWinAscent-mismatch]",
                            "status": "FAIL",
                            "traceback": null
                        },
                        {
                            "message": "usWinDescent is not the same across the family:\nGFS Neohellenic Bold: 264\nGFS Neohellenic Bold Italic: 264\nGFS Neohellenic: 245\nGFS Neohellenic Italic: 242 [code: usWinDescent-mismatch]",
                            "status": "FAIL",
                            "traceback": null
                        },
                        {
                            "message": "ascent is not the same across the family:\nGFS Neohellenic Bold: 871\nGFS Neohellenic Bold Italic: 872\nGFS Neohellenic: 873\nGFS Neohellenic Italic: 877 [code: ascent-mismatch]",
                            "status": "FAIL",
                            "traceback": null
                        },
                        {
                            "message": "descent is not the same across the family:\nGFS Neohellenic Bold: -264\nGFS Neohellenic Bold Italic: -264\nGFS Neohellenic: -245\nGFS Neohellenic Italic: -242 [code: descent-mismatch]",
                            "status": "FAIL",
                            "traceback": null
                        },
                        {
                            "message": "lineGap is not the same across the family:\nGFS Neohellenic Bold: 22\nGFS Neohellenic Bold Italic: 23\nGFS Neohellenic: 24\nGFS Neohellenic Italic: 24 [code: lineGap-mismatch]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        We want all fonts within a family to have the same vertical metrics so\n        their line spacing is consistent across the family.\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "Name table records must not have trailing spaces.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/name/trailing_spaces>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Name table record with key = (1, 0, 0, 5) has trailing spaces that must be removed: 'Version 1.0 ' [code: trailing-space]",
                            "status": "FAIL",
                            "traceback": null
                        },
                        {
                            "message": "Name table record with key = (3, 1, 1033, 5) has trailing spaces that must be removed: 'Version 1.0 ' [code: trailing-space]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "result": "FAIL"
                },
                {
                    "description": "Checking OS/2 usWinAscent & usWinDescent.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/family/win_ascent_and_descent>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2.usWinAscent value should be equal or greater than 1083, but got 871 instead [code: ascent]",
                            "status": "FAIL",
                            "traceback": null
                        },
                        {
                            "message": "OS/2.usWinDescent value should be equal or greater than 315, but got 264 instead [code: descent]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        A font's winAscent and winDescent values should be greater than or equal to\n        the head table's yMax, abs(yMin) values. If they are less than these values,\n        clipping can occur on Windows platforms\n        (https://github.com/RedHatBrand/Overpass/issues/33).\n\n        If the font includes tall/deep writing systems such as Arabic or Devanagari,\n        the winAscent and winDescent can be greater than the yMax and absolute yMin\n        values to accommodate vowel marks.\n\n        When the 'win' Metrics are significantly greater than the UPM, the linespacing\n        can appear too loose. To counteract this, enabling the OS/2 fsSelection\n        bit 7 (Use_Typo_Metrics), will force Windows to use the OS/2 'typo' values\n        instead. This means the font developer can control the linespacing with\n        the 'typo' values, whilst avoiding clipping by setting the 'win' values to\n        values greater than the yMax and absolute yMin.\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "Checking OS/2 Metrics match hhea Metrics.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/os2_metrics_match_hhea>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2 sTypoAscender (625) and hhea ascent (871) must be equal. [code: ascender]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        OS/2 and hhea vertical metric values should match. This will produce the\n        same linespacing on Mac, GNU+Linux and Windows.\n\n        - Mac OS X uses the hhea values.\n        - Windows uses OS/2 or Win, depending on the OS or fsSelection bit value.\n\n        When OS/2 and hhea vertical metrics match, the same linespacing results on\n        macOS, GNU+Linux and Windows. Note that fixing this issue in a previously\n        released font may cause reflow in user documents and unhappy users.\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "Checking with ots-sanitize.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/ots>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "ots-sanitize passed this file",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Do we have the latest version of FontBakery installed?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/fontbakery_version>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "FontBakery is up-to-date.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Running old versions of FontBakery can lead to a poor report which may\n        include false WARNs and FAILs due do bugs, as well as outdated\n        quality assurance criteria.\n\n        Older versions will also not report problems that are detected by new checks\n        added to the tool in more recent updates.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Font contains '.notdef' as its first glyph?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/mandatory_glyphs>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The '.notdef' glyph should contain a drawing, but it is blank. [code: notdef-is-blank]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The OpenType specification v1.8.2 recommends that the first glyph is the\n        '.notdef' glyph without a codepoint assigned and with a drawing:\n\n        The .notdef glyph is very important for providing the user feedback\n        that a glyph is not found in the font. This glyph should not be left\n        without an outline as the user will only see what looks like a space\n        if a glyph is missing and not be aware of the active font\u2019s limitation.\n\n        https://docs.microsoft.com/en-us/typography/opentype/spec/recom#glyph-0-the-notdef-glyph\n\n        Pre-v1.8, it was recommended that fonts should also contain 'space', 'CR'\n        and '.null' glyphs. This might have been relevant for MacOS 9 applications.\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "Font contains glyphs for whitespace characters?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/whitespace_glyphs>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font contains glyphs for whitespace characters.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Font has **proper** whitespace glyph names?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/whitespace_glyphnames>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Glyph 0x00A0 is called \"ch202\": Change to \"uni00A0\" [code: non-compliant-00a0]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This check enforces adherence to recommended whitespace\n        (codepoints 0020 and 00A0) glyph names according to the Adobe Glyph List.\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "Whitespace glyphs have ink?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/whitespace_ink>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Glyph 'uni2009' has ink. It needs to be replaced by an empty glyph. [code: has-ink]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "result": "FAIL"
                },
                {
                    "description": "Font contains all required tables?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/required_tables>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "This font contains the following optional tables:\n\n\t- cvt \n\n\t- fpgm\n\n\t- loca\n\n\t- prep\n\n\t- GPOS\n\n\t- GSUB\n\n\t- gasp [code: optional-tables]",
                            "status": "INFO",
                            "traceback": null
                        },
                        {
                            "message": "Font contains all required tables.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the OpenType spec\n        https://docs.microsoft.com/en-us/typography/opentype/spec/otff#required-tables\n\n        Whether TrueType or CFF outlines are used in an OpenType font, the following\n        tables are required for the font to function correctly:\n\n        - cmap (Character to glyph mapping)\u23ce\n        - head (Font header)\u23ce\n        - hhea (Horizontal header)\u23ce\n        - hmtx (Horizontal metrics)\u23ce\n        - maxp (Maximum profile)\u23ce\n        - name (Naming table)\u23ce\n        - OS/2 (OS/2 and Windows specific metrics)\u23ce\n        - post (PostScript information)\n\n        The spec also documents that variable fonts require the following table:\n\n        - STAT (Style attributes)\n\n        Depending on the typeface and coverage of a font, certain tables are\n        recommended for optimum quality.\n\n        For example:\u23ce\n        - the performance of a non-linear font is improved if the VDMX, LTSH,\n          and hdmx tables are present.\u23ce\n        - Non-monospaced Latin fonts should have a kern table.\u23ce\n        - A gasp table is necessary if a designer wants to influence the sizes\n          at which grayscaling is used under Windows. Etc.\n    ",
                    "result": "INFO"
                },
                {
                    "description": "Are there unwanted tables?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/unwanted_tables>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The following unwanted font tables were found:\n\n* FFTM - Table contains redundant FontForge timestamp info\n\nThey can be removed with the 'fix-unwanted-tables' script provided by gftools. [code: unwanted-tables]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Some font editors store source data in their own SFNT tables, and these\n        can sometimes sneak into final release files, which should only have\n        OpenType spec tables.\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "Check correctness of STAT table strings",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/STAT_strings>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: has_STAT_table",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        On the STAT table, the \"Italic\" keyword must not be used on AxisValues\n        for variation axes other than 'ital'.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Glyph names are all valid?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/valid_glyphnames>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The following glyph names do not comply with naming conventions: Numero sign\n\n A glyph name must be entirely comprised of characters from the following set: A-Z a-z 0-9 .(period) _(underscore). A glyph name must not start with a digit or period. There are a few exceptions such as the special glyph \".notdef\". The glyph names \"twocents\", \"a1\", and \"_\" are all valid, while \"2cents\" and \".twocents\" are not. [code: found-invalid-names]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Microsoft's recommendations for OpenType Fonts states the following:\n\n        'NOTE: The PostScript glyph name must be no longer than 31 characters,\n        include only uppercase or lowercase English letters, European digits,\n        the period or the underscore, i.e. from the set [A-Za-z0-9_.] and\n        should start with a letter, except the special glyph name \".notdef\"\n        which starts with a period.'\n\n        https://docs.microsoft.com/en-us/typography/opentype/spec/recom#post-table\n\n\n        In practice, though, particularly in modern environments, glyph names\n        can be as long as 63 characters.\n\n        According to the \"Adobe Glyph List Specification\" available at:\n\n        https://github.com/adobe-type-tools/agl-specification\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "Font contains unique glyph names?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/unique_glyphnames>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Glyph names are all unique.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Duplicate glyph names prevent font installation on Mac OS X.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "List all superfamily filepaths",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/superfamily/list>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic [code: family-path]",
                            "status": "INFO",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This is a merely informative check that lists all sibling families\n        detected by fontbakery.\n\n        Only the fontfiles in these directories will be considered in\n        superfamily-level checks.\n    ",
                    "result": "INFO"
                },
                {
                    "description": "Each font in set of sibling families must have the same set of vertical metrics values.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/superfamily/vertical_metrics>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Sibling families were not detected.",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        We may want all fonts within a super-family (all sibling families) to have\n        the same vertical metrics so their line spacing is consistent\n        across the super-family.\n\n        This is an experimental extended version of\n        com.google.fonts/check/family/vertical_metrics and for now it will only\n        result in WARNs.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Ensure indic fonts have the Indian Rupee Sign glyph.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/rupee>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_indic_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Per Bureau of Indian Standards every font supporting one of the\n        official Indian languages needs to include Unicode Character\n        \u201c\u20b9\u201d (U+20B9) Indian Rupee Sign.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check font contains no unreachable glyphs",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/unreachable_glyphs>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The following glyphs could not be reached by codepoint or substitution rules:\n\n\t- nonmarkingreturn\n [code: unreachable-glyphs]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Glyphs are either accessible directly through Unicode codepoints or through\n        substitution rules.\n\n        In Color Fonts, glyphs are also referenced by the COLR table.\n\n        Any glyphs not accessible by either of these means\n        are redundant and serve only to increase the font's file size.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Check if each glyph has the recommended amount of contours.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/contour_count>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "This check inspects the glyph outlines and detects the total number of contours in each of them. The expected values are infered from the typical ammounts of contours observed in a large collection of reference font families. The divergences listed below may simply indicate a significantly different design on some of your glyphs. On the other hand, some of these may flag actual bugs in the font such as glyphs mapped to an incorrect codepoint. Please consider reviewing the design and codepoint assignment of these to make sure they are correct.\n\nThe following glyphs do not have the recommended number of contours:\n\n\t- Glyph name: Uhorn\tContours detected: 2\tExpected: 1\n\n\t- Glyph name: u01F4\tContours detected: 1\tExpected: 2\n\n\t- Glyph name: uni01F5\tContours detected: 2\tExpected: 3\n\n\t- Glyph name: longs\tContours detected: 3\tExpected: 2\n\n\t- Glyph name: uni2009\tContours detected: 2\tExpected: 0\n\n\t- Glyph name: sixsuperior\tContours detected: 1\tExpected: 2\n\n\t- Glyph name: ninesuperior\tContours detected: 1\tExpected: 2\n\n\t- Glyph name: sixinferior\tContours detected: 1\tExpected: 2\n\n\t- Glyph name: nineinferior\tContours detected: 1\tExpected: 2\n\n\t- Glyph name: uni2159\tContours detected: 3\tExpected: 4\n\n\t- Glyph name: uni215A\tContours detected: 3\tExpected: 4\n\n\t- Glyph name: uniFFFC\tContours detected: 16\tExpected: 22\n\n\t- Glyph name: Uhorn\tContours detected: 2\tExpected: 1\n\n\t- Glyph name: fi\tContours detected: 1\tExpected: 3\n\n\t- Glyph name: longs\tContours detected: 3\tExpected: 1\n\n\t- Glyph name: uni2009\tContours detected: 2\tExpected: 0\n\n\t- Glyph name: uniFFFC\tContours detected: 16\tExpected: 22\n [code: contour-count]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Does the font contain a soft hyphen?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/soft_hyphen>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Looks good!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The 'Soft Hyphen' character (codepoint 0x00AD) is used to mark\n        a hyphenation possibility within a word in the absence of or\n        overriding dictionary hyphenation.\n\n        It is sometimes designed empty with no width (such as a control character),\n        sometimes the same as the traditional hyphen, sometimes double encoded with\n        the hyphen.\n\n        That being said, it is recommended to not include it in the font at all,\n        because discretionary hyphenation should be handled at the level of the\n        shaping engine, not the font. Also, even if present, the software would\n        not display that character.\n\n        More discussion at:\n        https://typedrawers.com/discussion/2046/special-dash-things-softhyphen-horizontalbar\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Does the font contain chws and vchw features?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/cjk_chws_feature>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_cjk_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The W3C recommends the addition of chws and vchw features to CJK fonts\n        to enhance the spacing of glyphs in environments which do not fully support\n        JLREQ layout rules.\n\n        The chws_tool utility (https://github.com/googlefonts/chws_tool) can be used\n        to add these features automatically.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Ensure component transforms do not perform scaling or rotation.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/transformed_components>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "No glyphs had components with scaling or rotation",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Ensure no GPOS7 lookups are present.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/gpos7>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font has no GPOS7 lookups",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Versions of fonttools >=4.14.0 (19 August 2020) perform an optimisation on\n        chained contextual lookups, expressing GSUB6 as GSUB5 and GPOS8 and GPOS7\n        where possible (when there are no suffixes/prefixes for all rules in\n        the lookup).\n\n        However, makeotf has never generated these lookup types and they are rare\n        in practice. Perhaps before of this, Mac's CoreText shaper does not correctly\n        interpret GPOS7, meaning that these lookups will be ignored by the shaper,\n        and fonts containing these lookups will have unintended positioning errors.\n\n        To fix this warning, rebuild the font with a recent version of fonttools.\n    ",
                    "result": "PASS",
                    "severity": 9
                },
                {
                    "description": "Ensure that the font can be rasterized by FreeType.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.adobe.fonts/check/freetype_rasterizer>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font can be rasterized by FreeType.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Malformed fonts can cause FreeType to crash.\n    ",
                    "result": "PASS",
                    "severity": 10
                },
                {
                    "description": "Font has the proper sfntVersion value?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.adobe.fonts/check/sfnt_version>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font has the correct sfntVersion value.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        OpenType fonts that contain TrueType outlines should use the value of 0x00010000\n        for the sfntVersion. OpenType fonts containing CFF data (version 1 or 2) should\n        use 0x4F54544F ('OTTO', when re-interpreted as a Tag) for sfntVersion.\n\n        Fonts with the wrong sfntVersion value are rejected by FreeType.\n\n        https://docs.microsoft.com/en-us/typography/opentype/spec/otff#table-directory\n    ",
                    "result": "PASS",
                    "severity": 10
                },
                {
                    "description": "Space and non-breaking space have the same width?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/whitespace_widths>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Space and non-breaking space have differing width: The space glyph named space is 398 font units wide, non-breaking space named (ch202) is 250 font units wide, and both should be positive and the same. GlyphsApp has \"Sidebearing arithmetic\" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations in\n        documents; such as the space before punctuation in languages that do that. It\n        avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It's also used\n        by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "Detect any interpolation issues in the font.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/interpolation_issues>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        When creating a variable font, the designer must make sure that corresponding\n        paths have the same start points across masters, as well as that corresponding\n        component shapes are placed in the same order within a glyph across masters.\n        If this is not done, the glyph will not interpolate correctly.\n\n        Here we check for the presence of potential interpolation errors using the\n        fontTools.varLib.interpolatable module.\n    ",
                    "result": "SKIP",
                    "severity": 4
                },
                {
                    "description": "Check math signs have the same width.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/math_signs_width>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The most common width is 500 among a set of 4 math glyphs.\nThe following math glyphs have a different width, though:\n\nWidth = 631:\nplus\n\nWidth = 493:\nless\n\nWidth = 788:\nequal\n\nWidth = 508:\ngreater\n\nWidth = 594:\ndivide\n\nWidth = 498:\nminus\n\nWidth = 820:\napproxequal\n\nWidth = 475:\nequivalence, lessequal, notequal, greaterequal\n [code: width-outliers]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        It is a common practice to have math signs sharing the same width\n        (preferably the same width as tabular figures accross the entire font family).\n\n        This probably comes from the will to avoid additional tabular math signs\n        knowing that their design can easily share the same width.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Checking Vertical Metric Linegaps.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/linegaps>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "hhea lineGap is not equal to 0. [code: hhea]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The LineGap value is a space added to the line height created by the union\n        of the (typo/hhea)Ascender and (typo/hhea)Descender. It is handled differently\n        according to the environment.\n\n        This leading value will be added above the text line in most desktop apps.\n        It will be shared above and under in web browsers, and ignored in Windows\n        if Use_Typo_Metrics is disabled.\n\n        For better linespacing consistency across platforms,\n        (typo/hhea)LineGap values must be 0.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Checking STAT table entries in static fonts.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/STAT_in_statics>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: has_STAT_table",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Adobe feature syntax allows for the definition of a STAT table. Fonts built\n        with a hand-coded STAT table in feature syntax may be built either as static\n        or variable, but will end up with the same STAT table.\n\n        This is a problem, because a STAT table which works on variable fonts\n        will not be appropriate for static instances. The examples in the OpenType spec\n        of non-variable fonts with a STAT table show that the table entries must be\n        restricted to those entries which refer to the static font's position in\n        the designspace. i.e. a Regular weight static should only have the following\n        entry for the weight axis:\n\n        <AxisIndex value=\"0\"/>\n        <Flags value=\"2\"/>  <!-- ElidableAxisValueName -->\n        <ValueNameID value=\"265\"/>  <!-- Regular -->\n        <Value value=\"400.0\"/>\n\n        However, if the STAT table intended for a variable font is compiled into a\n        static, it will have many entries for this axis. In this case, Windows will\n        read the first entry only, causing all instances to report themselves\n        as \"Thin Condensed\".\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check accent of Lcaron, dcaron, lcaron, tcaron (derived from com.google.fonts/check/alt_caron)",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/alt_caron:googlefonts>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "dcaron is decomposed and therefore could not be checked. Please check manually. [code: decomposed-outline]",
                            "status": "WARN",
                            "traceback": null
                        },
                        {
                            "message": "Lcaron is decomposed and therefore could not be checked. Please check manually. [code: decomposed-outline]",
                            "status": "WARN",
                            "traceback": null
                        },
                        {
                            "message": "lcaron is decomposed and therefore could not be checked. Please check manually. [code: decomposed-outline]",
                            "status": "WARN",
                            "traceback": null
                        },
                        {
                            "message": "tcaron is decomposed and therefore could not be checked. Please check manually. [code: decomposed-outline]",
                            "status": "WARN",
                            "traceback": null
                        },
                        {
                            "message": "Looks good!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Lcaron, dcaron, lcaron, tcaron should NOT be composed with quoteright\n        or quotesingle or comma or caron(comb). It should be composed with a\n        distinctive glyph which doesn't look like an apostrophe.\n\n        Source:\n        https://ilovetypography.com/2009/01/24/on-diacritics/\n        http://diacritics.typo.cz/index.php?id=5\n        https://www.typotheque.com/articles/lcaron\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Name table records must not have trailing spaces.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/name/trailing_spaces>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Name table record with key = (1, 0, 0, 5) has trailing spaces that must be removed: 'Version 1.0 ' [code: trailing-space]",
                            "status": "FAIL",
                            "traceback": null
                        },
                        {
                            "message": "Name table record with key = (3, 1, 1033, 5) has trailing spaces that must be removed: 'Version 1.0 ' [code: trailing-space]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "result": "FAIL"
                },
                {
                    "description": "Checking OS/2 usWinAscent & usWinDescent.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/family/win_ascent_and_descent>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2.usWinAscent value should be equal or greater than 1083, but got 872 instead [code: ascent]",
                            "status": "FAIL",
                            "traceback": null
                        },
                        {
                            "message": "OS/2.usWinDescent value should be equal or greater than 315, but got 264 instead [code: descent]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        A font's winAscent and winDescent values should be greater than or equal to\n        the head table's yMax, abs(yMin) values. If they are less than these values,\n        clipping can occur on Windows platforms\n        (https://github.com/RedHatBrand/Overpass/issues/33).\n\n        If the font includes tall/deep writing systems such as Arabic or Devanagari,\n        the winAscent and winDescent can be greater than the yMax and absolute yMin\n        values to accommodate vowel marks.\n\n        When the 'win' Metrics are significantly greater than the UPM, the linespacing\n        can appear too loose. To counteract this, enabling the OS/2 fsSelection\n        bit 7 (Use_Typo_Metrics), will force Windows to use the OS/2 'typo' values\n        instead. This means the font developer can control the linespacing with\n        the 'typo' values, whilst avoiding clipping by setting the 'win' values to\n        values greater than the yMax and absolute yMin.\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "Checking OS/2 Metrics match hhea Metrics.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/os2_metrics_match_hhea>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2 sTypoAscender (630) and hhea ascent (872) must be equal. [code: ascender]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        OS/2 and hhea vertical metric values should match. This will produce the\n        same linespacing on Mac, GNU+Linux and Windows.\n\n        - Mac OS X uses the hhea values.\n        - Windows uses OS/2 or Win, depending on the OS or fsSelection bit value.\n\n        When OS/2 and hhea vertical metrics match, the same linespacing results on\n        macOS, GNU+Linux and Windows. Note that fixing this issue in a previously\n        released font may cause reflow in user documents and unhappy users.\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "Checking with ots-sanitize.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/ots>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "ots-sanitize passed this file",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Do we have the latest version of FontBakery installed?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/fontbakery_version>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "FontBakery is up-to-date.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Running old versions of FontBakery can lead to a poor report which may\n        include false WARNs and FAILs due do bugs, as well as outdated\n        quality assurance criteria.\n\n        Older versions will also not report problems that are detected by new checks\n        added to the tool in more recent updates.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Font contains '.notdef' as its first glyph?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/mandatory_glyphs>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The OpenType specification v1.8.2 recommends that the first glyph is the\n        '.notdef' glyph without a codepoint assigned and with a drawing:\n\n        The .notdef glyph is very important for providing the user feedback\n        that a glyph is not found in the font. This glyph should not be left\n        without an outline as the user will only see what looks like a space\n        if a glyph is missing and not be aware of the active font\u2019s limitation.\n\n        https://docs.microsoft.com/en-us/typography/opentype/spec/recom#glyph-0-the-notdef-glyph\n\n        Pre-v1.8, it was recommended that fonts should also contain 'space', 'CR'\n        and '.null' glyphs. This might have been relevant for MacOS 9 applications.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Font contains glyphs for whitespace characters?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/whitespace_glyphs>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font contains glyphs for whitespace characters.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Font has **proper** whitespace glyph names?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/whitespace_glyphnames>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Glyph 0x00A0 is called \"ch202\": Change to \"uni00A0\" [code: non-compliant-00a0]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This check enforces adherence to recommended whitespace\n        (codepoints 0020 and 00A0) glyph names according to the Adobe Glyph List.\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "Whitespace glyphs have ink?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/whitespace_ink>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Glyph 'uni2009' has ink. It needs to be replaced by an empty glyph. [code: has-ink]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "result": "FAIL"
                },
                {
                    "description": "Font contains all required tables?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/required_tables>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "This font contains the following optional tables:\n\n\t- cvt \n\n\t- fpgm\n\n\t- loca\n\n\t- prep\n\n\t- GPOS\n\n\t- GSUB\n\n\t- gasp [code: optional-tables]",
                            "status": "INFO",
                            "traceback": null
                        },
                        {
                            "message": "Font contains all required tables.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the OpenType spec\n        https://docs.microsoft.com/en-us/typography/opentype/spec/otff#required-tables\n\n        Whether TrueType or CFF outlines are used in an OpenType font, the following\n        tables are required for the font to function correctly:\n\n        - cmap (Character to glyph mapping)\u23ce\n        - head (Font header)\u23ce\n        - hhea (Horizontal header)\u23ce\n        - hmtx (Horizontal metrics)\u23ce\n        - maxp (Maximum profile)\u23ce\n        - name (Naming table)\u23ce\n        - OS/2 (OS/2 and Windows specific metrics)\u23ce\n        - post (PostScript information)\n\n        The spec also documents that variable fonts require the following table:\n\n        - STAT (Style attributes)\n\n        Depending on the typeface and coverage of a font, certain tables are\n        recommended for optimum quality.\n\n        For example:\u23ce\n        - the performance of a non-linear font is improved if the VDMX, LTSH,\n          and hdmx tables are present.\u23ce\n        - Non-monospaced Latin fonts should have a kern table.\u23ce\n        - A gasp table is necessary if a designer wants to influence the sizes\n          at which grayscaling is used under Windows. Etc.\n    ",
                    "result": "INFO"
                },
                {
                    "description": "Are there unwanted tables?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/unwanted_tables>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The following unwanted font tables were found:\n\n* FFTM - Table contains redundant FontForge timestamp info\n\nThey can be removed with the 'fix-unwanted-tables' script provided by gftools. [code: unwanted-tables]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Some font editors store source data in their own SFNT tables, and these\n        can sometimes sneak into final release files, which should only have\n        OpenType spec tables.\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "Check correctness of STAT table strings",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/STAT_strings>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: has_STAT_table",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        On the STAT table, the \"Italic\" keyword must not be used on AxisValues\n        for variation axes other than 'ital'.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Glyph names are all valid?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/valid_glyphnames>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Glyph names are all valid.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Microsoft's recommendations for OpenType Fonts states the following:\n\n        'NOTE: The PostScript glyph name must be no longer than 31 characters,\n        include only uppercase or lowercase English letters, European digits,\n        the period or the underscore, i.e. from the set [A-Za-z0-9_.] and\n        should start with a letter, except the special glyph name \".notdef\"\n        which starts with a period.'\n\n        https://docs.microsoft.com/en-us/typography/opentype/spec/recom#post-table\n\n\n        In practice, though, particularly in modern environments, glyph names\n        can be as long as 63 characters.\n\n        According to the \"Adobe Glyph List Specification\" available at:\n\n        https://github.com/adobe-type-tools/agl-specification\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Font contains unique glyph names?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/unique_glyphnames>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Glyph names are all unique.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Duplicate glyph names prevent font installation on Mac OS X.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "List all superfamily filepaths",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/superfamily/list>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic [code: family-path]",
                            "status": "INFO",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This is a merely informative check that lists all sibling families\n        detected by fontbakery.\n\n        Only the fontfiles in these directories will be considered in\n        superfamily-level checks.\n    ",
                    "result": "INFO"
                },
                {
                    "description": "Each font in set of sibling families must have the same set of vertical metrics values.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/superfamily/vertical_metrics>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Sibling families were not detected.",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        We may want all fonts within a super-family (all sibling families) to have\n        the same vertical metrics so their line spacing is consistent\n        across the super-family.\n\n        This is an experimental extended version of\n        com.google.fonts/check/family/vertical_metrics and for now it will only\n        result in WARNs.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Ensure indic fonts have the Indian Rupee Sign glyph.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/rupee>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_indic_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Per Bureau of Indian Standards every font supporting one of the\n        official Indian languages needs to include Unicode Character\n        \u201c\u20b9\u201d (U+20B9) Indian Rupee Sign.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check font contains no unreachable glyphs",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/unreachable_glyphs>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The following glyphs could not be reached by codepoint or substitution rules:\n\n\t- H18533\n\n\t- H18543\n\n\t- H18551\n\n\t- H22073\n\n\t- afii00208\n\n\t- nonmarkingreturn\n [code: unreachable-glyphs]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Glyphs are either accessible directly through Unicode codepoints or through\n        substitution rules.\n\n        In Color Fonts, glyphs are also referenced by the COLR table.\n\n        Any glyphs not accessible by either of these means\n        are redundant and serve only to increase the font's file size.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Check if each glyph has the recommended amount of contours.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/contour_count>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "This check inspects the glyph outlines and detects the total number of contours in each of them. The expected values are infered from the typical ammounts of contours observed in a large collection of reference font families. The divergences listed below may simply indicate a significantly different design on some of your glyphs. On the other hand, some of these may flag actual bugs in the font such as glyphs mapped to an incorrect codepoint. Please consider reviewing the design and codepoint assignment of these to make sure they are correct.\n\nThe following glyphs do not have the recommended number of contours:\n\n\t- Glyph name: acute\tContours detected: 2\tExpected: 1\n\n\t- Glyph name: Aacute\tContours detected: 4\tExpected: 3\n\n\t- Glyph name: Eacute\tContours detected: 3\tExpected: 2\n\n\t- Glyph name: Iacute\tContours detected: 3\tExpected: 2\n\n\t- Glyph name: Oacute\tContours detected: 4\tExpected: 3\n\n\t- Glyph name: Uacute\tContours detected: 3\tExpected: 2\n\n\t- Glyph name: Yacute\tContours detected: 3\tExpected: 2\n\n\t- Glyph name: aacute\tContours detected: 4\tExpected: 3\n\n\t- Glyph name: eacute\tContours detected: 4\tExpected: 3\n\n\t- Glyph name: iacute\tContours detected: 3\tExpected: 2\n\n\t- Glyph name: oacute\tContours detected: 4\tExpected: 3\n\n\t- Glyph name: uacute\tContours detected: 3\tExpected: 2\n\n\t- Glyph name: yacute\tContours detected: 3\tExpected: 2\n\n\t- Glyph name: Cacute\tContours detected: 3\tExpected: 2\n\n\t- Glyph name: Nacute\tContours detected: 3\tExpected: 2\n\n\t- Glyph name: nacute\tContours detected: 3\tExpected: 2\n\n\t- Glyph name: Racute\tContours detected: 4\tExpected: 3\n\n\t- Glyph name: racute\tContours detected: 3\tExpected: 2\n\n\t- Glyph name: Sacute\tContours detected: 3\tExpected: 2\n\n\t- Glyph name: uhungarumlaut\tContours detected: 5\tExpected: 3\n\n\t- Glyph name: Zacute\tContours detected: 3\tExpected: 2\n\n\t- Glyph name: zacute\tContours detected: 3\tExpected: 2\n\n\t- Glyph name: u01F4\tContours detected: 3\tExpected: 2\n\n\t- Glyph name: uni01F5\tContours detected: 4\tExpected: 3\n\n\t- Glyph name: Aringacute\tContours detected: 6\tExpected: 3, 4 or 5\n\n\t- Glyph name: aringacute\tContours detected: 6\tExpected: 4 or 5\n\n\t- Glyph name: aeacute\tContours detected: 5\tExpected: 4\n\n\t- Glyph name: Oslashacute\tContours detected: 5\tExpected: 4\n\n\t- Glyph name: oslashacute\tContours detected: 5\tExpected: 4\n\n\t- Glyph name: Wacute\tContours detected: 3\tExpected: 2\n\n\t- Glyph name: wacute\tContours detected: 3\tExpected: 2\n\n\t- Glyph name: uni1EA4\tContours detected: 5\tExpected: 4\n\n\t- Glyph name: uni1EA5\tContours detected: 5\tExpected: 4\n\n\t- Glyph name: uni1EB0\tContours detected: 5\tExpected: 4\n\n\t- Glyph name: uni1EB1\tContours detected: 5\tExpected: 4\n\n\t- Glyph name: uni1EBE\tContours detected: 4\tExpected: 3\n\n\t- Glyph name: uni1EBF\tContours detected: 5\tExpected: 4\n\n\t- Glyph name: uni1ED0\tContours detected: 5\tExpected: 4\n\n\t- Glyph name: uni2009\tContours detected: 2\tExpected: 0\n\n\t- Glyph name: second\tContours detected: 2\tExpected: 4\n\n\t- Glyph name: sixsuperior\tContours detected: 1\tExpected: 2\n\n\t- Glyph name: ninesuperior\tContours detected: 1\tExpected: 2\n\n\t- Glyph name: sixinferior\tContours detected: 1\tExpected: 2\n\n\t- Glyph name: nineinferior\tContours detected: 1\tExpected: 2\n\n\t- Glyph name: uni2159\tContours detected: 3\tExpected: 4\n\n\t- Glyph name: uni215A\tContours detected: 3\tExpected: 4\n\n\t- Glyph name: uniFFFC\tContours detected: 16\tExpected: 22\n\n\t- Glyph name: Aacute\tContours detected: 4\tExpected: 3\n\n\t- Glyph name: Aringacute\tContours detected: 6\tExpected: 3, 4 or 5\n\n\t- Glyph name: Cacute\tContours detected: 3\tExpected: 2\n\n\t- Glyph name: Eacute\tContours detected: 3\tExpected: 2\n\n\t- Glyph name: Iacute\tContours detected: 3\tExpected: 2\n\n\t- Glyph name: Nacute\tContours detected: 3\tExpected: 2\n\n\t- Glyph name: Oacute\tContours detected: 4\tExpected: 3\n\n\t- Glyph name: Oslashacute\tContours detected: 5\tExpected: 4\n\n\t- Glyph name: Racute\tContours detected: 4\tExpected: 3\n\n\t- Glyph name: Sacute\tContours detected: 3\tExpected: 2\n\n\t- Glyph name: Uacute\tContours detected: 3\tExpected: 2\n\n\t- Glyph name: Wacute\tContours detected: 3\tExpected: 2\n\n\t- Glyph name: Yacute\tContours detected: 3\tExpected: 2\n\n\t- Glyph name: Zacute\tContours detected: 3\tExpected: 2\n\n\t- Glyph name: aacute\tContours detected: 4\tExpected: 3\n\n\t- Glyph name: acute\tContours detected: 2\tExpected: 1\n\n\t- Glyph name: aeacute\tContours detected: 5\tExpected: 4\n\n\t- Glyph name: aringacute\tContours detected: 6\tExpected: 4 or 5\n\n\t- Glyph name: eacute\tContours detected: 4\tExpected: 3\n\n\t- Glyph name: fi\tContours detected: 1\tExpected: 3\n\n\t- Glyph name: iacute\tContours detected: 3\tExpected: 2\n\n\t- Glyph name: nacute\tContours detected: 3\tExpected: 2\n\n\t- Glyph name: oacute\tContours detected: 4\tExpected: 3\n\n\t- Glyph name: oslashacute\tContours detected: 5\tExpected: 4\n\n\t- Glyph name: racute\tContours detected: 3\tExpected: 2\n\n\t- Glyph name: uacute\tContours detected: 3\tExpected: 2\n\n\t- Glyph name: uhungarumlaut\tContours detected: 5\tExpected: 3\n\n\t- Glyph name: uni1EA4\tContours detected: 5\tExpected: 4\n\n\t- Glyph name: uni1EA5\tContours detected: 5\tExpected: 4\n\n\t- Glyph name: uni1EB0\tContours detected: 5\tExpected: 4\n\n\t- Glyph name: uni1EB1\tContours detected: 5\tExpected: 4\n\n\t- Glyph name: uni1EBE\tContours detected: 4\tExpected: 3\n\n\t- Glyph name: uni1EBF\tContours detected: 5\tExpected: 4\n\n\t- Glyph name: uni1ED0\tContours detected: 5\tExpected: 4\n\n\t- Glyph name: uni2009\tContours detected: 2\tExpected: 0\n\n\t- Glyph name: uniFFFC\tContours detected: 16\tExpected: 22\n\n\t- Glyph name: wacute\tContours detected: 3\tExpected: 2\n\n\t- Glyph name: yacute\tContours detected: 3\tExpected: 2\n\n\t- Glyph name: zacute\tContours detected: 3\tExpected: 2\n [code: contour-count]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Does the font contain a soft hyphen?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/soft_hyphen>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Looks good!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The 'Soft Hyphen' character (codepoint 0x00AD) is used to mark\n        a hyphenation possibility within a word in the absence of or\n        overriding dictionary hyphenation.\n\n        It is sometimes designed empty with no width (such as a control character),\n        sometimes the same as the traditional hyphen, sometimes double encoded with\n        the hyphen.\n\n        That being said, it is recommended to not include it in the font at all,\n        because discretionary hyphenation should be handled at the level of the\n        shaping engine, not the font. Also, even if present, the software would\n        not display that character.\n\n        More discussion at:\n        https://typedrawers.com/discussion/2046/special-dash-things-softhyphen-horizontalbar\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Does the font contain chws and vchw features?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/cjk_chws_feature>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_cjk_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The W3C recommends the addition of chws and vchw features to CJK fonts\n        to enhance the spacing of glyphs in environments which do not fully support\n        JLREQ layout rules.\n\n        The chws_tool utility (https://github.com/googlefonts/chws_tool) can be used\n        to add these features automatically.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Ensure component transforms do not perform scaling or rotation.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/transformed_components>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "No glyphs had components with scaling or rotation",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Ensure no GPOS7 lookups are present.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/gpos7>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font has no GPOS7 lookups",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Versions of fonttools >=4.14.0 (19 August 2020) perform an optimisation on\n        chained contextual lookups, expressing GSUB6 as GSUB5 and GPOS8 and GPOS7\n        where possible (when there are no suffixes/prefixes for all rules in\n        the lookup).\n\n        However, makeotf has never generated these lookup types and they are rare\n        in practice. Perhaps before of this, Mac's CoreText shaper does not correctly\n        interpret GPOS7, meaning that these lookups will be ignored by the shaper,\n        and fonts containing these lookups will have unintended positioning errors.\n\n        To fix this warning, rebuild the font with a recent version of fonttools.\n    ",
                    "result": "PASS",
                    "severity": 9
                },
                {
                    "description": "Ensure that the font can be rasterized by FreeType.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.adobe.fonts/check/freetype_rasterizer>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font can be rasterized by FreeType.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Malformed fonts can cause FreeType to crash.\n    ",
                    "result": "PASS",
                    "severity": 10
                },
                {
                    "description": "Font has the proper sfntVersion value?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.adobe.fonts/check/sfnt_version>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font has the correct sfntVersion value.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        OpenType fonts that contain TrueType outlines should use the value of 0x00010000\n        for the sfntVersion. OpenType fonts containing CFF data (version 1 or 2) should\n        use 0x4F54544F ('OTTO', when re-interpreted as a Tag) for sfntVersion.\n\n        Fonts with the wrong sfntVersion value are rejected by FreeType.\n\n        https://docs.microsoft.com/en-us/typography/opentype/spec/otff#table-directory\n    ",
                    "result": "PASS",
                    "severity": 10
                },
                {
                    "description": "Space and non-breaking space have the same width?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/whitespace_widths>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Space and non-breaking space have differing width: The space glyph named space is 398 font units wide, non-breaking space named (ch202) is 250 font units wide, and both should be positive and the same. GlyphsApp has \"Sidebearing arithmetic\" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations in\n        documents; such as the space before punctuation in languages that do that. It\n        avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It's also used\n        by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "Detect any interpolation issues in the font.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/interpolation_issues>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        When creating a variable font, the designer must make sure that corresponding\n        paths have the same start points across masters, as well as that corresponding\n        component shapes are placed in the same order within a glyph across masters.\n        If this is not done, the glyph will not interpolate correctly.\n\n        Here we check for the presence of potential interpolation errors using the\n        fontTools.varLib.interpolatable module.\n    ",
                    "result": "SKIP",
                    "severity": 4
                },
                {
                    "description": "Check math signs have the same width.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/math_signs_width>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The most common width is 500 among a set of 4 math glyphs.\nThe following math glyphs have a different width, though:\n\nWidth = 631:\nplus\n\nWidth = 493:\nless\n\nWidth = 788:\nequalorig\n\nWidth = 508:\ngreater\n\nWidth = 594:\ndivide\n\nWidth = 498:\nminus\n\nWidth = 820:\napproxequal\n\nWidth = 475:\nnotequal, equivalence, lessequal, greaterequal\n [code: width-outliers]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        It is a common practice to have math signs sharing the same width\n        (preferably the same width as tabular figures accross the entire font family).\n\n        This probably comes from the will to avoid additional tabular math signs\n        knowing that their design can easily share the same width.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Checking Vertical Metric Linegaps.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/linegaps>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "hhea lineGap is not equal to 0. [code: hhea]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The LineGap value is a space added to the line height created by the union\n        of the (typo/hhea)Ascender and (typo/hhea)Descender. It is handled differently\n        according to the environment.\n\n        This leading value will be added above the text line in most desktop apps.\n        It will be shared above and under in web browsers, and ignored in Windows\n        if Use_Typo_Metrics is disabled.\n\n        For better linespacing consistency across platforms,\n        (typo/hhea)LineGap values must be 0.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Checking STAT table entries in static fonts.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/STAT_in_statics>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: has_STAT_table",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Adobe feature syntax allows for the definition of a STAT table. Fonts built\n        with a hand-coded STAT table in feature syntax may be built either as static\n        or variable, but will end up with the same STAT table.\n\n        This is a problem, because a STAT table which works on variable fonts\n        will not be appropriate for static instances. The examples in the OpenType spec\n        of non-variable fonts with a STAT table show that the table entries must be\n        restricted to those entries which refer to the static font's position in\n        the designspace. i.e. a Regular weight static should only have the following\n        entry for the weight axis:\n\n        <AxisIndex value=\"0\"/>\n        <Flags value=\"2\"/>  <!-- ElidableAxisValueName -->\n        <ValueNameID value=\"265\"/>  <!-- Regular -->\n        <Value value=\"400.0\"/>\n\n        However, if the STAT table intended for a variable font is compiled into a\n        static, it will have many entries for this axis. In this case, Windows will\n        read the first entry only, causing all instances to report themselves\n        as \"Thin Condensed\".\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check accent of Lcaron, dcaron, lcaron, tcaron (derived from com.google.fonts/check/alt_caron)",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/alt_caron:googlefonts>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "dcaron is decomposed and therefore could not be checked. Please check manually. [code: decomposed-outline]",
                            "status": "WARN",
                            "traceback": null
                        },
                        {
                            "message": "Lcaron is decomposed and therefore could not be checked. Please check manually. [code: decomposed-outline]",
                            "status": "WARN",
                            "traceback": null
                        },
                        {
                            "message": "lcaron is decomposed and therefore could not be checked. Please check manually. [code: decomposed-outline]",
                            "status": "WARN",
                            "traceback": null
                        },
                        {
                            "message": "tcaron is decomposed and therefore could not be checked. Please check manually. [code: decomposed-outline]",
                            "status": "WARN",
                            "traceback": null
                        },
                        {
                            "message": "Looks good!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Lcaron, dcaron, lcaron, tcaron should NOT be composed with quoteright\n        or quotesingle or comma or caron(comb). It should be composed with a\n        distinctive glyph which doesn't look like an apostrophe.\n\n        Source:\n        https://ilovetypography.com/2009/01/24/on-diacritics/\n        http://diacritics.typo.cz/index.php?id=5\n        https://www.typotheque.com/articles/lcaron\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Name table records must not have trailing spaces.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/name/trailing_spaces>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Name table record with key = (1, 0, 0, 5) has trailing spaces that must be removed: 'Version 1.0 ' [code: trailing-space]",
                            "status": "FAIL",
                            "traceback": null
                        },
                        {
                            "message": "Name table record with key = (3, 1, 1033, 5) has trailing spaces that must be removed: 'Version 1.0 ' [code: trailing-space]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "result": "FAIL"
                },
                {
                    "description": "Checking OS/2 usWinAscent & usWinDescent.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/family/win_ascent_and_descent>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2.usWinAscent value should be equal or greater than 1083, but got 873 instead [code: ascent]",
                            "status": "FAIL",
                            "traceback": null
                        },
                        {
                            "message": "OS/2.usWinDescent value should be equal or greater than 315, but got 245 instead [code: descent]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        A font's winAscent and winDescent values should be greater than or equal to\n        the head table's yMax, abs(yMin) values. If they are less than these values,\n        clipping can occur on Windows platforms\n        (https://github.com/RedHatBrand/Overpass/issues/33).\n\n        If the font includes tall/deep writing systems such as Arabic or Devanagari,\n        the winAscent and winDescent can be greater than the yMax and absolute yMin\n        values to accommodate vowel marks.\n\n        When the 'win' Metrics are significantly greater than the UPM, the linespacing\n        can appear too loose. To counteract this, enabling the OS/2 fsSelection\n        bit 7 (Use_Typo_Metrics), will force Windows to use the OS/2 'typo' values\n        instead. This means the font developer can control the linespacing with\n        the 'typo' values, whilst avoiding clipping by setting the 'win' values to\n        values greater than the yMax and absolute yMin.\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "Checking OS/2 Metrics match hhea Metrics.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/os2_metrics_match_hhea>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2 sTypoAscender (600) and hhea ascent (873) must be equal. [code: ascender]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        OS/2 and hhea vertical metric values should match. This will produce the\n        same linespacing on Mac, GNU+Linux and Windows.\n\n        - Mac OS X uses the hhea values.\n        - Windows uses OS/2 or Win, depending on the OS or fsSelection bit value.\n\n        When OS/2 and hhea vertical metrics match, the same linespacing results on\n        macOS, GNU+Linux and Windows. Note that fixing this issue in a previously\n        released font may cause reflow in user documents and unhappy users.\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "Checking with ots-sanitize.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/ots>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "ots-sanitize passed this file",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Do we have the latest version of FontBakery installed?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/fontbakery_version>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "FontBakery is up-to-date.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Running old versions of FontBakery can lead to a poor report which may\n        include false WARNs and FAILs due do bugs, as well as outdated\n        quality assurance criteria.\n\n        Older versions will also not report problems that are detected by new checks\n        added to the tool in more recent updates.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Font contains '.notdef' as its first glyph?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/mandatory_glyphs>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The OpenType specification v1.8.2 recommends that the first glyph is the\n        '.notdef' glyph without a codepoint assigned and with a drawing:\n\n        The .notdef glyph is very important for providing the user feedback\n        that a glyph is not found in the font. This glyph should not be left\n        without an outline as the user will only see what looks like a space\n        if a glyph is missing and not be aware of the active font\u2019s limitation.\n\n        https://docs.microsoft.com/en-us/typography/opentype/spec/recom#glyph-0-the-notdef-glyph\n\n        Pre-v1.8, it was recommended that fonts should also contain 'space', 'CR'\n        and '.null' glyphs. This might have been relevant for MacOS 9 applications.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Font contains glyphs for whitespace characters?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/whitespace_glyphs>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font contains glyphs for whitespace characters.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Font has **proper** whitespace glyph names?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/whitespace_glyphnames>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Glyph 0x00A0 is called \"ch202\": Change to \"uni00A0\" [code: non-compliant-00a0]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This check enforces adherence to recommended whitespace\n        (codepoints 0020 and 00A0) glyph names according to the Adobe Glyph List.\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "Whitespace glyphs have ink?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/whitespace_ink>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "There is no whitespace glyph with ink.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Font contains all required tables?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/required_tables>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "This font contains the following optional tables:\n\n\t- cvt \n\n\t- fpgm\n\n\t- loca\n\n\t- prep\n\n\t- GPOS\n\n\t- GSUB [code: optional-tables]",
                            "status": "INFO",
                            "traceback": null
                        },
                        {
                            "message": "Font contains all required tables.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the OpenType spec\n        https://docs.microsoft.com/en-us/typography/opentype/spec/otff#required-tables\n\n        Whether TrueType or CFF outlines are used in an OpenType font, the following\n        tables are required for the font to function correctly:\n\n        - cmap (Character to glyph mapping)\u23ce\n        - head (Font header)\u23ce\n        - hhea (Horizontal header)\u23ce\n        - hmtx (Horizontal metrics)\u23ce\n        - maxp (Maximum profile)\u23ce\n        - name (Naming table)\u23ce\n        - OS/2 (OS/2 and Windows specific metrics)\u23ce\n        - post (PostScript information)\n\n        The spec also documents that variable fonts require the following table:\n\n        - STAT (Style attributes)\n\n        Depending on the typeface and coverage of a font, certain tables are\n        recommended for optimum quality.\n\n        For example:\u23ce\n        - the performance of a non-linear font is improved if the VDMX, LTSH,\n          and hdmx tables are present.\u23ce\n        - Non-monospaced Latin fonts should have a kern table.\u23ce\n        - A gasp table is necessary if a designer wants to influence the sizes\n          at which grayscaling is used under Windows. Etc.\n    ",
                    "result": "INFO"
                },
                {
                    "description": "Are there unwanted tables?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/unwanted_tables>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The following unwanted font tables were found:\n\n* FFTM - Table contains redundant FontForge timestamp info\n\nThey can be removed with the 'fix-unwanted-tables' script provided by gftools. [code: unwanted-tables]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Some font editors store source data in their own SFNT tables, and these\n        can sometimes sneak into final release files, which should only have\n        OpenType spec tables.\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "Check correctness of STAT table strings",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/STAT_strings>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: has_STAT_table",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        On the STAT table, the \"Italic\" keyword must not be used on AxisValues\n        for variation axes other than 'ital'.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Glyph names are all valid?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/valid_glyphnames>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The following glyph names do not comply with naming conventions: Numero sign\n\n A glyph name must be entirely comprised of characters from the following set: A-Z a-z 0-9 .(period) _(underscore). A glyph name must not start with a digit or period. There are a few exceptions such as the special glyph \".notdef\". The glyph names \"twocents\", \"a1\", and \"_\" are all valid, while \"2cents\" and \".twocents\" are not. [code: found-invalid-names]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Microsoft's recommendations for OpenType Fonts states the following:\n\n        'NOTE: The PostScript glyph name must be no longer than 31 characters,\n        include only uppercase or lowercase English letters, European digits,\n        the period or the underscore, i.e. from the set [A-Za-z0-9_.] and\n        should start with a letter, except the special glyph name \".notdef\"\n        which starts with a period.'\n\n        https://docs.microsoft.com/en-us/typography/opentype/spec/recom#post-table\n\n\n        In practice, though, particularly in modern environments, glyph names\n        can be as long as 63 characters.\n\n        According to the \"Adobe Glyph List Specification\" available at:\n\n        https://github.com/adobe-type-tools/agl-specification\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "Font contains unique glyph names?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/unique_glyphnames>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Glyph names are all unique.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Duplicate glyph names prevent font installation on Mac OS X.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "List all superfamily filepaths",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/superfamily/list>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic [code: family-path]",
                            "status": "INFO",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This is a merely informative check that lists all sibling families\n        detected by fontbakery.\n\n        Only the fontfiles in these directories will be considered in\n        superfamily-level checks.\n    ",
                    "result": "INFO"
                },
                {
                    "description": "Each font in set of sibling families must have the same set of vertical metrics values.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/superfamily/vertical_metrics>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Sibling families were not detected.",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        We may want all fonts within a super-family (all sibling families) to have\n        the same vertical metrics so their line spacing is consistent\n        across the super-family.\n\n        This is an experimental extended version of\n        com.google.fonts/check/family/vertical_metrics and for now it will only\n        result in WARNs.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Ensure indic fonts have the Indian Rupee Sign glyph.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/rupee>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_indic_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Per Bureau of Indian Standards every font supporting one of the\n        official Indian languages needs to include Unicode Character\n        \u201c\u20b9\u201d (U+20B9) Indian Rupee Sign.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check font contains no unreachable glyphs",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/unreachable_glyphs>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The following glyphs could not be reached by codepoint or substitution rules:\n\n\t- Breve\n\n\t- Cedilla\n\n\t- Commaaccentsmall\n\n\t- Dotaccent\n\n\t- Engalt\n\n\t- H18533\n\n\t- H18543\n\n\t- H18551\n\n\t- H22073\n\n\t- Ogonek\n\n\t- Ring\n\n\t- Tquoteright\n\n\t- cedillaalt\n\n\t- five_eighths\n\n\t- five_sixths\n\n\t- four_fifths\n\n\t- greekmacron\n\n\t- nonmarkingreturn\n\n\t- one_eighth\n\n\t- one_fifth\n\n\t- one_half\n\n\t- one_one\n\n\t- one_quarter\n\n\t- one_sixth\n\n\t- one_third\n\n\t- overscore.001\n\n\t- phi1\n\n\t- seven_eighths\n\n\t- three_eighths\n\n\t- three_fifths\n\n\t- three_quarters\n\n\t- two_fifths\n\n\t- two_thirds\n\n\t- uni03D0\n\n\t- uni03D1\n\n\t- vrachy\n [code: unreachable-glyphs]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Glyphs are either accessible directly through Unicode codepoints or through\n        substitution rules.\n\n        In Color Fonts, glyphs are also referenced by the COLR table.\n\n        Any glyphs not accessible by either of these means\n        are redundant and serve only to increase the font's file size.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Check if each glyph has the recommended amount of contours.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/contour_count>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "This check inspects the glyph outlines and detects the total number of contours in each of them. The expected values are infered from the typical ammounts of contours observed in a large collection of reference font families. The divergences listed below may simply indicate a significantly different design on some of your glyphs. On the other hand, some of these may flag actual bugs in the font such as glyphs mapped to an incorrect codepoint. Please consider reviewing the design and codepoint assignment of these to make sure they are correct.\n\nThe following glyphs do not have the recommended number of contours:\n\n\t- Glyph name: Kappa\tContours detected: 2\tExpected: 1\n\n\t- Glyph name: uniFFFC\tContours detected: 16\tExpected: 22\n\n\t- Glyph name: Kappa\tContours detected: 2\tExpected: 1\n\n\t- Glyph name: fi\tContours detected: 1\tExpected: 3\n\n\t- Glyph name: uniFFFC\tContours detected: 16\tExpected: 22\n [code: contour-count]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Does the font contain a soft hyphen?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/soft_hyphen>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Looks good!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The 'Soft Hyphen' character (codepoint 0x00AD) is used to mark\n        a hyphenation possibility within a word in the absence of or\n        overriding dictionary hyphenation.\n\n        It is sometimes designed empty with no width (such as a control character),\n        sometimes the same as the traditional hyphen, sometimes double encoded with\n        the hyphen.\n\n        That being said, it is recommended to not include it in the font at all,\n        because discretionary hyphenation should be handled at the level of the\n        shaping engine, not the font. Also, even if present, the software would\n        not display that character.\n\n        More discussion at:\n        https://typedrawers.com/discussion/2046/special-dash-things-softhyphen-horizontalbar\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Does the font contain chws and vchw features?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/cjk_chws_feature>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_cjk_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The W3C recommends the addition of chws and vchw features to CJK fonts\n        to enhance the spacing of glyphs in environments which do not fully support\n        JLREQ layout rules.\n\n        The chws_tool utility (https://github.com/googlefonts/chws_tool) can be used\n        to add these features automatically.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Ensure component transforms do not perform scaling or rotation.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/transformed_components>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "No glyphs had components with scaling or rotation",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Ensure no GPOS7 lookups are present.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/gpos7>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font has no GPOS7 lookups",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Versions of fonttools >=4.14.0 (19 August 2020) perform an optimisation on\n        chained contextual lookups, expressing GSUB6 as GSUB5 and GPOS8 and GPOS7\n        where possible (when there are no suffixes/prefixes for all rules in\n        the lookup).\n\n        However, makeotf has never generated these lookup types and they are rare\n        in practice. Perhaps before of this, Mac's CoreText shaper does not correctly\n        interpret GPOS7, meaning that these lookups will be ignored by the shaper,\n        and fonts containing these lookups will have unintended positioning errors.\n\n        To fix this warning, rebuild the font with a recent version of fonttools.\n    ",
                    "result": "PASS",
                    "severity": 9
                },
                {
                    "description": "Ensure that the font can be rasterized by FreeType.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.adobe.fonts/check/freetype_rasterizer>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font can be rasterized by FreeType.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Malformed fonts can cause FreeType to crash.\n    ",
                    "result": "PASS",
                    "severity": 10
                },
                {
                    "description": "Font has the proper sfntVersion value?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.adobe.fonts/check/sfnt_version>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font has the correct sfntVersion value.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        OpenType fonts that contain TrueType outlines should use the value of 0x00010000\n        for the sfntVersion. OpenType fonts containing CFF data (version 1 or 2) should\n        use 0x4F54544F ('OTTO', when re-interpreted as a Tag) for sfntVersion.\n\n        Fonts with the wrong sfntVersion value are rejected by FreeType.\n\n        https://docs.microsoft.com/en-us/typography/opentype/spec/otff#table-directory\n    ",
                    "result": "PASS",
                    "severity": 10
                },
                {
                    "description": "Space and non-breaking space have the same width?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/whitespace_widths>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Space and non-breaking space have differing width: The space glyph named space is 398 font units wide, non-breaking space named (ch202) is 250 font units wide, and both should be positive and the same. GlyphsApp has \"Sidebearing arithmetic\" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations in\n        documents; such as the space before punctuation in languages that do that. It\n        avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It's also used\n        by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "Detect any interpolation issues in the font.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/interpolation_issues>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        When creating a variable font, the designer must make sure that corresponding\n        paths have the same start points across masters, as well as that corresponding\n        component shapes are placed in the same order within a glyph across masters.\n        If this is not done, the glyph will not interpolate correctly.\n\n        Here we check for the presence of potential interpolation errors using the\n        fontTools.varLib.interpolatable module.\n    ",
                    "result": "SKIP",
                    "severity": 4
                },
                {
                    "description": "Check math signs have the same width.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/math_signs_width>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The most common width is 500 among a set of 5 math glyphs.\nThe following math glyphs have a different width, though:\n\nWidth = 554:\nplus\n\nWidth = 472:\ngreater, less\n\nWidth = 788:\nequalorig\n\nWidth = 594:\ndivide\n\nWidth = 820:\napproxequal\n\nWidth = 475:\ngreaterequal, notequal, lessequal, equivalence\n [code: width-outliers]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        It is a common practice to have math signs sharing the same width\n        (preferably the same width as tabular figures accross the entire font family).\n\n        This probably comes from the will to avoid additional tabular math signs\n        knowing that their design can easily share the same width.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Checking Vertical Metric Linegaps.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/linegaps>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "hhea lineGap is not equal to 0. [code: hhea]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The LineGap value is a space added to the line height created by the union\n        of the (typo/hhea)Ascender and (typo/hhea)Descender. It is handled differently\n        according to the environment.\n\n        This leading value will be added above the text line in most desktop apps.\n        It will be shared above and under in web browsers, and ignored in Windows\n        if Use_Typo_Metrics is disabled.\n\n        For better linespacing consistency across platforms,\n        (typo/hhea)LineGap values must be 0.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Checking STAT table entries in static fonts.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/STAT_in_statics>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: has_STAT_table",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Adobe feature syntax allows for the definition of a STAT table. Fonts built\n        with a hand-coded STAT table in feature syntax may be built either as static\n        or variable, but will end up with the same STAT table.\n\n        This is a problem, because a STAT table which works on variable fonts\n        will not be appropriate for static instances. The examples in the OpenType spec\n        of non-variable fonts with a STAT table show that the table entries must be\n        restricted to those entries which refer to the static font's position in\n        the designspace. i.e. a Regular weight static should only have the following\n        entry for the weight axis:\n\n        <AxisIndex value=\"0\"/>\n        <Flags value=\"2\"/>  <!-- ElidableAxisValueName -->\n        <ValueNameID value=\"265\"/>  <!-- Regular -->\n        <Value value=\"400.0\"/>\n\n        However, if the STAT table intended for a variable font is compiled into a\n        static, it will have many entries for this axis. In this case, Windows will\n        read the first entry only, causing all instances to report themselves\n        as \"Thin Condensed\".\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check accent of Lcaron, dcaron, lcaron, tcaron (derived from com.google.fonts/check/alt_caron)",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/alt_caron:googlefonts>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "dcaron is decomposed and therefore could not be checked. Please check manually. [code: decomposed-outline]",
                            "status": "WARN",
                            "traceback": null
                        },
                        {
                            "message": "Lcaron is decomposed and therefore could not be checked. Please check manually. [code: decomposed-outline]",
                            "status": "WARN",
                            "traceback": null
                        },
                        {
                            "message": "lcaron is decomposed and therefore could not be checked. Please check manually. [code: decomposed-outline]",
                            "status": "WARN",
                            "traceback": null
                        },
                        {
                            "message": "tcaron is decomposed and therefore could not be checked. Please check manually. [code: decomposed-outline]",
                            "status": "WARN",
                            "traceback": null
                        },
                        {
                            "message": "Looks good!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Lcaron, dcaron, lcaron, tcaron should NOT be composed with quoteright\n        or quotesingle or comma or caron(comb). It should be composed with a\n        distinctive glyph which doesn't look like an apostrophe.\n\n        Source:\n        https://ilovetypography.com/2009/01/24/on-diacritics/\n        http://diacritics.typo.cz/index.php?id=5\n        https://www.typotheque.com/articles/lcaron\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Name table records must not have trailing spaces.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/name/trailing_spaces>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Name table record with key = (1, 0, 0, 5) has trailing spaces that must be removed: 'Version 1.0 ' [code: trailing-space]",
                            "status": "FAIL",
                            "traceback": null
                        },
                        {
                            "message": "Name table record with key = (1, 0, 0, 8) has trailing spaces that must be removed: 'Takis Kats[...]iopoulos  ' [code: trailing-space]",
                            "status": "FAIL",
                            "traceback": null
                        },
                        {
                            "message": "Name table record with key = (3, 1, 1033, 5) has trailing spaces that must be removed: 'Version 1.0 ' [code: trailing-space]",
                            "status": "FAIL",
                            "traceback": null
                        },
                        {
                            "message": "Name table record with key = (3, 1, 1033, 8) has trailing spaces that must be removed: 'Takis Kats[...]iopoulos  ' [code: trailing-space]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "result": "FAIL"
                },
                {
                    "description": "Checking OS/2 usWinAscent & usWinDescent.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/family/win_ascent_and_descent>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2.usWinAscent value should be equal or greater than 1083, but got 877 instead [code: ascent]",
                            "status": "FAIL",
                            "traceback": null
                        },
                        {
                            "message": "OS/2.usWinDescent value should be equal or greater than 315, but got 242 instead [code: descent]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        A font's winAscent and winDescent values should be greater than or equal to\n        the head table's yMax, abs(yMin) values. If they are less than these values,\n        clipping can occur on Windows platforms\n        (https://github.com/RedHatBrand/Overpass/issues/33).\n\n        If the font includes tall/deep writing systems such as Arabic or Devanagari,\n        the winAscent and winDescent can be greater than the yMax and absolute yMin\n        values to accommodate vowel marks.\n\n        When the 'win' Metrics are significantly greater than the UPM, the linespacing\n        can appear too loose. To counteract this, enabling the OS/2 fsSelection\n        bit 7 (Use_Typo_Metrics), will force Windows to use the OS/2 'typo' values\n        instead. This means the font developer can control the linespacing with\n        the 'typo' values, whilst avoiding clipping by setting the 'win' values to\n        values greater than the yMax and absolute yMin.\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "Checking OS/2 Metrics match hhea Metrics.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/os2_metrics_match_hhea>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2 sTypoAscender (631) and hhea ascent (877) must be equal. [code: ascender]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        OS/2 and hhea vertical metric values should match. This will produce the\n        same linespacing on Mac, GNU+Linux and Windows.\n\n        - Mac OS X uses the hhea values.\n        - Windows uses OS/2 or Win, depending on the OS or fsSelection bit value.\n\n        When OS/2 and hhea vertical metrics match, the same linespacing results on\n        macOS, GNU+Linux and Windows. Note that fixing this issue in a previously\n        released font may cause reflow in user documents and unhappy users.\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "Checking with ots-sanitize.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/ots>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "ots-sanitize passed this file",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Do we have the latest version of FontBakery installed?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/fontbakery_version>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "FontBakery is up-to-date.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Running old versions of FontBakery can lead to a poor report which may\n        include false WARNs and FAILs due do bugs, as well as outdated\n        quality assurance criteria.\n\n        Older versions will also not report problems that are detected by new checks\n        added to the tool in more recent updates.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Font contains '.notdef' as its first glyph?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/mandatory_glyphs>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The OpenType specification v1.8.2 recommends that the first glyph is the\n        '.notdef' glyph without a codepoint assigned and with a drawing:\n\n        The .notdef glyph is very important for providing the user feedback\n        that a glyph is not found in the font. This glyph should not be left\n        without an outline as the user will only see what looks like a space\n        if a glyph is missing and not be aware of the active font\u2019s limitation.\n\n        https://docs.microsoft.com/en-us/typography/opentype/spec/recom#glyph-0-the-notdef-glyph\n\n        Pre-v1.8, it was recommended that fonts should also contain 'space', 'CR'\n        and '.null' glyphs. This might have been relevant for MacOS 9 applications.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Font contains glyphs for whitespace characters?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/whitespace_glyphs>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font contains glyphs for whitespace characters.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Font has **proper** whitespace glyph names?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/whitespace_glyphnames>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Glyph 0x00A0 is called \"ch202\": Change to \"uni00A0\" [code: non-compliant-00a0]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This check enforces adherence to recommended whitespace\n        (codepoints 0020 and 00A0) glyph names according to the Adobe Glyph List.\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "Whitespace glyphs have ink?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/whitespace_ink>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Glyph 'uni2009' has ink. It needs to be replaced by an empty glyph. [code: has-ink]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "result": "FAIL"
                },
                {
                    "description": "Font contains all required tables?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/required_tables>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "This font contains the following optional tables:\n\n\t- cvt \n\n\t- fpgm\n\n\t- loca\n\n\t- prep\n\n\t- GPOS\n\n\t- GSUB\n\n\t- gasp [code: optional-tables]",
                            "status": "INFO",
                            "traceback": null
                        },
                        {
                            "message": "Font contains all required tables.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the OpenType spec\n        https://docs.microsoft.com/en-us/typography/opentype/spec/otff#required-tables\n\n        Whether TrueType or CFF outlines are used in an OpenType font, the following\n        tables are required for the font to function correctly:\n\n        - cmap (Character to glyph mapping)\u23ce\n        - head (Font header)\u23ce\n        - hhea (Horizontal header)\u23ce\n        - hmtx (Horizontal metrics)\u23ce\n        - maxp (Maximum profile)\u23ce\n        - name (Naming table)\u23ce\n        - OS/2 (OS/2 and Windows specific metrics)\u23ce\n        - post (PostScript information)\n\n        The spec also documents that variable fonts require the following table:\n\n        - STAT (Style attributes)\n\n        Depending on the typeface and coverage of a font, certain tables are\n        recommended for optimum quality.\n\n        For example:\u23ce\n        - the performance of a non-linear font is improved if the VDMX, LTSH,\n          and hdmx tables are present.\u23ce\n        - Non-monospaced Latin fonts should have a kern table.\u23ce\n        - A gasp table is necessary if a designer wants to influence the sizes\n          at which grayscaling is used under Windows. Etc.\n    ",
                    "result": "INFO"
                },
                {
                    "description": "Are there unwanted tables?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/unwanted_tables>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The following unwanted font tables were found:\n\n* FFTM - Table contains redundant FontForge timestamp info\n\nThey can be removed with the 'fix-unwanted-tables' script provided by gftools. [code: unwanted-tables]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Some font editors store source data in their own SFNT tables, and these\n        can sometimes sneak into final release files, which should only have\n        OpenType spec tables.\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "Check correctness of STAT table strings",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/STAT_strings>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: has_STAT_table",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        On the STAT table, the \"Italic\" keyword must not be used on AxisValues\n        for variation axes other than 'ital'.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Glyph names are all valid?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/valid_glyphnames>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The following glyph names do not comply with naming conventions: macron#1\n\n A glyph name must be entirely comprised of characters from the following set: A-Z a-z 0-9 .(period) _(underscore). A glyph name must not start with a digit or period. There are a few exceptions such as the special glyph \".notdef\". The glyph names \"twocents\", \"a1\", and \"_\" are all valid, while \"2cents\" and \".twocents\" are not. [code: found-invalid-names]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Microsoft's recommendations for OpenType Fonts states the following:\n\n        'NOTE: The PostScript glyph name must be no longer than 31 characters,\n        include only uppercase or lowercase English letters, European digits,\n        the period or the underscore, i.e. from the set [A-Za-z0-9_.] and\n        should start with a letter, except the special glyph name \".notdef\"\n        which starts with a period.'\n\n        https://docs.microsoft.com/en-us/typography/opentype/spec/recom#post-table\n\n\n        In practice, though, particularly in modern environments, glyph names\n        can be as long as 63 characters.\n\n        According to the \"Adobe Glyph List Specification\" available at:\n\n        https://github.com/adobe-type-tools/agl-specification\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "Font contains unique glyph names?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/unique_glyphnames>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "These glyph names occur more than once: ['macron'] [code: duplicated-glyph-names]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Duplicate glyph names prevent font installation on Mac OS X.\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "List all superfamily filepaths",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/superfamily/list>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic [code: family-path]",
                            "status": "INFO",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This is a merely informative check that lists all sibling families\n        detected by fontbakery.\n\n        Only the fontfiles in these directories will be considered in\n        superfamily-level checks.\n    ",
                    "result": "INFO"
                },
                {
                    "description": "Each font in set of sibling families must have the same set of vertical metrics values.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/superfamily/vertical_metrics>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Sibling families were not detected.",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        We may want all fonts within a super-family (all sibling families) to have\n        the same vertical metrics so their line spacing is consistent\n        across the super-family.\n\n        This is an experimental extended version of\n        com.google.fonts/check/family/vertical_metrics and for now it will only\n        result in WARNs.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Ensure indic fonts have the Indian Rupee Sign glyph.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/rupee>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_indic_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Per Bureau of Indian Standards every font supporting one of the\n        official Indian languages needs to include Unicode Character\n        \u201c\u20b9\u201d (U+20B9) Indian Rupee Sign.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check font contains no unreachable glyphs",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/unreachable_glyphs>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The following glyphs could not be reached by codepoint or substitution rules:\n\n\t- Acute\n\n\t- Acutesmall\n\n\t- Breve\n\n\t- Brevesmall\n\n\t- Caron\n\n\t- Caronsmall\n\n\t- Cedilla\n\n\t- Cedillasmall\n\n\t- Circumflex\n\n\t- Circumflexsmall\n\n\t- Commaaccent\n\n\t- Commaaccentsmall\n\n\t- Dieresis\n\n\t- Dieresissmall\n\n\t- Dotaccent\n\n\t- Dotaccentsmall\n\n\t- Grave\n\n\t- Gravesmall\n\n\t- H18533\n\n\t- H18543\n\n\t- H18551\n\n\t- H22073\n\n\t- Hungarumlaut\n\n\t- Hungarumlautsmall\n\n\t- Macron\n\n\t- Macronsmall\n\n\t- Ogonek\n\n\t- Ogoneksmall\n\n\t- Ring\n\n\t- Ringsmall\n\n\t- Tilde\n\n\t- Tildesmall\n\n\t- afii61248\n\n\t- glyph345\n\n\t- glyph346\n\n\t- glyph347\n\n\t- glyph361\n\n\t- glyph365\n\n\t- glyph369\n\n\t- glyph907\n\n\t- greekmacron\n\n\t- nonmarkingreturn\n\n\t- vrachy\n [code: unreachable-glyphs]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Glyphs are either accessible directly through Unicode codepoints or through\n        substitution rules.\n\n        In Color Fonts, glyphs are also referenced by the COLR table.\n\n        Any glyphs not accessible by either of these means\n        are redundant and serve only to increase the font's file size.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Check if each glyph has the recommended amount of contours.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/contour_count>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "This check inspects the glyph outlines and detects the total number of contours in each of them. The expected values are infered from the typical ammounts of contours observed in a large collection of reference font families. The divergences listed below may simply indicate a significantly different design on some of your glyphs. On the other hand, some of these may flag actual bugs in the font such as glyphs mapped to an incorrect codepoint. Please consider reviewing the design and codepoint assignment of these to make sure they are correct.\n\nThe following glyphs do not have the recommended number of contours:\n\n\t- Glyph name: Kappa\tContours detected: 2\tExpected: 1\n\n\t- Glyph name: uni2009\tContours detected: 2\tExpected: 0\n\n\t- Glyph name: second\tContours detected: 2\tExpected: 4\n\n\t- Glyph name: rupiah\tContours detected: 4\tExpected: 3\n\n\t- Glyph name: uniFFFC\tContours detected: 16\tExpected: 22\n\n\t- Glyph name: Kappa\tContours detected: 2\tExpected: 1\n\n\t- Glyph name: fi\tContours detected: 1\tExpected: 3\n\n\t- Glyph name: fl\tContours detected: 1\tExpected: 2\n\n\t- Glyph name: uni2009\tContours detected: 2\tExpected: 0\n\n\t- Glyph name: uniFFFC\tContours detected: 16\tExpected: 22\n [code: contour-count]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Does the font contain a soft hyphen?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/soft_hyphen>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Looks good!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The 'Soft Hyphen' character (codepoint 0x00AD) is used to mark\n        a hyphenation possibility within a word in the absence of or\n        overriding dictionary hyphenation.\n\n        It is sometimes designed empty with no width (such as a control character),\n        sometimes the same as the traditional hyphen, sometimes double encoded with\n        the hyphen.\n\n        That being said, it is recommended to not include it in the font at all,\n        because discretionary hyphenation should be handled at the level of the\n        shaping engine, not the font. Also, even if present, the software would\n        not display that character.\n\n        More discussion at:\n        https://typedrawers.com/discussion/2046/special-dash-things-softhyphen-horizontalbar\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Does the font contain chws and vchw features?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/cjk_chws_feature>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_cjk_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The W3C recommends the addition of chws and vchw features to CJK fonts\n        to enhance the spacing of glyphs in environments which do not fully support\n        JLREQ layout rules.\n\n        The chws_tool utility (https://github.com/googlefonts/chws_tool) can be used\n        to add these features automatically.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Ensure component transforms do not perform scaling or rotation.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/transformed_components>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "No glyphs had components with scaling or rotation",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Ensure no GPOS7 lookups are present.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/gpos7>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font has no GPOS7 lookups",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Versions of fonttools >=4.14.0 (19 August 2020) perform an optimisation on\n        chained contextual lookups, expressing GSUB6 as GSUB5 and GPOS8 and GPOS7\n        where possible (when there are no suffixes/prefixes for all rules in\n        the lookup).\n\n        However, makeotf has never generated these lookup types and they are rare\n        in practice. Perhaps before of this, Mac's CoreText shaper does not correctly\n        interpret GPOS7, meaning that these lookups will be ignored by the shaper,\n        and fonts containing these lookups will have unintended positioning errors.\n\n        To fix this warning, rebuild the font with a recent version of fonttools.\n    ",
                    "result": "PASS",
                    "severity": 9
                },
                {
                    "description": "Ensure that the font can be rasterized by FreeType.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.adobe.fonts/check/freetype_rasterizer>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font can be rasterized by FreeType.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Malformed fonts can cause FreeType to crash.\n    ",
                    "result": "PASS",
                    "severity": 10
                },
                {
                    "description": "Font has the proper sfntVersion value?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.adobe.fonts/check/sfnt_version>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font has the correct sfntVersion value.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        OpenType fonts that contain TrueType outlines should use the value of 0x00010000\n        for the sfntVersion. OpenType fonts containing CFF data (version 1 or 2) should\n        use 0x4F54544F ('OTTO', when re-interpreted as a Tag) for sfntVersion.\n\n        Fonts with the wrong sfntVersion value are rejected by FreeType.\n\n        https://docs.microsoft.com/en-us/typography/opentype/spec/otff#table-directory\n    ",
                    "result": "PASS",
                    "severity": 10
                },
                {
                    "description": "Space and non-breaking space have the same width?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/whitespace_widths>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Space and non-breaking space have differing width: The space glyph named space is 398 font units wide, non-breaking space named (ch202) is 250 font units wide, and both should be positive and the same. GlyphsApp has \"Sidebearing arithmetic\" (https://glyphsapp.com/tutorials/spacing) which allows you to set the non-breaking space width to always equal the space width. [code: different-widths]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations in\n        documents; such as the space before punctuation in languages that do that. It\n        avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It's also used\n        by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "Detect any interpolation issues in the font.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/interpolation_issues>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        When creating a variable font, the designer must make sure that corresponding\n        paths have the same start points across masters, as well as that corresponding\n        component shapes are placed in the same order within a glyph across masters.\n        If this is not done, the glyph will not interpolate correctly.\n\n        Here we check for the presence of potential interpolation errors using the\n        fontTools.varLib.interpolatable module.\n    ",
                    "result": "SKIP",
                    "severity": 4
                },
                {
                    "description": "Check math signs have the same width.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/math_signs_width>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The most common width is 500 among a set of 4 math glyphs.\nThe following math glyphs have a different width, though:\n\nWidth = 629:\nplus\n\nWidth = 472:\nless, greater\n\nWidth = 722:\nequal\n\nWidth = 594:\ndivide\n\nWidth = 628:\nminus\n\nWidth = 820:\napproxequal\n\nWidth = 475:\ngreaterequal, lessequal, equivalence, notequal\n [code: width-outliers]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        It is a common practice to have math signs sharing the same width\n        (preferably the same width as tabular figures accross the entire font family).\n\n        This probably comes from the will to avoid additional tabular math signs\n        knowing that their design can easily share the same width.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Checking Vertical Metric Linegaps.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/linegaps>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "hhea lineGap is not equal to 0. [code: hhea]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The LineGap value is a space added to the line height created by the union\n        of the (typo/hhea)Ascender and (typo/hhea)Descender. It is handled differently\n        according to the environment.\n\n        This leading value will be added above the text line in most desktop apps.\n        It will be shared above and under in web browsers, and ignored in Windows\n        if Use_Typo_Metrics is disabled.\n\n        For better linespacing consistency across platforms,\n        (typo/hhea)LineGap values must be 0.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Checking STAT table entries in static fonts.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/STAT_in_statics>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: has_STAT_table",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Adobe feature syntax allows for the definition of a STAT table. Fonts built\n        with a hand-coded STAT table in feature syntax may be built either as static\n        or variable, but will end up with the same STAT table.\n\n        This is a problem, because a STAT table which works on variable fonts\n        will not be appropriate for static instances. The examples in the OpenType spec\n        of non-variable fonts with a STAT table show that the table entries must be\n        restricted to those entries which refer to the static font's position in\n        the designspace. i.e. a Regular weight static should only have the following\n        entry for the weight axis:\n\n        <AxisIndex value=\"0\"/>\n        <Flags value=\"2\"/>  <!-- ElidableAxisValueName -->\n        <ValueNameID value=\"265\"/>  <!-- Regular -->\n        <Value value=\"400.0\"/>\n\n        However, if the STAT table intended for a variable font is compiled into a\n        static, it will have many entries for this axis. In this case, Windows will\n        read the first entry only, causing all instances to report themselves\n        as \"Thin Condensed\".\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check accent of Lcaron, dcaron, lcaron, tcaron (derived from com.google.fonts/check/alt_caron)",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/alt_caron:googlefonts>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "dcaron is decomposed and therefore could not be checked. Please check manually. [code: decomposed-outline]",
                            "status": "WARN",
                            "traceback": null
                        },
                        {
                            "message": "Lcaron is decomposed and therefore could not be checked. Please check manually. [code: decomposed-outline]",
                            "status": "WARN",
                            "traceback": null
                        },
                        {
                            "message": "lcaron is decomposed and therefore could not be checked. Please check manually. [code: decomposed-outline]",
                            "status": "WARN",
                            "traceback": null
                        },
                        {
                            "message": "tcaron is decomposed and therefore could not be checked. Please check manually. [code: decomposed-outline]",
                            "status": "WARN",
                            "traceback": null
                        },
                        {
                            "message": "Looks good!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Lcaron, dcaron, lcaron, tcaron should NOT be composed with quoteright\n        or quotesingle or comma or caron(comb). It should be composed with a\n        distinctive glyph which doesn't look like an apostrophe.\n\n        Source:\n        https://ilovetypography.com/2009/01/24/on-diacritics/\n        http://diacritics.typo.cz/index.php?id=5\n        https://www.typotheque.com/articles/lcaron\n    ",
                    "result": "WARN"
                }
            ],
            "key": [
                "<Section: Universal>",
                null,
                null
            ],
            "result": {
                "FAIL": 33,
                "INFO": 8,
                "PASS": 41,
                "SKIP": 24,
                "WARN": 20
            }
        },
        {
            "checks": [
                {
                    "description": "Is the CFF subr/gsubr call depth > 10?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.cff>",
                        "<FontBakeryCheck:com.adobe.fonts/check/cff_call_depth>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_cff",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Per \"The Type 2 Charstring Format, Technical Note #5177\",\n        the \"Subr nesting, stack limit\" is 10.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Is the CFF2 subr/gsubr call depth > 10?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.cff>",
                        "<FontBakeryCheck:com.adobe.fonts/check/cff2_call_depth>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_cff2",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Per \"The CFF2 CharString Format\", the \"Subr nesting, stack limit\" is 10.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Does the font use deprecated CFF operators or operations?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.cff>",
                        "<FontBakeryCheck:com.adobe.fonts/check/cff_deprecated_operators>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_cff",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The 'dotsection' operator and the use of 'endchar' to build accented characters\n        from the Adobe Standard Encoding Character Set (\"seac\") are deprecated in CFF.\n        Adobe recommends repairing any fonts that use these, especially endchar-as-seac,\n        because a rendering issue was discovered in Microsoft Word with a font that\n        makes use of this operation. The check treats that usage as a FAIL.\n        There are no known ill effects of using dotsection, so that check is a WARN.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Is the CFF subr/gsubr call depth > 10?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.cff>",
                        "<FontBakeryCheck:com.adobe.fonts/check/cff_call_depth>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_cff",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Per \"The Type 2 Charstring Format, Technical Note #5177\",\n        the \"Subr nesting, stack limit\" is 10.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Is the CFF2 subr/gsubr call depth > 10?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.cff>",
                        "<FontBakeryCheck:com.adobe.fonts/check/cff2_call_depth>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_cff2",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Per \"The CFF2 CharString Format\", the \"Subr nesting, stack limit\" is 10.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Does the font use deprecated CFF operators or operations?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.cff>",
                        "<FontBakeryCheck:com.adobe.fonts/check/cff_deprecated_operators>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_cff",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The 'dotsection' operator and the use of 'endchar' to build accented characters\n        from the Adobe Standard Encoding Character Set (\"seac\") are deprecated in CFF.\n        Adobe recommends repairing any fonts that use these, especially endchar-as-seac,\n        because a rendering issue was discovered in Microsoft Word with a font that\n        makes use of this operation. The check treats that usage as a FAIL.\n        There are no known ill effects of using dotsection, so that check is a WARN.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Is the CFF subr/gsubr call depth > 10?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.cff>",
                        "<FontBakeryCheck:com.adobe.fonts/check/cff_call_depth>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_cff",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Per \"The Type 2 Charstring Format, Technical Note #5177\",\n        the \"Subr nesting, stack limit\" is 10.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Is the CFF2 subr/gsubr call depth > 10?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.cff>",
                        "<FontBakeryCheck:com.adobe.fonts/check/cff2_call_depth>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_cff2",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Per \"The CFF2 CharString Format\", the \"Subr nesting, stack limit\" is 10.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Does the font use deprecated CFF operators or operations?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.cff>",
                        "<FontBakeryCheck:com.adobe.fonts/check/cff_deprecated_operators>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_cff",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The 'dotsection' operator and the use of 'endchar' to build accented characters\n        from the Adobe Standard Encoding Character Set (\"seac\") are deprecated in CFF.\n        Adobe recommends repairing any fonts that use these, especially endchar-as-seac,\n        because a rendering issue was discovered in Microsoft Word with a font that\n        makes use of this operation. The check treats that usage as a FAIL.\n        There are no known ill effects of using dotsection, so that check is a WARN.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Is the CFF subr/gsubr call depth > 10?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.cff>",
                        "<FontBakeryCheck:com.adobe.fonts/check/cff_call_depth>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_cff",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Per \"The Type 2 Charstring Format, Technical Note #5177\",\n        the \"Subr nesting, stack limit\" is 10.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Is the CFF2 subr/gsubr call depth > 10?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.cff>",
                        "<FontBakeryCheck:com.adobe.fonts/check/cff2_call_depth>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_cff2",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Per \"The CFF2 CharString Format\", the \"Subr nesting, stack limit\" is 10.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Does the font use deprecated CFF operators or operations?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.cff>",
                        "<FontBakeryCheck:com.adobe.fonts/check/cff_deprecated_operators>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_cff",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The 'dotsection' operator and the use of 'endchar' to build accented characters\n        from the Adobe Standard Encoding Character Set (\"seac\") are deprecated in CFF.\n        Adobe recommends repairing any fonts that use these, especially endchar-as-seac,\n        because a rendering issue was discovered in Microsoft Word with a font that\n        makes use of this operation. The check treats that usage as a FAIL.\n        There are no known ill effects of using dotsection, so that check is a WARN.\n    ",
                    "result": "SKIP"
                }
            ],
            "key": [
                "<Section: fontbakery.profiles.cff>",
                null,
                null
            ],
            "result": {
                "SKIP": 12
            }
        },
        {
            "checks": [
                {
                    "description": "Fonts have equal unicode encodings?",
                    "key": [
                        "<Section: fontbakery.profiles.cmap>",
                        "<FontBakeryCheck:com.google.fonts/check/family/equal_unicode_encodings>",
                        []
                    ],
                    "logs": [
                        {
                            "message": "Fonts have equal unicode encodings.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                }
            ],
            "key": [
                "<Section: fontbakery.profiles.cmap>",
                null,
                null
            ],
            "result": {
                "PASS": 1
            }
        },
        {
            "checks": [
                {
                    "description": "Make sure all font files have the same version value.",
                    "key": [
                        "<Section: fontbakery.profiles.head>",
                        "<FontBakeryCheck:com.google.fonts/check/family/equal_font_versions>",
                        []
                    ],
                    "logs": [
                        {
                            "message": "All font files have the same version.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Checking unitsPerEm value is reasonable.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.head>",
                        "<FontBakeryCheck:com.google.fonts/check/unitsperem>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Filtered: Google Fonts has a stricter policy which is enforced by com.google.fonts/check/unitsperem_strict",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the OpenType spec:\n\n        The value of unitsPerEm at the head table must be a value\n        between 16 and 16384. Any value in this range is valid.\n\n        In fonts that have TrueType outlines, a power of 2 is recommended\n        as this allows performance optimizations in some rasterizers.\n\n        But 1000 is a commonly used value. And 2000 may become\n        increasingly more common on Variable Fonts.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Checking font version fields (head and name table).",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.head>",
                        "<FontBakeryCheck:com.google.fonts/check/font_version>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "All font version fields match.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Checking head.macStyle value.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.head>",
                        "<FontBakeryCheck:com.google.fonts/check/mac_style>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: style",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The values of the flags on the macStyle entry on the 'head' OpenType table\n        that describe whether a font is bold and/or italic must be coherent with the\n        actual style of the font as inferred by its filename.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Checking unitsPerEm value is reasonable.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.head>",
                        "<FontBakeryCheck:com.google.fonts/check/unitsperem>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Filtered: Google Fonts has a stricter policy which is enforced by com.google.fonts/check/unitsperem_strict",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the OpenType spec:\n\n        The value of unitsPerEm at the head table must be a value\n        between 16 and 16384. Any value in this range is valid.\n\n        In fonts that have TrueType outlines, a power of 2 is recommended\n        as this allows performance optimizations in some rasterizers.\n\n        But 1000 is a commonly used value. And 2000 may become\n        increasingly more common on Variable Fonts.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Checking font version fields (head and name table).",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.head>",
                        "<FontBakeryCheck:com.google.fonts/check/font_version>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "All font version fields match.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Checking head.macStyle value.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.head>",
                        "<FontBakeryCheck:com.google.fonts/check/mac_style>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: style",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The values of the flags on the macStyle entry on the 'head' OpenType table\n        that describe whether a font is bold and/or italic must be coherent with the\n        actual style of the font as inferred by its filename.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Checking unitsPerEm value is reasonable.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.head>",
                        "<FontBakeryCheck:com.google.fonts/check/unitsperem>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Filtered: Google Fonts has a stricter policy which is enforced by com.google.fonts/check/unitsperem_strict",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the OpenType spec:\n\n        The value of unitsPerEm at the head table must be a value\n        between 16 and 16384. Any value in this range is valid.\n\n        In fonts that have TrueType outlines, a power of 2 is recommended\n        as this allows performance optimizations in some rasterizers.\n\n        But 1000 is a commonly used value. And 2000 may become\n        increasingly more common on Variable Fonts.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Checking font version fields (head and name table).",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.head>",
                        "<FontBakeryCheck:com.google.fonts/check/font_version>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "All font version fields match.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Checking head.macStyle value.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.head>",
                        "<FontBakeryCheck:com.google.fonts/check/mac_style>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: style",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The values of the flags on the macStyle entry on the 'head' OpenType table\n        that describe whether a font is bold and/or italic must be coherent with the\n        actual style of the font as inferred by its filename.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Checking unitsPerEm value is reasonable.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.head>",
                        "<FontBakeryCheck:com.google.fonts/check/unitsperem>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Filtered: Google Fonts has a stricter policy which is enforced by com.google.fonts/check/unitsperem_strict",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the OpenType spec:\n\n        The value of unitsPerEm at the head table must be a value\n        between 16 and 16384. Any value in this range is valid.\n\n        In fonts that have TrueType outlines, a power of 2 is recommended\n        as this allows performance optimizations in some rasterizers.\n\n        But 1000 is a commonly used value. And 2000 may become\n        increasingly more common on Variable Fonts.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Checking font version fields (head and name table).",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.head>",
                        "<FontBakeryCheck:com.google.fonts/check/font_version>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "All font version fields match.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Checking head.macStyle value.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.head>",
                        "<FontBakeryCheck:com.google.fonts/check/mac_style>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: style",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The values of the flags on the macStyle entry on the 'head' OpenType table\n        that describe whether a font is bold and/or italic must be coherent with the\n        actual style of the font as inferred by its filename.\n    ",
                    "result": "SKIP"
                }
            ],
            "key": [
                "<Section: fontbakery.profiles.head>",
                null,
                null
            ],
            "result": {
                "PASS": 5,
                "SKIP": 8
            }
        },
        {
            "checks": [
                {
                    "description": "Fonts have consistent PANOSE proportion?",
                    "key": [
                        "<Section: fontbakery.profiles.os2>",
                        "<FontBakeryCheck:com.google.fonts/check/family/panose_proportion>",
                        []
                    ],
                    "logs": [
                        {
                            "message": "Fonts have consistent PANOSE proportion.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Fonts have consistent PANOSE family type?",
                    "key": [
                        "<Section: fontbakery.profiles.os2>",
                        "<FontBakeryCheck:com.google.fonts/check/family/panose_familytype>",
                        []
                    ],
                    "logs": [
                        {
                            "message": "Fonts have consistent PANOSE family type.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Check that OS/2.fsSelection bold & italic settings are unique for each NameID1",
                    "key": [
                        "<Section: fontbakery.profiles.os2>",
                        "<FontBakeryCheck:com.adobe.fonts/check/family/bold_italic_unique_for_nameid1>",
                        []
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: RIBBI_ttFonts",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Per the OpenType spec: name ID 1 'is used in combination with Font Subfamily\n        name (name ID 2), and should be shared among at most four fonts that differ\n        only in weight or style.\n\n        This four-way distinction should also be reflected in the OS/2.fsSelection\n        field, using bits 0 and 5.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check if OS/2 xAvgCharWidth is correct.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.os2>",
                        "<FontBakeryCheck:com.google.fonts/check/xavgcharwidth>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2 xAvgCharWidth value is correct.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Check if OS/2 fsSelection matches head macStyle bold and italic bits.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.os2>",
                        "<FontBakeryCheck:com.adobe.fonts/check/fsselection_matches_macstyle>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The OS/2.fsSelection and head.macStyle bold and italic settings match.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The bold and italic bits in OS/2.fsSelection must match the bold and italic\n        bits in head.macStyle per the OpenType spec.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check code page character ranges",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.os2>",
                        "<FontBakeryCheck:com.google.fonts/check/code_pages>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "At least one code page is defined.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        At least some programs (such as Word and Sublime Text) under Windows 7\n        do not recognize fonts unless code page bits are properly set on the\n        ulCodePageRange1 (and/or ulCodePageRange2) fields of the OS/2 table.\n\n        More specifically, the fonts are selectable in the font menu, but whichever\n        Windows API these applications use considers them unsuitable for any\n        character set, so anything set in these fonts is rendered with Arial as a\n        fallback font.\n\n        This check currently does not identify which code pages should be set.\n        Auto-detecting coverage is not trivial since the OpenType specification\n        leaves the interpretation of whether a given code page is \"functional\"\n        or not open to the font developer to decide.\n\n        So here we simply detect as a FAIL when a given font has no code page\n        declared at all.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Checking OS/2 achVendID against configuration.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.os2>",
                        "<FontBakeryCheck:com.thetypefounders/check/vendor_id>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Add the `vendor_id` key to a `fontbakery.yaml` file on your font project directory to enable this check.\nYou'll also need to use the `--configuration` flag when invoking fontbakery.",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        When a font project's Vendor ID is specified explicitly on FontBakery's\n        configuration file, all binaries must have a matching vendor identifier\n        value in the OS/2 table.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Checking OS/2 fsSelection value.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.os2>",
                        "<FontBakeryCheck:com.google.fonts/check/fsselection>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: style",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "result": "SKIP"
                },
                {
                    "description": "Check if OS/2 xAvgCharWidth is correct.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.os2>",
                        "<FontBakeryCheck:com.google.fonts/check/xavgcharwidth>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2 xAvgCharWidth value is correct.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Check if OS/2 fsSelection matches head macStyle bold and italic bits.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.os2>",
                        "<FontBakeryCheck:com.adobe.fonts/check/fsselection_matches_macstyle>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The OS/2.fsSelection and head.macStyle bold and italic settings match.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The bold and italic bits in OS/2.fsSelection must match the bold and italic\n        bits in head.macStyle per the OpenType spec.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check code page character ranges",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.os2>",
                        "<FontBakeryCheck:com.google.fonts/check/code_pages>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "At least one code page is defined.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        At least some programs (such as Word and Sublime Text) under Windows 7\n        do not recognize fonts unless code page bits are properly set on the\n        ulCodePageRange1 (and/or ulCodePageRange2) fields of the OS/2 table.\n\n        More specifically, the fonts are selectable in the font menu, but whichever\n        Windows API these applications use considers them unsuitable for any\n        character set, so anything set in these fonts is rendered with Arial as a\n        fallback font.\n\n        This check currently does not identify which code pages should be set.\n        Auto-detecting coverage is not trivial since the OpenType specification\n        leaves the interpretation of whether a given code page is \"functional\"\n        or not open to the font developer to decide.\n\n        So here we simply detect as a FAIL when a given font has no code page\n        declared at all.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Checking OS/2 achVendID against configuration.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.os2>",
                        "<FontBakeryCheck:com.thetypefounders/check/vendor_id>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Add the `vendor_id` key to a `fontbakery.yaml` file on your font project directory to enable this check.\nYou'll also need to use the `--configuration` flag when invoking fontbakery.",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        When a font project's Vendor ID is specified explicitly on FontBakery's\n        configuration file, all binaries must have a matching vendor identifier\n        value in the OS/2 table.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Checking OS/2 fsSelection value.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.os2>",
                        "<FontBakeryCheck:com.google.fonts/check/fsselection>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: style",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "result": "SKIP"
                },
                {
                    "description": "Check if OS/2 xAvgCharWidth is correct.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.os2>",
                        "<FontBakeryCheck:com.google.fonts/check/xavgcharwidth>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2 xAvgCharWidth is 489 but it should be 487 which corresponds to the average of the widths of all glyphs in the font. These are similar values, which may be a symptom of the slightly different calculation of the xAvgCharWidth value in font editors. There's further discussion on this at https://github.com/fonttools/fontbakery/issues/1622 [code: xAvgCharWidth-close]",
                            "status": "INFO",
                            "traceback": null
                        }
                    ],
                    "result": "INFO"
                },
                {
                    "description": "Check if OS/2 fsSelection matches head macStyle bold and italic bits.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.os2>",
                        "<FontBakeryCheck:com.adobe.fonts/check/fsselection_matches_macstyle>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The OS/2.fsSelection and head.macStyle bold and italic settings match.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The bold and italic bits in OS/2.fsSelection must match the bold and italic\n        bits in head.macStyle per the OpenType spec.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check code page character ranges",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.os2>",
                        "<FontBakeryCheck:com.google.fonts/check/code_pages>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "At least one code page is defined.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        At least some programs (such as Word and Sublime Text) under Windows 7\n        do not recognize fonts unless code page bits are properly set on the\n        ulCodePageRange1 (and/or ulCodePageRange2) fields of the OS/2 table.\n\n        More specifically, the fonts are selectable in the font menu, but whichever\n        Windows API these applications use considers them unsuitable for any\n        character set, so anything set in these fonts is rendered with Arial as a\n        fallback font.\n\n        This check currently does not identify which code pages should be set.\n        Auto-detecting coverage is not trivial since the OpenType specification\n        leaves the interpretation of whether a given code page is \"functional\"\n        or not open to the font developer to decide.\n\n        So here we simply detect as a FAIL when a given font has no code page\n        declared at all.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Checking OS/2 achVendID against configuration.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.os2>",
                        "<FontBakeryCheck:com.thetypefounders/check/vendor_id>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Add the `vendor_id` key to a `fontbakery.yaml` file on your font project directory to enable this check.\nYou'll also need to use the `--configuration` flag when invoking fontbakery.",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        When a font project's Vendor ID is specified explicitly on FontBakery's\n        configuration file, all binaries must have a matching vendor identifier\n        value in the OS/2 table.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Checking OS/2 fsSelection value.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.os2>",
                        "<FontBakeryCheck:com.google.fonts/check/fsselection>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: style",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "result": "SKIP"
                },
                {
                    "description": "Check if OS/2 xAvgCharWidth is correct.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.os2>",
                        "<FontBakeryCheck:com.google.fonts/check/xavgcharwidth>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2 xAvgCharWidth is 506 but it should be 502 which corresponds to the average of the widths of all glyphs in the font. These are similar values, which may be a symptom of the slightly different calculation of the xAvgCharWidth value in font editors. There's further discussion on this at https://github.com/fonttools/fontbakery/issues/1622 [code: xAvgCharWidth-close]",
                            "status": "INFO",
                            "traceback": null
                        }
                    ],
                    "result": "INFO"
                },
                {
                    "description": "Check if OS/2 fsSelection matches head macStyle bold and italic bits.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.os2>",
                        "<FontBakeryCheck:com.adobe.fonts/check/fsselection_matches_macstyle>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The OS/2.fsSelection and head.macStyle bold and italic settings match.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The bold and italic bits in OS/2.fsSelection must match the bold and italic\n        bits in head.macStyle per the OpenType spec.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check code page character ranges",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.os2>",
                        "<FontBakeryCheck:com.google.fonts/check/code_pages>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "At least one code page is defined.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        At least some programs (such as Word and Sublime Text) under Windows 7\n        do not recognize fonts unless code page bits are properly set on the\n        ulCodePageRange1 (and/or ulCodePageRange2) fields of the OS/2 table.\n\n        More specifically, the fonts are selectable in the font menu, but whichever\n        Windows API these applications use considers them unsuitable for any\n        character set, so anything set in these fonts is rendered with Arial as a\n        fallback font.\n\n        This check currently does not identify which code pages should be set.\n        Auto-detecting coverage is not trivial since the OpenType specification\n        leaves the interpretation of whether a given code page is \"functional\"\n        or not open to the font developer to decide.\n\n        So here we simply detect as a FAIL when a given font has no code page\n        declared at all.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Checking OS/2 achVendID against configuration.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.os2>",
                        "<FontBakeryCheck:com.thetypefounders/check/vendor_id>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Add the `vendor_id` key to a `fontbakery.yaml` file on your font project directory to enable this check.\nYou'll also need to use the `--configuration` flag when invoking fontbakery.",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        When a font project's Vendor ID is specified explicitly on FontBakery's\n        configuration file, all binaries must have a matching vendor identifier\n        value in the OS/2 table.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Checking OS/2 fsSelection value.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.os2>",
                        "<FontBakeryCheck:com.google.fonts/check/fsselection>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: style",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "result": "SKIP"
                }
            ],
            "key": [
                "<Section: fontbakery.profiles.os2>",
                null,
                null
            ],
            "result": {
                "INFO": 2,
                "PASS": 12,
                "SKIP": 9
            }
        },
        {
            "checks": [
                {
                    "description": "Fonts have consistent underline thickness?",
                    "key": [
                        "<Section: fontbakery.profiles.post>",
                        "<FontBakeryCheck:com.google.fonts/check/family/underline_thickness>",
                        []
                    ],
                    "logs": [
                        {
                            "message": "Thickness of the underline is not the same across this family. In order to fix this, please make sure that the underlineThickness value is the same in the 'post' table of all of this family font files.\nDetected underlineThickness values are:\n\t/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf: 50\n\t/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf: 20\n\t/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf: 40\n\t/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf: 40\n [code: inconsistent-underline-thickness]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Dave C Lemon (Adobe Type Team) recommends setting the underline thickness to be\n        consistent across the family.\n\n        If thicknesses are not family consistent, words set on the same line which have\n        different styles look strange.\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "Font has correct post table version?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.post>",
                        "<FontBakeryCheck:com.google.fonts/check/post_table_version>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font has an acceptable post format 2.0 table version.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Format 2.5 of the 'post' table was deprecated in OpenType 1.3 and\n        should not be used.\n\n        According to Thomas Phinney, the possible problem with post format 3\n        is that under the right combination of circumstances, one can generate\n        PDF from a font with a post format 3 table, and not have accurate backing\n        store for any text that has non-default glyphs for a given codepoint.\n\n        It will look fine but not be searchable. This can affect Latin text with\n        high-end typography, and some complex script writing systems, especially\n        with higher-quality fonts. Those circumstances generally involve creating\n        a PDF by first printing a PostScript stream to disk, and then creating a\n        PDF from that stream without reference to the original source document.\n        There are some workflows where this applies,but these are not common\n        use cases.\n\n        Apple recommends against use of post format version 4 as \"no longer\n        necessary and should be avoided\". Please see the Apple TrueType reference\n        documentation for additional details.\n\n        https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6post.html\n\n        Acceptable post format versions are 2 and 3 for TTF and OTF CFF2 builds,\n        and post format 3 for CFF builds.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Checking post.italicAngle value. (derived from com.google.fonts/check/italic_angle)",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.post>",
                        "<FontBakeryCheck:com.google.fonts/check/italic_angle:googlefonts>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: style",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The 'post' table italicAngle property should be a reasonable amount, likely\n        not more than 30\u00b0. Note that in the OpenType specification, the value is\n        negative for a rightward lean.\n\n        https://docs.microsoft.com/en-us/typography/opentype/spec/post\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Font has correct post table version?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.post>",
                        "<FontBakeryCheck:com.google.fonts/check/post_table_version>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font has an acceptable post format 2.0 table version.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Format 2.5 of the 'post' table was deprecated in OpenType 1.3 and\n        should not be used.\n\n        According to Thomas Phinney, the possible problem with post format 3\n        is that under the right combination of circumstances, one can generate\n        PDF from a font with a post format 3 table, and not have accurate backing\n        store for any text that has non-default glyphs for a given codepoint.\n\n        It will look fine but not be searchable. This can affect Latin text with\n        high-end typography, and some complex script writing systems, especially\n        with higher-quality fonts. Those circumstances generally involve creating\n        a PDF by first printing a PostScript stream to disk, and then creating a\n        PDF from that stream without reference to the original source document.\n        There are some workflows where this applies,but these are not common\n        use cases.\n\n        Apple recommends against use of post format version 4 as \"no longer\n        necessary and should be avoided\". Please see the Apple TrueType reference\n        documentation for additional details.\n\n        https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6post.html\n\n        Acceptable post format versions are 2 and 3 for TTF and OTF CFF2 builds,\n        and post format 3 for CFF builds.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Checking post.italicAngle value. (derived from com.google.fonts/check/italic_angle)",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.post>",
                        "<FontBakeryCheck:com.google.fonts/check/italic_angle:googlefonts>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: style",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The 'post' table italicAngle property should be a reasonable amount, likely\n        not more than 30\u00b0. Note that in the OpenType specification, the value is\n        negative for a rightward lean.\n\n        https://docs.microsoft.com/en-us/typography/opentype/spec/post\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Font has correct post table version?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.post>",
                        "<FontBakeryCheck:com.google.fonts/check/post_table_version>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font has an acceptable post format 2.0 table version.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Format 2.5 of the 'post' table was deprecated in OpenType 1.3 and\n        should not be used.\n\n        According to Thomas Phinney, the possible problem with post format 3\n        is that under the right combination of circumstances, one can generate\n        PDF from a font with a post format 3 table, and not have accurate backing\n        store for any text that has non-default glyphs for a given codepoint.\n\n        It will look fine but not be searchable. This can affect Latin text with\n        high-end typography, and some complex script writing systems, especially\n        with higher-quality fonts. Those circumstances generally involve creating\n        a PDF by first printing a PostScript stream to disk, and then creating a\n        PDF from that stream without reference to the original source document.\n        There are some workflows where this applies,but these are not common\n        use cases.\n\n        Apple recommends against use of post format version 4 as \"no longer\n        necessary and should be avoided\". Please see the Apple TrueType reference\n        documentation for additional details.\n\n        https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6post.html\n\n        Acceptable post format versions are 2 and 3 for TTF and OTF CFF2 builds,\n        and post format 3 for CFF builds.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Checking post.italicAngle value. (derived from com.google.fonts/check/italic_angle)",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.post>",
                        "<FontBakeryCheck:com.google.fonts/check/italic_angle:googlefonts>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: style",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The 'post' table italicAngle property should be a reasonable amount, likely\n        not more than 30\u00b0. Note that in the OpenType specification, the value is\n        negative for a rightward lean.\n\n        https://docs.microsoft.com/en-us/typography/opentype/spec/post\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Font has correct post table version?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.post>",
                        "<FontBakeryCheck:com.google.fonts/check/post_table_version>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font has an acceptable post format 2.0 table version.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Format 2.5 of the 'post' table was deprecated in OpenType 1.3 and\n        should not be used.\n\n        According to Thomas Phinney, the possible problem with post format 3\n        is that under the right combination of circumstances, one can generate\n        PDF from a font with a post format 3 table, and not have accurate backing\n        store for any text that has non-default glyphs for a given codepoint.\n\n        It will look fine but not be searchable. This can affect Latin text with\n        high-end typography, and some complex script writing systems, especially\n        with higher-quality fonts. Those circumstances generally involve creating\n        a PDF by first printing a PostScript stream to disk, and then creating a\n        PDF from that stream without reference to the original source document.\n        There are some workflows where this applies,but these are not common\n        use cases.\n\n        Apple recommends against use of post format version 4 as \"no longer\n        necessary and should be avoided\". Please see the Apple TrueType reference\n        documentation for additional details.\n\n        https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6post.html\n\n        Acceptable post format versions are 2 and 3 for TTF and OTF CFF2 builds,\n        and post format 3 for CFF builds.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Checking post.italicAngle value. (derived from com.google.fonts/check/italic_angle)",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.post>",
                        "<FontBakeryCheck:com.google.fonts/check/italic_angle:googlefonts>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: style",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The 'post' table italicAngle property should be a reasonable amount, likely\n        not more than 30\u00b0. Note that in the OpenType specification, the value is\n        negative for a rightward lean.\n\n        https://docs.microsoft.com/en-us/typography/opentype/spec/post\n    ",
                    "result": "SKIP"
                }
            ],
            "key": [
                "<Section: fontbakery.profiles.post>",
                null,
                null
            ],
            "result": {
                "FAIL": 1,
                "PASS": 4,
                "SKIP": 4
            }
        },
        {
            "checks": [
                {
                    "description": "Verify that each group of fonts with the same nameID 1 has maximum of 4 fonts.",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.adobe.fonts/check/family/max_4_fonts_per_family_name>",
                        []
                    ],
                    "logs": [
                        {
                            "message": "There were no more than 4 fonts per family name.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Per the OpenType spec:\n\n        'The Font Family name [...] should be shared among at most four fonts that\n        differ only in weight or style [...]'\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Verify that family names in the name table are consistent across all fonts in the family. Checks Typographic Family name (nameID 16) if present, otherwise uses Font Family name (nameID 1)",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.adobe.fonts/check/family/consistent_family_name>",
                        []
                    ],
                    "logs": [
                        {
                            "message": "Font family names are consistent across the family.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Per the OpenType spec:\n            * \"...many existing applications that use this pair of names assume that a\n              Font Family name is shared by at most four fonts that form a font\n              style-linking group\"\n            * \"For extended typographic families that includes fonts other than the\n              four basic styles(regular, italic, bold, bold italic), it is strongly\n              recommended that name IDs 16 and 17 be used in fonts to create an\n              extended, typographic grouping.\"\n            * \"If name ID 16 is absent, then name ID 1 is considered to be the\n              typographic family name.\"\n\n        https://learn.microsoft.com/en-us/typography/opentype/spec/name\n\n        Fonts within a font family all must have consistent names\n        in the Typographic Family name (nameID 16)\n        or Font Family name (nameID 1), depending on which it uses.\n\n        Inconsistent font/typographic family names across fonts in a family\n        can result in unexpected behaviors, such as broken style linking.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check name table for empty records.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.adobe.fonts/check/name/empty_records>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "No empty name table records found.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check the name table for empty records,\n        as this can cause problems in Adobe apps.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Description strings in the name table must not contain copyright info.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.google.fonts/check/name/no_copyright_on_description>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Description strings in the name table do not contain any copyright string.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Checking correctness of monospaced metadata.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.google.fonts/check/monospace>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font is not monospaced and all related metadata look good. [code: good]",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        There are various metadata in the OpenType spec to specify if a font is\n        monospaced or not. If the font is not truly monospaced, then no monospaced\n        metadata should be set (as sometimes they mistakenly are...)\n\n        Requirements for monospace fonts:\n\n        * post.isFixedPitch - \"Set to 0 if the font is proportionally spaced,\n          non-zero if the font is not proportionally spaced (monospaced)\"\n          (https://www.microsoft.com/typography/otspec/post.htm)\n\n        * hhea.advanceWidthMax must be correct, meaning no glyph's width value\n          is greater. (https://www.microsoft.com/typography/otspec/hhea.htm)\n\n        * OS/2.panose.bProportion must be set to 9 (monospace) on latin text fonts.\n\n        * OS/2.panose.bSpacing must be set to 3 (monospace) on latin hand written\n          or latin symbol fonts.\n\n        * Spec says: \"The PANOSE definition contains ten digits each of which currently\n          describes up to sixteen variations. Windows uses bFamilyType, bSerifStyle\n          and bProportion in the font mapper to determine family type. It also uses\n          bProportion to determine if the font is monospaced.\"\n          (https://www.microsoft.com/typography/otspec/os2.htm#pan\n           https://monotypecom-test.monotype.de/services/pan2)\n\n        * OS/2.xAvgCharWidth must be set accurately.\n          \"OS/2.xAvgCharWidth is used when rendering monospaced fonts,\n          at least by Windows GDI\"\n          (http://typedrawers.com/discussion/comment/15397/#Comment_15397)\n\n        Also we should report an error for glyphs not of average width.\n\n\n        Please also note:\n\n        Thomas Phinney told us that a few years ago (as of December 2019), if you gave\n        a font a monospace flag in Panose, Microsoft Word would ignore the actual\n        advance widths and treat it as monospaced.\n\n        Source: https://typedrawers.com/discussion/comment/45140/#Comment_45140\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Does full font name begin with the font family name?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.google.fonts/check/name/match_familyname_fullfont>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Full font name begins with the font family name.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The FULL_FONT_NAME entry in the \u2018name\u2019 table should start with the same string\n        as the Family Name (FONT_FAMILY_NAME, TYPOGRAPHIC_FAMILY_NAME or\n        WWS_FAMILY_NAME).\n\n        If the Family Name is not included as the first part of the Full Font Name, and\n        the user embeds the font in a document using a Microsoft Office app, the app\n        will fail to render the font when it opens the document again.\n\n        NOTE: Up until version 1.5, the OpenType spec included the following exception\n        in the definition of Full Font Name:\n\n            \"An exception to the [above] definition of Full font name is for Microsoft\n            platform strings for CFF OpenType fonts: in this case, the Full font name\n            string must be identical to the PostScript FontName in the CFF Name INDEX.\"\n\n        https://docs.microsoft.com/en-us/typography/opentype/otspec150/name#name-ids\n    ",
                    "result": "PASS"
                },
                {
                    "description": "PostScript name follows OpenType specification requirements?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.adobe.fonts/check/postscript_name>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "PostScript name follows requirements. [code: psname-ok]",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Font follows the family naming recommendations?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.google.fonts/check/family_naming_recommendations>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font follows the family naming recommendations.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "CFF table FontName must match name table ID 6 (PostScript name).",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.adobe.fonts/check/name/postscript_vs_cff>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_cff",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The PostScript name entries in the font's 'name' table should match\n        the FontName string in the 'CFF ' table.\n\n        The 'CFF ' table has a lot of information that is duplicated in other tables.\n        This information should be consistent across tables, because there's\n        no guarantee which table an app will get the data from.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Name table ID 6 (PostScript name) must be consistent across platforms.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.adobe.fonts/check/name/postscript_name_consistency>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Entries in the \"name\" table for ID 6 (PostScript name) are consistent.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The PostScript name entries in the font's 'name' table should be\n        consistent across platforms.\n\n        This is the TTF/CFF2 equivalent of the CFF 'name/postscript_vs_cff' check.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check name table IDs 1, 2, 16, 17 to conform to Italic style.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.google.fonts/check/name/italic_names>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: style",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This check ensures that several entries in the name table\n        conform to the font's Upright or Italic style,\n        namely IDs 1 & 2 as well as 16 & 17 if they're present.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check name table for empty records.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.adobe.fonts/check/name/empty_records>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "No empty name table records found.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check the name table for empty records,\n        as this can cause problems in Adobe apps.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Description strings in the name table must not contain copyright info.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.google.fonts/check/name/no_copyright_on_description>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Description strings in the name table do not contain any copyright string.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Checking correctness of monospaced metadata.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.google.fonts/check/monospace>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font is not monospaced and all related metadata look good. [code: good]",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        There are various metadata in the OpenType spec to specify if a font is\n        monospaced or not. If the font is not truly monospaced, then no monospaced\n        metadata should be set (as sometimes they mistakenly are...)\n\n        Requirements for monospace fonts:\n\n        * post.isFixedPitch - \"Set to 0 if the font is proportionally spaced,\n          non-zero if the font is not proportionally spaced (monospaced)\"\n          (https://www.microsoft.com/typography/otspec/post.htm)\n\n        * hhea.advanceWidthMax must be correct, meaning no glyph's width value\n          is greater. (https://www.microsoft.com/typography/otspec/hhea.htm)\n\n        * OS/2.panose.bProportion must be set to 9 (monospace) on latin text fonts.\n\n        * OS/2.panose.bSpacing must be set to 3 (monospace) on latin hand written\n          or latin symbol fonts.\n\n        * Spec says: \"The PANOSE definition contains ten digits each of which currently\n          describes up to sixteen variations. Windows uses bFamilyType, bSerifStyle\n          and bProportion in the font mapper to determine family type. It also uses\n          bProportion to determine if the font is monospaced.\"\n          (https://www.microsoft.com/typography/otspec/os2.htm#pan\n           https://monotypecom-test.monotype.de/services/pan2)\n\n        * OS/2.xAvgCharWidth must be set accurately.\n          \"OS/2.xAvgCharWidth is used when rendering monospaced fonts,\n          at least by Windows GDI\"\n          (http://typedrawers.com/discussion/comment/15397/#Comment_15397)\n\n        Also we should report an error for glyphs not of average width.\n\n\n        Please also note:\n\n        Thomas Phinney told us that a few years ago (as of December 2019), if you gave\n        a font a monospace flag in Panose, Microsoft Word would ignore the actual\n        advance widths and treat it as monospaced.\n\n        Source: https://typedrawers.com/discussion/comment/45140/#Comment_45140\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Does full font name begin with the font family name?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.google.fonts/check/name/match_familyname_fullfont>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Full font name begins with the font family name.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The FULL_FONT_NAME entry in the \u2018name\u2019 table should start with the same string\n        as the Family Name (FONT_FAMILY_NAME, TYPOGRAPHIC_FAMILY_NAME or\n        WWS_FAMILY_NAME).\n\n        If the Family Name is not included as the first part of the Full Font Name, and\n        the user embeds the font in a document using a Microsoft Office app, the app\n        will fail to render the font when it opens the document again.\n\n        NOTE: Up until version 1.5, the OpenType spec included the following exception\n        in the definition of Full Font Name:\n\n            \"An exception to the [above] definition of Full font name is for Microsoft\n            platform strings for CFF OpenType fonts: in this case, the Full font name\n            string must be identical to the PostScript FontName in the CFF Name INDEX.\"\n\n        https://docs.microsoft.com/en-us/typography/opentype/otspec150/name#name-ids\n    ",
                    "result": "PASS"
                },
                {
                    "description": "PostScript name follows OpenType specification requirements?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.adobe.fonts/check/postscript_name>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "PostScript name follows requirements. [code: psname-ok]",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Font follows the family naming recommendations?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.google.fonts/check/family_naming_recommendations>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font follows the family naming recommendations.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "CFF table FontName must match name table ID 6 (PostScript name).",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.adobe.fonts/check/name/postscript_vs_cff>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_cff",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The PostScript name entries in the font's 'name' table should match\n        the FontName string in the 'CFF ' table.\n\n        The 'CFF ' table has a lot of information that is duplicated in other tables.\n        This information should be consistent across tables, because there's\n        no guarantee which table an app will get the data from.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Name table ID 6 (PostScript name) must be consistent across platforms.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.adobe.fonts/check/name/postscript_name_consistency>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Entries in the \"name\" table for ID 6 (PostScript name) are consistent.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The PostScript name entries in the font's 'name' table should be\n        consistent across platforms.\n\n        This is the TTF/CFF2 equivalent of the CFF 'name/postscript_vs_cff' check.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check name table IDs 1, 2, 16, 17 to conform to Italic style.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.google.fonts/check/name/italic_names>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: style",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This check ensures that several entries in the name table\n        conform to the font's Upright or Italic style,\n        namely IDs 1 & 2 as well as 16 & 17 if they're present.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check name table for empty records.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.adobe.fonts/check/name/empty_records>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "No empty name table records found.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check the name table for empty records,\n        as this can cause problems in Adobe apps.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Description strings in the name table must not contain copyright info.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.google.fonts/check/name/no_copyright_on_description>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Description strings in the name table do not contain any copyright string.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Checking correctness of monospaced metadata.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.google.fonts/check/monospace>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font is not monospaced and all related metadata look good. [code: good]",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        There are various metadata in the OpenType spec to specify if a font is\n        monospaced or not. If the font is not truly monospaced, then no monospaced\n        metadata should be set (as sometimes they mistakenly are...)\n\n        Requirements for monospace fonts:\n\n        * post.isFixedPitch - \"Set to 0 if the font is proportionally spaced,\n          non-zero if the font is not proportionally spaced (monospaced)\"\n          (https://www.microsoft.com/typography/otspec/post.htm)\n\n        * hhea.advanceWidthMax must be correct, meaning no glyph's width value\n          is greater. (https://www.microsoft.com/typography/otspec/hhea.htm)\n\n        * OS/2.panose.bProportion must be set to 9 (monospace) on latin text fonts.\n\n        * OS/2.panose.bSpacing must be set to 3 (monospace) on latin hand written\n          or latin symbol fonts.\n\n        * Spec says: \"The PANOSE definition contains ten digits each of which currently\n          describes up to sixteen variations. Windows uses bFamilyType, bSerifStyle\n          and bProportion in the font mapper to determine family type. It also uses\n          bProportion to determine if the font is monospaced.\"\n          (https://www.microsoft.com/typography/otspec/os2.htm#pan\n           https://monotypecom-test.monotype.de/services/pan2)\n\n        * OS/2.xAvgCharWidth must be set accurately.\n          \"OS/2.xAvgCharWidth is used when rendering monospaced fonts,\n          at least by Windows GDI\"\n          (http://typedrawers.com/discussion/comment/15397/#Comment_15397)\n\n        Also we should report an error for glyphs not of average width.\n\n\n        Please also note:\n\n        Thomas Phinney told us that a few years ago (as of December 2019), if you gave\n        a font a monospace flag in Panose, Microsoft Word would ignore the actual\n        advance widths and treat it as monospaced.\n\n        Source: https://typedrawers.com/discussion/comment/45140/#Comment_45140\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Does full font name begin with the font family name?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.google.fonts/check/name/match_familyname_fullfont>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Full font name begins with the font family name.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The FULL_FONT_NAME entry in the \u2018name\u2019 table should start with the same string\n        as the Family Name (FONT_FAMILY_NAME, TYPOGRAPHIC_FAMILY_NAME or\n        WWS_FAMILY_NAME).\n\n        If the Family Name is not included as the first part of the Full Font Name, and\n        the user embeds the font in a document using a Microsoft Office app, the app\n        will fail to render the font when it opens the document again.\n\n        NOTE: Up until version 1.5, the OpenType spec included the following exception\n        in the definition of Full Font Name:\n\n            \"An exception to the [above] definition of Full font name is for Microsoft\n            platform strings for CFF OpenType fonts: in this case, the Full font name\n            string must be identical to the PostScript FontName in the CFF Name INDEX.\"\n\n        https://docs.microsoft.com/en-us/typography/opentype/otspec150/name#name-ids\n    ",
                    "result": "PASS"
                },
                {
                    "description": "PostScript name follows OpenType specification requirements?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.adobe.fonts/check/postscript_name>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "PostScript name follows requirements. [code: psname-ok]",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Font follows the family naming recommendations?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.google.fonts/check/family_naming_recommendations>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font follows the family naming recommendations.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "CFF table FontName must match name table ID 6 (PostScript name).",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.adobe.fonts/check/name/postscript_vs_cff>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_cff",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The PostScript name entries in the font's 'name' table should match\n        the FontName string in the 'CFF ' table.\n\n        The 'CFF ' table has a lot of information that is duplicated in other tables.\n        This information should be consistent across tables, because there's\n        no guarantee which table an app will get the data from.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Name table ID 6 (PostScript name) must be consistent across platforms.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.adobe.fonts/check/name/postscript_name_consistency>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Entries in the \"name\" table for ID 6 (PostScript name) are consistent.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The PostScript name entries in the font's 'name' table should be\n        consistent across platforms.\n\n        This is the TTF/CFF2 equivalent of the CFF 'name/postscript_vs_cff' check.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check name table IDs 1, 2, 16, 17 to conform to Italic style.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.google.fonts/check/name/italic_names>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: style",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This check ensures that several entries in the name table\n        conform to the font's Upright or Italic style,\n        namely IDs 1 & 2 as well as 16 & 17 if they're present.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check name table for empty records.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.adobe.fonts/check/name/empty_records>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "No empty name table records found.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check the name table for empty records,\n        as this can cause problems in Adobe apps.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Description strings in the name table must not contain copyright info.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.google.fonts/check/name/no_copyright_on_description>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Description strings in the name table do not contain any copyright string.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Checking correctness of monospaced metadata.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.google.fonts/check/monospace>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font is not monospaced and all related metadata look good. [code: good]",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        There are various metadata in the OpenType spec to specify if a font is\n        monospaced or not. If the font is not truly monospaced, then no monospaced\n        metadata should be set (as sometimes they mistakenly are...)\n\n        Requirements for monospace fonts:\n\n        * post.isFixedPitch - \"Set to 0 if the font is proportionally spaced,\n          non-zero if the font is not proportionally spaced (monospaced)\"\n          (https://www.microsoft.com/typography/otspec/post.htm)\n\n        * hhea.advanceWidthMax must be correct, meaning no glyph's width value\n          is greater. (https://www.microsoft.com/typography/otspec/hhea.htm)\n\n        * OS/2.panose.bProportion must be set to 9 (monospace) on latin text fonts.\n\n        * OS/2.panose.bSpacing must be set to 3 (monospace) on latin hand written\n          or latin symbol fonts.\n\n        * Spec says: \"The PANOSE definition contains ten digits each of which currently\n          describes up to sixteen variations. Windows uses bFamilyType, bSerifStyle\n          and bProportion in the font mapper to determine family type. It also uses\n          bProportion to determine if the font is monospaced.\"\n          (https://www.microsoft.com/typography/otspec/os2.htm#pan\n           https://monotypecom-test.monotype.de/services/pan2)\n\n        * OS/2.xAvgCharWidth must be set accurately.\n          \"OS/2.xAvgCharWidth is used when rendering monospaced fonts,\n          at least by Windows GDI\"\n          (http://typedrawers.com/discussion/comment/15397/#Comment_15397)\n\n        Also we should report an error for glyphs not of average width.\n\n\n        Please also note:\n\n        Thomas Phinney told us that a few years ago (as of December 2019), if you gave\n        a font a monospace flag in Panose, Microsoft Word would ignore the actual\n        advance widths and treat it as monospaced.\n\n        Source: https://typedrawers.com/discussion/comment/45140/#Comment_45140\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Does full font name begin with the font family name?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.google.fonts/check/name/match_familyname_fullfont>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Full font name begins with the font family name.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The FULL_FONT_NAME entry in the \u2018name\u2019 table should start with the same string\n        as the Family Name (FONT_FAMILY_NAME, TYPOGRAPHIC_FAMILY_NAME or\n        WWS_FAMILY_NAME).\n\n        If the Family Name is not included as the first part of the Full Font Name, and\n        the user embeds the font in a document using a Microsoft Office app, the app\n        will fail to render the font when it opens the document again.\n\n        NOTE: Up until version 1.5, the OpenType spec included the following exception\n        in the definition of Full Font Name:\n\n            \"An exception to the [above] definition of Full font name is for Microsoft\n            platform strings for CFF OpenType fonts: in this case, the Full font name\n            string must be identical to the PostScript FontName in the CFF Name INDEX.\"\n\n        https://docs.microsoft.com/en-us/typography/opentype/otspec150/name#name-ids\n    ",
                    "result": "PASS"
                },
                {
                    "description": "PostScript name follows OpenType specification requirements?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.adobe.fonts/check/postscript_name>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "PostScript name follows requirements. [code: psname-ok]",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Font follows the family naming recommendations?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.google.fonts/check/family_naming_recommendations>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font follows the family naming recommendations.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "CFF table FontName must match name table ID 6 (PostScript name).",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.adobe.fonts/check/name/postscript_vs_cff>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_cff",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The PostScript name entries in the font's 'name' table should match\n        the FontName string in the 'CFF ' table.\n\n        The 'CFF ' table has a lot of information that is duplicated in other tables.\n        This information should be consistent across tables, because there's\n        no guarantee which table an app will get the data from.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Name table ID 6 (PostScript name) must be consistent across platforms.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.adobe.fonts/check/name/postscript_name_consistency>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Entries in the \"name\" table for ID 6 (PostScript name) are consistent.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The PostScript name entries in the font's 'name' table should be\n        consistent across platforms.\n\n        This is the TTF/CFF2 equivalent of the CFF 'name/postscript_vs_cff' check.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check name table IDs 1, 2, 16, 17 to conform to Italic style.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.google.fonts/check/name/italic_names>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: style",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This check ensures that several entries in the name table\n        conform to the font's Upright or Italic style,\n        namely IDs 1 & 2 as well as 16 & 17 if they're present.\n    ",
                    "result": "SKIP"
                }
            ],
            "key": [
                "<Section: fontbakery.profiles.name>",
                null,
                null
            ],
            "result": {
                "PASS": 30,
                "SKIP": 8
            }
        },
        {
            "checks": [
                {
                    "description": "Does the number of glyphs in the loca table match the maxp table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.loca>",
                        "<FontBakeryCheck:com.google.fonts/check/loca/maxp_num_glyphs>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "'loca' table matches numGlyphs in 'maxp' table.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Does the number of glyphs in the loca table match the maxp table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.loca>",
                        "<FontBakeryCheck:com.google.fonts/check/loca/maxp_num_glyphs>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "'loca' table matches numGlyphs in 'maxp' table.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Does the number of glyphs in the loca table match the maxp table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.loca>",
                        "<FontBakeryCheck:com.google.fonts/check/loca/maxp_num_glyphs>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "'loca' table matches numGlyphs in 'maxp' table.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Does the number of glyphs in the loca table match the maxp table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.loca>",
                        "<FontBakeryCheck:com.google.fonts/check/loca/maxp_num_glyphs>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "'loca' table matches numGlyphs in 'maxp' table.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                }
            ],
            "key": [
                "<Section: fontbakery.profiles.loca>",
                null,
                null
            ],
            "result": {
                "PASS": 4
            }
        },
        {
            "checks": [
                {
                    "description": "MaxAdvanceWidth is consistent with values in the Hmtx and Hhea tables?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.hhea>",
                        "<FontBakeryCheck:com.google.fonts/check/maxadvancewidth>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "MaxAdvanceWidth is consistent with values in the Hmtx and Hhea tables.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Check hhea.caretSlopeRise and hhea.caretSlopeRun",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.hhea>",
                        "<FontBakeryCheck:com.google.fonts/check/caret_slope>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "hhea.caretSlopeRise and hhea.caretSlopeRun match with post.italicAngle.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Checks whether hhea.caretSlopeRise and hhea.caretSlopeRun\n        match with post.italicAngle.\n\n        For Upright fonts, you can set hhea.caretSlopeRise to 1\n        and hhea.caretSlopeRun to 0.\n\n        For Italic fonts, you can set hhea.caretSlopeRise to head.unitsPerEm\n        and calculate hhea.caretSlopeRun like this:\n        round(math.tan(\n          math.radians(-1 * font[\"post\"].italicAngle)) * font[\"head\"].unitsPerEm)\n\n        This check allows for a 0.1\u00b0 rounding difference between the Italic angle\n        as calculated by the caret slope and post.italicAngle\n    ",
                    "result": "PASS"
                },
                {
                    "description": "MaxAdvanceWidth is consistent with values in the Hmtx and Hhea tables?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.hhea>",
                        "<FontBakeryCheck:com.google.fonts/check/maxadvancewidth>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "MaxAdvanceWidth is consistent with values in the Hmtx and Hhea tables.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Check hhea.caretSlopeRise and hhea.caretSlopeRun",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.hhea>",
                        "<FontBakeryCheck:com.google.fonts/check/caret_slope>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "hhea.caretSlopeRise and hhea.caretSlopeRun do not match with post.italicAngle.\nGot: caretSlopeRise 100 and caretSlopeRun 21\nExpected: caretSlopeRise 1000 and caretSlopeRun 213 [code: caretslope-mismatch]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Checks whether hhea.caretSlopeRise and hhea.caretSlopeRun\n        match with post.italicAngle.\n\n        For Upright fonts, you can set hhea.caretSlopeRise to 1\n        and hhea.caretSlopeRun to 0.\n\n        For Italic fonts, you can set hhea.caretSlopeRise to head.unitsPerEm\n        and calculate hhea.caretSlopeRun like this:\n        round(math.tan(\n          math.radians(-1 * font[\"post\"].italicAngle)) * font[\"head\"].unitsPerEm)\n\n        This check allows for a 0.1\u00b0 rounding difference between the Italic angle\n        as calculated by the caret slope and post.italicAngle\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "MaxAdvanceWidth is consistent with values in the Hmtx and Hhea tables?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.hhea>",
                        "<FontBakeryCheck:com.google.fonts/check/maxadvancewidth>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "MaxAdvanceWidth is consistent with values in the Hmtx and Hhea tables.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Check hhea.caretSlopeRise and hhea.caretSlopeRun",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.hhea>",
                        "<FontBakeryCheck:com.google.fonts/check/caret_slope>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "hhea.caretSlopeRise and hhea.caretSlopeRun match with post.italicAngle.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Checks whether hhea.caretSlopeRise and hhea.caretSlopeRun\n        match with post.italicAngle.\n\n        For Upright fonts, you can set hhea.caretSlopeRise to 1\n        and hhea.caretSlopeRun to 0.\n\n        For Italic fonts, you can set hhea.caretSlopeRise to head.unitsPerEm\n        and calculate hhea.caretSlopeRun like this:\n        round(math.tan(\n          math.radians(-1 * font[\"post\"].italicAngle)) * font[\"head\"].unitsPerEm)\n\n        This check allows for a 0.1\u00b0 rounding difference between the Italic angle\n        as calculated by the caret slope and post.italicAngle\n    ",
                    "result": "PASS"
                },
                {
                    "description": "MaxAdvanceWidth is consistent with values in the Hmtx and Hhea tables?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.hhea>",
                        "<FontBakeryCheck:com.google.fonts/check/maxadvancewidth>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "MaxAdvanceWidth is consistent with values in the Hmtx and Hhea tables.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Check hhea.caretSlopeRise and hhea.caretSlopeRun",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.hhea>",
                        "<FontBakeryCheck:com.google.fonts/check/caret_slope>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "hhea.caretSlopeRise and hhea.caretSlopeRun do not match with post.italicAngle.\nGot: caretSlopeRise 100 and caretSlopeRun 21\nExpected: caretSlopeRise 1000 and caretSlopeRun 213 [code: caretslope-mismatch]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Checks whether hhea.caretSlopeRise and hhea.caretSlopeRun\n        match with post.italicAngle.\n\n        For Upright fonts, you can set hhea.caretSlopeRise to 1\n        and hhea.caretSlopeRun to 0.\n\n        For Italic fonts, you can set hhea.caretSlopeRise to head.unitsPerEm\n        and calculate hhea.caretSlopeRun like this:\n        round(math.tan(\n          math.radians(-1 * font[\"post\"].italicAngle)) * font[\"head\"].unitsPerEm)\n\n        This check allows for a 0.1\u00b0 rounding difference between the Italic angle\n        as calculated by the caret slope and post.italicAngle\n    ",
                    "result": "FAIL"
                }
            ],
            "key": [
                "<Section: fontbakery.profiles.hhea>",
                null,
                null
            ],
            "result": {
                "FAIL": 2,
                "PASS": 6
            }
        },
        {
            "checks": [
                {
                    "description": "Does the font have a DSIG table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.dsig>",
                        "<FontBakeryCheck:com.google.fonts/check/dsig>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "ok",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Microsoft Office 2013 and below products expect fonts to have a digital\n        signature declared in a DSIG table in order to implement OpenType features.\n        The EOL date for Microsoft Office 2013 products is 4/11/2023.\n        This issue does not impact Microsoft Office 2016 and above products.\n\n        As we approach the EOL date, it is now considered better to\n        completely remove the table.\n\n        But if you still want your font to support OpenType features on Office 2013,\n        then you may find it handy to add a fake signature on a placeholder DSIG table\n        by running one of the helper scripts provided at\n        https://github.com/googlefonts/gftools\n\n        Reference: https://github.com/fonttools/fontbakery/issues/1845\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Does the font have a DSIG table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.dsig>",
                        "<FontBakeryCheck:com.google.fonts/check/dsig>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "ok",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Microsoft Office 2013 and below products expect fonts to have a digital\n        signature declared in a DSIG table in order to implement OpenType features.\n        The EOL date for Microsoft Office 2013 products is 4/11/2023.\n        This issue does not impact Microsoft Office 2016 and above products.\n\n        As we approach the EOL date, it is now considered better to\n        completely remove the table.\n\n        But if you still want your font to support OpenType features on Office 2013,\n        then you may find it handy to add a fake signature on a placeholder DSIG table\n        by running one of the helper scripts provided at\n        https://github.com/googlefonts/gftools\n\n        Reference: https://github.com/fonttools/fontbakery/issues/1845\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Does the font have a DSIG table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.dsig>",
                        "<FontBakeryCheck:com.google.fonts/check/dsig>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "ok",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Microsoft Office 2013 and below products expect fonts to have a digital\n        signature declared in a DSIG table in order to implement OpenType features.\n        The EOL date for Microsoft Office 2013 products is 4/11/2023.\n        This issue does not impact Microsoft Office 2016 and above products.\n\n        As we approach the EOL date, it is now considered better to\n        completely remove the table.\n\n        But if you still want your font to support OpenType features on Office 2013,\n        then you may find it handy to add a fake signature on a placeholder DSIG table\n        by running one of the helper scripts provided at\n        https://github.com/googlefonts/gftools\n\n        Reference: https://github.com/fonttools/fontbakery/issues/1845\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Does the font have a DSIG table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.dsig>",
                        "<FontBakeryCheck:com.google.fonts/check/dsig>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "ok",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Microsoft Office 2013 and below products expect fonts to have a digital\n        signature declared in a DSIG table in order to implement OpenType features.\n        The EOL date for Microsoft Office 2013 products is 4/11/2023.\n        This issue does not impact Microsoft Office 2016 and above products.\n\n        As we approach the EOL date, it is now considered better to\n        completely remove the table.\n\n        But if you still want your font to support OpenType features on Office 2013,\n        then you may find it handy to add a fake signature on a placeholder DSIG table\n        by running one of the helper scripts provided at\n        https://github.com/googlefonts/gftools\n\n        Reference: https://github.com/fonttools/fontbakery/issues/1845\n    ",
                    "result": "PASS"
                }
            ],
            "key": [
                "<Section: fontbakery.profiles.dsig>",
                null,
                null
            ],
            "result": {
                "PASS": 4
            }
        },
        {
            "checks": [
                {
                    "description": "Check glyphs in mark glyph class are non-spacing.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.gdef>",
                        "<FontBakeryCheck:com.google.fonts/check/gdef_spacing_marks>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font does not has spacing glyphs in the GDEF mark glyph class.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Glyphs in the GDEF mark glyph class should be non-spacing.\n\n        Spacing glyphs in the GDEF mark glyph class may have incorrect anchor\n        positioning that was only intended for building composite glyphs during design.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check mark characters are in GDEF mark glyph class.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.gdef>",
                        "<FontBakeryCheck:com.google.fonts/check/gdef_mark_chars>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The following mark characters could be in the GDEF mark glyph class:\n\t acutecomb (U+0301), commaaccent (U+0326), dialytika (U+0308), dotbelowcomb (U+0323), gravecomb (U+0300), hookabovecomb (U+0309), perispomenicomb (U+0342), tildecomb (U+0303), uni0312 (U+0312), uni0313 (U+0313), uni0314 (U+0314), uni0343 (U+0343) and uni0345 (U+0345) [code: mark-chars]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Mark characters should be in the GDEF mark glyph class.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Check GDEF mark glyph class doesn't have characters that are not marks.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.gdef>",
                        "<FontBakeryCheck:com.google.fonts/check/gdef_non_mark_chars>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font does not have non-mark characters in the GDEF mark glyph class.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Glyphs in the GDEF mark glyph class become non-spacing and may be repositioned\n        if they have mark anchors.\n\n        Only combining mark glyphs should be in that class. Any non-mark glyph\n        must not be in that class, in particular spacing glyphs.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check glyphs in mark glyph class are non-spacing.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.gdef>",
                        "<FontBakeryCheck:com.google.fonts/check/gdef_spacing_marks>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font does not has spacing glyphs in the GDEF mark glyph class.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Glyphs in the GDEF mark glyph class should be non-spacing.\n\n        Spacing glyphs in the GDEF mark glyph class may have incorrect anchor\n        positioning that was only intended for building composite glyphs during design.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check mark characters are in GDEF mark glyph class.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.gdef>",
                        "<FontBakeryCheck:com.google.fonts/check/gdef_mark_chars>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The following mark characters could be in the GDEF mark glyph class:\n\t acutecomb (U+0301), cedillacomb (U+0327), commaaccent (U+0326), dotbelowcomb (U+0323), gravecomb (U+0300), hookabovecomb (U+0309), koroniscomb (U+0343), ogonekcomb (U+0328), perispomenicomb (U+0342), tildecomb (U+0303), uni0308 (U+0308), uni0312 (U+0312), uni0313 (U+0313), uni0314 (U+0314) and uni0345 (U+0345) [code: mark-chars]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Mark characters should be in the GDEF mark glyph class.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Check GDEF mark glyph class doesn't have characters that are not marks.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.gdef>",
                        "<FontBakeryCheck:com.google.fonts/check/gdef_non_mark_chars>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font does not have non-mark characters in the GDEF mark glyph class.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Glyphs in the GDEF mark glyph class become non-spacing and may be repositioned\n        if they have mark anchors.\n\n        Only combining mark glyphs should be in that class. Any non-mark glyph\n        must not be in that class, in particular spacing glyphs.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check glyphs in mark glyph class are non-spacing.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.gdef>",
                        "<FontBakeryCheck:com.google.fonts/check/gdef_spacing_marks>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font does not has spacing glyphs in the GDEF mark glyph class.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Glyphs in the GDEF mark glyph class should be non-spacing.\n\n        Spacing glyphs in the GDEF mark glyph class may have incorrect anchor\n        positioning that was only intended for building composite glyphs during design.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check mark characters are in GDEF mark glyph class.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.gdef>",
                        "<FontBakeryCheck:com.google.fonts/check/gdef_mark_chars>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The following mark characters could be in the GDEF mark glyph class:\n\t acutecomb (U+0301), cedillacomb (U+0327), commabelowcomb (U+0326), dialytika (U+0308), dotbelowcomb (U+0323), gravecomb (U+0300), hookabovecomb (U+0309), koroniscomb (U+0343), ogonekcomb (U+0328), perispomenicomb (U+0342), tildecomb (U+0303), uni0312 (U+0312), uni0313 (U+0313), uni0314 (U+0314) and uni0345 (U+0345) [code: mark-chars]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Mark characters should be in the GDEF mark glyph class.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Check GDEF mark glyph class doesn't have characters that are not marks.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.gdef>",
                        "<FontBakeryCheck:com.google.fonts/check/gdef_non_mark_chars>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font does not have non-mark characters in the GDEF mark glyph class.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Glyphs in the GDEF mark glyph class become non-spacing and may be repositioned\n        if they have mark anchors.\n\n        Only combining mark glyphs should be in that class. Any non-mark glyph\n        must not be in that class, in particular spacing glyphs.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check glyphs in mark glyph class are non-spacing.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.gdef>",
                        "<FontBakeryCheck:com.google.fonts/check/gdef_spacing_marks>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font does not has spacing glyphs in the GDEF mark glyph class.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Glyphs in the GDEF mark glyph class should be non-spacing.\n\n        Spacing glyphs in the GDEF mark glyph class may have incorrect anchor\n        positioning that was only intended for building composite glyphs during design.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check mark characters are in GDEF mark glyph class.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.gdef>",
                        "<FontBakeryCheck:com.google.fonts/check/gdef_mark_chars>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The following mark characters could be in the GDEF mark glyph class:\n\t acutecomb (U+0301), cedillacomb (U+0327), commaaccent (U+0326), dialytika (U+0308), dotbelowcomb (U+0323), gravecomb (U+0300), hookabovecomb (U+0309), koroniscomb (U+0343), ogonekcomb (U+0328), perispomenicomb (U+0342), tildecomb (U+0303), uni0312 (U+0312), uni0313 (U+0313), uni0314 (U+0314) and uni0345 (U+0345) [code: mark-chars]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Mark characters should be in the GDEF mark glyph class.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Check GDEF mark glyph class doesn't have characters that are not marks.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.gdef>",
                        "<FontBakeryCheck:com.google.fonts/check/gdef_non_mark_chars>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font does not have non-mark characters in the GDEF mark glyph class.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Glyphs in the GDEF mark glyph class become non-spacing and may be repositioned\n        if they have mark anchors.\n\n        Only combining mark glyphs should be in that class. Any non-mark glyph\n        must not be in that class, in particular spacing glyphs.\n    ",
                    "result": "PASS"
                }
            ],
            "key": [
                "<Section: fontbakery.profiles.gdef>",
                null,
                null
            ],
            "result": {
                "PASS": 8,
                "WARN": 4
            }
        },
        {
            "checks": [
                {
                    "description": "Does GPOS table have kerning information? This check skips monospaced fonts as defined by post.isFixedPitch value",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.gpos>",
                        "<FontBakeryCheck:com.google.fonts/check/gpos_kerning_info>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "GPOS table lacks kerning information. [code: lacks-kern-info]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "result": "WARN"
                },
                {
                    "description": "Does GPOS table have kerning information? This check skips monospaced fonts as defined by post.isFixedPitch value",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.gpos>",
                        "<FontBakeryCheck:com.google.fonts/check/gpos_kerning_info>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "GPOS table check for kerning information passed.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Does GPOS table have kerning information? This check skips monospaced fonts as defined by post.isFixedPitch value",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.gpos>",
                        "<FontBakeryCheck:com.google.fonts/check/gpos_kerning_info>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "GPOS table check for kerning information passed.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Does GPOS table have kerning information? This check skips monospaced fonts as defined by post.isFixedPitch value",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.gpos>",
                        "<FontBakeryCheck:com.google.fonts/check/gpos_kerning_info>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "GPOS table check for kerning information passed.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                }
            ],
            "key": [
                "<Section: fontbakery.profiles.gpos>",
                null,
                null
            ],
            "result": {
                "PASS": 3,
                "WARN": 1
            }
        },
        {
            "checks": [
                {
                    "description": "Is there a usable \"kern\" table declared in the font?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.kern>",
                        "<FontBakeryCheck:com.google.fonts/check/kern_table>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font does not declare an optional \"kern\" table.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Even though all fonts should have their kerning implemented in the GPOS table,\n        there may be kerning info at the kern table as well.\n\n        Some applications such as MS PowerPoint require kerning info on the kern table.\n        More specifically, they require a format 0 kern subtable from a kern table\n        version 0 with only glyphs defined in the cmap table, which is the only one\n        that Windows understands (and which is also the simplest and more limited\n        of all the kern subtables).\n\n        Google Fonts ingests fonts made for download and use on desktops, and does\n        all web font optimizations in the serving pipeline (using libre libraries\n        that anyone can replicate.)\n\n        Ideally, TTFs intended for desktop users (and thus the ones intended for\n        Google Fonts) should have both KERN and GPOS tables.\n\n        Given all of the above, we currently treat kerning on a v0 kern table\n        as a good-to-have (but optional) feature.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Is there a usable \"kern\" table declared in the font?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.kern>",
                        "<FontBakeryCheck:com.google.fonts/check/kern_table>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font does not declare an optional \"kern\" table.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Even though all fonts should have their kerning implemented in the GPOS table,\n        there may be kerning info at the kern table as well.\n\n        Some applications such as MS PowerPoint require kerning info on the kern table.\n        More specifically, they require a format 0 kern subtable from a kern table\n        version 0 with only glyphs defined in the cmap table, which is the only one\n        that Windows understands (and which is also the simplest and more limited\n        of all the kern subtables).\n\n        Google Fonts ingests fonts made for download and use on desktops, and does\n        all web font optimizations in the serving pipeline (using libre libraries\n        that anyone can replicate.)\n\n        Ideally, TTFs intended for desktop users (and thus the ones intended for\n        Google Fonts) should have both KERN and GPOS tables.\n\n        Given all of the above, we currently treat kerning on a v0 kern table\n        as a good-to-have (but optional) feature.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Is there a usable \"kern\" table declared in the font?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.kern>",
                        "<FontBakeryCheck:com.google.fonts/check/kern_table>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font does not declare an optional \"kern\" table.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Even though all fonts should have their kerning implemented in the GPOS table,\n        there may be kerning info at the kern table as well.\n\n        Some applications such as MS PowerPoint require kerning info on the kern table.\n        More specifically, they require a format 0 kern subtable from a kern table\n        version 0 with only glyphs defined in the cmap table, which is the only one\n        that Windows understands (and which is also the simplest and more limited\n        of all the kern subtables).\n\n        Google Fonts ingests fonts made for download and use on desktops, and does\n        all web font optimizations in the serving pipeline (using libre libraries\n        that anyone can replicate.)\n\n        Ideally, TTFs intended for desktop users (and thus the ones intended for\n        Google Fonts) should have both KERN and GPOS tables.\n\n        Given all of the above, we currently treat kerning on a v0 kern table\n        as a good-to-have (but optional) feature.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Is there a usable \"kern\" table declared in the font?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.kern>",
                        "<FontBakeryCheck:com.google.fonts/check/kern_table>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font does not declare an optional \"kern\" table.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Even though all fonts should have their kerning implemented in the GPOS table,\n        there may be kerning info at the kern table as well.\n\n        Some applications such as MS PowerPoint require kerning info on the kern table.\n        More specifically, they require a format 0 kern subtable from a kern table\n        version 0 with only glyphs defined in the cmap table, which is the only one\n        that Windows understands (and which is also the simplest and more limited\n        of all the kern subtables).\n\n        Google Fonts ingests fonts made for download and use on desktops, and does\n        all web font optimizations in the serving pipeline (using libre libraries\n        that anyone can replicate.)\n\n        Ideally, TTFs intended for desktop users (and thus the ones intended for\n        Google Fonts) should have both KERN and GPOS tables.\n\n        Given all of the above, we currently treat kerning on a v0 kern table\n        as a good-to-have (but optional) feature.\n    ",
                    "result": "PASS"
                }
            ],
            "key": [
                "<Section: fontbakery.profiles.kern>",
                null,
                null
            ],
            "result": {
                "PASS": 4
            }
        },
        {
            "checks": [
                {
                    "description": "Is there any unused data at the end of the glyf table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.glyf>",
                        "<FontBakeryCheck:com.google.fonts/check/glyf_unused_data>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "There is no unused data at the end of the glyf table.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Check for points out of bounds.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.glyf>",
                        "<FontBakeryCheck:com.google.fonts/check/points_out_of_bounds>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The following glyphs have coordinates which are out of bounds:\n\t* ('percent', 710, 323)\n\t* ('percent', 35, 552)\n\t* ('ampersand', 22, 142)\n\t* ('zero', 29, 447)\n\t* ('zero', 504, 463)\n\t* ('two', 165, 643)\n\t* ('three', 91, 656)\n\t* ('six', 170, -18)\n\t* ('six', 38, 354)\n\t* ('six', 495, 243)\n\t* ('eight', 496, 241)\n\t* ('nine', 373, 645)\n\t* ('nine', 496, 519)\n\t* ('semicolon', 242, -92)\n\t* ('question', 327, 639)\n\t* ('at', 507, -266)\n\t* ('B', 574, 248)\n\t* ('O', 635, 451)\n\t* ('Q', 635, 451)\n\t* ('S', 328, 636)\n\t* ('S', 387, -16)\n\t* ('a', 272, 399)\n\t* ('b', 411, 288)\n\t* ('c', 144, -16)\n\t* ('c', 266, 395)\n\t* ('d', 145, -10)\n\t* ('e', 139, -15)\n\t* ('e', 415, 217)\n\t* ('g', 28, 100)\n\t* ('g', 188, 397)\n\t* ('h', 412, -3)\n\t* ('l', 148, -5)\n\t* ('m', 656, -3)\n\t* ('n', 412, -3)\n\t* ('o', 20, 108)\n\t* ('p', 300, 397)\n\t* ('q', 31, 100)\n\t* ('q', 191, 397)\n\t* ('s', 224, -17)\n\t* ('t', 161, -13)\n\t* ('u', 345, -15)\n\t* ('y', 89, -225)\n\t* ('z', 322, -3)\n\t* ('z', 9, -2)\n\t* ('cent', 187, -5)\n\t* ('cent', 56, 239)\n\t* ('currency', 467, 147)\n\t* ('currency', 33, 147)\n\t* ('section', 33, 641)\n\t* ('section', 340, 373)\n\t* ('ordfeminine', 273, 563)\n\t* ('threesuperior', 57, 641)\n\t* ('uni00B5', 52, -64)\n\t* ('paragraph', 32, 335)\n\t* ('cedilla', 263, -200)\n\t* ('ordmasculine', 24, 317)\n\t* ('questiondown', 192, -223)\n\t* ('Atilde', 265, 807)\n\t* ('Ccedilla', 324, -200)\n\t* ('Ntilde', 318, 811)\n\t* ('Ograve', 635, 451)\n\t* ('Oacute', 635, 451)\n\t* ('Ocircumflex', 635, 451)\n\t* ('Otilde', 635, 451)\n\t* ('Otilde', 264, 809)\n\t* ('Odieresis', 635, 451)\n\t* ('Oslash', 648, 419)\n\t* ('germandbls', 451, 59)\n\t* ('germandbls', 200, 649)\n\t* ('atilde', 169, 605)\n\t* ('ae', 348, -15)\n\t* ('ae', 11, -13)\n\t* ('ae', 275, 397)\n\t* ('ae', 635, 217)\n\t* ('ccedilla', 198, -195)\n\t* ('ccedilla', 266, 398)\n\t* ('egrave', 139, -15)\n\t* ('egrave', 415, 217)\n\t* ('eacute', 139, -15)\n\t* ('eacute', 415, 217)\n\t* ('ecircumflex', 139, -15)\n\t* ('ecircumflex', 415, 217)\n\t* ('edieresis', 139, -15)\n\t* ('edieresis', 415, 217)\n\t* ('ntilde', 412, -3)\n\t* ('ntilde', 176, 604)\n\t* ('ograve', 20, 108)\n\t* ('oacute', 20, 108)\n\t* ('ocircumflex', 20, 108)\n\t* ('otilde', 20, 108)\n\t* ('otilde', 162, 603)\n\t* ('odieresis', 22, 111)\n\t* ('oslash', 40, 77)\n\t* ('ugrave', 343, -15)\n\t* ('uacute', 345, -6)\n\t* ('ucircumflex', 345, -15)\n\t* ('udieresis', 345, -15)\n\t* ('yacute', 89, -225)\n\t* ('ydieresis', 89, -225)\n\t* ('aogonek', 40, -12)\n\t* ('aogonek', 266, 396)\n\t* ('cacute', 144, -16)\n\t* ('ccircumflex', 144, -16)\n\t* ('cdotaccent', 144, -16)\n\t* ('ccaron', 144, -16)\n\t* ('dcaron', 145, -10)\n\t* ('dcroat', 145, -10)\n\t* ('emacron', 139, -15)\n\t* ('emacron', 415, 217)\n\t* ('ebreve', 139, -15)\n\t* ('ebreve', 415, 217)\n\t* ('edotaccent', 139, -15)\n\t* ('edotaccent', 415, 217)\n\t* ('eogonek', 415, 217)\n\t* ('ecaron', 139, -15)\n\t* ('ecaron', 415, 217)\n\t* ('gcircumflex', 28, 100)\n\t* ('gbreve', 28, 100)\n\t* ('gdotaccent', 28, 100)\n\t* ('gcommaaccent', 28, 100)\n\t* ('hcircumflex', 412, -3)\n\t* ('hbar', 412, -3)\n\t* ('Itilde', 62, 811)\n\t* ('itilde', 24, 610)\n\t* ('lacute', 148, -5)\n\t* ('lcaron', 148, -5)\n\t* ('ldot', 148, -5)\n\t* ('lslash', 148, -2)\n\t* ('nacute', 412, -3)\n\t* ('ncaron', 412, -3)\n\t* ('napostrophe', 412, -3)\n\t* ('Omacron', 635, 451)\n\t* ('omacron', 20, 108)\n\t* ('Obreve', 643, 451)\n\t* ('obreve', 20, 108)\n\t* ('Ohungarumlaut', 635, 451)\n\t* ('ohungarumlaut', 13, 108)\n\t* ('oe', 427, -16)\n\t* ('oe', 20, 111)\n\t* ('oe', 716, 217)\n\t* ('Sacute', 387, -16)\n\t* ('sacute', 224, -17)\n\t* ('Scircumflex', 387, -16)\n\t* ('scircumflex', 224, -17)\n\t* ('Scedilla', 357, 644)\n\t* ('Scaron', 387, -16)\n\t* ('scaron', 224, -17)\n\t* ('tcaron', 161, -13)\n\t* ('tbar', 161, -13)\n\t* ('Utilde', 269, 810)\n\t* ('utilde', 338, -15)\n\t* ('utilde', 168, 606)\n\t* ('umacron', 345, -15)\n\t* ('ubreve', 345, -15)\n\t* ('uring', 345, -15)\n\t* ('uhungarumlaut', 345, -15)\n\t* ('uogonek', 38, 390)\n\t* ('ycircumflex', 89, -225)\n\t* ('zacute', 351, -3)\n\t* ('zacute', 38, -2)\n\t* ('zdotaccent', 350, -3)\n\t* ('zdotaccent', 37, -2)\n\t* ('zcaron', 322, -3)\n\t* ('zcaron', 9, -2)\n\t* ('ohorn', 645, 722)\n\t* ('Uhorn', 34, 111)\n\t* ('Uhorn', 443, 522)\n\t* ('uhorn', 671, 774)\n\t* ('uni01B7', 339, -15)\n\t* ('uni01B7', 482, 536)\n\t* ('longs', 28, 100)\n\t* ('aeacute', 348, -15)\n\t* ('aeacute', 11, -13)\n\t* ('aeacute', 635, 217)\n\t* ('Oslashacute', 648, 419)\n\t* ('oslashacute', 42, 76)\n\t* ('Scommaaccent', 306, 636)\n\t* ('dotaccent', 24, 549)\n\t* ('tilde', 153, 606)\n\t* ('tildecomb', 141, 604)\n\t* ('hookabovecomb', 157, 543)\n\t* ('uni0313', 131, 649)\n\t* ('uni0314', 52, 453)\n\t* ('perispomenicomb', 139, 604)\n\t* ('uni0343', 131, 649)\n\t* ('uni0345', 46, -226)\n\t* ('uni0345', 7, -221)\n\t* ('uni037A', 46, -226)\n\t* ('uni037A', 7, -221)\n\t* ('Omicrontonos', 657, 463)\n\t* ('iotadieresistonos', 89, -8)\n\t* ('Beta', 574, 248)\n\t* ('Theta', 648, 456)\n\t* ('Omicron', 651, 458)\n\t* ('Phi', 704, 186)\n\t* ('Phi', 36, 187)\n\t* ('Psi', 746, 456)\n\t* ('epsilontonos', 123, -11)\n\t* ('epsilontonos', 24, 175)\n\t* ('iotatonos', 100, -22)\n\t* ('beta', 463, 107)\n\t* ('beta', 293, 613)\n\t* ('delta', 30, 103)\n\t* ('epsilon', 123, -11)\n\t* ('epsilon', 24, 175)\n\t* ('eta', 480, 391)\n\t* ('iota', 100, -14)\n\t* ('iota', 168, 396)\n\t* ('lambda', 417, -13)\n\t* ('uni03BC', 52, -64)\n\t* ('nu', 401, 193)\n\t* ('nu', 315, 397)\n\t* ('xi', 32, 15)\n\t* ('omicron', 23, 111)\n\t* ('uni03C2', 239, 405)\n\t* ('sigma', 306, 390)\n\t* ('tau', 287, -10)\n\t* ('upsilon', 395, 389)\n\t* ('chi', 483, -194)\n\t* ('psi', 21, 156)\n\t* ('iotadieresis', 95, -19)\n\t* ('omicrontonos', 23, 111)\n\t* ('uni03DA', 216, -153)\n\t* ('uni03DE', 21, 122)\n\t* ('Ohm', 635, 451)\n\t* ('ohm', 22, 111)\n\t* ('uni1EA1', 272, 399)\n\t* ('uni1EA8', 657, 775)\n\t* ('uni1EA9', 548, 543)\n\t* ('uni1EAA', 275, 1003)\n\t* ('uni1EAB', 169, 810)\n\t* ('uni1EB4', 262, 981)\n\t* ('uni1EB5', 165, 782)\n\t* ('uni1EB9', 417, 215)\n\t* ('uni1EBB', 139, -15)\n\t* ('uni1EBB', 415, 217)\n\t* ('uni1EBD', 141, -17)\n\t* ('uni1EBD', 417, 215)\n\t* ('uni1EBD', 160, 608)\n\t* ('uni1EBF', 139, -15)\n\t* ('uni1EC1', 139, -15)\n\t* ('uni1EC2', 634, 779)\n\t* ('uni1EC3', 139, -17)\n\t* ('uni1EC3', 551, 567)\n\t* ('uni1EC4', 258, 976)\n\t* ('uni1EC5', 139, -15)\n\t* ('uni1EC5', 175, 819)\n\t* ('uni1EC7', 411, 213)\n\t* ('uni1EC8', 210, 760)\n\t* ('uni1EC9', 169, 542)\n\t* ('uni1ECC', 635, 451)\n\t* ('uni1ECD', 20, 108)\n\t* ('uni1ECE', 635, 451)\n\t* ('uni1ECF', 20, 108)\n\t* ('uni1ED1', 20, 108)\n\t* ('uni1ED3', 20, 102)\n\t* ('uni1ED4', 663, 715)\n\t* ('uni1ED5', 20, 100)\n\t* ('uni1ED5', 532, 564)\n\t* ('uni1ED6', 635, 451)\n\t* ('uni1ED6', 278, 997)\n\t* ('uni1ED7', 20, 108)\n\t* ('uni1ED7', 169, 798)\n\t* ('uni1ED8', 635, 451)\n\t* ('uni1ED9', 20, 108)\n\t* ('uni1EDB', 34, 111)\n\t* ('uni1EDD', 34, 111)\n\t* ('uni1EDF', 34, 111)\n\t* ('uni1EE0', 273, 811)\n\t* ('uni1EE1', 34, 111)\n\t* ('uni1EE1', 167, 678)\n\t* ('uni1EE2', 645, 722)\n\t* ('uni1EE3', 34, 111)\n\t* ('uni1EE3', 443, 522)\n\t* ('uni1EE5', 31, 390)\n\t* ('uni1EE7', 338, -15)\n\t* ('uni1EE9', 339, -15)\n\t* ('uni1EEB', 339, -15)\n\t* ('uni1EED', 339, -15)\n\t* ('uni1EEE', 243, 804)\n\t* ('uni1EEF', 339, -15)\n\t* ('uni1EEF', 124, 605)\n\t* ('uni1EF0', 671, 774)\n\t* ('uni1EF1', 482, 536)\n\t* ('ygrave', 89, -225)\n\t* ('uni1EF5', 89, -225)\n\t* ('uni1EF7', 89, -225)\n\t* ('uni1EF8', 242, 808)\n\t* ('uni1EF9', 89, -225)\n\t* ('uni1EF9', 195, 605)\n\t* ('uni1F00', 301, 649)\n\t* ('uni1F08', 54, 666)\n\t* ('uni1F10', 123, -11)\n\t* ('uni1F10', 24, 175)\n\t* ('uni1F10', 217, 642)\n\t* ('uni1F11', 123, -11)\n\t* ('uni1F11', 24, 175)\n\t* ('uni1F12', 123, -11)\n\t* ('uni1F12', 24, 175)\n\t* ('uni1F13', 123, -11)\n\t* ('uni1F14', 123, -11)\n\t* ('uni1F14', 24, 175)\n\t* ('uni1F15', 123, -11)\n\t* ('uni1F15', 24, 175)\n\t* ('uni1F18', -52, 663)\n\t* ('uni1F20', 318, 647)\n\t* ('uni1F28', -73, 661)\n\t* ('uni1F30', 100, -14)\n\t* ('uni1F30', 156, 645)\n\t* ('uni1F31', 100, -14)\n\t* ('uni1F32', 100, -14)\n\t* ('uni1F33', 89, -8)\n\t* ('uni1F34', 100, -14)\n\t* ('uni1F35', 100, -14)\n\t* ('uni1F36', 100, -14)\n\t* ('uni1F37', 100, -14)\n\t* ('uni1F38', -54, 675)\n\t* ('uni1F40', 23, 111)\n\t* ('uni1F40', 288, 648)\n\t* ('uni1F41', 23, 111)\n\t* ('uni1F42', 23, 111)\n\t* ('uni1F43', 23, 111)\n\t* ('uni1F44', 23, 111)\n\t* ('uni1F45', 23, 111)\n\t* ('uni1F48', 656, 458)\n\t* ('uni1F48', -32, 670)\n\t* ('uni1F49', 653, 458)\n\t* ('uni1F4A', 661, 458)\n\t* ('uni1F4B', 656, 458)\n\t* ('uni1F4C', 650, 458)\n\t* ('uni1F4D', 655, 458)\n\t* ('uni1F50', 310, 648)\n\t* ('uni1F60', 410, 640)\n\t* ('uni1F68', -20, 670)\n\t* ('uni1F72', 123, -16)\n\t* ('uni1F72', 23, 170)\n\t* ('uni1F73', 123, -11)\n\t* ('uni1F73', 24, 175)\n\t* ('uni1F76', 100, -14)\n\t* ('uni1F77', 99, -14)\n\t* ('uni1F78', 30, 111)\n\t* ('uni1F79', 23, 111)\n\t* ('uni1F80', 250, -223)\n\t* ('uni1F80', 333, 649)\n\t* ('uni1F81', 229, -226)\n\t* ('uni1F82', 253, -223)\n\t* ('uni1F83', 231, -226)\n\t* ('uni1F84', 210, -226)\n\t* ('uni1F85', 221, -226)\n\t* ('uni1F86', 190, -226)\n\t* ('uni1F87', 210, -226)\n\t* ('uni1F88', 25, 649)\n\t* ('uni1F88', 296, -236)\n\t* ('uni1F89', 292, -226)\n\t* ('uni1F8A', 288, -230)\n\t* ('uni1F8B', 277, -226)\n\t* ('uni1F8C', 292, -226)\n\t* ('uni1F8D', 292, -226)\n\t* ('uni1F8E', 285, -226)\n\t* ('uni1F8F', 285, -226)\n\t* ('uni1F90', 134, -226)\n\t* ('uni1F90', 307, 649)\n\t* ('uni1F91', 135, -226)\n\t* ('uni1F92', 145, -226)\n\t* ('uni1F93', 149, -226)\n\t* ('uni1F94', 139, -226)\n\t* ('uni1F95', 145, -226)\n\t* ('uni1F96', 136, -226)\n\t* ('uni1F97', 146, -226)\n\t* ('uni1F98', -76, 653)\n\t* ('uni1F98', 314, -226)\n\t* ('uni1F99', 297, -226)\n\t* ('uni1F9A', 312, -226)\n\t* ('uni1F9B', 307, -226)\n\t* ('uni1F9C', 302, -226)\n\t* ('uni1F9D', 320, -226)\n\t* ('uni1F9E', 313, -226)\n\t* ('uni1F9F', 312, -226)\n\t* ('uni1FA0', 320, -226)\n\t* ('uni1FA0', 416, 646)\n\t* ('uni1FA1', 319, -226)\n\t* ('uni1FA2', 326, -226)\n\t* ('uni1FA3', 331, -226)\n\t* ('uni1FA4', 324, -226)\n\t* ('uni1FA5', 321, -226)\n\t* ('uni1FA6', 314, -226)\n\t* ('uni1FA7', 320, -226)\n\t* ('uni1FA8', -42, 677)\n\t* ('uni1FA8', 308, -226)\n\t* ('uni1FA9', 312, -226)\n\t* ('uni1FAA', 315, -226)\n\t* ('uni1FAB', 320, -226)\n\t* ('uni1FAC', 308, -227)\n\t* ('uni1FAD', 312, -226)\n\t* ('uni1FAE', 305, -226)\n\t* ('uni1FAF', 323, -226)\n\t* ('uni1FB2', 227, -226)\n\t* ('uni1FB3', 232, -222)\n\t* ('uni1fFB4', 220, -226)\n\t* ('uni1FB6', 207, 601)\n\t* ('uni1FB7', 229, -229)\n\t* ('uni1FB7', 213, 603)\n\t* ('uni1FBC', 284, -226)\n\t* ('uni1FBD', 131, 649)\n\t* ('uni1FBE', 46, -226)\n\t* ('uni1FBE', 7, -221)\n\t* ('uni1FBF', 131, 649)\n\t* ('uni1FC0', 139, 612)\n\t* ('uni1FC1', 142, 741)\n\t* ('uni1FC2', 135, -226)\n\t* ('uni1FC3', 490, 391)\n\t* ('uni1FC3', 148, -226)\n\t* ('uni1FC4', 139, -226)\n\t* ('uni1FC6', 218, 612)\n\t* ('uni1FC7', 142, -226)\n\t* ('uni1FC7', 218, 612)\n\t* ('uni1FCC', 310, -226)\n\t* ('uni1FCF', 177, 458)\n\t* ('uni1FD0', 100, -14)\n\t* ('uni1FD1', 100, -14)\n\t* ('uni1FD2', 102, -11)\n\t* ('uni1FD3', 100, -14)\n\t* ('uni1FD6', 100, -14)\n\t* ('uni1FD6', 42, 604)\n\t* ('uni1FD7', 100, -14)\n\t* ('uni1FD7', 51, 741)\n\t* ('uni1FDF', 137, 460)\n\t* ('uni1FE4', 279, 645)\n\t* ('uni1FE6', 195, 607)\n\t* ('uni1FE7', 205, 741)\n\t* ('uni1FF2', 326, -226)\n\t* ('uni1FF3', 327, -226)\n\t* ('uni1FF4', 320, -226)\n\t* ('uni1FF6', 288, 610)\n\t* ('uni1FF7', 323, -226)\n\t* ('uni1FF7', 290, 606)\n\t* ('uni1FF8', 653, 458)\n\t* ('uni1FF9', 653, 458)\n\t* ('uni1FFC', 312, -226)\n\t* ('uni1FFE', 52, 462)\n\t* ('perthousand', 1004, 323)\n\t* ('perthousand', 35, 536)\n\t* ('interrobang', 366, 641)\n\t* ('zerosuperior', 63, 527)\n\t* ('zerosuperior', 333, 635)\n\t* ('sixsuperior', 138, 267)\n\t* ('sixsuperior', 64, 475)\n\t* ('sixsuperior', 322, 416)\n\t* ('eightsuperior', 68, 330)\n\t* ('eightsuperior', 325, 408)\n\t* ('ninesuperior', 255, 634)\n\t* ('ninesuperior', 323, 562)\n\t* ('zeroinferior', 53, 250)\n\t* ('zeroinferior', 323, 358)\n\t* ('threeinferior', 95, 366)\n\t* ('sixinferior', 131, -5)\n\t* ('sixinferior', 57, 203)\n\t* ('sixinferior', 315, 144)\n\t* ('eightinferior', 58, 57)\n\t* ('eightinferior', 315, 135)\n\t* ('nineinferior', 259, 366)\n\t* ('nineinferior', 327, 294)\n\t* ('uni2159', 722, 142)\n\t* ('uni215A', 730, 139)\n\t* ('oneeighth', 725, 145)\n\t* ('threeeighths', 728, 146)\n\t* ('fiveeighths', 754, 144)\n\t* ('seveneighths', 728, 142)\n\t* ('partialdiff', 23, 111)\n\t* ('partialdiff', 431, 315)\n\t* ('zeta.alt', 295, -129)\n\t* ('zeta.alt', 191, -192)\n\t* ('delta.alt', 274, 522)\n\t* ('Omega.alt', 411, -15)\n\t* ('Omega.alt', 11, 98)\n\t* ('fi', 203, 649)\n\t* ('fl', 422, -4)\n\t* ('ffi', 486, 649) and ('ffl', 693, -4)\n\nThis happens a lot when points are not extremes, which is usually bad. However, fixing this alert by adding points on extremes may do more harm than good, especially with italics, calligraphic-script, handwriting, rounded and other fonts. So it is common to ignore this message. [code: points-out-of-bounds]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "result": "WARN"
                },
                {
                    "description": "Check glyphs do not have duplicate components which have the same x,y coordinates.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.glyf>",
                        "<FontBakeryCheck:com.google.fonts/check/glyf_non_transformed_duplicate_components>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Glyphs do not contain duplicate components which have the same x,y coordinates.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        There have been cases in which fonts had faulty double quote marks, with each\n        of them containing two single quote marks as components with the same\n        x, y coordinates which makes them visually look like single quote marks.\n\n        This check ensures that glyphs do not contain duplicate components\n        which have the same x,y coordinates.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Is there any unused data at the end of the glyf table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.glyf>",
                        "<FontBakeryCheck:com.google.fonts/check/glyf_unused_data>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "There is no unused data at the end of the glyf table.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Check for points out of bounds.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.glyf>",
                        "<FontBakeryCheck:com.google.fonts/check/points_out_of_bounds>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The following glyphs have coordinates which are out of bounds:\n\t* ('ampersand', 299, -14)\n\t* ('zero', 326, -18)\n\t* ('two', 266, 643)\n\t* ('three', 311, 647)\n\t* ('three', 523, 581)\n\t* ('six', 134, -25)\n\t* ('seven', 46, -5)\n\t* ('question', 344, 638)\n\t* ('at', 450, -266)\n\t* ('at', 424, 629)\n\t* ('S', 437, 644)\n\t* ('a', 166, 400)\n\t* ('a', 481, 401)\n\t* ('c', 114, -11)\n\t* ('c', 309, 400)\n\t* ('d', 105, -10)\n\t* ('e', 112, -12)\n\t* ('e', 175, 397)\n\t* ('g', 180, 399)\n\t* ('i', 44, -8)\n\t* ('l', 31, -8)\n\t* ('l', 229, 631)\n\t* ('l', 245, 620)\n\t* ('m', 539, -8)\n\t* ('m', 165, 398)\n\t* ('n', 294, -8)\n\t* ('n', 165, 398)\n\t* ('p', 377, 397)\n\t* ('q', 170, 399)\n\t* ('s', 202, -13)\n\t* ('t', 92, -13)\n\t* ('t', 265, 386)\n\t* ('u', 302, -15)\n\t* ('y', -24, -226)\n\t* ('z', 318, -5)\n\t* ('cent', 160, -5)\n\t* ('currency', 467, 147)\n\t* ('currency', 33, 147)\n\t* ('section', 219, -52)\n\t* ('ordfeminine', 129, 558)\n\t* ('ordfeminine', 357, 560)\n\t* ('threesuperior', 181, 636)\n\t* ('threesuperior', 299, 627)\n\t* ('cedilla', 227, -200)\n\t* ('ordmasculine', 14, 317)\n\t* ('ordmasculine', 356, 452)\n\t* ('questiondown', 162, -223)\n\t* ('Ccedilla', 227, -200)\n\t* ('germandbls', 332, -16)\n\t* ('ae', 382, -12)\n\t* ('ae', 274, -13)\n\t* ('ccedilla', 167, -200)\n\t* ('ccedilla', 309, 400)\n\t* ('egrave', 112, -12)\n\t* ('eacute', 110, -10)\n\t* ('ecircumflex', 119, -12)\n\t* ('edieresis', 112, -12)\n\t* ('igrave', 57, -15)\n\t* ('igrave', 215, 382)\n\t* ('iacute', 47, -8)\n\t* ('icircumflex', 60, -9)\n\t* ('idieresis', 51, -7)\n\t* ('ntilde', 294, -8)\n\t* ('ugrave', 302, -11)\n\t* ('uacute', 302, -15)\n\t* ('ucircumflex', 302, -15)\n\t* ('udieresis', 302, -15)\n\t* ('yacute', -24, -226)\n\t* ('thorn', 259, 631)\n\t* ('ydieresis', -24, -226)\n\t* ('aogonek', 166, 400)\n\t* ('aogonek', 481, 401)\n\t* ('cacute', 114, -11)\n\t* ('ccircumflex', 114, -11)\n\t* ('cdotaccent', 114, -11)\n\t* ('ccaron', 114, -11)\n\t* ('dcaron', 105, -10)\n\t* ('dcroat', 105, -10)\n\t* ('emacron', 105, -12)\n\t* ('ebreve', 112, -12)\n\t* ('edotaccent', 112, -12)\n\t* ('eogonek', 175, 397)\n\t* ('ecaron', 112, -12)\n\t* ('itilde', 44, -8)\n\t* ('imacron', 44, -8)\n\t* ('ibreve', 44, -8)\n\t* ('Iogonek', -29, -165)\n\t* ('iogonek', -29, -165)\n\t* ('dotlessi', 44, -8)\n\t* ('dotlessi', 199, 398)\n\t* ('dotlessi', 215, 387)\n\t* ('lacute', 31, -8)\n\t* ('lcommaaccent', 229, 631)\n\t* ('lcommaaccent', 245, 620)\n\t* ('lcaron', 31, -8)\n\t* ('ldot', 31, -8)\n\t* ('ldot', 229, 631)\n\t* ('ldot', 348, 325)\n\t* ('lslash', 31, -8)\n\t* ('lslash', 229, 631)\n\t* ('nacute', 294, -8)\n\t* ('ncommaaccent', 179, 398)\n\t* ('ncaron', 294, -8)\n\t* ('napostrophe', 301, -8)\n\t* ('Eng', 360, -225)\n\t* ('eng', 165, 398)\n\t* ('oe', 396, -13)\n\t* ('oe', 475, 397)\n\t* ('sacute', 202, -12)\n\t* ('scircumflex', 202, -13)\n\t* ('Scedilla', 437, 644)\n\t* ('scaron', 202, -13)\n\t* ('tcommaaccent', 265, 386)\n\t* ('tcaron', 92, -13)\n\t* ('tbar', 92, -13)\n\t* ('tbar', 265, 386)\n\t* ('utilde', 302, -15)\n\t* ('umacron', 302, -15)\n\t* ('ubreve', 302, -15)\n\t* ('uring', 302, -15)\n\t* ('uhungarumlaut', 302, -15)\n\t* ('ycircumflex', -24, -226)\n\t* ('zacute', 318, -5)\n\t* ('zdotaccent', 318, -5)\n\t* ('zcaron', 318, -5)\n\t* ('uhorn', 302, -15)\n\t* ('aeacute', 382, -12)\n\t* ('aeacute', 274, -13)\n\t* ('Scommaaccent', 437, 644)\n\t* ('breve', 236, 464)\n\t* ('dotaccent', 231, 550)\n\t* ('ogonek', 51, -163)\n\t* ('uni0314', 49, 457)\n\t* ('uni0314', 78, 638)\n\t* ('cedillacomb', 162, -200)\n\t* ('ogonekcomb', 9, -163)\n\t* ('uni0345', 37, -226)\n\t* ('ypogegrammenicomb', 37, -226)\n\t* ('iotadieresistonos', 57, -15)\n\t* ('uni03A9', 346, 648)\n\t* ('epsilontonos', 86, -11)\n\t* ('epsilontonos', 12, 41)\n\t* ('iotatonos', 57, -15)\n\t* ('upsilondieresistonos', 91, -9)\n\t* ('upsilondieresistonos', 12, 150)\n\t* ('alpha', 161, 400)\n\t* ('alpha', 477, 403)\n\t* ('beta', 385, 616)\n\t* ('epsilon', 86, -11)\n\t* ('epsilon', 12, 41)\n\t* ('eta', 471, 406)\n\t* ('iota', 57, -15)\n\t* ('iota', 200, 392)\n\t* ('iota', 215, 382)\n\t* ('lambda', 388, -13)\n\t* ('nu', 331, 397)\n\t* ('uni03C2', 288, 410)\n\t* ('sigma', 254, -6)\n\t* ('sigma', 335, 393)\n\t* ('tau', 193, -7)\n\t* ('upsilon', 91, -9)\n\t* ('upsilon', 12, 150)\n\t* ('iotadieresis', 57, -15)\n\t* ('upsilondieresis', 91, -9)\n\t* ('upsilondieresis', 12, 150)\n\t* ('upsilontonos', 91, -9)\n\t* ('upsilontonos', 12, 150)\n\t* ('uni03DA', 183, -153)\n\t* ('uni03E0', 740, -39)\n\t* ('uni1EA1', 166, 400)\n\t* ('uni1EA1', 481, 401)\n\t* ('uni1EB9', 175, 397)\n\t* ('uni1EBB', 112, -12)\n\t* ('uni1EBD', 112, -12)\n\t* ('uni1EBF', 112, -12)\n\t* ('uni1EC1', 112, -12)\n\t* ('uni1EC3', 112, -12)\n\t* ('uni1EC5', 104, -12)\n\t* ('uni1EC9', 44, -8)\n\t* ('uni1EE7', 302, -15)\n\t* ('uni1EE9', 302, -15)\n\t* ('uni1EEB', 302, -15)\n\t* ('uni1EED', 302, -15)\n\t* ('uni1EEF', 302, -15)\n\t* ('ygrave', -24, -226)\n\t* ('uni1EF5', -31, -226)\n\t* ('uni1EF7', -24, -226)\n\t* ('uni1EF9', -24, -226)\n\t* ('uni1F10', 82, -11)\n\t* ('uni1F10', 8, 41)\n\t* ('uni1F11', 79, -11)\n\t* ('uni1F11', 5, 41)\n\t* ('uni1F12', 86, -11)\n\t* ('uni1F12', 12, 41)\n\t* ('uni1F13', 81, -11)\n\t* ('uni1F13', 7, 41)\n\t* ('uni1F14', 86, -11)\n\t* ('uni1F14', 12, 41)\n\t* ('uni1F15', 79, -11)\n\t* ('uni1F15', 5, 41)\n\t* ('uni1F28', -24, 664)\n\t* ('uni1F30', 38, -9)\n\t* ('uni1F31', 42, -7)\n\t* ('uni1F32', 47, -7)\n\t* ('uni1F33', 47, -7)\n\t* ('uni1F34', 47, -7)\n\t* ('uni1F35', 40, -9)\n\t* ('uni1F36', 57, -15)\n\t* ('uni1F37', 48, -8)\n\t* ('uni1F50', 91, -9)\n\t* ('uni1F50', 12, 150)\n\t* ('uni1F51', 91, -9)\n\t* ('uni1F51', 12, 150)\n\t* ('uni1F52', 91, -9)\n\t* ('uni1F52', 12, 150)\n\t* ('uni1F53', 91, -9)\n\t* ('uni1F53', 12, 150)\n\t* ('uni1F54', 91, -9)\n\t* ('uni1F54', 12, 150)\n\t* ('uni1F55', 91, -9)\n\t* ('uni1F55', 12, 150)\n\t* ('uni1F56', 91, -9)\n\t* ('uni1F56', 12, 150)\n\t* ('uni1F57', 91, -9)\n\t* ('uni1F57', 12, 150)\n\t* ('uni1F72', 82, -11)\n\t* ('uni1F72', 8, 41)\n\t* ('uni1F73', 86, -11)\n\t* ('uni1F73', 12, 41)\n\t* ('uni1F76', 46, -9)\n\t* ('uni1F76', 216, 387)\n\t* ('uni1F77', 50, -15)\n\t* ('uni1F7A', 91, -8)\n\t* ('uni1F7A', 12, 151)\n\t* ('uni1F7B', 91, -9)\n\t* ('uni1F7B', 12, 150)\n\t* ('uni1F80', 147, -226)\n\t* ('uni1F81', 142, -226)\n\t* ('uni1F82', 150, -226)\n\t* ('uni1F83', 184, -226)\n\t* ('uni1F84', 153, -226)\n\t* ('uni1F85', 154, -226)\n\t* ('uni1F86', 153, -226)\n\t* ('uni1F87', 153, -226)\n\t* ('uni1F88', 285, -226)\n\t* ('uni1F89', 285, -226)\n\t* ('uni1F8A', 285, -226)\n\t* ('uni1F8B', 285, -226)\n\t* ('uni1F8C', 275, -226)\n\t* ('uni1F8D', 285, -226)\n\t* ('uni1F8E', 275, -226)\n\t* ('uni1F8F', 285, -226)\n\t* ('uni1F90', 57, -226)\n\t* ('uni1F91', 58, -226)\n\t* ('uni1F92', 51, -226)\n\t* ('uni1F93', 56, -227)\n\t* ('uni1F94', 56, -227)\n\t* ('uni1F95', 57, -226)\n\t* ('uni1F96', 49, -226)\n\t* ('uni1F97', 49, -226)\n\t* ('uni1F98', 250, -226)\n\t* ('uni1F99', 250, -226)\n\t* ('uni1F9A', 250, -226)\n\t* ('uni1F9B', 260, -226)\n\t* ('uni1F9C', 253, -226)\n\t* ('uni1F9D', 273, -226)\n\t* ('uni1F9E', 265, -226)\n\t* ('uni1F9F', 263, -226)\n\t* ('uni1FA0', 263, -226)\n\t* ('uni1FA1', 262, -226)\n\t* ('uni1FA2', 259, -226)\n\t* ('uni1FA3', 264, -226)\n\t* ('uni1FA4', 257, -226)\n\t* ('uni1FA5', 264, -226)\n\t* ('uni1FA6', 257, -226)\n\t* ('uni1FA7', 253, -226)\n\t* ('uni1FA8', 297, -226)\n\t* ('uni1FA9', 295, -226)\n\t* ('uni1FAA', 311, -226)\n\t* ('uni1FAB', 320, -226)\n\t* ('uni1FAC', 309, -226)\n\t* ('uni1FAD', 312, -226)\n\t* ('uni1FAE', 302, -226)\n\t* ('uni1FAF', 302, -226)\n\t* ('uni1FB2', 153, -226)\n\t* ('uni1FB3', 161, 400)\n\t* ('uni1FB3', 477, 403)\n\t* ('uni1FB3', 153, -226)\n\t* ('uni1fFB4', 160, -226)\n\t* ('uni1FB7', 195, -226)\n\t* ('uni1FBC', 285, -226)\n\t* ('uni1FBD', 81, 459)\n\t* ('uni1FBD', 127, 640)\n\t* ('uni1FBE', 37, -226)\n\t* ('uni1FBF', 81, 459)\n\t* ('uni1FBF', 127, 640)\n\t* ('uni1FC2', 58, -226)\n\t* ('uni1FC3', 471, 406)\n\t* ('uni1FC3', 51, -226)\n\t* ('uni1FC4', 52, -226)\n\t* ('uni1FC7', 55, -226)\n\t* ('uni1FCC', 263, -226)\n\t* ('uni1FCF', 139, 465)\n\t* ('uni1FD0', 57, -15)\n\t* ('uni1FD1', 57, -15)\n\t* ('uni1FD2', 57, -15)\n\t* ('uni1FD2', 325, 534)\n\t* ('uni1FD3', 44, -9)\n\t* ('uni1FD3', 337, 540)\n\t* ('uni1FD6', 43, -9)\n\t* ('uni1FD7', 57, -15)\n\t* ('uni1FDF', 97, 459)\n\t* ('uni1FE0', 92, -9)\n\t* ('uni1FE0', 13, 150)\n\t* ('uni1FE1', 92, -9)\n\t* ('uni1FE1', 13, 150)\n\t* ('uni1FE2', 91, -9)\n\t* ('uni1FE2', 12, 150)\n\t* ('uni1FE3', 91, -9)\n\t* ('uni1FE3', 12, 150)\n\t* ('uni1FE6', 91, -9)\n\t* ('uni1FE6', 12, 150)\n\t* ('uni1FE7', 92, -9)\n\t* ('uni1FE7', 13, 150)\n\t* ('uni1FED', 353, 536)\n\t* ('uni1FEE', 353, 535)\n\t* ('uni1FF2', 249, -226)\n\t* ('uni1FF3', 260, -226)\n\t* ('uni1FF4', 253, -226)\n\t* ('uni1FF7', 256, -226)\n\t* ('uni1FFA', 355, 648)\n\t* ('uni1FFB', 355, 648)\n\t* ('uni1FFC', 355, 648)\n\t* ('uni1FFC', 313, -226)\n\t* ('uni1FFE', 36, 466)\n\t* ('uni2009', 124, 18)\n\t* ('dagger', 518, 456)\n\t* ('dagger', 45, 382)\n\t* ('daggerdbl', 557, 431)\n\t* ('daggerdbl', 34, -13)\n\t* ('uni203D', 302, 636)\n\t* ('sixsuperior', 123, 292)\n\t* ('sevensuperior', 74, 300)\n\t* ('nsuperior', 192, 249)\n\t* ('threeinferior', 229, 395)\n\t* ('threeinferior', 347, 386)\n\t* ('sixinferior', 121, -18)\n\t* ('seveninferior', 77, 7)\n\t* ('Omega', 346, 648)\n\t* ('onethird', 756, 354)\n\t* ('twothirds', 720, 356)\n\t* ('delta.alt', 385, 522) and ('Omega.alt', 514, -15)\n\nThis happens a lot when points are not extremes, which is usually bad. However, fixing this alert by adding points on extremes may do more harm than good, especially with italics, calligraphic-script, handwriting, rounded and other fonts. So it is common to ignore this message. [code: points-out-of-bounds]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "result": "WARN"
                },
                {
                    "description": "Check glyphs do not have duplicate components which have the same x,y coordinates.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.glyf>",
                        "<FontBakeryCheck:com.google.fonts/check/glyf_non_transformed_duplicate_components>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Glyphs do not contain duplicate components which have the same x,y coordinates.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        There have been cases in which fonts had faulty double quote marks, with each\n        of them containing two single quote marks as components with the same\n        x, y coordinates which makes them visually look like single quote marks.\n\n        This check ensures that glyphs do not contain duplicate components\n        which have the same x,y coordinates.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Is there any unused data at the end of the glyf table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.glyf>",
                        "<FontBakeryCheck:com.google.fonts/check/glyf_unused_data>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "There is no unused data at the end of the glyf table.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Check for points out of bounds.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.glyf>",
                        "<FontBakeryCheck:com.google.fonts/check/points_out_of_bounds>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The following glyphs have coordinates which are out of bounds:\n\t* ('dollar', 493, 245)\n\t* ('percent', 644, 323)\n\t* ('ampersand', 16, 137)\n\t* ('zero', 502, 464)\n\t* ('two', 350, 636)\n\t* ('three', 344, -13)\n\t* ('three', 343, 638)\n\t* ('four', 358, 631)\n\t* ('six', 66, 103)\n\t* ('six', 470, 240)\n\t* ('seven', 175, -2)\n\t* ('eight', 174, -8)\n\t* ('eight', 191, 634)\n\t* ('eight', 472, 245)\n\t* ('nine', 68, 415)\n\t* ('nine', 475, 508)\n\t* ('semicolon', 179, 51)\n\t* ('at', 490, -246)\n\t* ('at', 882, 381)\n\t* ('J', 12, 73)\n\t* ('S', 301, -15)\n\t* ('S', 162, 636)\n\t* ('S', 478, 300)\n\t* ('a', 257, 401)\n\t* ('c', 144, -12)\n\t* ('c', 32, 108)\n\t* ('c', 267, 399)\n\t* ('d', 31, 109)\n\t* ('e', 310, 395)\n\t* ('e', 399, 285)\n\t* ('e', 144, -12)\n\t* ('e', 32, 108)\n\t* ('f', 111, 613)\n\t* ('g', 31, 109)\n\t* ('h', 124, -1)\n\t* ('h', 391, -3)\n\t* ('l', 131, -5)\n\t* ('m', 381, -3)\n\t* ('n', 392, -5)\n\t* ('o', 31, 109)\n\t* ('q', 32, 277)\n\t* ('r', 105, -2)\n\t* ('s', 183, -12)\n\t* ('t', 155, -10)\n\t* ('u', 367, -15)\n\t* ('u', 59, 390)\n\t* ('asciitilde', 175, 287)\n\t* ('cent', 178, -5)\n\t* ('sterling', 434, -9)\n\t* ('currency', 467, 147)\n\t* ('currency', 33, 147)\n\t* ('section', 324, 443)\n\t* ('ordfeminine', 245, 524)\n\t* ('threesuperior', 174, 253)\n\t* ('threesuperior', 173, 634)\n\t* ('uni00B5', 63, -64)\n\t* ('paragraph', 32, 335)\n\t* ('cedilla', 221, -178)\n\t* ('ordmasculine', 23, 322)\n\t* ('Ccedilla', 334, -178)\n\t* ('germandbls', 289, 613)\n\t* ('germandbls', 433, 143)\n\t* ('ae', 245, -13)\n\t* ('ae', 280, 400)\n\t* ('ae', 617, 285)\n\t* ('ccedilla', 217, -179)\n\t* ('ccedilla', 32, 125)\n\t* ('ccedilla', 267, 399)\n\t* ('egrave', 144, -12)\n\t* ('egrave', 32, 108)\n\t* ('egrave', 399, 285)\n\t* ('eacute', 144, -12)\n\t* ('eacute', 32, 108)\n\t* ('eacute', 399, 285)\n\t* ('ecircumflex', 144, -12)\n\t* ('ecircumflex', 32, 108)\n\t* ('edieresis', 144, -12)\n\t* ('edieresis', 32, 108)\n\t* ('edieresis', 399, 285)\n\t* ('eth', 453, 319)\n\t* ('ntilde', 370, -3)\n\t* ('ograve', 31, 109)\n\t* ('oacute', 31, 109)\n\t* ('ocircumflex', 31, 109)\n\t* ('otilde', 31, 109)\n\t* ('odieresis', 31, 109)\n\t* ('oslash', 22, 132)\n\t* ('ugrave', 346, -15)\n\t* ('uacute', 346, -15)\n\t* ('ucircumflex', 346, -15)\n\t* ('udieresis', 346, -15)\n\t* ('Aogonek', 586, -222)\n\t* ('aogonek', 378, -222)\n\t* ('aogonek', 248, 398)\n\t* ('cacute', 144, -12)\n\t* ('cacute', 32, 108)\n\t* ('ccircumflex', 144, -12)\n\t* ('cdotaccent', 144, -12)\n\t* ('cdotaccent', 32, 108)\n\t* ('ccaron', 144, -12)\n\t* ('ccaron', 32, 108)\n\t* ('dcaron', 31, 109)\n\t* ('dcroat', 31, 109)\n\t* ('emacron', 399, 285)\n\t* ('emacron', 144, -12)\n\t* ('emacron', 32, 108)\n\t* ('ebreve', 399, 285)\n\t* ('ebreve', 144, -12)\n\t* ('ebreve', 32, 108)\n\t* ('edotaccent', 399, 285)\n\t* ('edotaccent', 144, -12)\n\t* ('edotaccent', 32, 108)\n\t* ('Eogonek', 366, -222)\n\t* ('eogonek', 296, -222)\n\t* ('eogonek', 32, 119)\n\t* ('eogonek', 310, 395)\n\t* ('eogonek', 399, 285)\n\t* ('ecaron', 399, 285)\n\t* ('ecaron', 144, -12)\n\t* ('ecaron', 32, 108)\n\t* ('gcircumflex', 31, 109)\n\t* ('gbreve', 31, 109)\n\t* ('gdotaccent', 11, 109)\n\t* ('gcommaaccent', 31, 109)\n\t* ('hcircumflex', 124, -1)\n\t* ('hcircumflex', 391, -3)\n\t* ('hbar', 113, -1)\n\t* ('hbar', 380, -3)\n\t* ('Iogonek', 166, -222)\n\t* ('Iogonek', 7, -171)\n\t* ('iogonek', 136, -222)\n\t* ('iogonek', -23, -171)\n\t* ('lacute', 131, -5)\n\t* ('lcaron', 131, -5)\n\t* ('ldot', 131, -5)\n\t* ('lslash', 113, -2)\n\t* ('nacute', 367, -5)\n\t* ('ncaron', 366, -5)\n\t* ('napostrophe', 395, -5)\n\t* ('eng', 367, 307)\n\t* ('omacron', 31, 109)\n\t* ('obreve', 31, 109)\n\t* ('ohungarumlaut', 31, 109)\n\t* ('oe', 31, 109)\n\t* ('oe', 654, 395)\n\t* ('oe', 743, 285)\n\t* ('oe', 462, -14)\n\t* ('racute', 105, -2)\n\t* ('rcaron', 105, -2)\n\t* ('Sacute', 301, -15)\n\t* ('Sacute', 478, 300)\n\t* ('sacute', 183, -12)\n\t* ('Scircumflex', 318, -15)\n\t* ('Scircumflex', 495, 300)\n\t* ('scircumflex', 183, -12)\n\t* ('Scedilla', 494, 205)\n\t* ('Scaron', 301, -15)\n\t* ('Scaron', 478, 300)\n\t* ('scaron', 183, -12)\n\t* ('tcaron', 155, -10)\n\t* ('tbar', 141, -10)\n\t* ('utilde', 367, -15)\n\t* ('umacron', 367, -15)\n\t* ('ubreve', 367, -15)\n\t* ('uring', 367, -15)\n\t* ('uhungarumlaut', 367, -15)\n\t* ('Uogonek', 416, -222)\n\t* ('uogonek', 399, -219)\n\t* ('uogonek', 38, 389)\n\t* ('longs', 111, 613)\n\t* ('florin', 15, -223)\n\t* ('florin', 183, 611)\n\t* ('Ohorn', 578, 751)\n\t* ('ohorn', 11, 109)\n\t* ('ohorn', 417, 509)\n\t* ('Uhorn', 636, 769)\n\t* ('uhorn', 326, -15)\n\t* ('uhorn', 432, 534)\n\t* ('uni01F5', 31, 109)\n\t* ('aeacute', 245, -13)\n\t* ('aeacute', 617, 285)\n\t* ('oslashacute', 22, 132)\n\t* ('Scommaaccent', 169, 646)\n\t* ('Scommaaccent', 485, 310)\n\t* ('uni0292', 365, 21)\n\t* ('dotaccent', 133, 529)\n\t* ('ogonek', 238, -219)\n\t* ('ogonek', 79, -168)\n\t* ('tildecomb', 175, 624)\n\t* ('uni0313', 108, 637)\n\t* ('uni0314', 61, 455)\n\t* ('uni0314', 52, 635)\n\t* ('cedillacomb', 221, -178)\n\t* ('ogonekcomb', 238, -219)\n\t* ('ogonekcomb', 79, -168)\n\t* ('perispomenicomb', 131, 591)\n\t* ('koroniscomb', 108, 637)\n\t* ('uni0345', 219, -225)\n\t* ('uni0345', 190, -221)\n\t* ('ypogegrammenicomb', 219, -225)\n\t* ('ypogegrammenicomb', 190, -221)\n\t* ('uni037E', 179, 51)\n\t* ('iotadieresistonos', 131, -21)\n\t* ('Psi', 611, 478)\n\t* ('Psi', 33, 476)\n\t* ('epsilontonos', 152, -20)\n\t* ('epsilontonos', 56, 132)\n\t* ('iotatonos', 131, -21)\n\t* ('beta', 475, 103)\n\t* ('beta', 307, 613)\n\t* ('delta', 58, 103)\n\t* ('epsilon', 152, -20)\n\t* ('epsilon', 56, 132)\n\t* ('zeta', 54, 233)\n\t* ('iota', 131, -21)\n\t* ('iota', 156, 409)\n\t* ('lambda', 433, 33)\n\t* ('lambda', 391, -12)\n\t* ('uni03BC', 63, -64)\n\t* ('nu', 378, 260)\n\t* ('nu', 103, 406)\n\t* ('xi', 64, 69)\n\t* ('omicron', 31, 109)\n\t* ('tau', 272, -20)\n\t* ('upsilon', 398, 392)\n\t* ('phi', 39, 107)\n\t* ('chi', 498, -230)\n\t* ('chi', 85, 411)\n\t* ('psi', 39, 169)\n\t* ('omega', 440, -10)\n\t* ('omega', 258, -8)\n\t* ('iotadieresis', 131, -21)\n\t* ('omicrontonos', 31, 109)\n\t* ('omegatonos', 440, -10)\n\t* ('omegatonos', 258, -8)\n\t* ('uni03DA', 313, 393)\n\t* ('uni03DE', 26, 118)\n\t* ('odieresiscyrillic', 31, 109)\n\t* ('adotbelow', 257, 401)\n\t* ('acircumflextilde', 146, 774)\n\t* ('edotbelow', 310, 395)\n\t* ('edotbelow', 399, 285)\n\t* ('edotbelow', 32, 108)\n\t* ('ehookabove', 399, 285)\n\t* ('ehookabove', 144, -12)\n\t* ('ehookabove', 32, 108)\n\t* ('etilde', 399, 285)\n\t* ('etilde', 144, -12)\n\t* ('etilde', 32, 108)\n\t* ('ecircumflexacute', 144, -12)\n\t* ('ecircumflexacute', 32, 108)\n\t* ('ecircumflexgrave', 144, -12)\n\t* ('ecircumflexgrave', 32, 108)\n\t* ('ecircumflexhookabove', 144, -12)\n\t* ('ecircumflexhookabove', 32, 108)\n\t* ('ecircumflextilde', 144, -12)\n\t* ('ecircumflextilde', 32, 108)\n\t* ('ecircumflexdotbelow', 32, 108)\n\t* ('odotbelow', 31, 109)\n\t* ('ohookabove', 31, 109)\n\t* ('ocircumflexacute', 31, 109)\n\t* ('ocircumflexgrave', 31, 109)\n\t* ('ocircumflexhookabove', 31, 109)\n\t* ('ocircumflextilde', 31, 109)\n\t* ('ocircumflexdotbelow', 31, 109)\n\t* ('ohornacute', 11, 109)\n\t* ('uni1EDD', 11, 109)\n\t* ('ohorngrave', 11, 109)\n\t* ('ohorntilde', 11, 109)\n\t* ('Ohorndotbelow', 578, 751)\n\t* ('ohorndotbelow', 11, 109)\n\t* ('ohorndotbelow', 417, 509)\n\t* ('udotbelow', 59, 390)\n\t* ('uhookabove', 367, -15)\n\t* ('uhornacute', 326, -15)\n\t* ('uhorngrave', 326, -15)\n\t* ('uhornhookabove', 326, -15)\n\t* ('uhorntilde', 326, -15)\n\t* ('Uhorndotbelow', 636, 769)\n\t* ('uhorndotbelow', 432, 534)\n\t* ('uni1F00', 301, 636)\n\t* ('uni1F01', 260, 635)\n\t* ('uni1F08', 105, 637)\n\t* ('uni1F09', 78, 642)\n\t* ('uni1F10', 152, -20)\n\t* ('uni1F10', 56, 132)\n\t* ('uni1F10', 234, 636)\n\t* ('uni1F11', 148, 635)\n\t* ('uni1F11', 152, -20)\n\t* ('uni1F11', 56, 132)\n\t* ('uni1F12', 132, -20)\n\t* ('uni1F12', 36, 132)\n\t* ('uni1F13', 152, -20)\n\t* ('uni1F14', 152, -20)\n\t* ('uni1F14', 56, 132)\n\t* ('uni1F15', 152, -20)\n\t* ('uni1F15', 56, 132)\n\t* ('uni1F18', 105, 647)\n\t* ('uni1F19', 78, 647)\n\t* ('uni1F20', 261, 636)\n\t* ('uni1F21', 233, 635)\n\t* ('uni1F28', 105, 649)\n\t* ('uni1F29', 78, 649)\n\t* ('uni1F30', 131, -21)\n\t* ('uni1F30', 150, 636)\n\t* ('uni1F31', 131, -21)\n\t* ('uni1F31', 112, 635)\n\t* ('uni1F32', 131, -21)\n\t* ('uni1F33', 131, -21)\n\t* ('uni1F34', 131, -21)\n\t* ('uni1F35', 131, -21)\n\t* ('uni1F36', 131, -21)\n\t* ('uni1F37', 131, -21)\n\t* ('uni1F38', 95, 637)\n\t* ('uni1F39', 64, 634)\n\t* ('uni1F40', 31, 109)\n\t* ('uni1F40', 271, 636)\n\t* ('uni1F41', 31, 109)\n\t* ('uni1F41', 237, 635)\n\t* ('uni1F42', 31, 109)\n\t* ('uni1F43', 31, 109)\n\t* ('uni1F44', 31, 109)\n\t* ('uni1F45', 31, 109)\n\t* ('uni1F48', 105, 650)\n\t* ('uni1F49', 78, 644)\n\t* ('uni1F50', 278, 636)\n\t* ('uni1F51', 248, 635)\n\t* ('uni1F59', 78, 633)\n\t* ('uni1F60', 440, -10)\n\t* ('uni1F60', 258, -8)\n\t* ('uni1F60', 382, 636)\n\t* ('uni1F61', 440, -10)\n\t* ('uni1F61', 258, -8)\n\t* ('uni1F61', 346, 635)\n\t* ('uni1F62', 440, -10)\n\t* ('uni1F62', 258, -8)\n\t* ('uni1F63', 440, -10)\n\t* ('uni1F63', 258, -8)\n\t* ('uni1F64', 440, -10)\n\t* ('uni1F64', 258, -8)\n\t* ('uni1F65', 440, -10)\n\t* ('uni1F65', 258, -8)\n\t* ('uni1F66', 440, -10)\n\t* ('uni1F66', 258, -8)\n\t* ('uni1F67', 440, -10)\n\t* ('uni1F67', 258, -8)\n\t* ('uni1F68', 105, 664)\n\t* ('uni1F69', 78, 658)\n\t* ('uni1F72', 152, -20)\n\t* ('uni1F72', 56, 132)\n\t* ('uni1F73', 152, -20)\n\t* ('uni1F73', 56, 132)\n\t* ('uni1F76', 131, -21)\n\t* ('uni1F77', 131, -21)\n\t* ('uni1F78', 31, 109)\n\t* ('uni1F79', 31, 109)\n\t* ('uni1F7C', 440, -10)\n\t* ('uni1F7C', 258, -8)\n\t* ('uni1F7D', 440, -10)\n\t* ('uni1F7D', 258, -8)\n\t* ('uni1F80', 230, -225)\n\t* ('uni1F80', 267, 636)\n\t* ('uni1F81', 230, -225)\n\t* ('uni1F81', 232, 635)\n\t* ('uni1F82', 230, -225)\n\t* ('uni1F83', 230, -225)\n\t* ('uni1F84', 230, -225)\n\t* ('uni1F85', 230, -225)\n\t* ('uni1F86', 230, -225)\n\t* ('uni1F87', 230, -225)\n\t* ('uni1F88', 304, -211)\n\t* ('uni1F88', 107, 636)\n\t* ('uni1F89', 304, -211)\n\t* ('uni1F89', 76, 635)\n\t* ('uni1F8A', 417, -211)\n\t* ('uni1F8B', 424, -211)\n\t* ('uni1F8C', 426, -211)\n\t* ('uni1F8D', 430, -211)\n\t* ('uni1F8E', 422, -211)\n\t* ('uni1F8F', 411, -211)\n\t* ('uni1F90', 296, 636)\n\t* ('uni1F90', 151, -225)\n\t* ('uni1F91', 280, 635)\n\t* ('uni1F91', 151, -225)\n\t* ('uni1F92', 151, -225)\n\t* ('uni1F93', 151, -225)\n\t* ('uni1F94', 151, -225)\n\t* ('uni1F95', 151, -225)\n\t* ('uni1F96', 151, -225)\n\t* ('uni1F97', 151, -225)\n\t* ('uni1F98', 105, 651)\n\t* ('uni1F98', 479, -225)\n\t* ('uni1F99', 78, 647)\n\t* ('uni1F99', 471, -225)\n\t* ('uni1F9A', 581, -225)\n\t* ('uni1F9B', 625, -225)\n\t* ('uni1F9C', 565, -225)\n\t* ('uni1F9D', 569, -225)\n\t* ('uni1F9E', 626, -225)\n\t* ('uni1F9F', 597, -225)\n\t* ('uni1FA0', 385, 636)\n\t* ('uni1FA0', 347, -225)\n\t* ('uni1FA1', 343, 635)\n\t* ('uni1FA1', 347, -225)\n\t* ('uni1FA2', 347, -225)\n\t* ('uni1FA3', 347, -225)\n\t* ('uni1FA4', 347, -225)\n\t* ('uni1FA5', 347, -225)\n\t* ('uni1FA6', 347, -225)\n\t* ('uni1FA7', 347, -225)\n\t* ('uni1FA8', 105, 665)\n\t* ('uni1FA8', 462, -222)\n\t* ('uni1FA9', 78, 659)\n\t* ('uni1FA9', 440, -222)\n\t* ('uni1FAA', 574, -222)\n\t* ('uni1FAB', 596, -222)\n\t* ('uni1FAC', 564, -222)\n\t* ('uni1FAD', 583, -222)\n\t* ('uni1FAE', 591, -222)\n\t* ('uni1FAF', 589, -222)\n\t* ('uni1FB2', 225, -218)\n\t* ('uni1FB3', 225, -218)\n\t* ('uni1FB4', 225, -218)\n\t* ('uni1FB6', 189, 584)\n\t* ('uni1FB7', 225, -218)\n\t* ('uni1FB7', 186, 584)\n\t* ('uni1FBC', 304, -211)\n\t* ('uni1FBD', 107, 636)\n\t* ('uni1FBE', 36, -225)\n\t* ('uni1FBE', 7, -221)\n\t* ('uni1FBF', 107, 636)\n\t* ('uni1FC0', 105, 584)\n\t* ('uni1FC1', 105, 697)\n\t* ('uni1FC2', 151, -225)\n\t* ('uni1FC3', 151, -225)\n\t* ('uni1FC4', 151, -225)\n\t* ('uni1FC6', 214, 584)\n\t* ('uni1FC7', 151, -225)\n\t* ('uni1FC7', 193, 584)\n\t* ('uni1FCC', 313, -225)\n\t* ('uni1FD0', 166, -21)\n\t* ('uni1FD1', 137, -21)\n\t* ('uni1FD2', 131, -21)\n\t* ('uni1FD3', 131, -21)\n\t* ('uni1FD6', 131, -21)\n\t* ('uni1FD6', 62, 584)\n\t* ('uni1FD7', 131, -21)\n\t* ('uni1FD7', 57, 697)\n\t* ('uni1FE4', 273, 636)\n\t* ('uni1FE5', 234, 635)\n\t* ('uni1FE6', 191, 584)\n\t* ('uni1FE7', 187, 697)\n\t* ('uni1FEC', 78, 635)\n\t* ('uni1FF2', 347, -225)\n\t* ('uni1FF3', 347, -225)\n\t* ('uni1FF4', 347, -225)\n\t* ('uni1FF6', 440, -10)\n\t* ('uni1FF6', 258, -8)\n\t* ('uni1FF6', 290, 584)\n\t* ('uni1FF7', 347, -225)\n\t* ('uni1FF7', 284, 584)\n\t* ('uni1FFC', 341, -222)\n\t* ('uni1FFE', 102, 458)\n\t* ('uni1FFE', 76, 635)\n\t* ('perthousand', 940, 323)\n\t* ('interrobang', 367, 649)\n\t* ('zerosuperior', 325, 633)\n\t* ('foursuperior', 234, 634)\n\t* ('sixsuperior', 80, 332)\n\t* ('sixsuperior', 307, 410)\n\t* ('sevensuperior', 145, 277)\n\t* ('eightsuperior', 142, 273)\n\t* ('ninesuperior', 81, 489)\n\t* ('ninesuperior', 310, 566)\n\t* ('zeroinferior', 325, 233)\n\t* ('twoinferior', 199, 226)\n\t* ('threeinferior', 186, -142)\n\t* ('threeinferior', 186, 228)\n\t* ('fourinferior', 216, 214)\n\t* ('sixinferior', 72, -71)\n\t* ('sixinferior', 299, 7)\n\t* ('seveninferior', 137, -139)\n\t* ('eightinferior', 130, -138)\n\t* ('nineinferior', 65, 84)\n\t* ('nineinferior', 294, 161)\n\t* ('lira', 434, -9)\n\t* ('onethird', 516, -142)\n\t* ('twothirds', 542, -142)\n\t* ('onesixth', 619, 142)\n\t* ('fivesixths', 632, 142)\n\t* ('partialdiff', 454, 105)\n\t* ('integral', 100, -223)\n\t* ('integral', 208, 644)\n\t* ('delta.alt', 274, 522)\n\t* ('Omega.alt', 489, -13)\n\t* ('Omega.alt', 32, 99)\n\t* ('uniF501', 342, 149)\n\t* ('uniF50E', 408, 281)\n\t* ('uniF517', 423, 291)\n\t* ('uniF639', 502, 464)\n\t* ('uniF63A', 338, 636)\n\t* ('uniF63B', 288, -13)\n\t* ('uniF63B', 287, 638)\n\t* ('uniF63C', 331, 631)\n\t* ('uniF63E', 62, 103)\n\t* ('uniF63E', 466, 240)\n\t* ('uniF63F', 128, -2)\n\t* ('uniF640', 150, -8)\n\t* ('uniF640', 167, 634)\n\t* ('uniF640', 448, 245)\n\t* ('uniF641', 71, 415)\n\t* ('uniF641', 478, 508)\n\t* ('uniF642', 436, 194)\n\t* ('uniF651', 277, -9)\n\t* ('uniF655', 325, 363)\n\t* ('uniF657', 199, 362)\n\t* ('uniF658', 186, -12)\n\t* ('uniF658', 186, 358)\n\t* ('uniF659', 216, 353)\n\t* ('uniF65B', 72, 59)\n\t* ('uniF65B', 299, 137)\n\t* ('uniF65D', 130, -8)\n\t* ('uniF65E', 65, 217)\n\t* ('uniF65E', 294, 294)\n\t* ('uniF661', 325, 600)\n\t* ('uniF663', 199, 603)\n\t* ('uniF664', 186, 233)\n\t* ('uniF664', 186, 603)\n\t* ('uniF665', 216, 603)\n\t* ('uniF667', 72, 296)\n\t* ('uniF667', 299, 374)\n\t* ('uniF669', 130, 240)\n\t* ('uniF66A', 65, 456)\n\t* ('uniF66A', 294, 533)\n\t* ('uniF671', 221, -19)\n\t* ('uniF672', 221, -19)\n\t* ('uniF673', 221, -19)\n\t* ('uniF674', 221, -19)\n\t* ('uniF67D', 235, -19)\n\t* ('uniF67E', 235, -19)\n\t* ('uniF680', 235, -19)\n\t* ('uniF687', 33, 545)\n\t* ('uniF691', 408, 284)\n\t* ('uniF692', 408, 284)\n\t* ('uniF693', 408, 284)\n\t* ('uniF694', 408, 330)\n\t* ('uniF698', 335, 120)\n\t* ('uniF699', 335, 120)\n\t* ('uniF69A', 335, 120)\n\t* ('uniF69B', 335, 120)\n\t* ('uniF6A4', 159, 545)\n\t* ('Scaronsmall', 335, 120)\n\t* ('Tildesmall', 282, 465)\n\t* ('Tildesmall', 202, 545)\n\t* ('fouroldstyle', 381, 401)\n\t* ('sixoldstyle', 469, 191)\n\t* ('nineoldstyle', 74, 151)\n\t* ('questionsmall', 192, 406)\n\t* ('Bsmall', 350, 148)\n\t* ('Csmall', 221, -19)\n\t* ('Gsmall', 235, -19)\n\t* ('Osmall', 408, 284)\n\t* ('Qsmall', 408, 286)\n\t* ('Ssmall', 335, 120)\n\t* ('centoldstyle', 183, -77)\n\t* ('questiondownsmall', 96, -25)\n\t* ('Atildesmall', 153, 545)\n\t* ('Ntildesmall', 182, 545)\n\t* ('Ogravesmall', 408, 284)\n\t* ('Oacutesmall', 408, 284)\n\t* ('Ocircumflexsmall', 408, 284)\n\t* ('Otildesmall', 172, 545)\n\t* ('Otildesmall', 408, 284)\n\t* ('Odieresissmall', 408, 284)\n\t* ('Oslashsmall', 408, 330)\n\t* ('fl', 352, -3)\n\t* ('ffl', 552, -3)\n\t* ('one_third', 288, -7)\n\t* ('two_thirds', 294, -6)\n\t* ('three_quarters', 272, 640)\n\t* ('one_fifth', 234, -13)\n\t* ('two_fifths', 234, -13)\n\t* ('three_fifths', 271, 637)\n\t* ('three_fifths', 234, -13)\n\t* ('four_fifths', 285, 620)\n\t* ('four_fifths', 234, -13)\n\t* ('three_eighths', 271, 637)\n\t* ('Cedilla', 221, -178)\n\t* ('cedillaalt', 259, -146) and ('cedillaalt', 255, -25)\n\nThis happens a lot when points are not extremes, which is usually bad. However, fixing this alert by adding points on extremes may do more harm than good, especially with italics, calligraphic-script, handwriting, rounded and other fonts. So it is common to ignore this message. [code: points-out-of-bounds]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "result": "WARN"
                },
                {
                    "description": "Check glyphs do not have duplicate components which have the same x,y coordinates.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.glyf>",
                        "<FontBakeryCheck:com.google.fonts/check/glyf_non_transformed_duplicate_components>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Glyphs do not contain duplicate components which have the same x,y coordinates.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        There have been cases in which fonts had faulty double quote marks, with each\n        of them containing two single quote marks as components with the same\n        x, y coordinates which makes them visually look like single quote marks.\n\n        This check ensures that glyphs do not contain duplicate components\n        which have the same x,y coordinates.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Is there any unused data at the end of the glyf table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.glyf>",
                        "<FontBakeryCheck:com.google.fonts/check/glyf_unused_data>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "There is no unused data at the end of the glyf table.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Check for points out of bounds.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.glyf>",
                        "<FontBakeryCheck:com.google.fonts/check/points_out_of_bounds>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The following glyphs have coordinates which are out of bounds:\n\t* ('exclam', 38, 2)\n\t* ('period', 80, 15)\n\t* ('period', 172, 48)\n\t* ('two', 433, 636)\n\t* ('two', 500, 550)\n\t* ('three', 280, -12)\n\t* ('three', 401, 636)\n\t* ('four', 425, 631)\n\t* ('seven', 108, -1)\n\t* ('colon', 198, 379)\n\t* ('colon', 31, -10)\n\t* ('semicolon', 229, 387)\n\t* ('question', 423, 648)\n\t* ('question', 51, 13)\n\t* ('at', 401, -237)\n\t* ('O', 398, -13)\n\t* ('O', 523, 633)\n\t* ('Q', 517, 637)\n\t* ('S', 287, -15)\n\t* ('S', 275, 637)\n\t* ('b', 272, -10)\n\t* ('c', 116, -12)\n\t* ('c', 314, 398)\n\t* ('e', 184, 396)\n\t* ('f', 15, -223)\n\t* ('f', 186, 637)\n\t* ('g', 332, -233)\n\t* ('g', 210, 395)\n\t* ('h', 313, -6)\n\t* ('i', 211, 528)\n\t* ('i', 58, -11)\n\t* ('j', 209, 528)\n\t* ('l', 39, -11)\n\t* ('l', 189, 632)\n\t* ('l', 204, 622)\n\t* ('m', 559, -6)\n\t* ('n', 323, -6)\n\t* ('q', 178, 398)\n\t* ('t', 58, -11)\n\t* ('u', 302, -15)\n\t* ('u', 210, -10)\n\t* ('z', 311, -5)\n\t* ('asciitilde', 189, 326)\n\t* ('exclamdown', 200, 443)\n\t* ('sterling', 365, -10)\n\t* ('currency', 467, 147)\n\t* ('currency', 33, 147)\n\t* ('dieresis', 436, 521)\n\t* ('dieresis', 168, 489)\n\t* ('twosuperior', 304, 614)\n\t* ('threesuperior', 135, 288)\n\t* ('threesuperior', 249, 670)\n\t* ('ordmasculine', 14, 321)\n\t* ('ordmasculine', 341, 450)\n\t* ('onehalf', 684, 318)\n\t* ('questiondown', 425, 444)\n\t* ('questiondown', 53, -191)\n\t* ('Atilde', 394, 792)\n\t* ('Adieresis', 600, 739)\n\t* ('Ccedilla', 190, -176)\n\t* ('Idieresis', 358, 739)\n\t* ('Ntilde', 352, 792)\n\t* ('Ograve', 398, -13)\n\t* ('Oacute', 398, -13)\n\t* ('Ocircumflex', 398, -13)\n\t* ('Otilde', 398, -13)\n\t* ('Otilde', 370, 792)\n\t* ('Odieresis', 398, -13)\n\t* ('germandbls', 377, 649)\n\t* ('germandbls', 442, 582)\n\t* ('atilde', 257, 591)\n\t* ('ccedilla', 133, -176)\n\t* ('ccedilla', 314, 398)\n\t* ('edieresis', 436, 521)\n\t* ('igrave', 58, -11)\n\t* ('iacute', 58, -11)\n\t* ('icircumflex', 89, -11)\n\t* ('idieresis', 58, -11)\n\t* ('idieresis', 287, 521)\n\t* ('idieresis', 19, 489)\n\t* ('ntilde', 323, -6)\n\t* ('ntilde', 210, 591)\n\t* ('otilde', 257, 591)\n\t* ('ugrave', 302, -15)\n\t* ('ugrave', 210, -10)\n\t* ('uacute', 302, -15)\n\t* ('uacute', 210, -10)\n\t* ('ucircumflex', 302, -15)\n\t* ('ucircumflex', 210, -10)\n\t* ('udieresis', 302, -15)\n\t* ('udieresis', 210, -10)\n\t* ('thorn', 209, 632)\n\t* ('cacute', 116, -12)\n\t* ('ccircumflex', 116, -12)\n\t* ('cdotaccent', 116, -12)\n\t* ('ccaron', 116, -12)\n\t* ('eogonek', 184, 396)\n\t* ('gcircumflex', 332, -233)\n\t* ('gbreve', 332, -233)\n\t* ('gdotaccent', 332, -233)\n\t* ('gcommaaccent', 332, -233)\n\t* ('hcircumflex', 313, -6)\n\t* ('hbar', 313, -6)\n\t* ('Itilde', 144, 792)\n\t* ('itilde', 78, -11)\n\t* ('itilde', 128, 592)\n\t* ('imacron', 58, -11)\n\t* ('ibreve', 58, -11)\n\t* ('Iogonek', -85, -174)\n\t* ('iogonek', 211, 538)\n\t* ('iogonek', -65, -174)\n\t* ('Idotaccent', 253, 733)\n\t* ('dotlessi', 58, -11)\n\t* ('dotlessi', 160, 398)\n\t* ('dotlessi', 175, 387)\n\t* ('ij', 422, 528)\n\t* ('lacute', 39, -11)\n\t* ('lcommaaccent', 189, 632)\n\t* ('lcommaaccent', 204, 622)\n\t* ('lcaron', 39, -11)\n\t* ('ldot', 39, -11)\n\t* ('ldot', 189, 632)\n\t* ('ldot', 351, 306)\n\t* ('lslash', 224, 632)\n\t* ('lslash', 74, -11)\n\t* ('nacute', 323, -6)\n\t* ('ncaron', 323, -6)\n\t* ('napostrophe', 328, -6)\n\t* ('Omacron', 398, -13)\n\t* ('Obreve', 398, -13)\n\t* ('Ohungarumlaut', 398, -13)\n\t* ('oe', 520, 396)\n\t* ('Sacute', 287, -15)\n\t* ('Scircumflex', 287, -15)\n\t* ('Scedilla', 281, 647)\n\t* ('Scaron', 287, -15)\n\t* ('tcaron', 58, -11)\n\t* ('tbar', 58, -11)\n\t* ('Utilde', 334, 792)\n\t* ('utilde', 302, -15)\n\t* ('utilde', 210, -10)\n\t* ('utilde', 213, 591)\n\t* ('umacron', 302, -15)\n\t* ('umacron', 210, -10)\n\t* ('ubreve', 302, -15)\n\t* ('ubreve', 210, -10)\n\t* ('uring', 302, -15)\n\t* ('uring', 210, -10)\n\t* ('uhungarumlaut', 302, -15)\n\t* ('uhungarumlaut', 210, -10)\n\t* ('zacute', 311, -5)\n\t* ('zdotaccent', 311, -5)\n\t* ('zcaron', 311, -5)\n\t* ('longs', 15, -223)\n\t* ('longs', 186, 637)\n\t* ('florin', 15, -223)\n\t* ('florin', 183, 611)\n\t* ('uhorn', 302, -15)\n\t* ('uni01F5', 332, -233)\n\t* ('Scommaaccent', 275, 637)\n\t* ('dotaccent', 234, 531)\n\t* ('ogonek', 65, -174)\n\t* ('tilde', 257, 591)\n\t* ('tildecomb', 152, 591)\n\t* ('dialytika', 277, 521)\n\t* ('dialytika', 9, 489)\n\t* ('uni0313', 170, 641)\n\t* ('uni0314', 43, 456)\n\t* ('ogonekcomb', 65, -174)\n\t* ('perispomenicomb', 152, 591)\n\t* ('koroniscomb', 170, 641)\n\t* ('uni0345', 36, -230)\n\t* ('ypogegrammenicomb', 36, -230)\n\t* ('uni037E', 229, 387)\n\t* ('dieresistonos', 426, 521)\n\t* ('dieresistonos', 110, 489)\n\t* ('uni038C', 500, -13)\n\t* ('iotadieresistonos', 316, 521)\n\t* ('iotadieresistonos', 0, 489)\n\t* ('iotadieresistonos', 58, -11)\n\t* ('Theta', 415, -13)\n\t* ('Theta', 540, 633)\n\t* ('Omicron', 415, -13)\n\t* ('Omicron', 540, 633)\n\t* ('Iotadieresis', 333, 723)\n\t* ('uni03AF', 58, -11)\n\t* ('upsilondieresistonos', 23, 150)\n\t* ('beta', 385, 613)\n\t* ('eta', 245, 394)\n\t* ('iota', 58, -11)\n\t* ('iota', 159, 398)\n\t* ('iota', 175, 387)\n\t* ('nu', 99, 401)\n\t* ('nu', 313, 399)\n\t* ('rho', 98, 396)\n\t* ('tau', 202, -20)\n\t* ('upsilon', 40, 150)\n\t* ('phi', 213, 399)\n\t* ('chi', 114, 403)\n\t* ('omega', 379, -14)\n\t* ('omega', 197, -12)\n\t* ('iotadieresis', 270, 521)\n\t* ('iotadieresis', 2, 489)\n\t* ('iotadieresis', 58, -11)\n\t* ('upsilondieresis', 23, 150)\n\t* ('uni03CD', 40, 150)\n\t* ('uni03CE', 379, -14)\n\t* ('uni03CE', 197, -12)\n\t* ('uni03E0', 801, -33)\n\t* ('u04D2', 603, 739)\n\t* ('uni04E6', 398, -13)\n\t* ('uni1EAA', 397, 988)\n\t* ('uni1EAB', 255, 793)\n\t* ('uni1EAC', 628, 701)\n\t* ('uni1EB4', 418, 947)\n\t* ('uni1EB5', 277, 753)\n\t* ('uni1EB9', 184, 396)\n\t* ('uni1EBC', 288, 796)\n\t* ('uni1EBD', 186, 604)\n\t* ('uni1EC4', 285, 979)\n\t* ('uni1EC5', 189, 793)\n\t* ('uni1EC9', 58, -11)\n\t* ('uni1ECB', 211, 528)\n\t* ('uni1ECC', 523, 633)\n\t* ('uni1ECE', 398, -13)\n\t* ('uni1ED0', 398, -13)\n\t* ('uni1ED2', 398, -13)\n\t* ('uni1ED4', 398, -13)\n\t* ('uni1ED6', 398, -13)\n\t* ('uni1ED6', 377, 975)\n\t* ('uni1ED7', 229, 797)\n\t* ('uni1EE0', 347, 805)\n\t* ('uni1EE1', 181, 602)\n\t* ('uni1EE7', 302, -15)\n\t* ('uni1EE7', 210, -10)\n\t* ('uni1EE9', 302, -15)\n\t* ('uni1EEB', 302, -15)\n\t* ('uni1EED', 302, -15)\n\t* ('uni1EEE', 335, 803)\n\t* ('uni1EEF', 302, -15)\n\t* ('uni1EEF', 181, 600)\n\t* ('uni1EF8', 214, 796)\n\t* ('uni1EF9', 166, 604)\n\t* ('uni1F00', 394, 641)\n\t* ('uni1F08', 186, 665)\n\t* ('uni1F10', 334, 641)\n\t* ('uni1F18', 158, 667)\n\t* ('uni1F20', 360, 641)\n\t* ('uni1F28', 158, 648)\n\t* ('uni1F30', 58, -11)\n\t* ('uni1F30', 214, 641)\n\t* ('uni1F31', 58, -11)\n\t* ('uni1F32', 58, -11)\n\t* ('uni1F33', 58, -11)\n\t* ('uni1F34', 58, -11)\n\t* ('uni1F35', 58, -11)\n\t* ('uni1F36', 58, -11)\n\t* ('uni1F37', 58, -11)\n\t* ('uni1F38', 158, 667)\n\t* ('uni1F40', 384, 641)\n\t* ('uni1F48', 158, 671)\n\t* ('uni1F48', 543, -13)\n\t* ('uni1F49', 520, -13)\n\t* ('uni1F4A', 597, -13)\n\t* ('uni1F4B', 633, -13)\n\t* ('uni1F4C', 621, -13)\n\t* ('uni1F4D', 614, -13)\n\t* ('uni1F50', 40, 150)\n\t* ('uni1F50', 363, 641)\n\t* ('uni1F51', 40, 150)\n\t* ('uni1F52', 40, 150)\n\t* ('uni1F53', 40, 150)\n\t* ('uni1F54', 40, 150)\n\t* ('uni1F55', 40, 150)\n\t* ('uni1F56', 40, 150)\n\t* ('uni1F57', 40, 150)\n\t* ('uni1F60', 379, -14)\n\t* ('uni1F60', 197, -12)\n\t* ('uni1F60', 466, 641)\n\t* ('uni1F61', 379, -14)\n\t* ('uni1F61', 197, -12)\n\t* ('uni1F62', 379, -14)\n\t* ('uni1F62', 197, -12)\n\t* ('uni1F63', 379, -14)\n\t* ('uni1F63', 197, -12)\n\t* ('uni1F64', 379, -14)\n\t* ('uni1F64', 197, -12)\n\t* ('uni1F65', 379, -14)\n\t* ('uni1F65', 197, -12)\n\t* ('uni1F66', 379, -14)\n\t* ('uni1F66', 197, -12)\n\t* ('uni1F67', 379, -14)\n\t* ('uni1F67', 197, -12)\n\t* ('uni1F68', 158, 669)\n\t* ('uni1F76', 58, -11)\n\t* ('uni1F76', 175, 387)\n\t* ('uni1F77', 58, -11)\n\t* ('uni1F7A', 40, 150)\n\t* ('uni1F7B', 40, 150)\n\t* ('uni1F7C', 379, -14)\n\t* ('uni1F7C', 197, -12)\n\t* ('uni1F7D', 379, -14)\n\t* ('uni1F7D', 197, -12)\n\t* ('uni1F80', 162, -230)\n\t* ('uni1F80', 381, 641)\n\t* ('uni1F81', 162, -230)\n\t* ('uni1F82', 162, -230)\n\t* ('uni1F83', 162, -230)\n\t* ('uni1F84', 162, -230)\n\t* ('uni1F85', 162, -230)\n\t* ('uni1F86', 162, -230)\n\t* ('uni1F87', 162, -230)\n\t* ('uni1F88', 169, 670)\n\t* ('uni1F88', 255, -225)\n\t* ('uni1F89', 260, -235)\n\t* ('uni1F8A', 334, -232)\n\t* ('uni1F8B', 324, -228)\n\t* ('uni1F8C', 318, -229)\n\t* ('uni1F8D', 321, -231)\n\t* ('uni1F8E', 299, -233)\n\t* ('uni1F8F', 287, -233)\n\t* ('uni1F90', 34, -230)\n\t* ('uni1F90', 343, 641)\n\t* ('uni1F91', 34, -230)\n\t* ('uni1F92', 34, -230)\n\t* ('uni1F93', 34, -230)\n\t* ('uni1F94', 34, -230)\n\t* ('uni1F95', 34, -230)\n\t* ('uni1F96', 34, -230)\n\t* ('uni1F97', 34, -230)\n\t* ('uni1F98', 158, 649)\n\t* ('uni1F98', 382, -231)\n\t* ('uni1F99', 370, -233)\n\t* ('uni1F9A', 451, -232)\n\t* ('uni1F9B', 478, -231)\n\t* ('uni1F9C', 461, -240)\n\t* ('uni1F9D', 462, -231)\n\t* ('uni1F9E', 471, -234)\n\t* ('uni1F9F', 450, -225)\n\t* ('uni1FA0', 243, -230)\n\t* ('uni1FA0', 464, 641)\n\t* ('uni1FA1', 243, -230)\n\t* ('uni1FA2', 243, -230)\n\t* ('uni1FA3', 243, -230)\n\t* ('uni1FA4', 243, -230)\n\t* ('uni1FA5', 243, -230)\n\t* ('uni1FA6', 243, -230)\n\t* ('uni1FA7', 243, -230)\n\t* ('uni1FA8', 158, 668)\n\t* ('uni1FA8', 380, -231)\n\t* ('uni1FA9', 334, -229)\n\t* ('uni1FAA', 460, -229)\n\t* ('uni1FAB', 498, -228)\n\t* ('uni1FAC', 471, -229)\n\t* ('uni1FAD', 472, -231)\n\t* ('uni1FAE', 454, -228)\n\t* ('uni1FAF', 402, -229)\n\t* ('uni1FB2', 162, -230)\n\t* ('uni1FB3', 162, -230)\n\t* ('uni1fFB4', 162, -230)\n\t* ('uni1FB6', 261, 591)\n\t* ('uni1FB7', 162, -230)\n\t* ('uni1FB7', 257, 591)\n\t* ('uni1FBC', 268, -235)\n\t* ('uni1FBD', 170, 641)\n\t* ('uni1FBE', 36, -230)\n\t* ('uni1FBF', 170, 641)\n\t* ('uni1FC0', 150, 604)\n\t* ('uni1FC1', 150, 714)\n\t* ('uni1FC2', 34, -230)\n\t* ('uni1FC3', 245, 394)\n\t* ('uni1FC3', 34, -230)\n\t* ('uni1FC4', 34, -230)\n\t* ('uni1FC6', 240, 591)\n\t* ('uni1FC7', 34, -230)\n\t* ('uni1FC7', 219, 591)\n\t* ('uni1FCC', 233, -233)\n\t* ('uni1FD0', 58, -11)\n\t* ('uni1FD1', 58, -11)\n\t* ('uni1FD2', 58, -11)\n\t* ('uni1FD2', 292, 521)\n\t* ('uni1FD2', -12, 489)\n\t* ('uni1FD3', 58, -11)\n\t* ('uni1FD3', 325, 521)\n\t* ('uni1FD3', 9, 489)\n\t* ('uni1FD6', 58, -11)\n\t* ('uni1FD6', 96, 591)\n\t* ('uni1FD7', 58, -11)\n\t* ('uni1FD7', 100, 714)\n\t* ('uni1FE0', 40, 150)\n\t* ('uni1FE1', 40, 150)\n\t* ('uni1FE2', 40, 150)\n\t* ('uni1FE3', 40, 150)\n\t* ('uni1FE4', 386, 641)\n\t* ('uni1FE6', 40, 150)\n\t* ('uni1FE6', 233, 591)\n\t* ('uni1FE7', 40, 150)\n\t* ('uni1FE7', 232, 714)\n\t* ('uni1FED', 313, 521)\n\t* ('uni1FED', 9, 489)\n\t* ('uni1FEE', 325, 521)\n\t* ('uni1FEE', 9, 489)\n\t* ('uni1FF2', 243, -230)\n\t* ('uni1FF3', 243, -230)\n\t* ('uni1FF4', 243, -230)\n\t* ('uni1FF6', 379, -14)\n\t* ('uni1FF6', 197, -12)\n\t* ('uni1FF6', 327, 591)\n\t* ('uni1FF7', 243, -230)\n\t* ('uni1FF7', 318, 591)\n\t* ('uni1FF8', 458, -13)\n\t* ('uni1FF9', 452, -13)\n\t* ('uni1FFC', 272, -231)\n\t* ('uni1FFE', 43, 456)\n\t* ('uni2009', 133, 2)\n\t* ('dagger', 508, 435)\n\t* ('dagger', 81, 415)\n\t* ('daggerdbl', 548, 435)\n\t* ('daggerdbl', 33, -42)\n\t* ('exclamdbl', -9, 2)\n\t* ('uni203D', 426, 648)\n\t* ('uni203D', 51, 8)\n\t* ('foursuperior', 301, 635)\n\t* ('sevensuperior', 93, 266)\n\t* ('eightsuperior', 122, 270)\n\t* ('eightsuperior', 331, 629)\n\t* ('nsuperior', 296, 215)\n\t* ('twoinferior', 339, 317)\n\t* ('threeinferior', 209, -13)\n\t* ('threeinferior', 323, 369)\n\t* ('fourinferior', 288, 355)\n\t* ('seveninferior', 64, -3)\n\t* ('eightinferior', 120, -16)\n\t* ('eightinferior', 329, 343)\n\t* ('uni20A2', 249, -26)\n\t* ('uni20A2', 274, 633)\n\t* ('oneeighth', 721, 351)\n\t* ('threeeighths', 752, 361)\n\t* ('fiveeighths', 737, 354)\n\t* ('seveneighths', 134, 270)\n\t* ('seveneighths', 754, 358)\n\t* ('zeta.alt', 172, -191)\n\t* ('delta.alt', 385, 522)\n\t* ('Omega.alt', 588, -13)\n\t* ('fl', 432, 622)\n\t* ('Dieresis', 368, 739)\n\t* ('Dieresis', 67, 702)\n\t* ('Tilde', 352, 792)\n\t* ('Dotaccent', 414, 733)\n\t* ('Hungarumlautsmall', 182, 658)\n\t* ('Hungarumlautsmall', 371, 658)\n\t* ('glyph361', 513, 607) and ('glyph369', 65, 666)\n\nThis happens a lot when points are not extremes, which is usually bad. However, fixing this alert by adding points on extremes may do more harm than good, especially with italics, calligraphic-script, handwriting, rounded and other fonts. So it is common to ignore this message. [code: points-out-of-bounds]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "result": "WARN"
                },
                {
                    "description": "Check glyphs do not have duplicate components which have the same x,y coordinates.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.glyf>",
                        "<FontBakeryCheck:com.google.fonts/check/glyf_non_transformed_duplicate_components>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Glyphs do not contain duplicate components which have the same x,y coordinates.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        There have been cases in which fonts had faulty double quote marks, with each\n        of them containing two single quote marks as components with the same\n        x, y coordinates which makes them visually look like single quote marks.\n\n        This check ensures that glyphs do not contain duplicate components\n        which have the same x,y coordinates.\n    ",
                    "result": "PASS"
                }
            ],
            "key": [
                "<Section: fontbakery.profiles.glyf>",
                null,
                null
            ],
            "result": {
                "PASS": 8,
                "WARN": 4
            }
        },
        {
            "checks": [
                {
                    "description": "The variable font 'wght' (Weight) axis coordinate must be 400 on the 'Regular' instance.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/regular_wght_coord>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_wght_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the Open-Type spec's\n        registered design-variation tag 'wght' available at\n        https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_wght\n\n        If a variable font has a 'wght' (Weight) axis, then the coordinate of\n        its 'Regular' instance is required to be 400.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'wdth' (Width) axis coordinate must be 100 on the 'Regular' instance.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/regular_wdth_coord>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_wdth_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the Open-Type spec's\n        registered design-variation tag 'wdth' available at\n        https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_wdth\n\n        If a variable font has a 'wdth' (Width) axis, then the coordinate of\n        its 'Regular' instance is required to be 100.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'slnt' (Slant) axis coordinate must be zero on the 'Regular' instance.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/regular_slnt_coord>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_slnt_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the Open-Type spec's\n        registered design-variation tag 'slnt' available at\n        https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_slnt\n\n        If a variable font has a 'slnt' (Slant) axis, then the coordinate of\n        its 'Regular' instance is required to be zero.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'ital' (Italic) axis coordinate must be zero on the 'Regular' instance.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/regular_ital_coord>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_ital_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the Open-Type spec's\n        registered design-variation tag 'ital' available at\n        https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_ital\n\n        If a variable font has a 'ital' (Italic) axis, then the coordinate of\n        its 'Regular' instance is required to be zero.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'opsz' (Optical Size) axis coordinate should be between 10 and 16 on the 'Regular' instance.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/regular_opsz_coord>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_opsz_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the Open-Type spec's\n        registered design-variation tag 'opsz' available at\n        https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_opsz\n\n        If a variable font has an 'opsz' (Optical Size) axis, then\n        the coordinate of its 'Regular' instance is recommended to be\n        a value in the range 10 to 16.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'wght' (Weight) axis coordinate must be 700 on the 'Bold' instance.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/bold_wght_coord>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_wght_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The Open-Type spec's registered\n        design-variation tag 'wght' available at\n        https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_wght\n        does not specify a required value for the 'Bold' instance of a variable font.\n\n        But Dave Crossland suggested that we should enforce\n        a required value of 700 in this case (NOTE: a distinction\n        is made between \"no bold instance present\" vs \"bold instance is present\n        but its wght coordinate is not == 700\").\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'wght' (Weight) axis coordinate must be within spec range of 1 to 1000 on all instances.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/wght_valid_range>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_wght_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the Open-Type spec's\n        registered design-variation tag 'wght' available at\n        https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_wght\n\n        On the 'wght' (Weight) axis, the valid coordinate range is 1-1000.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'wdth' (Width) axis coordinate must strictly greater than zero.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/wdth_valid_range>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_wdth_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the Open-Type spec's\n        registered design-variation tag 'wdth' available at\n        https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_wdth\n\n        On the 'wdth' (Width) axis, the valid numeric range is strictly greater than\n        zero.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'slnt' (Slant) axis coordinate specifies positive values in its range?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/slnt_range>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_slnt_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The OpenType spec says at\n        https://docs.microsoft.com/en-us/typography/opentype/spec/dvaraxistag_slnt that:\n\n        [...] the scale for the Slant axis is interpreted as the angle of slant\n        in counter-clockwise degrees from upright. This means that a typical,\n        right-leaning oblique design will have a negative slant value. This matches\n        the scale used for the italicAngle field in the post table.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validates that the value of axisNameID used by each VariationAxisRecord is greater than 255 and less than 32768.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.adobe.fonts/check/varfont/valid_axis_nameid>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the 'fvar' documentation in OpenType spec v1.9\n        https://docs.microsoft.com/en-us/typography/opentype/spec/fvar\n\n        The axisNameID field provides a name ID that can be used to obtain strings\n        from the 'name' table that can be used to refer to the axis in application\n        user interfaces. The name ID must be greater than 255 and less than 32768.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validates that the value of subfamilyNameID used by each InstanceRecord is 2, 17, or greater than 255 and less than 32768.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.adobe.fonts/check/varfont/valid_subfamily_nameid>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the 'fvar' documentation in OpenType spec v1.9\n        https://docs.microsoft.com/en-us/typography/opentype/spec/fvar\n\n        The subfamilyNameID field provides a name ID that can be used to obtain\n        strings from the 'name' table that can be treated as equivalent to name\n        ID 17 (typographic subfamily) strings for the given instance. Values of\n        2 or 17 can be used; otherwise, values must be greater than 255 and less\n        than 32768.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validates that the value of postScriptNameID used by each InstanceRecord is 6, 0xFFFF, or greater than 255 and less than 32768.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.adobe.fonts/check/varfont/valid_postscript_nameid>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the 'fvar' documentation in OpenType spec v1.9\n        https://docs.microsoft.com/en-us/typography/opentype/spec/fvar\n\n        The postScriptNameID field provides a name ID that can be used to obtain\n        strings from the 'name' table that can be treated as equivalent to name\n        ID 6 (PostScript name) strings for the given instance. Values of 6 and\n        0xFFFF can be used; otherwise, values must be greater than 255 and less\n        than 32768.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validates that when an instance record is included for the default instance, its subfamilyNameID value is set to a name ID whose string is equal to the string of either name ID 2 or 17, and its postScriptNameID value is set to a name ID whose string is equal to the string of name ID 6.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.adobe.fonts/check/varfont/valid_default_instance_nameids>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the 'fvar' documentation in OpenType spec v1.9.1\n        https://docs.microsoft.com/en-us/typography/opentype/spec/fvar\n\n        The default instance of a font is that instance for which the coordinate\n        value of each axis is the defaultValue specified in the corresponding\n        variation axis record. An instance record is not required for the default\n        instance, though an instance record can be provided. When enumerating named\n        instances, the default instance should be enumerated even if there is no\n        corresponding instance record. If an instance record is included for the\n        default instance (that is, an instance record has coordinates set to default\n        values), then the nameID value should be set to either 2 or 17 or to a\n        name ID with the same value as name ID 2 or 17. Also, if a postScriptNameID is\n        included in instance records, and the postScriptNameID value should be set\n        to 6 or to a name ID with the same value as name ID 6.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validates that all of the instance records in a given font have the same size.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.adobe.fonts/check/varfont/same_size_instance_records>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the 'fvar' documentation in OpenType spec v1.9\n        https://docs.microsoft.com/en-us/typography/opentype/spec/fvar\n\n        All of the instance records in a given font must be the same size, with\n        all either including or omitting the postScriptNameID field. [...]\n        If the value is 0xFFFF, then the value is ignored, and no PostScript name\n        equivalent is provided for the instance.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validates that all of the instance records in a given font have distinct data.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.adobe.fonts/check/varfont/distinct_instance_records>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the 'fvar' documentation in OpenType spec v1.9\n        https://docs.microsoft.com/en-us/typography/opentype/spec/fvar\n\n        All of the instance records in a font should have distinct coordinates\n        and distinct subfamilyNameID and postScriptName ID values. If two or more\n        records share the same coordinates, the same nameID values or the same\n        postScriptNameID values, then all but the first can be ignored.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validate foundry-defined design-variation axis tag names.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.adobe.fonts/check/varfont/foundry_defined_tag_name>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the Open-Type spec's syntactic requirements for\n        foundry-defined design-variation axis tags available at\n        https://learn.microsoft.com/en-us/typography/opentype/spec/dvaraxisreg\n\n        Foundry-defined tags must begin with an uppercase letter\n        and must use only uppercase letters or digits.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'wght' (Weight) axis coordinate must be 400 on the 'Regular' instance.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/regular_wght_coord>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_wght_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the Open-Type spec's\n        registered design-variation tag 'wght' available at\n        https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_wght\n\n        If a variable font has a 'wght' (Weight) axis, then the coordinate of\n        its 'Regular' instance is required to be 400.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'wdth' (Width) axis coordinate must be 100 on the 'Regular' instance.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/regular_wdth_coord>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_wdth_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the Open-Type spec's\n        registered design-variation tag 'wdth' available at\n        https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_wdth\n\n        If a variable font has a 'wdth' (Width) axis, then the coordinate of\n        its 'Regular' instance is required to be 100.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'slnt' (Slant) axis coordinate must be zero on the 'Regular' instance.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/regular_slnt_coord>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_slnt_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the Open-Type spec's\n        registered design-variation tag 'slnt' available at\n        https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_slnt\n\n        If a variable font has a 'slnt' (Slant) axis, then the coordinate of\n        its 'Regular' instance is required to be zero.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'ital' (Italic) axis coordinate must be zero on the 'Regular' instance.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/regular_ital_coord>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_ital_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the Open-Type spec's\n        registered design-variation tag 'ital' available at\n        https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_ital\n\n        If a variable font has a 'ital' (Italic) axis, then the coordinate of\n        its 'Regular' instance is required to be zero.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'opsz' (Optical Size) axis coordinate should be between 10 and 16 on the 'Regular' instance.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/regular_opsz_coord>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_opsz_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the Open-Type spec's\n        registered design-variation tag 'opsz' available at\n        https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_opsz\n\n        If a variable font has an 'opsz' (Optical Size) axis, then\n        the coordinate of its 'Regular' instance is recommended to be\n        a value in the range 10 to 16.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'wght' (Weight) axis coordinate must be 700 on the 'Bold' instance.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/bold_wght_coord>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_wght_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The Open-Type spec's registered\n        design-variation tag 'wght' available at\n        https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_wght\n        does not specify a required value for the 'Bold' instance of a variable font.\n\n        But Dave Crossland suggested that we should enforce\n        a required value of 700 in this case (NOTE: a distinction\n        is made between \"no bold instance present\" vs \"bold instance is present\n        but its wght coordinate is not == 700\").\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'wght' (Weight) axis coordinate must be within spec range of 1 to 1000 on all instances.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/wght_valid_range>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_wght_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the Open-Type spec's\n        registered design-variation tag 'wght' available at\n        https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_wght\n\n        On the 'wght' (Weight) axis, the valid coordinate range is 1-1000.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'wdth' (Width) axis coordinate must strictly greater than zero.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/wdth_valid_range>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_wdth_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the Open-Type spec's\n        registered design-variation tag 'wdth' available at\n        https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_wdth\n\n        On the 'wdth' (Width) axis, the valid numeric range is strictly greater than\n        zero.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'slnt' (Slant) axis coordinate specifies positive values in its range?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/slnt_range>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_slnt_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The OpenType spec says at\n        https://docs.microsoft.com/en-us/typography/opentype/spec/dvaraxistag_slnt that:\n\n        [...] the scale for the Slant axis is interpreted as the angle of slant\n        in counter-clockwise degrees from upright. This means that a typical,\n        right-leaning oblique design will have a negative slant value. This matches\n        the scale used for the italicAngle field in the post table.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validates that the value of axisNameID used by each VariationAxisRecord is greater than 255 and less than 32768.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.adobe.fonts/check/varfont/valid_axis_nameid>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the 'fvar' documentation in OpenType spec v1.9\n        https://docs.microsoft.com/en-us/typography/opentype/spec/fvar\n\n        The axisNameID field provides a name ID that can be used to obtain strings\n        from the 'name' table that can be used to refer to the axis in application\n        user interfaces. The name ID must be greater than 255 and less than 32768.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validates that the value of subfamilyNameID used by each InstanceRecord is 2, 17, or greater than 255 and less than 32768.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.adobe.fonts/check/varfont/valid_subfamily_nameid>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the 'fvar' documentation in OpenType spec v1.9\n        https://docs.microsoft.com/en-us/typography/opentype/spec/fvar\n\n        The subfamilyNameID field provides a name ID that can be used to obtain\n        strings from the 'name' table that can be treated as equivalent to name\n        ID 17 (typographic subfamily) strings for the given instance. Values of\n        2 or 17 can be used; otherwise, values must be greater than 255 and less\n        than 32768.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validates that the value of postScriptNameID used by each InstanceRecord is 6, 0xFFFF, or greater than 255 and less than 32768.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.adobe.fonts/check/varfont/valid_postscript_nameid>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the 'fvar' documentation in OpenType spec v1.9\n        https://docs.microsoft.com/en-us/typography/opentype/spec/fvar\n\n        The postScriptNameID field provides a name ID that can be used to obtain\n        strings from the 'name' table that can be treated as equivalent to name\n        ID 6 (PostScript name) strings for the given instance. Values of 6 and\n        0xFFFF can be used; otherwise, values must be greater than 255 and less\n        than 32768.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validates that when an instance record is included for the default instance, its subfamilyNameID value is set to a name ID whose string is equal to the string of either name ID 2 or 17, and its postScriptNameID value is set to a name ID whose string is equal to the string of name ID 6.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.adobe.fonts/check/varfont/valid_default_instance_nameids>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the 'fvar' documentation in OpenType spec v1.9.1\n        https://docs.microsoft.com/en-us/typography/opentype/spec/fvar\n\n        The default instance of a font is that instance for which the coordinate\n        value of each axis is the defaultValue specified in the corresponding\n        variation axis record. An instance record is not required for the default\n        instance, though an instance record can be provided. When enumerating named\n        instances, the default instance should be enumerated even if there is no\n        corresponding instance record. If an instance record is included for the\n        default instance (that is, an instance record has coordinates set to default\n        values), then the nameID value should be set to either 2 or 17 or to a\n        name ID with the same value as name ID 2 or 17. Also, if a postScriptNameID is\n        included in instance records, and the postScriptNameID value should be set\n        to 6 or to a name ID with the same value as name ID 6.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validates that all of the instance records in a given font have the same size.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.adobe.fonts/check/varfont/same_size_instance_records>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the 'fvar' documentation in OpenType spec v1.9\n        https://docs.microsoft.com/en-us/typography/opentype/spec/fvar\n\n        All of the instance records in a given font must be the same size, with\n        all either including or omitting the postScriptNameID field. [...]\n        If the value is 0xFFFF, then the value is ignored, and no PostScript name\n        equivalent is provided for the instance.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validates that all of the instance records in a given font have distinct data.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.adobe.fonts/check/varfont/distinct_instance_records>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the 'fvar' documentation in OpenType spec v1.9\n        https://docs.microsoft.com/en-us/typography/opentype/spec/fvar\n\n        All of the instance records in a font should have distinct coordinates\n        and distinct subfamilyNameID and postScriptName ID values. If two or more\n        records share the same coordinates, the same nameID values or the same\n        postScriptNameID values, then all but the first can be ignored.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validate foundry-defined design-variation axis tag names.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.adobe.fonts/check/varfont/foundry_defined_tag_name>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the Open-Type spec's syntactic requirements for\n        foundry-defined design-variation axis tags available at\n        https://learn.microsoft.com/en-us/typography/opentype/spec/dvaraxisreg\n\n        Foundry-defined tags must begin with an uppercase letter\n        and must use only uppercase letters or digits.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'wght' (Weight) axis coordinate must be 400 on the 'Regular' instance.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/regular_wght_coord>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_wght_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the Open-Type spec's\n        registered design-variation tag 'wght' available at\n        https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_wght\n\n        If a variable font has a 'wght' (Weight) axis, then the coordinate of\n        its 'Regular' instance is required to be 400.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'wdth' (Width) axis coordinate must be 100 on the 'Regular' instance.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/regular_wdth_coord>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_wdth_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the Open-Type spec's\n        registered design-variation tag 'wdth' available at\n        https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_wdth\n\n        If a variable font has a 'wdth' (Width) axis, then the coordinate of\n        its 'Regular' instance is required to be 100.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'slnt' (Slant) axis coordinate must be zero on the 'Regular' instance.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/regular_slnt_coord>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_slnt_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the Open-Type spec's\n        registered design-variation tag 'slnt' available at\n        https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_slnt\n\n        If a variable font has a 'slnt' (Slant) axis, then the coordinate of\n        its 'Regular' instance is required to be zero.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'ital' (Italic) axis coordinate must be zero on the 'Regular' instance.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/regular_ital_coord>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_ital_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the Open-Type spec's\n        registered design-variation tag 'ital' available at\n        https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_ital\n\n        If a variable font has a 'ital' (Italic) axis, then the coordinate of\n        its 'Regular' instance is required to be zero.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'opsz' (Optical Size) axis coordinate should be between 10 and 16 on the 'Regular' instance.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/regular_opsz_coord>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_opsz_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the Open-Type spec's\n        registered design-variation tag 'opsz' available at\n        https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_opsz\n\n        If a variable font has an 'opsz' (Optical Size) axis, then\n        the coordinate of its 'Regular' instance is recommended to be\n        a value in the range 10 to 16.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'wght' (Weight) axis coordinate must be 700 on the 'Bold' instance.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/bold_wght_coord>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_wght_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The Open-Type spec's registered\n        design-variation tag 'wght' available at\n        https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_wght\n        does not specify a required value for the 'Bold' instance of a variable font.\n\n        But Dave Crossland suggested that we should enforce\n        a required value of 700 in this case (NOTE: a distinction\n        is made between \"no bold instance present\" vs \"bold instance is present\n        but its wght coordinate is not == 700\").\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'wght' (Weight) axis coordinate must be within spec range of 1 to 1000 on all instances.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/wght_valid_range>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_wght_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the Open-Type spec's\n        registered design-variation tag 'wght' available at\n        https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_wght\n\n        On the 'wght' (Weight) axis, the valid coordinate range is 1-1000.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'wdth' (Width) axis coordinate must strictly greater than zero.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/wdth_valid_range>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_wdth_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the Open-Type spec's\n        registered design-variation tag 'wdth' available at\n        https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_wdth\n\n        On the 'wdth' (Width) axis, the valid numeric range is strictly greater than\n        zero.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'slnt' (Slant) axis coordinate specifies positive values in its range?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/slnt_range>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_slnt_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The OpenType spec says at\n        https://docs.microsoft.com/en-us/typography/opentype/spec/dvaraxistag_slnt that:\n\n        [...] the scale for the Slant axis is interpreted as the angle of slant\n        in counter-clockwise degrees from upright. This means that a typical,\n        right-leaning oblique design will have a negative slant value. This matches\n        the scale used for the italicAngle field in the post table.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validates that the value of axisNameID used by each VariationAxisRecord is greater than 255 and less than 32768.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.adobe.fonts/check/varfont/valid_axis_nameid>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the 'fvar' documentation in OpenType spec v1.9\n        https://docs.microsoft.com/en-us/typography/opentype/spec/fvar\n\n        The axisNameID field provides a name ID that can be used to obtain strings\n        from the 'name' table that can be used to refer to the axis in application\n        user interfaces. The name ID must be greater than 255 and less than 32768.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validates that the value of subfamilyNameID used by each InstanceRecord is 2, 17, or greater than 255 and less than 32768.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.adobe.fonts/check/varfont/valid_subfamily_nameid>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the 'fvar' documentation in OpenType spec v1.9\n        https://docs.microsoft.com/en-us/typography/opentype/spec/fvar\n\n        The subfamilyNameID field provides a name ID that can be used to obtain\n        strings from the 'name' table that can be treated as equivalent to name\n        ID 17 (typographic subfamily) strings for the given instance. Values of\n        2 or 17 can be used; otherwise, values must be greater than 255 and less\n        than 32768.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validates that the value of postScriptNameID used by each InstanceRecord is 6, 0xFFFF, or greater than 255 and less than 32768.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.adobe.fonts/check/varfont/valid_postscript_nameid>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the 'fvar' documentation in OpenType spec v1.9\n        https://docs.microsoft.com/en-us/typography/opentype/spec/fvar\n\n        The postScriptNameID field provides a name ID that can be used to obtain\n        strings from the 'name' table that can be treated as equivalent to name\n        ID 6 (PostScript name) strings for the given instance. Values of 6 and\n        0xFFFF can be used; otherwise, values must be greater than 255 and less\n        than 32768.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validates that when an instance record is included for the default instance, its subfamilyNameID value is set to a name ID whose string is equal to the string of either name ID 2 or 17, and its postScriptNameID value is set to a name ID whose string is equal to the string of name ID 6.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.adobe.fonts/check/varfont/valid_default_instance_nameids>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the 'fvar' documentation in OpenType spec v1.9.1\n        https://docs.microsoft.com/en-us/typography/opentype/spec/fvar\n\n        The default instance of a font is that instance for which the coordinate\n        value of each axis is the defaultValue specified in the corresponding\n        variation axis record. An instance record is not required for the default\n        instance, though an instance record can be provided. When enumerating named\n        instances, the default instance should be enumerated even if there is no\n        corresponding instance record. If an instance record is included for the\n        default instance (that is, an instance record has coordinates set to default\n        values), then the nameID value should be set to either 2 or 17 or to a\n        name ID with the same value as name ID 2 or 17. Also, if a postScriptNameID is\n        included in instance records, and the postScriptNameID value should be set\n        to 6 or to a name ID with the same value as name ID 6.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validates that all of the instance records in a given font have the same size.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.adobe.fonts/check/varfont/same_size_instance_records>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the 'fvar' documentation in OpenType spec v1.9\n        https://docs.microsoft.com/en-us/typography/opentype/spec/fvar\n\n        All of the instance records in a given font must be the same size, with\n        all either including or omitting the postScriptNameID field. [...]\n        If the value is 0xFFFF, then the value is ignored, and no PostScript name\n        equivalent is provided for the instance.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validates that all of the instance records in a given font have distinct data.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.adobe.fonts/check/varfont/distinct_instance_records>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the 'fvar' documentation in OpenType spec v1.9\n        https://docs.microsoft.com/en-us/typography/opentype/spec/fvar\n\n        All of the instance records in a font should have distinct coordinates\n        and distinct subfamilyNameID and postScriptName ID values. If two or more\n        records share the same coordinates, the same nameID values or the same\n        postScriptNameID values, then all but the first can be ignored.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validate foundry-defined design-variation axis tag names.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.adobe.fonts/check/varfont/foundry_defined_tag_name>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the Open-Type spec's syntactic requirements for\n        foundry-defined design-variation axis tags available at\n        https://learn.microsoft.com/en-us/typography/opentype/spec/dvaraxisreg\n\n        Foundry-defined tags must begin with an uppercase letter\n        and must use only uppercase letters or digits.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'wght' (Weight) axis coordinate must be 400 on the 'Regular' instance.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/regular_wght_coord>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_wght_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the Open-Type spec's\n        registered design-variation tag 'wght' available at\n        https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_wght\n\n        If a variable font has a 'wght' (Weight) axis, then the coordinate of\n        its 'Regular' instance is required to be 400.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'wdth' (Width) axis coordinate must be 100 on the 'Regular' instance.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/regular_wdth_coord>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_wdth_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the Open-Type spec's\n        registered design-variation tag 'wdth' available at\n        https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_wdth\n\n        If a variable font has a 'wdth' (Width) axis, then the coordinate of\n        its 'Regular' instance is required to be 100.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'slnt' (Slant) axis coordinate must be zero on the 'Regular' instance.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/regular_slnt_coord>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_slnt_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the Open-Type spec's\n        registered design-variation tag 'slnt' available at\n        https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_slnt\n\n        If a variable font has a 'slnt' (Slant) axis, then the coordinate of\n        its 'Regular' instance is required to be zero.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'ital' (Italic) axis coordinate must be zero on the 'Regular' instance.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/regular_ital_coord>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_ital_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the Open-Type spec's\n        registered design-variation tag 'ital' available at\n        https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_ital\n\n        If a variable font has a 'ital' (Italic) axis, then the coordinate of\n        its 'Regular' instance is required to be zero.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'opsz' (Optical Size) axis coordinate should be between 10 and 16 on the 'Regular' instance.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/regular_opsz_coord>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_opsz_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the Open-Type spec's\n        registered design-variation tag 'opsz' available at\n        https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_opsz\n\n        If a variable font has an 'opsz' (Optical Size) axis, then\n        the coordinate of its 'Regular' instance is recommended to be\n        a value in the range 10 to 16.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'wght' (Weight) axis coordinate must be 700 on the 'Bold' instance.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/bold_wght_coord>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_wght_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The Open-Type spec's registered\n        design-variation tag 'wght' available at\n        https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_wght\n        does not specify a required value for the 'Bold' instance of a variable font.\n\n        But Dave Crossland suggested that we should enforce\n        a required value of 700 in this case (NOTE: a distinction\n        is made between \"no bold instance present\" vs \"bold instance is present\n        but its wght coordinate is not == 700\").\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'wght' (Weight) axis coordinate must be within spec range of 1 to 1000 on all instances.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/wght_valid_range>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_wght_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the Open-Type spec's\n        registered design-variation tag 'wght' available at\n        https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_wght\n\n        On the 'wght' (Weight) axis, the valid coordinate range is 1-1000.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'wdth' (Width) axis coordinate must strictly greater than zero.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/wdth_valid_range>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_wdth_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the Open-Type spec's\n        registered design-variation tag 'wdth' available at\n        https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_wdth\n\n        On the 'wdth' (Width) axis, the valid numeric range is strictly greater than\n        zero.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'slnt' (Slant) axis coordinate specifies positive values in its range?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/slnt_range>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_slnt_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The OpenType spec says at\n        https://docs.microsoft.com/en-us/typography/opentype/spec/dvaraxistag_slnt that:\n\n        [...] the scale for the Slant axis is interpreted as the angle of slant\n        in counter-clockwise degrees from upright. This means that a typical,\n        right-leaning oblique design will have a negative slant value. This matches\n        the scale used for the italicAngle field in the post table.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validates that the value of axisNameID used by each VariationAxisRecord is greater than 255 and less than 32768.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.adobe.fonts/check/varfont/valid_axis_nameid>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the 'fvar' documentation in OpenType spec v1.9\n        https://docs.microsoft.com/en-us/typography/opentype/spec/fvar\n\n        The axisNameID field provides a name ID that can be used to obtain strings\n        from the 'name' table that can be used to refer to the axis in application\n        user interfaces. The name ID must be greater than 255 and less than 32768.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validates that the value of subfamilyNameID used by each InstanceRecord is 2, 17, or greater than 255 and less than 32768.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.adobe.fonts/check/varfont/valid_subfamily_nameid>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the 'fvar' documentation in OpenType spec v1.9\n        https://docs.microsoft.com/en-us/typography/opentype/spec/fvar\n\n        The subfamilyNameID field provides a name ID that can be used to obtain\n        strings from the 'name' table that can be treated as equivalent to name\n        ID 17 (typographic subfamily) strings for the given instance. Values of\n        2 or 17 can be used; otherwise, values must be greater than 255 and less\n        than 32768.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validates that the value of postScriptNameID used by each InstanceRecord is 6, 0xFFFF, or greater than 255 and less than 32768.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.adobe.fonts/check/varfont/valid_postscript_nameid>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the 'fvar' documentation in OpenType spec v1.9\n        https://docs.microsoft.com/en-us/typography/opentype/spec/fvar\n\n        The postScriptNameID field provides a name ID that can be used to obtain\n        strings from the 'name' table that can be treated as equivalent to name\n        ID 6 (PostScript name) strings for the given instance. Values of 6 and\n        0xFFFF can be used; otherwise, values must be greater than 255 and less\n        than 32768.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validates that when an instance record is included for the default instance, its subfamilyNameID value is set to a name ID whose string is equal to the string of either name ID 2 or 17, and its postScriptNameID value is set to a name ID whose string is equal to the string of name ID 6.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.adobe.fonts/check/varfont/valid_default_instance_nameids>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the 'fvar' documentation in OpenType spec v1.9.1\n        https://docs.microsoft.com/en-us/typography/opentype/spec/fvar\n\n        The default instance of a font is that instance for which the coordinate\n        value of each axis is the defaultValue specified in the corresponding\n        variation axis record. An instance record is not required for the default\n        instance, though an instance record can be provided. When enumerating named\n        instances, the default instance should be enumerated even if there is no\n        corresponding instance record. If an instance record is included for the\n        default instance (that is, an instance record has coordinates set to default\n        values), then the nameID value should be set to either 2 or 17 or to a\n        name ID with the same value as name ID 2 or 17. Also, if a postScriptNameID is\n        included in instance records, and the postScriptNameID value should be set\n        to 6 or to a name ID with the same value as name ID 6.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validates that all of the instance records in a given font have the same size.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.adobe.fonts/check/varfont/same_size_instance_records>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the 'fvar' documentation in OpenType spec v1.9\n        https://docs.microsoft.com/en-us/typography/opentype/spec/fvar\n\n        All of the instance records in a given font must be the same size, with\n        all either including or omitting the postScriptNameID field. [...]\n        If the value is 0xFFFF, then the value is ignored, and no PostScript name\n        equivalent is provided for the instance.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validates that all of the instance records in a given font have distinct data.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.adobe.fonts/check/varfont/distinct_instance_records>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the 'fvar' documentation in OpenType spec v1.9\n        https://docs.microsoft.com/en-us/typography/opentype/spec/fvar\n\n        All of the instance records in a font should have distinct coordinates\n        and distinct subfamilyNameID and postScriptName ID values. If two or more\n        records share the same coordinates, the same nameID values or the same\n        postScriptNameID values, then all but the first can be ignored.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validate foundry-defined design-variation axis tag names.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.adobe.fonts/check/varfont/foundry_defined_tag_name>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the Open-Type spec's syntactic requirements for\n        foundry-defined design-variation axis tags available at\n        https://learn.microsoft.com/en-us/typography/opentype/spec/dvaraxisreg\n\n        Foundry-defined tags must begin with an uppercase letter\n        and must use only uppercase letters or digits.\n    ",
                    "result": "SKIP"
                }
            ],
            "key": [
                "<Section: fontbakery.profiles.fvar>",
                null,
                null
            ],
            "result": {
                "SKIP": 64
            }
        },
        {
            "checks": [
                {
                    "description": "Ensure VFs have 'ital' STAT axis.",
                    "key": [
                        "<Section: fontbakery.profiles.stat>",
                        "<FontBakeryCheck:com.google.fonts/check/italic_axis_in_stat>",
                        []
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check that related Upright and Italic VFs have a\n        'ital' axis in STAT table.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "All fvar axes have a correspondent Axis Record on STAT table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.stat>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/stat_axis_record_for_each_axis>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the OpenType spec, there must be an Axis Record\n        for every axis defined in the fvar table.\n\n        https://docs.microsoft.com/en-us/typography/opentype/spec/stat#axis-records\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "STAT table has Axis Value tables?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.stat>",
                        "<FontBakeryCheck:com.adobe.fonts/check/stat_has_axis_value_tables>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: has_STAT_table",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the OpenType spec, in a variable font, it is strongly recommended\n        that axis value tables be included for every element of typographic subfamily\n        names for all of the named instances defined in the 'fvar' table.\n\n        Axis value tables are particularly important for variable fonts, but can also\n        be used in non-variable fonts. When used in non-variable fonts, axis value\n        tables for particular values should be implemented consistently across fonts\n        in the family.\n\n        If present, Format 4 Axis Value tables are checked to ensure they have more than\n        one AxisValueRecord (a strong recommendation from the OpenType spec).\n\n        https://docs.microsoft.com/en-us/typography/opentype/spec/stat#axis-value-tables\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Ensure 'ital' STAT axis is boolean value (derived from com.google.fonts/check/italic_axis_in_stat_is_boolean)",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.stat>",
                        "<FontBakeryCheck:com.google.fonts/check/italic_axis_in_stat_is_boolean:googlefonts>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: style, has_STAT_table",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check that the value of the 'ital' STAT axis is boolean (either 0 or 1),\n        and elided for the Upright and not elided for the Italic,\n        and that the Upright is linked to the Italic.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Ensure 'ital' STAT axis is last. (derived from com.google.fonts/check/italic_axis_last)",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.stat>",
                        "<FontBakeryCheck:com.google.fonts/check/italic_axis_last:googlefonts>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: style, has_STAT_table",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check that the 'ital' STAT axis is last in axis order.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "All fvar axes have a correspondent Axis Record on STAT table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.stat>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/stat_axis_record_for_each_axis>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the OpenType spec, there must be an Axis Record\n        for every axis defined in the fvar table.\n\n        https://docs.microsoft.com/en-us/typography/opentype/spec/stat#axis-records\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "STAT table has Axis Value tables?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.stat>",
                        "<FontBakeryCheck:com.adobe.fonts/check/stat_has_axis_value_tables>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: has_STAT_table",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the OpenType spec, in a variable font, it is strongly recommended\n        that axis value tables be included for every element of typographic subfamily\n        names for all of the named instances defined in the 'fvar' table.\n\n        Axis value tables are particularly important for variable fonts, but can also\n        be used in non-variable fonts. When used in non-variable fonts, axis value\n        tables for particular values should be implemented consistently across fonts\n        in the family.\n\n        If present, Format 4 Axis Value tables are checked to ensure they have more than\n        one AxisValueRecord (a strong recommendation from the OpenType spec).\n\n        https://docs.microsoft.com/en-us/typography/opentype/spec/stat#axis-value-tables\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Ensure 'ital' STAT axis is boolean value (derived from com.google.fonts/check/italic_axis_in_stat_is_boolean)",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.stat>",
                        "<FontBakeryCheck:com.google.fonts/check/italic_axis_in_stat_is_boolean:googlefonts>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: style, has_STAT_table",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check that the value of the 'ital' STAT axis is boolean (either 0 or 1),\n        and elided for the Upright and not elided for the Italic,\n        and that the Upright is linked to the Italic.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Ensure 'ital' STAT axis is last. (derived from com.google.fonts/check/italic_axis_last)",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.stat>",
                        "<FontBakeryCheck:com.google.fonts/check/italic_axis_last:googlefonts>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: style, has_STAT_table",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check that the 'ital' STAT axis is last in axis order.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "All fvar axes have a correspondent Axis Record on STAT table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.stat>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/stat_axis_record_for_each_axis>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the OpenType spec, there must be an Axis Record\n        for every axis defined in the fvar table.\n\n        https://docs.microsoft.com/en-us/typography/opentype/spec/stat#axis-records\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "STAT table has Axis Value tables?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.stat>",
                        "<FontBakeryCheck:com.adobe.fonts/check/stat_has_axis_value_tables>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: has_STAT_table",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the OpenType spec, in a variable font, it is strongly recommended\n        that axis value tables be included for every element of typographic subfamily\n        names for all of the named instances defined in the 'fvar' table.\n\n        Axis value tables are particularly important for variable fonts, but can also\n        be used in non-variable fonts. When used in non-variable fonts, axis value\n        tables for particular values should be implemented consistently across fonts\n        in the family.\n\n        If present, Format 4 Axis Value tables are checked to ensure they have more than\n        one AxisValueRecord (a strong recommendation from the OpenType spec).\n\n        https://docs.microsoft.com/en-us/typography/opentype/spec/stat#axis-value-tables\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Ensure 'ital' STAT axis is boolean value (derived from com.google.fonts/check/italic_axis_in_stat_is_boolean)",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.stat>",
                        "<FontBakeryCheck:com.google.fonts/check/italic_axis_in_stat_is_boolean:googlefonts>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: style, has_STAT_table",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check that the value of the 'ital' STAT axis is boolean (either 0 or 1),\n        and elided for the Upright and not elided for the Italic,\n        and that the Upright is linked to the Italic.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Ensure 'ital' STAT axis is last. (derived from com.google.fonts/check/italic_axis_last)",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.stat>",
                        "<FontBakeryCheck:com.google.fonts/check/italic_axis_last:googlefonts>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: style, has_STAT_table",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check that the 'ital' STAT axis is last in axis order.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "All fvar axes have a correspondent Axis Record on STAT table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.stat>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/stat_axis_record_for_each_axis>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the OpenType spec, there must be an Axis Record\n        for every axis defined in the fvar table.\n\n        https://docs.microsoft.com/en-us/typography/opentype/spec/stat#axis-records\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "STAT table has Axis Value tables?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.stat>",
                        "<FontBakeryCheck:com.adobe.fonts/check/stat_has_axis_value_tables>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: has_STAT_table",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the OpenType spec, in a variable font, it is strongly recommended\n        that axis value tables be included for every element of typographic subfamily\n        names for all of the named instances defined in the 'fvar' table.\n\n        Axis value tables are particularly important for variable fonts, but can also\n        be used in non-variable fonts. When used in non-variable fonts, axis value\n        tables for particular values should be implemented consistently across fonts\n        in the family.\n\n        If present, Format 4 Axis Value tables are checked to ensure they have more than\n        one AxisValueRecord (a strong recommendation from the OpenType spec).\n\n        https://docs.microsoft.com/en-us/typography/opentype/spec/stat#axis-value-tables\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Ensure 'ital' STAT axis is boolean value (derived from com.google.fonts/check/italic_axis_in_stat_is_boolean)",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.stat>",
                        "<FontBakeryCheck:com.google.fonts/check/italic_axis_in_stat_is_boolean:googlefonts>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: style, has_STAT_table",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check that the value of the 'ital' STAT axis is boolean (either 0 or 1),\n        and elided for the Upright and not elided for the Italic,\n        and that the Upright is linked to the Italic.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Ensure 'ital' STAT axis is last. (derived from com.google.fonts/check/italic_axis_last)",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.stat>",
                        "<FontBakeryCheck:com.google.fonts/check/italic_axis_last:googlefonts>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: style, has_STAT_table",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check that the 'ital' STAT axis is last in axis order.\n    ",
                    "result": "SKIP"
                }
            ],
            "key": [
                "<Section: fontbakery.profiles.stat>",
                null,
                null
            ],
            "result": {
                "PASS": 1,
                "SKIP": 16
            }
        },
        {
            "checks": [
                {
                    "description": "Does the font have any invalid feature tags?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.layout>",
                        "<FontBakeryCheck:com.google.fonts/check/layout_valid_feature_tags>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "No invalid feature tags were found",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Incorrect tags can be indications of typos, leftover debugging code or\n        questionable approaches, or user error in the font editor. Such typos can\n        cause features and language support to fail to work as intended.\n    ",
                    "result": "PASS",
                    "severity": 8
                },
                {
                    "description": "Does the font have any invalid script tags?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.layout>",
                        "<FontBakeryCheck:com.google.fonts/check/layout_valid_script_tags>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "No invalid script tags were found",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Incorrect script tags can be indications of typos, leftover debugging code\n        or questionable approaches, or user error in the font editor. Such typos can\n        cause features and language support to fail to work as intended.\n    ",
                    "result": "PASS",
                    "severity": 8
                },
                {
                    "description": "Does the font have any invalid language tags?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.layout>",
                        "<FontBakeryCheck:com.google.fonts/check/layout_valid_language_tags>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "No invalid language tags were found",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Incorrect language tags can be indications of typos, leftover debugging code\n        or questionable approaches, or user error in the font editor. Such typos can\n        cause features and language support to fail to work as intended.\n    ",
                    "result": "PASS",
                    "severity": 8
                },
                {
                    "description": "Does the font have any invalid feature tags?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.layout>",
                        "<FontBakeryCheck:com.google.fonts/check/layout_valid_feature_tags>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "No invalid feature tags were found",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Incorrect tags can be indications of typos, leftover debugging code or\n        questionable approaches, or user error in the font editor. Such typos can\n        cause features and language support to fail to work as intended.\n    ",
                    "result": "PASS",
                    "severity": 8
                },
                {
                    "description": "Does the font have any invalid script tags?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.layout>",
                        "<FontBakeryCheck:com.google.fonts/check/layout_valid_script_tags>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "No invalid script tags were found",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Incorrect script tags can be indications of typos, leftover debugging code\n        or questionable approaches, or user error in the font editor. Such typos can\n        cause features and language support to fail to work as intended.\n    ",
                    "result": "PASS",
                    "severity": 8
                },
                {
                    "description": "Does the font have any invalid language tags?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.layout>",
                        "<FontBakeryCheck:com.google.fonts/check/layout_valid_language_tags>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "No invalid language tags were found",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Incorrect language tags can be indications of typos, leftover debugging code\n        or questionable approaches, or user error in the font editor. Such typos can\n        cause features and language support to fail to work as intended.\n    ",
                    "result": "PASS",
                    "severity": 8
                },
                {
                    "description": "Does the font have any invalid feature tags?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.layout>",
                        "<FontBakeryCheck:com.google.fonts/check/layout_valid_feature_tags>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "No invalid feature tags were found",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Incorrect tags can be indications of typos, leftover debugging code or\n        questionable approaches, or user error in the font editor. Such typos can\n        cause features and language support to fail to work as intended.\n    ",
                    "result": "PASS",
                    "severity": 8
                },
                {
                    "description": "Does the font have any invalid script tags?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.layout>",
                        "<FontBakeryCheck:com.google.fonts/check/layout_valid_script_tags>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "No invalid script tags were found",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Incorrect script tags can be indications of typos, leftover debugging code\n        or questionable approaches, or user error in the font editor. Such typos can\n        cause features and language support to fail to work as intended.\n    ",
                    "result": "PASS",
                    "severity": 8
                },
                {
                    "description": "Does the font have any invalid language tags?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.layout>",
                        "<FontBakeryCheck:com.google.fonts/check/layout_valid_language_tags>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "No invalid language tags were found",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Incorrect language tags can be indications of typos, leftover debugging code\n        or questionable approaches, or user error in the font editor. Such typos can\n        cause features and language support to fail to work as intended.\n    ",
                    "result": "PASS",
                    "severity": 8
                },
                {
                    "description": "Does the font have any invalid feature tags?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.layout>",
                        "<FontBakeryCheck:com.google.fonts/check/layout_valid_feature_tags>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "No invalid feature tags were found",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Incorrect tags can be indications of typos, leftover debugging code or\n        questionable approaches, or user error in the font editor. Such typos can\n        cause features and language support to fail to work as intended.\n    ",
                    "result": "PASS",
                    "severity": 8
                },
                {
                    "description": "Does the font have any invalid script tags?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.layout>",
                        "<FontBakeryCheck:com.google.fonts/check/layout_valid_script_tags>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "No invalid script tags were found",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Incorrect script tags can be indications of typos, leftover debugging code\n        or questionable approaches, or user error in the font editor. Such typos can\n        cause features and language support to fail to work as intended.\n    ",
                    "result": "PASS",
                    "severity": 8
                },
                {
                    "description": "Does the font have any invalid language tags?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.layout>",
                        "<FontBakeryCheck:com.google.fonts/check/layout_valid_language_tags>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "No invalid language tags were found",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Incorrect language tags can be indications of typos, leftover debugging code\n        or questionable approaches, or user error in the font editor. Such typos can\n        cause features and language support to fail to work as intended.\n    ",
                    "result": "PASS",
                    "severity": 8
                }
            ],
            "key": [
                "<Section: fontbakery.profiles.layout>",
                null,
                null
            ],
            "result": {
                "PASS": 12
            }
        },
        {
            "checks": [
                {
                    "description": "Check that texts shape as per expectation",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Shaping Checks>",
                        "<FontBakeryCheck:com.google.fonts/check/shaping/regression>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Shaping test directory not defined in configuration file",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Fonts with complex layout rules can benefit from regression tests to ensure\n        that the rules are behaving as designed. This checks runs a shaping test\n        suite and compares expected shaping against actual shaping, reporting\n        any differences.\n\n        Shaping test suites should be written by the font engineer and referenced\n        in the FontBakery configuration file. For more information about write\n        shaping test files and how to configure FontBakery to read the shaping\n        test suites, see https://simoncozens.github.io/tdd-for-otl/\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check that no forbidden glyphs are found while shaping",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Shaping Checks>",
                        "<FontBakeryCheck:com.google.fonts/check/shaping/forbidden>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Shaping test directory not defined in configuration file",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Fonts with complex layout rules can benefit from regression tests to ensure\n        that the rules are behaving as designed. This checks runs a shaping test\n        suite and reports if any glyphs are generated in the shaping which should\n        not be produced. (For example, .notdef glyphs, visible viramas, etc.)\n\n        Shaping test suites should be written by the font engineer and referenced in\n        the FontBakery configuration file. For more information about write shaping\n        test files and how to configure FontBakery to read the shaping test suites,\n        see https://simoncozens.github.io/tdd-for-otl/\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check that no collisions are found while shaping",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Shaping Checks>",
                        "<FontBakeryCheck:com.google.fonts/check/shaping/collides>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Shaping test directory not defined in configuration file",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Fonts with complex layout rules can benefit from regression tests to ensure\n        that the rules are behaving as designed. This checks runs a shaping test\n        suite and reports instances where the glyphs collide in unexpected ways.\n\n        Shaping test suites should be written by the font engineer and referenced\n        in the FontBakery configuration file. For more information about write\n        shaping test files and how to configure FontBakery to read the shaping\n        test suites, see https://simoncozens.github.io/tdd-for-otl/\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Ensure dotted circle glyph is present and can attach marks.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Shaping Checks>",
                        "<FontBakeryCheck:com.google.fonts/check/dotted_circle>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font has no nonspacing mark glyphs.",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The dotted circle character (U+25CC) is inserted by shaping engines before\n        mark glyphs which do not have an associated base, especially in the context\n        of broken syllabic clusters.\n\n        For fonts containing combining marks, it is recommended that the dotted circle\n        character be included so that these isolated marks can be displayed properly;\n        for fonts supporting complex scripts, this should be considered mandatory.\n\n        Additionally, when a dotted circle glyph is present, it should be able to\n        display all marks correctly, meaning that it should contain anchors for all\n        attaching marks.\n    ",
                    "result": "SKIP",
                    "severity": 3
                },
                {
                    "description": "Ensure soft_dotted characters lose their dot when combined with marks that replace the dot.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBold.ttf",
                    "key": [
                        "<Section: Shaping Checks>",
                        "<FontBakeryCheck:com.google.fonts/check/soft_dotted>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The dot of soft dotted characters used in orthographies _must_ disappear in the following strings: i\u0313 j\u0300 j\u0301 j\u0303 j\u0308 \u012f\u0300 \u012f\u0301 \u012f\u0303 \u1ecb\u0300 \u1ecb\u0301 \u1ecb\u0303\n\nThe dot of soft dotted characters _should_ disappear in other cases, for example: i\u0312 i\u0314 i\u0342 i\u0326\u0312 i\u0326\u0313 i\u0326\u0314 i\u0326\u0342 j\u0309 j\u0312 j\u0313 j\u0314 j\u0342 j\u0323\u0300 j\u0323\u0301 j\u0323\u0303 j\u0323\u0308 j\u0323\u0309 j\u0323\u0312 j\u0323\u0313 j\u0323\u0314\n\nYour font does *not* cover the following languages that require the soft-dotted feature: Igbo (Latn, 27,823,640 speakers), Ukrainian (Cyrl, 29,273,587 speakers), Navajo (Latn, 166,319 speakers), Aghem (Latn, 38,843 speakers), Dutch (Latn, 31,709,104 speakers), Belarusian (Cyrl, 10,064,517 speakers), Basaa (Latn, 332,940 speakers), Lithuanian (Latn, 2,357,094 speakers). [code: soft-dotted]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        An accent placed on characters with a \"soft dot\", like i or j, causes\n        the dot to disappear.\n        An explicit dot above can be added where required.\n        See \"Diacritics on i and j\" in Section 7.1, \"Latin\" in The Unicode Standard.\n\n        Characters with the Soft_Dotted property are listed in\n        https://www.unicode.org/Public/UCD/latest/ucd/PropList.txt\n\n        See also:\n        https://googlefonts.github.io/gf-guide/diacritics.html#soft-dotted-glyphs\n    ",
                    "result": "WARN",
                    "severity": 3
                },
                {
                    "description": "Check that texts shape as per expectation",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Shaping Checks>",
                        "<FontBakeryCheck:com.google.fonts/check/shaping/regression>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Shaping test directory not defined in configuration file",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Fonts with complex layout rules can benefit from regression tests to ensure\n        that the rules are behaving as designed. This checks runs a shaping test\n        suite and compares expected shaping against actual shaping, reporting\n        any differences.\n\n        Shaping test suites should be written by the font engineer and referenced\n        in the FontBakery configuration file. For more information about write\n        shaping test files and how to configure FontBakery to read the shaping\n        test suites, see https://simoncozens.github.io/tdd-for-otl/\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check that no forbidden glyphs are found while shaping",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Shaping Checks>",
                        "<FontBakeryCheck:com.google.fonts/check/shaping/forbidden>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Shaping test directory not defined in configuration file",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Fonts with complex layout rules can benefit from regression tests to ensure\n        that the rules are behaving as designed. This checks runs a shaping test\n        suite and reports if any glyphs are generated in the shaping which should\n        not be produced. (For example, .notdef glyphs, visible viramas, etc.)\n\n        Shaping test suites should be written by the font engineer and referenced in\n        the FontBakery configuration file. For more information about write shaping\n        test files and how to configure FontBakery to read the shaping test suites,\n        see https://simoncozens.github.io/tdd-for-otl/\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check that no collisions are found while shaping",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Shaping Checks>",
                        "<FontBakeryCheck:com.google.fonts/check/shaping/collides>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Shaping test directory not defined in configuration file",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Fonts with complex layout rules can benefit from regression tests to ensure\n        that the rules are behaving as designed. This checks runs a shaping test\n        suite and reports instances where the glyphs collide in unexpected ways.\n\n        Shaping test suites should be written by the font engineer and referenced\n        in the FontBakery configuration file. For more information about write\n        shaping test files and how to configure FontBakery to read the shaping\n        test suites, see https://simoncozens.github.io/tdd-for-otl/\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Ensure dotted circle glyph is present and can attach marks.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Shaping Checks>",
                        "<FontBakeryCheck:com.google.fonts/check/dotted_circle>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font has no nonspacing mark glyphs.",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The dotted circle character (U+25CC) is inserted by shaping engines before\n        mark glyphs which do not have an associated base, especially in the context\n        of broken syllabic clusters.\n\n        For fonts containing combining marks, it is recommended that the dotted circle\n        character be included so that these isolated marks can be displayed properly;\n        for fonts supporting complex scripts, this should be considered mandatory.\n\n        Additionally, when a dotted circle glyph is present, it should be able to\n        display all marks correctly, meaning that it should contain anchors for all\n        attaching marks.\n    ",
                    "result": "SKIP",
                    "severity": 3
                },
                {
                    "description": "Ensure soft_dotted characters lose their dot when combined with marks that replace the dot.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicBoldItalic.ttf",
                    "key": [
                        "<Section: Shaping Checks>",
                        "<FontBakeryCheck:com.google.fonts/check/soft_dotted>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The dot of soft dotted characters used in orthographies _must_ disappear in the following strings: i\u0313 j\u0300 j\u0301 j\u0303 j\u0308 \u012f\u0300 \u012f\u0301 \u012f\u0303 \u1ecb\u0300 \u1ecb\u0301 \u1ecb\u0303\n\nThe dot of soft dotted characters _should_ disappear in other cases, for example: i\u0312 i\u0314 i\u0342 i\u0326\u0312 i\u0326\u0313 i\u0326\u0314 i\u0326\u0342 i\u0327\u0312 i\u0327\u0313 i\u0327\u0314 i\u0327\u0342 j\u0309 j\u0312 j\u0313 j\u0314 j\u0342 j\u0323\u0300 j\u0323\u0301 j\u0323\u0303 j\u0323\u0308\n\nYour font does *not* cover the following languages that require the soft-dotted feature: Dutch (Latn, 31,709,104 speakers), Aghem (Latn, 38,843 speakers), Belarusian (Cyrl, 10,064,517 speakers), Igbo (Latn, 27,823,640 speakers), Lithuanian (Latn, 2,357,094 speakers), Basaa (Latn, 332,940 speakers), Ukrainian (Cyrl, 29,273,587 speakers), Navajo (Latn, 166,319 speakers). [code: soft-dotted]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        An accent placed on characters with a \"soft dot\", like i or j, causes\n        the dot to disappear.\n        An explicit dot above can be added where required.\n        See \"Diacritics on i and j\" in Section 7.1, \"Latin\" in The Unicode Standard.\n\n        Characters with the Soft_Dotted property are listed in\n        https://www.unicode.org/Public/UCD/latest/ucd/PropList.txt\n\n        See also:\n        https://googlefonts.github.io/gf-guide/diacritics.html#soft-dotted-glyphs\n    ",
                    "result": "WARN",
                    "severity": 3
                },
                {
                    "description": "Check that texts shape as per expectation",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Shaping Checks>",
                        "<FontBakeryCheck:com.google.fonts/check/shaping/regression>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Shaping test directory not defined in configuration file",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Fonts with complex layout rules can benefit from regression tests to ensure\n        that the rules are behaving as designed. This checks runs a shaping test\n        suite and compares expected shaping against actual shaping, reporting\n        any differences.\n\n        Shaping test suites should be written by the font engineer and referenced\n        in the FontBakery configuration file. For more information about write\n        shaping test files and how to configure FontBakery to read the shaping\n        test suites, see https://simoncozens.github.io/tdd-for-otl/\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check that no forbidden glyphs are found while shaping",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Shaping Checks>",
                        "<FontBakeryCheck:com.google.fonts/check/shaping/forbidden>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Shaping test directory not defined in configuration file",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Fonts with complex layout rules can benefit from regression tests to ensure\n        that the rules are behaving as designed. This checks runs a shaping test\n        suite and reports if any glyphs are generated in the shaping which should\n        not be produced. (For example, .notdef glyphs, visible viramas, etc.)\n\n        Shaping test suites should be written by the font engineer and referenced in\n        the FontBakery configuration file. For more information about write shaping\n        test files and how to configure FontBakery to read the shaping test suites,\n        see https://simoncozens.github.io/tdd-for-otl/\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check that no collisions are found while shaping",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Shaping Checks>",
                        "<FontBakeryCheck:com.google.fonts/check/shaping/collides>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Shaping test directory not defined in configuration file",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Fonts with complex layout rules can benefit from regression tests to ensure\n        that the rules are behaving as designed. This checks runs a shaping test\n        suite and reports instances where the glyphs collide in unexpected ways.\n\n        Shaping test suites should be written by the font engineer and referenced\n        in the FontBakery configuration file. For more information about write\n        shaping test files and how to configure FontBakery to read the shaping\n        test suites, see https://simoncozens.github.io/tdd-for-otl/\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Ensure dotted circle glyph is present and can attach marks.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Shaping Checks>",
                        "<FontBakeryCheck:com.google.fonts/check/dotted_circle>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font has no nonspacing mark glyphs.",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The dotted circle character (U+25CC) is inserted by shaping engines before\n        mark glyphs which do not have an associated base, especially in the context\n        of broken syllabic clusters.\n\n        For fonts containing combining marks, it is recommended that the dotted circle\n        character be included so that these isolated marks can be displayed properly;\n        for fonts supporting complex scripts, this should be considered mandatory.\n\n        Additionally, when a dotted circle glyph is present, it should be able to\n        display all marks correctly, meaning that it should contain anchors for all\n        attaching marks.\n    ",
                    "result": "SKIP",
                    "severity": 3
                },
                {
                    "description": "Ensure soft_dotted characters lose their dot when combined with marks that replace the dot.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenic.ttf",
                    "key": [
                        "<Section: Shaping Checks>",
                        "<FontBakeryCheck:com.google.fonts/check/soft_dotted>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The dot of soft dotted characters used in orthographies _must_ disappear in the following strings: i\u0313 j\u0300 j\u0301 j\u0303 j\u0308 \u012f\u0300 \u012f\u0301 \u012f\u0303 \u1ecb\u0300 \u1ecb\u0301 \u1ecb\u0303\n\nThe dot of soft dotted characters _should_ disappear in other cases, for example: i\u0312 i\u0314 i\u0342 i\u0326\u0312 i\u0326\u0313 i\u0326\u0314 i\u0326\u0342 i\u0327\u0312 i\u0327\u0313 i\u0327\u0314 i\u0327\u0342 j\u0309 j\u0312 j\u0313 j\u0314 j\u0342 j\u0323\u0300 j\u0323\u0301 j\u0323\u0303 j\u0323\u0308\n\nYour font does *not* cover the following languages that require the soft-dotted feature: Basaa (Latn, 332,940 speakers), Aghem (Latn, 38,843 speakers), Dutch (Latn, 31,709,104 speakers), Igbo (Latn, 27,823,640 speakers), Lithuanian (Latn, 2,357,094 speakers), Belarusian (Cyrl, 10,064,517 speakers), Navajo (Latn, 166,319 speakers), Ukrainian (Cyrl, 29,273,587 speakers). [code: soft-dotted]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        An accent placed on characters with a \"soft dot\", like i or j, causes\n        the dot to disappear.\n        An explicit dot above can be added where required.\n        See \"Diacritics on i and j\" in Section 7.1, \"Latin\" in The Unicode Standard.\n\n        Characters with the Soft_Dotted property are listed in\n        https://www.unicode.org/Public/UCD/latest/ucd/PropList.txt\n\n        See also:\n        https://googlefonts.github.io/gf-guide/diacritics.html#soft-dotted-glyphs\n    ",
                    "result": "WARN",
                    "severity": 3
                },
                {
                    "description": "Check that texts shape as per expectation",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Shaping Checks>",
                        "<FontBakeryCheck:com.google.fonts/check/shaping/regression>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Shaping test directory not defined in configuration file",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Fonts with complex layout rules can benefit from regression tests to ensure\n        that the rules are behaving as designed. This checks runs a shaping test\n        suite and compares expected shaping against actual shaping, reporting\n        any differences.\n\n        Shaping test suites should be written by the font engineer and referenced\n        in the FontBakery configuration file. For more information about write\n        shaping test files and how to configure FontBakery to read the shaping\n        test suites, see https://simoncozens.github.io/tdd-for-otl/\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check that no forbidden glyphs are found while shaping",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Shaping Checks>",
                        "<FontBakeryCheck:com.google.fonts/check/shaping/forbidden>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Shaping test directory not defined in configuration file",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Fonts with complex layout rules can benefit from regression tests to ensure\n        that the rules are behaving as designed. This checks runs a shaping test\n        suite and reports if any glyphs are generated in the shaping which should\n        not be produced. (For example, .notdef glyphs, visible viramas, etc.)\n\n        Shaping test suites should be written by the font engineer and referenced in\n        the FontBakery configuration file. For more information about write shaping\n        test files and how to configure FontBakery to read the shaping test suites,\n        see https://simoncozens.github.io/tdd-for-otl/\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check that no collisions are found while shaping",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Shaping Checks>",
                        "<FontBakeryCheck:com.google.fonts/check/shaping/collides>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Shaping test directory not defined in configuration file",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Fonts with complex layout rules can benefit from regression tests to ensure\n        that the rules are behaving as designed. This checks runs a shaping test\n        suite and reports instances where the glyphs collide in unexpected ways.\n\n        Shaping test suites should be written by the font engineer and referenced\n        in the FontBakery configuration file. For more information about write\n        shaping test files and how to configure FontBakery to read the shaping\n        test suites, see https://simoncozens.github.io/tdd-for-otl/\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Ensure dotted circle glyph is present and can attach marks.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Shaping Checks>",
                        "<FontBakeryCheck:com.google.fonts/check/dotted_circle>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font has no nonspacing mark glyphs.",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The dotted circle character (U+25CC) is inserted by shaping engines before\n        mark glyphs which do not have an associated base, especially in the context\n        of broken syllabic clusters.\n\n        For fonts containing combining marks, it is recommended that the dotted circle\n        character be included so that these isolated marks can be displayed properly;\n        for fonts supporting complex scripts, this should be considered mandatory.\n\n        Additionally, when a dotted circle glyph is present, it should be able to\n        display all marks correctly, meaning that it should contain anchors for all\n        attaching marks.\n    ",
                    "result": "SKIP",
                    "severity": 3
                },
                {
                    "description": "Ensure soft_dotted characters lose their dot when combined with marks that replace the dot.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/gfsneohellenic/GFSNeohellenicItalic.ttf",
                    "key": [
                        "<Section: Shaping Checks>",
                        "<FontBakeryCheck:com.google.fonts/check/soft_dotted>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The dot of soft dotted characters used in orthographies _must_ disappear in the following strings: i\u0313 j\u0300 j\u0301 j\u0303 j\u0308 \u012f\u0300 \u012f\u0301 \u012f\u0303 \u1ecb\u0300 \u1ecb\u0301 \u1ecb\u0303\n\nThe dot of soft dotted characters _should_ disappear in other cases, for example: i\u0312 i\u0314 i\u0342 i\u0326\u0312 i\u0326\u0313 i\u0326\u0314 i\u0326\u0342 i\u0327\u0312 i\u0327\u0313 i\u0327\u0314 i\u0327\u0342 j\u0309 j\u0312 j\u0313 j\u0314 j\u0342 j\u0323\u0300 j\u0323\u0301 j\u0323\u0303 j\u0323\u0308\n\nYour font does *not* cover the following languages that require the soft-dotted feature: Belarusian (Cyrl, 10,064,517 speakers), Navajo (Latn, 166,319 speakers), Igbo (Latn, 27,823,640 speakers), Lithuanian (Latn, 2,357,094 speakers), Basaa (Latn, 332,940 speakers), Dutch (Latn, 31,709,104 speakers), Aghem (Latn, 38,843 speakers), Ukrainian (Cyrl, 29,273,587 speakers). [code: soft-dotted]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        An accent placed on characters with a \"soft dot\", like i or j, causes\n        the dot to disappear.\n        An explicit dot above can be added where required.\n        See \"Diacritics on i and j\" in Section 7.1, \"Latin\" in The Unicode Standard.\n\n        Characters with the Soft_Dotted property are listed in\n        https://www.unicode.org/Public/UCD/latest/ucd/PropList.txt\n\n        See also:\n        https://googlefonts.github.io/gf-guide/diacritics.html#soft-dotted-glyphs\n    ",
                    "result": "WARN",
                    "severity": 3
                }
            ],
            "key": [
                "<Section: Shaping Checks>",
                null,
                null
            ],
            "result": {
                "SKIP": 16,
                "WARN": 4
            }
        }
    ]
}