{
    "result": {
        "FAIL": 6,
        "INFO": 33,
        "PASS": 561,
        "SKIP": 252,
        "WARN": 61
    },
    "sections": [
        {
            "checks": [
                {
                    "description": "Ensure that all variable font files have the same set of axes and axis ranges.",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/consistent_axes>",
                        []
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: VFs",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        In order to facilitate the construction of intuitive and friendly user\n        interfaces, all variable font files in a given family should have the same set\n        of variation axes. Also, each axis must have a consistent setting of min/max\n        value ranges accross all the files.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "All tabular figures must have the same width across the RIBBI-family.",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/family/tnum_horizontal_metrics>",
                        []
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Tabular figures need to have the same metrics in all styles in order to allow\n        tables to be set with proper typographic control, but to maintain the placement\n        of decimals and numeric columns between rows.\n\n        Here's a good explanation of this:\n        https://www.typography.com/techniques/fonts-for-financials/#tabular-figs\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Does font file include unacceptable control character glyphs?",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/family/control_chars>",
                        []
                    ],
                    "logs": [
                        {
                            "message": "Unacceptable control characters were not identified.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Use of some unacceptable control characters in the U+0000 - U+001F range can\n        lead to rendering issues on some platforms.\n\n        Acceptable control characters are defined as .null (U+0000) and\n        CR (U+000D) for this test.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Ensure Italic styles have Roman counterparts.",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/family/italics_have_roman_counterparts>",
                        []
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        For each font family on Google Fonts, every Italic style must have\n        a Roman sibling.\n\n        This kind of problem was first observed at [1] where the Bold style was\n        missing but BoldItalic was included.\n\n        [1] https://github.com/google/fonts/pull/1482\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check axis ordering on the STAT table.",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/STAT/axis_order>",
                        []
                    ],
                    "logs": [
                        {
                            "message": "This font does not have a STAT table: /Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf [code: missing-STAT]",
                            "status": "SKIP",
                            "traceback": null
                        },
                        {
                            "message": "This font does not have a STAT table: /Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf [code: missing-STAT]",
                            "status": "SKIP",
                            "traceback": null
                        },
                        {
                            "message": "This font does not have a STAT table: /Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf [code: missing-STAT]",
                            "status": "SKIP",
                            "traceback": null
                        },
                        {
                            "message": "This font does not have a STAT table: /Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf [code: missing-STAT]",
                            "status": "SKIP",
                            "traceback": null
                        },
                        {
                            "message": "From a total of 4 font files, 4 of them (100.00%) lack a STAT table.\n\n\tAnd these are the most common STAT axis orderings:\n\t [code: summary]",
                            "status": "INFO",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This is (for now) a merely informative check to detect what's the axis ordering\n        declared on the STAT table of fonts in the Google Fonts collection.\n\n        We may later update this to enforce some unified axis ordering scheme,\n        yet to be determined.\n    ",
                    "result": "INFO"
                },
                {
                    "description": "Check README.md has a sample image.",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/repo/sample_image>",
                        []
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: readme_contents, readme_directory",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        In order to showcase what a font family looks like, the project's README.md\n        file should ideally include a sample image and highlight it in the upper\n        portion of the document, no more than 10 lines away from the top of the file.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Checking file is named canonically.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/canonical_filename>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font filename is correct, \"Amiri-Bold.ttf\".",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        A font's filename must be composed as \"<familyname>-<stylename>.ttf\":\n\n        - Nunito-Regular.ttf\n\n        - Oswald-BoldItalic.ttf\n\n\n        Variable fonts must list the axis tags in alphabetical order in\n        square brackets and separated by commas:\n\n        - Roboto[wdth,wght].ttf\n\n        - Familyname-Italic[wght].ttf\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Does DESCRIPTION file contain broken links?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/description/broken_links>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "All links in the DESCRIPTION file look good!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The snippet of HTML in the DESCRIPTION.en_us.html file is added to the font\n        family webpage on the Google Fonts website. For that reason, all hyperlinks\n        in it must be properly working.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "URLs on DESCRIPTION file must not display http(s) prefix.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/description/urls>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "All good!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The snippet of HTML in the DESCRIPTION.en_us.html file is added to the font\n        family webpage on the Google Fonts website.\n\n        Google Fonts has a content formatting policy for that snippet that expects the\n        text content of links not to include the http:// or https:// prefixes.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Does DESCRIPTION file contain a upstream Git repo URL?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/description/git_url>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Found a git repo URL: https://github.com/aliftype/amiri [code: url-found]",
                            "status": "INFO",
                            "traceback": null
                        },
                        {
                            "message": "Looks great!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The contents of the DESCRIPTION.en-us.html file are displayed on the\n        Google Fonts website in the about section of each font family specimen page.\n\n        Since all of the Google Fonts collection is composed of libre-licensed fonts,\n        this check enforces a policy that there must be a hypertext link in that page\n        directing users to the repository where the font project files are\n        made available.\n\n        Such hosting is typically done on sites like Github, Gitlab, GNU Savannah or\n        any other git-based version control service.\n    ",
                    "result": "INFO"
                },
                {
                    "description": "Is this a proper HTML snippet?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/description/valid_html>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "/Users/simon/others-repos/fonts/ofl/amiri/DESCRIPTION.en_us.html is a propper HTML file.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Sometimes people write malformed HTML markup. This check should ensure the\n        file is good.\n\n        Additionally, when packaging families for being pushed to the `google/fonts`\n        git repo, if there is no DESCRIPTION.en_us.html file, some older versions of\n        the `add_font.py` tool insert a placeholder description file which contains\n        invalid html. This file needs to either be replaced with an existing\n        description file or edited by hand.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "DESCRIPTION.en_us.html must have more than 200 bytes.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/description/min_length>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "DESCRIPTION.en_us.html is larger than 200 bytes.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "DESCRIPTION.en_us.html should end in a linebreak.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/description/eof_linebreak>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": ":-)",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Some older text-handling tools sometimes misbehave if the last line of data\n        in a text file is not terminated with a newline character (also known as '\\n').\n\n        We know that this is a very small detail, but for the sake of keeping all\n        DESCRIPTION.en_us.html files uniformly formatted throughout the GFonts\n        collection, we chose to adopt the practice of placing this final linebreak\n        character on them.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check METADATA.pb parse correctly.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/parses>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb parsed successfuly.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The purpose of this check is to ensure that the METADATA.pb file is not\n        malformed.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Font designer field in METADATA.pb must not be 'unknown'.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/unknown_designer>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font designer field is not 'unknown'.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Font designer field in METADATA.pb must not contain 'Multiple designers'.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/multiple_designers>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Looks good.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        For a while the string \"Multiple designers\" was used as a placeholder on\n        METADATA.pb files. We should replace all those instances with actual designer\n        names so that proper credits are displayed on the Google Fonts family\n        specimen pages.\n\n        If there's more than a single designer, the designer names must be\n        separated by commas.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Multiple values in font designer field in METADATA.pb must be separated by commas.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/designer_values>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Looks good.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        We must use commas instead of forward slashes because the server-side code\n        at the fonts.google.com directory will segment the string on the commas into\n        a list of names and display the first item in the list as the\n        \"principal designer\" while the remaining names are identified as \"contributors\".\n\n        See eg https://fonts.google.com/specimen/Rubik\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Does METADATA.pb copyright field contain broken links?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/broken_links>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "All links in the METADATA.pb file look good!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Ensure METADATA.pb lists all font binaries.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/undeclared_fonts>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The set of font binaries available, except the ones on a \"static\" subdir,\n        must match exactly those declared on the METADATA.pb file.\n\n        Also, to avoid confusion, we expect that font files (other than statics)\n        are not placed on subdirectories.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Ensure METADATA.pb category field is valid.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/category>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        There are only five acceptable values for the category field in a METADATA.pb\n        file:\n\n        - MONOSPACE\n\n        - SANS_SERIF\n\n        - SERIF\n\n        - DISPLAY\n\n        - HANDWRITING\n\n        This check is meant to avoid typos in this field.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Checking OS/2 fsType does not impose restrictions.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/fstype>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2 fsType is properly set to zero.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The fsType in the OS/2 table is a legacy DRM-related field. Fonts in the\n        Google Fonts collection must have it set to zero (also known as\n        \"Installable Embedding\"). This setting indicates that the fonts can be\n        embedded in documents and permanently installed by applications on\n        remote systems.\n\n        More detailed info is available at:\n        https://docs.microsoft.com/en-us/typography/opentype/spec/os2#fstype\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Checking OS/2 achVendID.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/vendor_id>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2 VendorID 'ALIF' looks good!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Microsoft keeps a list of font vendors and their respective contact info. This\n        list is updated regularly and is indexed by a 4-char \"Vendor ID\" which is\n        stored in the achVendID field of the OS/2 table.\n\n        Registering your ID is not mandatory, but it is a good practice since some\n        applications may display the type designer / type foundry contact info on some\n        dialog and also because that info will be visible on Microsoft's website:\n\n        https://docs.microsoft.com/en-us/typography/vendors/\n\n        This check verifies whether or not a given font's vendor ID is registered in\n        that list or if it has some of the default values used by the most common\n        font editors.\n\n        Each new FontBakery release includes a cached copy of that list of vendor IDs.\n        If you registered recently, you're safe to ignore warnings emitted by this\n        check, since your ID will soon be included in one of our upcoming releases.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check Google Fonts glyph coverage.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/glyph_coverage>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Missing required codepoints:\n\n\t- 0x030B (COMBINING DOUBLE ACUTE ACCENT)\n\n\n\t- 0x02D9 (DOT ABOVE)\n\n\n\t- 0x0218 (LATIN CAPITAL LETTER S WITH COMMA BELOW)\n\n\n\t- 0x1E9E (LATIN CAPITAL LETTER SHARP S)\n\n\n\t- 0x021A (LATIN CAPITAL LETTER T WITH COMMA BELOW)\n\n\n\t- 0x0219 (LATIN SMALL LETTER S WITH COMMA BELOW)\n\n\n\t- 0x021B (LATIN SMALL LETTER T WITH COMMA BELOW)\n\n\n\t- 0x2122 (TRADE MARK SIGN)\n\n\n\t- 0x02DD (DOUBLE ACUTE ACCENT)\n [code: missing-codepoints]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Google Fonts expects that fonts in its collection support at least the minimal\n        set of characters defined in the `GF-latin-core` glyph-set.\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "Check for METADATA subsets with zero support.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/unsupported_subsets>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This check ensures that the subsets specified on a METADATA.pb file are\n        actually supported (even if only partially) by the font files.\n\n        Subsets for which none of the codepoints are supported will cause the\n        check to FAIL.\n    ",
                    "result": "PASS",
                    "severity": 10
                },
                {
                    "description": "Check for codepoints not covered by METADATA subsets.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/unreachable_subsetting>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The following codepoints supported by the font are not covered by\n    any subsets defined in the font's metadata file, and will never\n    be served. You can solve this by either manually adding additional\n    subset declarations to METADATA.pb, or by editing the glyphset\n    definitions.\n\n * U+02BE MODIFIER LETTER RIGHT HALF RING: not included in any glyphset definition\n * U+02BF MODIFIER LETTER LEFT HALF RING: not included in any glyphset definition\n * U+02C7 CARON: try adding one of: tifinagh, canadian-aboriginal\n * U+02D8 BREVE: try adding canadian-aboriginal\n * U+02DB OGONEK: try adding canadian-aboriginal\n * U+0300 COMBINING GRAVE ACCENT: try adding one of: cherokee, coptic, tai-le\n * U+0301 COMBINING ACUTE ACCENT: try adding one of: cherokee, tifinagh, coptic, tai-le\n * U+0302 COMBINING CIRCUMFLEX ACCENT: try adding one of: cherokee, tifinagh, coptic\n * U+0303 COMBINING TILDE: not included in any glyphset definition\n * U+0304 COMBINING MACRON: try adding one of: cherokee, tifinagh, coptic, gothic\n * U+0305 COMBINING OVERLINE: try adding one of: coptic, gothic\n * U+0306 COMBINING BREVE: try adding tifinagh\n * U+0307 COMBINING DOT ABOVE: try adding one of: canadian-aboriginal, tifinagh, coptic, malayalam, tai-le\n * U+0308 COMBINING DIAERESIS: try adding one of: coptic, tai-le, gothic\n * U+030A COMBINING RING ABOVE: not included in any glyphset definition\n * U+030C COMBINING CARON: try adding one of: cherokee, tai-le\n * U+0312 COMBINING TURNED COMMA ABOVE: not included in any glyphset definition\n * U+0315 COMBINING COMMA ABOVE RIGHT: not included in any glyphset definition\n * U+0323 COMBINING DOT BELOW: try adding one of: cherokee, tifinagh, coptic, malayalam\n * U+0326 COMBINING COMMA BELOW: not included in any glyphset definition\n * U+0327 COMBINING CEDILLA: not included in any glyphset definition\n * U+0328 COMBINING OGONEK: not included in any glyphset definition\n * U+0604 ARABIC SIGN SAMVAT: not included in any glyphset definition\n * U+0606 ARABIC-INDIC CUBE ROOT: not included in any glyphset definition\n * U+0607 ARABIC-INDIC FOURTH ROOT: not included in any glyphset definition\n * U+0608 ARABIC RAY: not included in any glyphset definition\n * U+0609 ARABIC-INDIC PER MILLE SIGN: not included in any glyphset definition\n * U+060A ARABIC-INDIC PER TEN THOUSAND SIGN: not included in any glyphset definition\n * U+060E ARABIC POETIC VERSE SIGN: not included in any glyphset definition\n * U+060F ARABIC SIGN MISRA: not included in any glyphset definition\n * U+0610 ARABIC SIGN SALLALLAHOU ALAYHE WASSALLAM: not included in any glyphset definition\n * U+0611 ARABIC SIGN ALAYHE ASSALLAM: not included in any glyphset definition\n * U+0612 ARABIC SIGN RAHMATULLAH ALAYHE: not included in any glyphset definition\n * U+0613 ARABIC SIGN RADI ALLAHOU ANHU: not included in any glyphset definition\n * U+0614 ARABIC SIGN TAKHALLUS: not included in any glyphset definition\n * U+0615 ARABIC SMALL HIGH TAH: not included in any glyphset definition\n * U+0616 ARABIC SMALL HIGH LIGATURE ALEF WITH LAM WITH YEH: not included in any glyphset definition\n * U+0617 ARABIC SMALL HIGH ZAIN: not included in any glyphset definition\n * U+0618 ARABIC SMALL FATHA: not included in any glyphset definition\n * U+0619 ARABIC SMALL DAMMA: not included in any glyphset definition\n * U+061A ARABIC SMALL KASRA: not included in any glyphset definition\n * U+061C ARABIC LETTER MARK: not included in any glyphset definition\n * U+061D ARABIC END OF TEXT MARK: not included in any glyphset definition\n * U+0620 ARABIC LETTER KASHMIRI YEH: not included in any glyphset definition\n * U+063B ARABIC LETTER KEHEH WITH TWO DOTS ABOVE: not included in any glyphset definition\n * U+063C ARABIC LETTER KEHEH WITH THREE DOTS BELOW: not included in any glyphset definition\n * U+063D ARABIC LETTER FARSI YEH WITH INVERTED V: not included in any glyphset definition\n * U+063E ARABIC LETTER FARSI YEH WITH TWO DOTS ABOVE: not included in any glyphset definition\n * U+063F ARABIC LETTER FARSI YEH WITH THREE DOTS ABOVE: not included in any glyphset definition\n * U+065A ARABIC VOWEL SIGN SMALL V ABOVE: not included in any glyphset definition\n * U+065B ARABIC VOWEL SIGN INVERTED SMALL V ABOVE: not included in any glyphset definition\n * U+065C ARABIC VOWEL SIGN DOT BELOW: not included in any glyphset definition\n * U+065D ARABIC REVERSED DAMMA: not included in any glyphset definition\n * U+065E ARABIC FATHA WITH TWO DOTS: not included in any glyphset definition\n * U+065F ARABIC WAVY HAMZA BELOW: not included in any glyphset definition\n * U+066E ARABIC LETTER DOTLESS BEH: not included in any glyphset definition\n * U+066F ARABIC LETTER DOTLESS QAF: not included in any glyphset definition\n * U+0672 ARABIC LETTER ALEF WITH WAVY HAMZA ABOVE: not included in any glyphset definition\n * U+0673 ARABIC LETTER ALEF WITH WAVY HAMZA BELOW: not included in any glyphset definition\n * U+0674 ARABIC LETTER HIGH HAMZA: not included in any glyphset definition\n * U+0675 ARABIC LETTER HIGH HAMZA ALEF: not included in any glyphset definition\n * U+0676 ARABIC LETTER HIGH HAMZA WAW: not included in any glyphset definition\n * U+0677 ARABIC LETTER U WITH HAMZA ABOVE: not included in any glyphset definition\n * U+0678 ARABIC LETTER HIGH HAMZA YEH: not included in any glyphset definition\n * U+0682 ARABIC LETTER HAH WITH TWO DOTS VERTICAL ABOVE: not included in any glyphset definition\n * U+068B ARABIC LETTER DAL WITH DOT BELOW AND SMALL TAH: not included in any glyphset definition\n * U+068E ARABIC LETTER DUL: not included in any glyphset definition\n * U+0690 ARABIC LETTER DAL WITH FOUR DOTS ABOVE: not included in any glyphset definition\n * U+0692 ARABIC LETTER REH WITH SMALL V: not included in any glyphset definition\n * U+0694 ARABIC LETTER REH WITH DOT BELOW: not included in any glyphset definition\n * U+0695 ARABIC LETTER REH WITH SMALL V BELOW: not included in any glyphset definition\n * U+0697 ARABIC LETTER REH WITH TWO DOTS ABOVE: not included in any glyphset definition\n * U+069B ARABIC LETTER SEEN WITH THREE DOTS BELOW: not included in any glyphset definition\n * U+069D ARABIC LETTER SAD WITH TWO DOTS BELOW: not included in any glyphset definition\n * U+069E ARABIC LETTER SAD WITH THREE DOTS ABOVE: not included in any glyphset definition\n * U+069F ARABIC LETTER TAH WITH THREE DOTS ABOVE: not included in any glyphset definition\n * U+06A0 ARABIC LETTER AIN WITH THREE DOTS ABOVE: not included in any glyphset definition\n * U+06A1 ARABIC LETTER DOTLESS FEH: not included in any glyphset definition\n * U+06A3 ARABIC LETTER FEH WITH DOT BELOW: not included in any glyphset definition\n * U+06AC ARABIC LETTER KAF WITH DOT ABOVE: not included in any glyphset definition\n * U+06AD ARABIC LETTER NG: not included in any glyphset definition\n * U+06AE ARABIC LETTER KAF WITH THREE DOTS BELOW: not included in any glyphset definition\n * U+06B0 ARABIC LETTER GAF WITH RING: not included in any glyphset definition\n * U+06B2 ARABIC LETTER GAF WITH TWO DOTS BELOW: not included in any glyphset definition\n * U+06B4 ARABIC LETTER GAF WITH THREE DOTS ABOVE: not included in any glyphset definition\n * U+06B5 ARABIC LETTER LAM WITH SMALL V: not included in any glyphset definition\n * U+06B6 ARABIC LETTER LAM WITH DOT ABOVE: not included in any glyphset definition\n * U+06B7 ARABIC LETTER LAM WITH THREE DOTS ABOVE: not included in any glyphset definition\n * U+06B8 ARABIC LETTER LAM WITH THREE DOTS BELOW: not included in any glyphset definition\n * U+06B9 ARABIC LETTER NOON WITH DOT BELOW: not included in any glyphset definition\n * U+06BD ARABIC LETTER NOON WITH THREE DOTS ABOVE: not included in any glyphset definition\n * U+06BF ARABIC LETTER TCHEH WITH DOT ABOVE: not included in any glyphset definition\n * U+06C4 ARABIC LETTER WAW WITH RING: not included in any glyphset definition\n * U+06C5 ARABIC LETTER KIRGHIZ OE: not included in any glyphset definition\n * U+06C6 ARABIC LETTER OE: not included in any glyphset definition\n * U+06C7 ARABIC LETTER U: not included in any glyphset definition\n * U+06C8 ARABIC LETTER YU: not included in any glyphset definition\n * U+06C9 ARABIC LETTER KIRGHIZ YU: not included in any glyphset definition\n * U+06CA ARABIC LETTER WAW WITH TWO DOTS ABOVE: not included in any glyphset definition\n * U+06CB ARABIC LETTER VE: not included in any glyphset definition\n * U+06CE ARABIC LETTER YEH WITH SMALL V: not included in any glyphset definition\n * U+06CF ARABIC LETTER WAW WITH DOT ABOVE: not included in any glyphset definition\n * U+06D1 ARABIC LETTER YEH WITH THREE DOTS BELOW: not included in any glyphset definition\n * U+06D5 ARABIC LETTER AE: not included in any glyphset definition\n * U+06D6 ARABIC SMALL HIGH LIGATURE SAD WITH LAM WITH ALEF MAKSURA: not included in any glyphset definition\n * U+06D7 ARABIC SMALL HIGH LIGATURE QAF WITH LAM WITH ALEF MAKSURA: not included in any glyphset definition\n * U+06D8 ARABIC SMALL HIGH MEEM INITIAL FORM: not included in any glyphset definition\n * U+06D9 ARABIC SMALL HIGH LAM ALEF: not included in any glyphset definition\n * U+06DA ARABIC SMALL HIGH JEEM: not included in any glyphset definition\n * U+06DB ARABIC SMALL HIGH THREE DOTS: not included in any glyphset definition\n * U+06DC ARABIC SMALL HIGH SEEN: not included in any glyphset definition\n * U+06DF ARABIC SMALL HIGH ROUNDED ZERO: not included in any glyphset definition\n * U+06E0 ARABIC SMALL HIGH UPRIGHT RECTANGULAR ZERO: not included in any glyphset definition\n * U+06E1 ARABIC SMALL HIGH DOTLESS HEAD OF KHAH: not included in any glyphset definition\n * U+06E2 ARABIC SMALL HIGH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+06E3 ARABIC SMALL LOW SEEN: not included in any glyphset definition\n * U+06E4 ARABIC SMALL HIGH MADDA: not included in any glyphset definition\n * U+06E5 ARABIC SMALL WAW: not included in any glyphset definition\n * U+06E6 ARABIC SMALL YEH: not included in any glyphset definition\n * U+06E7 ARABIC SMALL HIGH YEH: not included in any glyphset definition\n * U+06E8 ARABIC SMALL HIGH NOON: not included in any glyphset definition\n * U+06EA ARABIC EMPTY CENTRE LOW STOP: not included in any glyphset definition\n * U+06EB ARABIC EMPTY CENTRE HIGH STOP: not included in any glyphset definition\n * U+06EC ARABIC ROUNDED HIGH STOP WITH FILLED CENTRE: not included in any glyphset definition\n * U+06ED ARABIC SMALL LOW MEEM: not included in any glyphset definition\n * U+06EE ARABIC LETTER DAL WITH INVERTED V: not included in any glyphset definition\n * U+06EF ARABIC LETTER REH WITH INVERTED V: not included in any glyphset definition\n * U+06FA ARABIC LETTER SHEEN WITH DOT BELOW: not included in any glyphset definition\n * U+06FB ARABIC LETTER DAD WITH DOT BELOW: not included in any glyphset definition\n * U+06FC ARABIC LETTER GHAIN WITH DOT BELOW: not included in any glyphset definition\n * U+06FF ARABIC LETTER HEH WITH INVERTED V: not included in any glyphset definition\n * U+0750 ARABIC LETTER BEH WITH THREE DOTS HORIZONTALLY BELOW: not included in any glyphset definition\n * U+0751 ARABIC LETTER BEH WITH DOT BELOW AND THREE DOTS ABOVE: not included in any glyphset definition\n * U+0752 ARABIC LETTER BEH WITH THREE DOTS POINTING UPWARDS BELOW: not included in any glyphset definition\n * U+0753 ARABIC LETTER BEH WITH THREE DOTS POINTING UPWARDS BELOW AND TWO DOTS ABOVE: not included in any glyphset definition\n * U+0754 ARABIC LETTER BEH WITH TWO DOTS BELOW AND DOT ABOVE: not included in any glyphset definition\n * U+0755 ARABIC LETTER BEH WITH INVERTED SMALL V BELOW: not included in any glyphset definition\n * U+0756 ARABIC LETTER BEH WITH SMALL V: not included in any glyphset definition\n * U+0757 ARABIC LETTER HAH WITH TWO DOTS ABOVE: not included in any glyphset definition\n * U+0758 ARABIC LETTER HAH WITH THREE DOTS POINTING UPWARDS BELOW: not included in any glyphset definition\n * U+0759 ARABIC LETTER DAL WITH TWO DOTS VERTICALLY BELOW AND SMALL TAH: not included in any glyphset definition\n * U+075A ARABIC LETTER DAL WITH INVERTED SMALL V BELOW: not included in any glyphset definition\n * U+075B ARABIC LETTER REH WITH STROKE: not included in any glyphset definition\n * U+075C ARABIC LETTER SEEN WITH FOUR DOTS ABOVE: not included in any glyphset definition\n * U+075D ARABIC LETTER AIN WITH TWO DOTS ABOVE: not included in any glyphset definition\n * U+075E ARABIC LETTER AIN WITH THREE DOTS POINTING DOWNWARDS ABOVE: not included in any glyphset definition\n * U+075F ARABIC LETTER AIN WITH TWO DOTS VERTICALLY ABOVE: not included in any glyphset definition\n * U+0760 ARABIC LETTER FEH WITH TWO DOTS BELOW: not included in any glyphset definition\n * U+0761 ARABIC LETTER FEH WITH THREE DOTS POINTING UPWARDS BELOW: not included in any glyphset definition\n * U+0762 ARABIC LETTER KEHEH WITH DOT ABOVE: not included in any glyphset definition\n * U+0763 ARABIC LETTER KEHEH WITH THREE DOTS ABOVE: not included in any glyphset definition\n * U+0764 ARABIC LETTER KEHEH WITH THREE DOTS POINTING UPWARDS BELOW: not included in any glyphset definition\n * U+0765 ARABIC LETTER MEEM WITH DOT ABOVE: not included in any glyphset definition\n * U+0766 ARABIC LETTER MEEM WITH DOT BELOW: not included in any glyphset definition\n * U+0767 ARABIC LETTER NOON WITH TWO DOTS BELOW: not included in any glyphset definition\n * U+0768 ARABIC LETTER NOON WITH SMALL TAH: not included in any glyphset definition\n * U+0769 ARABIC LETTER NOON WITH SMALL V: not included in any glyphset definition\n * U+076A ARABIC LETTER LAM WITH BAR: not included in any glyphset definition\n * U+076B ARABIC LETTER REH WITH TWO DOTS VERTICALLY ABOVE: not included in any glyphset definition\n * U+076C ARABIC LETTER REH WITH HAMZA ABOVE: not included in any glyphset definition\n * U+076D ARABIC LETTER SEEN WITH TWO DOTS VERTICALLY ABOVE: not included in any glyphset definition\n * U+076E ARABIC LETTER HAH WITH SMALL ARABIC LETTER TAH BELOW: not included in any glyphset definition\n * U+076F ARABIC LETTER HAH WITH SMALL ARABIC LETTER TAH AND TWO DOTS: not included in any glyphset definition\n * U+0770 ARABIC LETTER SEEN WITH SMALL ARABIC LETTER TAH AND TWO DOTS: not included in any glyphset definition\n * U+0771 ARABIC LETTER REH WITH SMALL ARABIC LETTER TAH AND TWO DOTS: not included in any glyphset definition\n * U+0772 ARABIC LETTER HAH WITH SMALL ARABIC LETTER TAH ABOVE: not included in any glyphset definition\n * U+0773 ARABIC LETTER ALEF WITH EXTENDED ARABIC-INDIC DIGIT TWO ABOVE: not included in any glyphset definition\n * U+0774 ARABIC LETTER ALEF WITH EXTENDED ARABIC-INDIC DIGIT THREE ABOVE: not included in any glyphset definition\n * U+0775 ARABIC LETTER FARSI YEH WITH EXTENDED ARABIC-INDIC DIGIT TWO ABOVE: not included in any glyphset definition\n * U+0776 ARABIC LETTER FARSI YEH WITH EXTENDED ARABIC-INDIC DIGIT THREE ABOVE: not included in any glyphset definition\n * U+0777 ARABIC LETTER FARSI YEH WITH EXTENDED ARABIC-INDIC DIGIT FOUR BELOW: not included in any glyphset definition\n * U+0778 ARABIC LETTER WAW WITH EXTENDED ARABIC-INDIC DIGIT TWO ABOVE: not included in any glyphset definition\n * U+0779 ARABIC LETTER WAW WITH EXTENDED ARABIC-INDIC DIGIT THREE ABOVE: not included in any glyphset definition\n * U+077A ARABIC LETTER YEH BARREE WITH EXTENDED ARABIC-INDIC DIGIT TWO ABOVE: not included in any glyphset definition\n * U+077B ARABIC LETTER YEH BARREE WITH EXTENDED ARABIC-INDIC DIGIT THREE ABOVE: not included in any glyphset definition\n * U+077C ARABIC LETTER HAH WITH EXTENDED ARABIC-INDIC DIGIT FOUR BELOW: not included in any glyphset definition\n * U+077D ARABIC LETTER SEEN WITH EXTENDED ARABIC-INDIC DIGIT FOUR ABOVE: not included in any glyphset definition\n * U+077E ARABIC LETTER SEEN WITH INVERTED V: not included in any glyphset definition\n * U+077F ARABIC LETTER KAF WITH TWO DOTS ABOVE: not included in any glyphset definition\n * U+0890 ARABIC POUND MARK ABOVE: not included in any glyphset definition\n * U+0891 ARABIC PIASTRE MARK ABOVE: not included in any glyphset definition\n * U+08A0 ARABIC LETTER BEH WITH SMALL V BELOW: not included in any glyphset definition\n * U+08AC ARABIC LETTER ROHINGYA YEH: not included in any glyphset definition\n * U+08B6 ARABIC LETTER BEH WITH SMALL MEEM ABOVE: not included in any glyphset definition\n * U+08B7 ARABIC LETTER PEH WITH SMALL MEEM ABOVE: not included in any glyphset definition\n * U+08B8 ARABIC LETTER TEH WITH SMALL TEH ABOVE: not included in any glyphset definition\n * U+08B9 ARABIC LETTER REH WITH SMALL NOON ABOVE: not included in any glyphset definition\n * U+08BA ARABIC LETTER YEH WITH TWO DOTS BELOW AND SMALL NOON ABOVE: not included in any glyphset definition\n * U+08BB ARABIC LETTER AFRICAN FEH: not included in any glyphset definition\n * U+08BC ARABIC LETTER AFRICAN QAF: not included in any glyphset definition\n * U+08BD ARABIC LETTER AFRICAN NOON: not included in any glyphset definition\n * U+08D1 ARABIC LARGE CIRCLE BELOW: not included in any glyphset definition\n * U+08E4 ARABIC CURLY FATHA: not included in any glyphset definition\n * U+08E5 ARABIC CURLY DAMMA: not included in any glyphset definition\n * U+08E6 ARABIC CURLY KASRA: not included in any glyphset definition\n * U+08E7 ARABIC CURLY FATHATAN: not included in any glyphset definition\n * U+08E8 ARABIC CURLY DAMMATAN: not included in any glyphset definition\n * U+08E9 ARABIC CURLY KASRATAN: not included in any glyphset definition\n * U+08EA ARABIC TONE ONE DOT ABOVE: not included in any glyphset definition\n * U+08EB ARABIC TONE TWO DOTS ABOVE: not included in any glyphset definition\n * U+08EC ARABIC TONE LOOP ABOVE: not included in any glyphset definition\n * U+08ED ARABIC TONE ONE DOT BELOW: not included in any glyphset definition\n * U+08EE ARABIC TONE TWO DOTS BELOW: not included in any glyphset definition\n * U+08EF ARABIC TONE LOOP BELOW: not included in any glyphset definition\n * U+08F0 ARABIC OPEN FATHATAN: not included in any glyphset definition\n * U+08F1 ARABIC OPEN DAMMATAN: not included in any glyphset definition\n * U+08F2 ARABIC OPEN KASRATAN: not included in any glyphset definition\n * U+08F3 ARABIC SMALL HIGH WAW: not included in any glyphset definition\n * U+08F4 ARABIC FATHA WITH RING: not included in any glyphset definition\n * U+08F5 ARABIC FATHA WITH DOT ABOVE: not included in any glyphset definition\n * U+08F6 ARABIC KASRA WITH DOT BELOW: not included in any glyphset definition\n * U+08F7 ARABIC LEFT ARROWHEAD ABOVE: not included in any glyphset definition\n * U+08F8 ARABIC RIGHT ARROWHEAD ABOVE: not included in any glyphset definition\n * U+08F9 ARABIC LEFT ARROWHEAD BELOW: not included in any glyphset definition\n * U+08FA ARABIC RIGHT ARROWHEAD BELOW: not included in any glyphset definition\n * U+08FB ARABIC DOUBLE RIGHT ARROWHEAD ABOVE: not included in any glyphset definition\n * U+08FC ARABIC DOUBLE RIGHT ARROWHEAD ABOVE WITH DOT: not included in any glyphset definition\n * U+08FD ARABIC RIGHT ARROWHEAD ABOVE WITH DOT: not included in any glyphset definition\n * U+08FE ARABIC DAMMA WITH DOT: not included in any glyphset definition\n * U+2000 EN QUAD: not included in any glyphset definition\n * U+2001 EM QUAD: not included in any glyphset definition\n * U+2003 EM SPACE: not included in any glyphset definition\n * U+2004 THREE-PER-EM SPACE: not included in any glyphset definition\n * U+2005 FOUR-PER-EM SPACE: not included in any glyphset definition\n * U+2006 SIX-PER-EM SPACE: not included in any glyphset definition\n * U+2007 FIGURE SPACE: not included in any glyphset definition\n * U+2008 PUNCTUATION SPACE: not included in any glyphset definition\n * U+200A HAIR SPACE: not included in any glyphset definition\n * U+200F RIGHT-TO-LEFT MARK: try adding one of: thaana, phags-pa\n * U+2012 FIGURE DASH: not included in any glyphset definition\n * U+2015 HORIZONTAL BAR: not included in any glyphset definition\n * U+201B SINGLE HIGH-REVERSED-9 QUOTATION MARK: not included in any glyphset definition\n * U+201F DOUBLE HIGH-REVERSED-9 QUOTATION MARK: not included in any glyphset definition\n * U+2021 DOUBLE DAGGER: not included in any glyphset definition\n * U+2024 ONE DOT LEADER: try adding armenian\n * U+2028 LINE SEPARATOR: not included in any glyphset definition\n * U+2029 PARAGRAPH SEPARATOR: not included in any glyphset definition\n * U+202A LEFT-TO-RIGHT EMBEDDING: not included in any glyphset definition\n * U+202B RIGHT-TO-LEFT EMBEDDING: not included in any glyphset definition\n * U+202C POP DIRECTIONAL FORMATTING: not included in any glyphset definition\n * U+202D LEFT-TO-RIGHT OVERRIDE: not included in any glyphset definition\n * U+202E RIGHT-TO-LEFT OVERRIDE: try adding tifinagh\n * U+202F NARROW NO-BREAK SPACE: try adding mongolian\n * U+2030 PER MILLE SIGN: not included in any glyphset definition\n * U+2038 CARET: not included in any glyphset definition\n * U+203E OVERLINE: not included in any glyphset definition\n * U+2042 ASTERISM: not included in any glyphset definition\n * U+2213 MINUS-OR-PLUS SIGN: not included in any glyphset definition\n * U+221A SQUARE ROOT: not included in any glyphset definition\n * U+25CC DOTTED CIRCLE: try adding one of: canadian-aboriginal, sundanese, hebrew, bengali, gujarati, tai-le, tamil, javanese, devanagari, gurmukhi, new-tai-lue, kharoshthi, mandaic, balinese, tagalog, tagbanwa, sinhala, telugu, mongolian, kaithi, tai-viet, thaana, buhid, oriya, limbu, syloti-nagri, tibetan, lao, batak, cham, myanmar, hanunoo, kayah-li, malayalam, lepcha, buginese, phags-pa, meetei-mayek, chakma, rejang, tifinagh, coptic, thai, kannada, brahmi, khmer\n * U+FB86 ARABIC LETTER DUL ISOLATED FORM: not included in any glyphset definition\n * U+FB87 ARABIC LETTER DUL FINAL FORM: not included in any glyphset definition\n * U+FBB2 ARABIC SYMBOL DOT ABOVE: not included in any glyphset definition\n * U+FBB3 ARABIC SYMBOL DOT BELOW: not included in any glyphset definition\n * U+FBB4 ARABIC SYMBOL TWO DOTS ABOVE: not included in any glyphset definition\n * U+FBB5 ARABIC SYMBOL TWO DOTS BELOW: not included in any glyphset definition\n * U+FBB6 ARABIC SYMBOL THREE DOTS ABOVE: not included in any glyphset definition\n * U+FBB7 ARABIC SYMBOL THREE DOTS BELOW: not included in any glyphset definition\n * U+FBB8 ARABIC SYMBOL THREE DOTS POINTING DOWNWARDS ABOVE: not included in any glyphset definition\n * U+FBB9 ARABIC SYMBOL THREE DOTS POINTING DOWNWARDS BELOW: not included in any glyphset definition\n * U+FBBA ARABIC SYMBOL FOUR DOTS ABOVE: not included in any glyphset definition\n * U+FBBB ARABIC SYMBOL FOUR DOTS BELOW: not included in any glyphset definition\n * U+FBBC ARABIC SYMBOL DOUBLE VERTICAL BAR BELOW: not included in any glyphset definition\n * U+FBBD ARABIC SYMBOL TWO DOTS VERTICALLY ABOVE: not included in any glyphset definition\n * U+FBBE ARABIC SYMBOL TWO DOTS VERTICALLY BELOW: not included in any glyphset definition\n * U+FBBF ARABIC SYMBOL RING: not included in any glyphset definition\n * U+FBC0 ARABIC SYMBOL SMALL TAH ABOVE: not included in any glyphset definition\n * U+FBC1 ARABIC SYMBOL SMALL TAH BELOW: not included in any glyphset definition\n * U+FBD3 ARABIC LETTER NG ISOLATED FORM: not included in any glyphset definition\n * U+FBD4 ARABIC LETTER NG FINAL FORM: not included in any glyphset definition\n * U+FBD5 ARABIC LETTER NG INITIAL FORM: not included in any glyphset definition\n * U+FBD6 ARABIC LETTER NG MEDIAL FORM: not included in any glyphset definition\n * U+FBD7 ARABIC LETTER U ISOLATED FORM: not included in any glyphset definition\n * U+FBD8 ARABIC LETTER U FINAL FORM: not included in any glyphset definition\n * U+FBD9 ARABIC LETTER OE ISOLATED FORM: not included in any glyphset definition\n * U+FBDA ARABIC LETTER OE FINAL FORM: not included in any glyphset definition\n * U+FBDB ARABIC LETTER YU ISOLATED FORM: not included in any glyphset definition\n * U+FBDC ARABIC LETTER YU FINAL FORM: not included in any glyphset definition\n * U+FBDD ARABIC LETTER U WITH HAMZA ABOVE ISOLATED FORM: not included in any glyphset definition\n * U+FBDE ARABIC LETTER VE ISOLATED FORM: not included in any glyphset definition\n * U+FBDF ARABIC LETTER VE FINAL FORM: not included in any glyphset definition\n * U+FBE0 ARABIC LETTER KIRGHIZ OE ISOLATED FORM: not included in any glyphset definition\n * U+FBE1 ARABIC LETTER KIRGHIZ OE FINAL FORM: not included in any glyphset definition\n * U+FBE2 ARABIC LETTER KIRGHIZ YU ISOLATED FORM: not included in any glyphset definition\n * U+FBE3 ARABIC LETTER KIRGHIZ YU FINAL FORM: not included in any glyphset definition\n * U+FBEA ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH ALEF ISOLATED FORM: not included in any glyphset definition\n * U+FBEB ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH ALEF FINAL FORM: not included in any glyphset definition\n * U+FBEC ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH AE ISOLATED FORM: not included in any glyphset definition\n * U+FBED ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH AE FINAL FORM: not included in any glyphset definition\n * U+FBEE ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH WAW ISOLATED FORM: not included in any glyphset definition\n * U+FBEF ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH WAW FINAL FORM: not included in any glyphset definition\n * U+FBF0 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH U ISOLATED FORM: not included in any glyphset definition\n * U+FBF1 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH U FINAL FORM: not included in any glyphset definition\n * U+FBF2 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH OE ISOLATED FORM: not included in any glyphset definition\n * U+FBF3 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH OE FINAL FORM: not included in any glyphset definition\n * U+FBF4 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH YU ISOLATED FORM: not included in any glyphset definition\n * U+FBF5 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH YU FINAL FORM: not included in any glyphset definition\n * U+FBF6 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH E ISOLATED FORM: not included in any glyphset definition\n * U+FBF7 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH E FINAL FORM: not included in any glyphset definition\n * U+FBF8 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH E INITIAL FORM: not included in any glyphset definition\n * U+FBF9 ARABIC LIGATURE UIGHUR KIRGHIZ YEH WITH HAMZA ABOVE WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FBFA ARABIC LIGATURE UIGHUR KIRGHIZ YEH WITH HAMZA ABOVE WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FBFB ARABIC LIGATURE UIGHUR KIRGHIZ YEH WITH HAMZA ABOVE WITH ALEF MAKSURA INITIAL FORM: not included in any glyphset definition\n * U+FC00 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC01 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FC02 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC03 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FC04 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FC05 ARABIC LIGATURE BEH WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC06 ARABIC LIGATURE BEH WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FC07 ARABIC LIGATURE BEH WITH KHAH ISOLATED FORM: not included in any glyphset definition\n * U+FC08 ARABIC LIGATURE BEH WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC09 ARABIC LIGATURE BEH WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FC0A ARABIC LIGATURE BEH WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FC0B ARABIC LIGATURE TEH WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC0C ARABIC LIGATURE TEH WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FC0D ARABIC LIGATURE TEH WITH KHAH ISOLATED FORM: not included in any glyphset definition\n * U+FC0E ARABIC LIGATURE TEH WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC0F ARABIC LIGATURE TEH WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FC10 ARABIC LIGATURE TEH WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FC11 ARABIC LIGATURE THEH WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC12 ARABIC LIGATURE THEH WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC13 ARABIC LIGATURE THEH WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FC14 ARABIC LIGATURE THEH WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FC15 ARABIC LIGATURE JEEM WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FC16 ARABIC LIGATURE JEEM WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC17 ARABIC LIGATURE HAH WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC18 ARABIC LIGATURE HAH WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC19 ARABIC LIGATURE KHAH WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC1A ARABIC LIGATURE KHAH WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FC1B ARABIC LIGATURE KHAH WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC1C ARABIC LIGATURE SEEN WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC1D ARABIC LIGATURE SEEN WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FC1E ARABIC LIGATURE SEEN WITH KHAH ISOLATED FORM: not included in any glyphset definition\n * U+FC1F ARABIC LIGATURE SEEN WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC20 ARABIC LIGATURE SAD WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FC21 ARABIC LIGATURE SAD WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC22 ARABIC LIGATURE DAD WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC23 ARABIC LIGATURE DAD WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FC24 ARABIC LIGATURE DAD WITH KHAH ISOLATED FORM: not included in any glyphset definition\n * U+FC25 ARABIC LIGATURE DAD WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC26 ARABIC LIGATURE TAH WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FC27 ARABIC LIGATURE TAH WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC28 ARABIC LIGATURE ZAH WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC29 ARABIC LIGATURE AIN WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC2A ARABIC LIGATURE AIN WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC2B ARABIC LIGATURE GHAIN WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC2C ARABIC LIGATURE GHAIN WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC2D ARABIC LIGATURE FEH WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC2E ARABIC LIGATURE FEH WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FC2F ARABIC LIGATURE FEH WITH KHAH ISOLATED FORM: not included in any glyphset definition\n * U+FC30 ARABIC LIGATURE FEH WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC31 ARABIC LIGATURE FEH WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FC32 ARABIC LIGATURE FEH WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FC33 ARABIC LIGATURE QAF WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FC34 ARABIC LIGATURE QAF WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC35 ARABIC LIGATURE QAF WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FC36 ARABIC LIGATURE QAF WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FC37 ARABIC LIGATURE KAF WITH ALEF ISOLATED FORM: not included in any glyphset definition\n * U+FC38 ARABIC LIGATURE KAF WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC39 ARABIC LIGATURE KAF WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FC3A ARABIC LIGATURE KAF WITH KHAH ISOLATED FORM: not included in any glyphset definition\n * U+FC3B ARABIC LIGATURE KAF WITH LAM ISOLATED FORM: not included in any glyphset definition\n * U+FC3C ARABIC LIGATURE KAF WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC3D ARABIC LIGATURE KAF WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FC3E ARABIC LIGATURE KAF WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FC3F ARABIC LIGATURE LAM WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC40 ARABIC LIGATURE LAM WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FC41 ARABIC LIGATURE LAM WITH KHAH ISOLATED FORM: not included in any glyphset definition\n * U+FC42 ARABIC LIGATURE LAM WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC43 ARABIC LIGATURE LAM WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FC44 ARABIC LIGATURE LAM WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FC45 ARABIC LIGATURE MEEM WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC46 ARABIC LIGATURE MEEM WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FC47 ARABIC LIGATURE MEEM WITH KHAH ISOLATED FORM: not included in any glyphset definition\n * U+FC48 ARABIC LIGATURE MEEM WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC49 ARABIC LIGATURE MEEM WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FC4A ARABIC LIGATURE MEEM WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FC4B ARABIC LIGATURE NOON WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC4C ARABIC LIGATURE NOON WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FC4D ARABIC LIGATURE NOON WITH KHAH ISOLATED FORM: not included in any glyphset definition\n * U+FC4E ARABIC LIGATURE NOON WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC4F ARABIC LIGATURE NOON WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FC50 ARABIC LIGATURE NOON WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FC51 ARABIC LIGATURE HEH WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC52 ARABIC LIGATURE HEH WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC53 ARABIC LIGATURE HEH WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FC54 ARABIC LIGATURE HEH WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FC55 ARABIC LIGATURE YEH WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC56 ARABIC LIGATURE YEH WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FC57 ARABIC LIGATURE YEH WITH KHAH ISOLATED FORM: not included in any glyphset definition\n * U+FC58 ARABIC LIGATURE YEH WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC59 ARABIC LIGATURE YEH WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FC5A ARABIC LIGATURE YEH WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FC5B ARABIC LIGATURE THAL WITH SUPERSCRIPT ALEF ISOLATED FORM: not included in any glyphset definition\n * U+FC5C ARABIC LIGATURE REH WITH SUPERSCRIPT ALEF ISOLATED FORM: not included in any glyphset definition\n * U+FC5D ARABIC LIGATURE ALEF MAKSURA WITH SUPERSCRIPT ALEF ISOLATED FORM: not included in any glyphset definition\n * U+FC5E ARABIC LIGATURE SHADDA WITH DAMMATAN ISOLATED FORM: not included in any glyphset definition\n * U+FC5F ARABIC LIGATURE SHADDA WITH KASRATAN ISOLATED FORM: not included in any glyphset definition\n * U+FC60 ARABIC LIGATURE SHADDA WITH FATHA ISOLATED FORM: not included in any glyphset definition\n * U+FC61 ARABIC LIGATURE SHADDA WITH DAMMA ISOLATED FORM: not included in any glyphset definition\n * U+FC62 ARABIC LIGATURE SHADDA WITH KASRA ISOLATED FORM: not included in any glyphset definition\n * U+FC63 ARABIC LIGATURE SHADDA WITH SUPERSCRIPT ALEF ISOLATED FORM: not included in any glyphset definition\n * U+FC64 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH REH FINAL FORM: not included in any glyphset definition\n * U+FC65 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH ZAIN FINAL FORM: not included in any glyphset definition\n * U+FC66 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FC67 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH NOON FINAL FORM: not included in any glyphset definition\n * U+FC68 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FC69 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FC6A ARABIC LIGATURE BEH WITH REH FINAL FORM: not included in any glyphset definition\n * U+FC6B ARABIC LIGATURE BEH WITH ZAIN FINAL FORM: not included in any glyphset definition\n * U+FC6C ARABIC LIGATURE BEH WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FC6D ARABIC LIGATURE BEH WITH NOON FINAL FORM: not included in any glyphset definition\n * U+FC6E ARABIC LIGATURE BEH WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FC6F ARABIC LIGATURE BEH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FC70 ARABIC LIGATURE TEH WITH REH FINAL FORM: not included in any glyphset definition\n * U+FC71 ARABIC LIGATURE TEH WITH ZAIN FINAL FORM: not included in any glyphset definition\n * U+FC72 ARABIC LIGATURE TEH WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FC73 ARABIC LIGATURE TEH WITH NOON FINAL FORM: not included in any glyphset definition\n * U+FC74 ARABIC LIGATURE TEH WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FC75 ARABIC LIGATURE TEH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FC76 ARABIC LIGATURE THEH WITH REH FINAL FORM: not included in any glyphset definition\n * U+FC77 ARABIC LIGATURE THEH WITH ZAIN FINAL FORM: not included in any glyphset definition\n * U+FC78 ARABIC LIGATURE THEH WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FC79 ARABIC LIGATURE THEH WITH NOON FINAL FORM: not included in any glyphset definition\n * U+FC7A ARABIC LIGATURE THEH WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FC7B ARABIC LIGATURE THEH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FC7C ARABIC LIGATURE FEH WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FC7D ARABIC LIGATURE FEH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FC7E ARABIC LIGATURE QAF WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FC7F ARABIC LIGATURE QAF WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FC80 ARABIC LIGATURE KAF WITH ALEF FINAL FORM: not included in any glyphset definition\n * U+FC81 ARABIC LIGATURE KAF WITH LAM FINAL FORM: not included in any glyphset definition\n * U+FC82 ARABIC LIGATURE KAF WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FC83 ARABIC LIGATURE KAF WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FC84 ARABIC LIGATURE KAF WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FC85 ARABIC LIGATURE LAM WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FC86 ARABIC LIGATURE LAM WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FC87 ARABIC LIGATURE LAM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FC88 ARABIC LIGATURE MEEM WITH ALEF FINAL FORM: not included in any glyphset definition\n * U+FC89 ARABIC LIGATURE MEEM WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FC8A ARABIC LIGATURE NOON WITH REH FINAL FORM: not included in any glyphset definition\n * U+FC8B ARABIC LIGATURE NOON WITH ZAIN FINAL FORM: not included in any glyphset definition\n * U+FC8C ARABIC LIGATURE NOON WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FC8D ARABIC LIGATURE NOON WITH NOON FINAL FORM: not included in any glyphset definition\n * U+FC8E ARABIC LIGATURE NOON WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FC8F ARABIC LIGATURE NOON WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FC90 ARABIC LIGATURE ALEF MAKSURA WITH SUPERSCRIPT ALEF FINAL FORM: not included in any glyphset definition\n * U+FC91 ARABIC LIGATURE YEH WITH REH FINAL FORM: not included in any glyphset definition\n * U+FC92 ARABIC LIGATURE YEH WITH ZAIN FINAL FORM: not included in any glyphset definition\n * U+FC93 ARABIC LIGATURE YEH WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FC94 ARABIC LIGATURE YEH WITH NOON FINAL FORM: not included in any glyphset definition\n * U+FC95 ARABIC LIGATURE YEH WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FC96 ARABIC LIGATURE YEH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FC97 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FC98 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FC99 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH KHAH INITIAL FORM: not included in any glyphset definition\n * U+FC9A ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FC9B ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH HEH INITIAL FORM: not included in any glyphset definition\n * U+FC9C ARABIC LIGATURE BEH WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FC9D ARABIC LIGATURE BEH WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FC9E ARABIC LIGATURE BEH WITH KHAH INITIAL FORM: not included in any glyphset definition\n * U+FC9F ARABIC LIGATURE BEH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCA0 ARABIC LIGATURE BEH WITH HEH INITIAL FORM: not included in any glyphset definition\n * U+FCA1 ARABIC LIGATURE TEH WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FCA2 ARABIC LIGATURE TEH WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FCA3 ARABIC LIGATURE TEH WITH KHAH INITIAL FORM: not included in any glyphset definition\n * U+FCA4 ARABIC LIGATURE TEH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCA5 ARABIC LIGATURE TEH WITH HEH INITIAL FORM: not included in any glyphset definition\n * U+FCA6 ARABIC LIGATURE THEH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCA7 ARABIC LIGATURE JEEM WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FCA8 ARABIC LIGATURE JEEM WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCA9 ARABIC LIGATURE HAH WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FCAA ARABIC LIGATURE HAH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCAB ARABIC LIGATURE KHAH WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FCAC ARABIC LIGATURE KHAH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCAD ARABIC LIGATURE SEEN WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FCAE ARABIC LIGATURE SEEN WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FCAF ARABIC LIGATURE SEEN WITH KHAH INITIAL FORM: not included in any glyphset definition\n * U+FCB0 ARABIC LIGATURE SEEN WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCB1 ARABIC LIGATURE SAD WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FCB2 ARABIC LIGATURE SAD WITH KHAH INITIAL FORM: not included in any glyphset definition\n * U+FCB3 ARABIC LIGATURE SAD WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCB4 ARABIC LIGATURE DAD WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FCB5 ARABIC LIGATURE DAD WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FCB6 ARABIC LIGATURE DAD WITH KHAH INITIAL FORM: not included in any glyphset definition\n * U+FCB7 ARABIC LIGATURE DAD WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCB8 ARABIC LIGATURE TAH WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FCB9 ARABIC LIGATURE ZAH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCBA ARABIC LIGATURE AIN WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FCBB ARABIC LIGATURE AIN WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCBC ARABIC LIGATURE GHAIN WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FCBD ARABIC LIGATURE GHAIN WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCBE ARABIC LIGATURE FEH WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FCBF ARABIC LIGATURE FEH WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FCC0 ARABIC LIGATURE FEH WITH KHAH INITIAL FORM: not included in any glyphset definition\n * U+FCC1 ARABIC LIGATURE FEH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCC2 ARABIC LIGATURE QAF WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FCC3 ARABIC LIGATURE QAF WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCC4 ARABIC LIGATURE KAF WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FCC5 ARABIC LIGATURE KAF WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FCC6 ARABIC LIGATURE KAF WITH KHAH INITIAL FORM: not included in any glyphset definition\n * U+FCC7 ARABIC LIGATURE KAF WITH LAM INITIAL FORM: not included in any glyphset definition\n * U+FCC8 ARABIC LIGATURE KAF WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCC9 ARABIC LIGATURE LAM WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FCCA ARABIC LIGATURE LAM WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FCCB ARABIC LIGATURE LAM WITH KHAH INITIAL FORM: not included in any glyphset definition\n * U+FCCC ARABIC LIGATURE LAM WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCCD ARABIC LIGATURE LAM WITH HEH INITIAL FORM: not included in any glyphset definition\n * U+FCCE ARABIC LIGATURE MEEM WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FCCF ARABIC LIGATURE MEEM WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FCD0 ARABIC LIGATURE MEEM WITH KHAH INITIAL FORM: not included in any glyphset definition\n * U+FCD1 ARABIC LIGATURE MEEM WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCD2 ARABIC LIGATURE NOON WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FCD3 ARABIC LIGATURE NOON WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FCD4 ARABIC LIGATURE NOON WITH KHAH INITIAL FORM: not included in any glyphset definition\n * U+FCD5 ARABIC LIGATURE NOON WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCD6 ARABIC LIGATURE NOON WITH HEH INITIAL FORM: not included in any glyphset definition\n * U+FCD7 ARABIC LIGATURE HEH WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FCD8 ARABIC LIGATURE HEH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCD9 ARABIC LIGATURE HEH WITH SUPERSCRIPT ALEF INITIAL FORM: not included in any glyphset definition\n * U+FCDA ARABIC LIGATURE YEH WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FCDB ARABIC LIGATURE YEH WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FCDC ARABIC LIGATURE YEH WITH KHAH INITIAL FORM: not included in any glyphset definition\n * U+FCDD ARABIC LIGATURE YEH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCDE ARABIC LIGATURE YEH WITH HEH INITIAL FORM: not included in any glyphset definition\n * U+FCDF ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH MEEM MEDIAL FORM: not included in any glyphset definition\n * U+FCE0 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH HEH MEDIAL FORM: not included in any glyphset definition\n * U+FCE1 ARABIC LIGATURE BEH WITH MEEM MEDIAL FORM: not included in any glyphset definition\n * U+FCE2 ARABIC LIGATURE BEH WITH HEH MEDIAL FORM: not included in any glyphset definition\n * U+FCE3 ARABIC LIGATURE TEH WITH MEEM MEDIAL FORM: not included in any glyphset definition\n * U+FCE4 ARABIC LIGATURE TEH WITH HEH MEDIAL FORM: not included in any glyphset definition\n * U+FCE5 ARABIC LIGATURE THEH WITH MEEM MEDIAL FORM: not included in any glyphset definition\n * U+FCE6 ARABIC LIGATURE THEH WITH HEH MEDIAL FORM: not included in any glyphset definition\n * U+FCE7 ARABIC LIGATURE SEEN WITH MEEM MEDIAL FORM: not included in any glyphset definition\n * U+FCE8 ARABIC LIGATURE SEEN WITH HEH MEDIAL FORM: not included in any glyphset definition\n * U+FCE9 ARABIC LIGATURE SHEEN WITH MEEM MEDIAL FORM: not included in any glyphset definition\n * U+FCEA ARABIC LIGATURE SHEEN WITH HEH MEDIAL FORM: not included in any glyphset definition\n * U+FCEB ARABIC LIGATURE KAF WITH LAM MEDIAL FORM: not included in any glyphset definition\n * U+FCEC ARABIC LIGATURE KAF WITH MEEM MEDIAL FORM: not included in any glyphset definition\n * U+FCED ARABIC LIGATURE LAM WITH MEEM MEDIAL FORM: not included in any glyphset definition\n * U+FCEE ARABIC LIGATURE NOON WITH MEEM MEDIAL FORM: not included in any glyphset definition\n * U+FCEF ARABIC LIGATURE NOON WITH HEH MEDIAL FORM: not included in any glyphset definition\n * U+FCF0 ARABIC LIGATURE YEH WITH MEEM MEDIAL FORM: not included in any glyphset definition\n * U+FCF1 ARABIC LIGATURE YEH WITH HEH MEDIAL FORM: not included in any glyphset definition\n * U+FCF2 ARABIC LIGATURE SHADDA WITH FATHA MEDIAL FORM: not included in any glyphset definition\n * U+FCF3 ARABIC LIGATURE SHADDA WITH DAMMA MEDIAL FORM: not included in any glyphset definition\n * U+FCF4 ARABIC LIGATURE SHADDA WITH KASRA MEDIAL FORM: not included in any glyphset definition\n * U+FCF5 ARABIC LIGATURE TAH WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FCF6 ARABIC LIGATURE TAH WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FCF7 ARABIC LIGATURE AIN WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FCF8 ARABIC LIGATURE AIN WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FCF9 ARABIC LIGATURE GHAIN WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FCFA ARABIC LIGATURE GHAIN WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FCFB ARABIC LIGATURE SEEN WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FCFC ARABIC LIGATURE SEEN WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FCFD ARABIC LIGATURE SHEEN WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FCFE ARABIC LIGATURE SHEEN WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FCFF ARABIC LIGATURE HAH WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FD00 ARABIC LIGATURE HAH WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FD01 ARABIC LIGATURE JEEM WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FD02 ARABIC LIGATURE JEEM WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FD03 ARABIC LIGATURE KHAH WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FD04 ARABIC LIGATURE KHAH WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FD05 ARABIC LIGATURE SAD WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FD06 ARABIC LIGATURE SAD WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FD07 ARABIC LIGATURE DAD WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FD08 ARABIC LIGATURE DAD WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FD09 ARABIC LIGATURE SHEEN WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FD0A ARABIC LIGATURE SHEEN WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FD0B ARABIC LIGATURE SHEEN WITH KHAH ISOLATED FORM: not included in any glyphset definition\n * U+FD0C ARABIC LIGATURE SHEEN WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FD0D ARABIC LIGATURE SHEEN WITH REH ISOLATED FORM: not included in any glyphset definition\n * U+FD0E ARABIC LIGATURE SEEN WITH REH ISOLATED FORM: not included in any glyphset definition\n * U+FD0F ARABIC LIGATURE SAD WITH REH ISOLATED FORM: not included in any glyphset definition\n * U+FD10 ARABIC LIGATURE DAD WITH REH ISOLATED FORM: not included in any glyphset definition\n * U+FD11 ARABIC LIGATURE TAH WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD12 ARABIC LIGATURE TAH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD13 ARABIC LIGATURE AIN WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD14 ARABIC LIGATURE AIN WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD15 ARABIC LIGATURE GHAIN WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD16 ARABIC LIGATURE GHAIN WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD17 ARABIC LIGATURE SEEN WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD18 ARABIC LIGATURE SEEN WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD19 ARABIC LIGATURE SHEEN WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD1A ARABIC LIGATURE SHEEN WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD1B ARABIC LIGATURE HAH WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD1C ARABIC LIGATURE HAH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD1D ARABIC LIGATURE JEEM WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD1E ARABIC LIGATURE JEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD1F ARABIC LIGATURE KHAH WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD20 ARABIC LIGATURE KHAH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD21 ARABIC LIGATURE SAD WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD22 ARABIC LIGATURE SAD WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD23 ARABIC LIGATURE DAD WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD24 ARABIC LIGATURE DAD WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD25 ARABIC LIGATURE SHEEN WITH JEEM FINAL FORM: not included in any glyphset definition\n * U+FD26 ARABIC LIGATURE SHEEN WITH HAH FINAL FORM: not included in any glyphset definition\n * U+FD27 ARABIC LIGATURE SHEEN WITH KHAH FINAL FORM: not included in any glyphset definition\n * U+FD28 ARABIC LIGATURE SHEEN WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FD29 ARABIC LIGATURE SHEEN WITH REH FINAL FORM: not included in any glyphset definition\n * U+FD2A ARABIC LIGATURE SEEN WITH REH FINAL FORM: not included in any glyphset definition\n * U+FD2B ARABIC LIGATURE SAD WITH REH FINAL FORM: not included in any glyphset definition\n * U+FD2C ARABIC LIGATURE DAD WITH REH FINAL FORM: not included in any glyphset definition\n * U+FD2D ARABIC LIGATURE SHEEN WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FD2E ARABIC LIGATURE SHEEN WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FD2F ARABIC LIGATURE SHEEN WITH KHAH INITIAL FORM: not included in any glyphset definition\n * U+FD30 ARABIC LIGATURE SHEEN WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD31 ARABIC LIGATURE SEEN WITH HEH INITIAL FORM: not included in any glyphset definition\n * U+FD32 ARABIC LIGATURE SHEEN WITH HEH INITIAL FORM: not included in any glyphset definition\n * U+FD33 ARABIC LIGATURE TAH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD34 ARABIC LIGATURE SEEN WITH JEEM MEDIAL FORM: not included in any glyphset definition\n * U+FD35 ARABIC LIGATURE SEEN WITH HAH MEDIAL FORM: not included in any glyphset definition\n * U+FD36 ARABIC LIGATURE SEEN WITH KHAH MEDIAL FORM: not included in any glyphset definition\n * U+FD37 ARABIC LIGATURE SHEEN WITH JEEM MEDIAL FORM: not included in any glyphset definition\n * U+FD38 ARABIC LIGATURE SHEEN WITH HAH MEDIAL FORM: not included in any glyphset definition\n * U+FD39 ARABIC LIGATURE SHEEN WITH KHAH MEDIAL FORM: not included in any glyphset definition\n * U+FD3A ARABIC LIGATURE TAH WITH MEEM MEDIAL FORM: not included in any glyphset definition\n * U+FD3B ARABIC LIGATURE ZAH WITH MEEM MEDIAL FORM: not included in any glyphset definition\n * U+FD3C ARABIC LIGATURE ALEF WITH FATHATAN FINAL FORM: not included in any glyphset definition\n * U+FD3D ARABIC LIGATURE ALEF WITH FATHATAN ISOLATED FORM: not included in any glyphset definition\n * U+FD50 ARABIC LIGATURE TEH WITH JEEM WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD51 ARABIC LIGATURE TEH WITH HAH WITH JEEM FINAL FORM: not included in any glyphset definition\n * U+FD52 ARABIC LIGATURE TEH WITH HAH WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FD53 ARABIC LIGATURE TEH WITH HAH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD54 ARABIC LIGATURE TEH WITH KHAH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD55 ARABIC LIGATURE TEH WITH MEEM WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FD56 ARABIC LIGATURE TEH WITH MEEM WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FD57 ARABIC LIGATURE TEH WITH MEEM WITH KHAH INITIAL FORM: not included in any glyphset definition\n * U+FD58 ARABIC LIGATURE JEEM WITH MEEM WITH HAH FINAL FORM: not included in any glyphset definition\n * U+FD59 ARABIC LIGATURE JEEM WITH MEEM WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FD5A ARABIC LIGATURE HAH WITH MEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD5B ARABIC LIGATURE HAH WITH MEEM WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD5C ARABIC LIGATURE SEEN WITH HAH WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FD5D ARABIC LIGATURE SEEN WITH JEEM WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FD5E ARABIC LIGATURE SEEN WITH JEEM WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD5F ARABIC LIGATURE SEEN WITH MEEM WITH HAH FINAL FORM: not included in any glyphset definition\n * U+FD60 ARABIC LIGATURE SEEN WITH MEEM WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FD61 ARABIC LIGATURE SEEN WITH MEEM WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FD62 ARABIC LIGATURE SEEN WITH MEEM WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FD63 ARABIC LIGATURE SEEN WITH MEEM WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD64 ARABIC LIGATURE SAD WITH HAH WITH HAH FINAL FORM: not included in any glyphset definition\n * U+FD65 ARABIC LIGATURE SAD WITH HAH WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FD66 ARABIC LIGATURE SAD WITH MEEM WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FD67 ARABIC LIGATURE SHEEN WITH HAH WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FD68 ARABIC LIGATURE SHEEN WITH HAH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD69 ARABIC LIGATURE SHEEN WITH JEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD6A ARABIC LIGATURE SHEEN WITH MEEM WITH KHAH FINAL FORM: not included in any glyphset definition\n * U+FD6B ARABIC LIGATURE SHEEN WITH MEEM WITH KHAH INITIAL FORM: not included in any glyphset definition\n * U+FD6C ARABIC LIGATURE SHEEN WITH MEEM WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FD6D ARABIC LIGATURE SHEEN WITH MEEM WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD6E ARABIC LIGATURE DAD WITH HAH WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD6F ARABIC LIGATURE DAD WITH KHAH WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FD70 ARABIC LIGATURE DAD WITH KHAH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD71 ARABIC LIGATURE TAH WITH MEEM WITH HAH FINAL FORM: not included in any glyphset definition\n * U+FD72 ARABIC LIGATURE TAH WITH MEEM WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FD73 ARABIC LIGATURE TAH WITH MEEM WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD74 ARABIC LIGATURE TAH WITH MEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD75 ARABIC LIGATURE AIN WITH JEEM WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FD76 ARABIC LIGATURE AIN WITH MEEM WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FD77 ARABIC LIGATURE AIN WITH MEEM WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD78 ARABIC LIGATURE AIN WITH MEEM WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD79 ARABIC LIGATURE GHAIN WITH MEEM WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FD7A ARABIC LIGATURE GHAIN WITH MEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD7B ARABIC LIGATURE GHAIN WITH MEEM WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD7C ARABIC LIGATURE FEH WITH KHAH WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FD7D ARABIC LIGATURE FEH WITH KHAH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD7E ARABIC LIGATURE QAF WITH MEEM WITH HAH FINAL FORM: not included in any glyphset definition\n * U+FD7F ARABIC LIGATURE QAF WITH MEEM WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FD80 ARABIC LIGATURE LAM WITH HAH WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FD81 ARABIC LIGATURE LAM WITH HAH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD82 ARABIC LIGATURE LAM WITH HAH WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD83 ARABIC LIGATURE LAM WITH JEEM WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FD84 ARABIC LIGATURE LAM WITH JEEM WITH JEEM FINAL FORM: not included in any glyphset definition\n * U+FD85 ARABIC LIGATURE LAM WITH KHAH WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FD86 ARABIC LIGATURE LAM WITH KHAH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD87 ARABIC LIGATURE LAM WITH MEEM WITH HAH FINAL FORM: not included in any glyphset definition\n * U+FD88 ARABIC LIGATURE LAM WITH MEEM WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FD89 ARABIC LIGATURE MEEM WITH HAH WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FD8A ARABIC LIGATURE MEEM WITH HAH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD8B ARABIC LIGATURE MEEM WITH HAH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD8C ARABIC LIGATURE MEEM WITH JEEM WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FD8D ARABIC LIGATURE MEEM WITH JEEM WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD8E ARABIC LIGATURE MEEM WITH KHAH WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FD8F ARABIC LIGATURE MEEM WITH KHAH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD92 ARABIC LIGATURE MEEM WITH JEEM WITH KHAH INITIAL FORM: not included in any glyphset definition\n * U+FD93 ARABIC LIGATURE HEH WITH MEEM WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FD94 ARABIC LIGATURE HEH WITH MEEM WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD95 ARABIC LIGATURE NOON WITH HAH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD96 ARABIC LIGATURE NOON WITH HAH WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD97 ARABIC LIGATURE NOON WITH JEEM WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FD98 ARABIC LIGATURE NOON WITH JEEM WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD99 ARABIC LIGATURE NOON WITH JEEM WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD9A ARABIC LIGATURE NOON WITH MEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD9B ARABIC LIGATURE NOON WITH MEEM WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD9C ARABIC LIGATURE YEH WITH MEEM WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FD9D ARABIC LIGATURE YEH WITH MEEM WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD9E ARABIC LIGATURE BEH WITH KHAH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD9F ARABIC LIGATURE TEH WITH JEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDA0 ARABIC LIGATURE TEH WITH JEEM WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FDA1 ARABIC LIGATURE TEH WITH KHAH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDA2 ARABIC LIGATURE TEH WITH KHAH WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FDA3 ARABIC LIGATURE TEH WITH MEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDA4 ARABIC LIGATURE TEH WITH MEEM WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FDA5 ARABIC LIGATURE JEEM WITH MEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDA6 ARABIC LIGATURE JEEM WITH HAH WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FDA7 ARABIC LIGATURE JEEM WITH MEEM WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FDA8 ARABIC LIGATURE SEEN WITH KHAH WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FDA9 ARABIC LIGATURE SAD WITH HAH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDAA ARABIC LIGATURE SHEEN WITH HAH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDAB ARABIC LIGATURE DAD WITH HAH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDAC ARABIC LIGATURE LAM WITH JEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDAD ARABIC LIGATURE LAM WITH MEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDAE ARABIC LIGATURE YEH WITH HAH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDAF ARABIC LIGATURE YEH WITH JEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDB0 ARABIC LIGATURE YEH WITH MEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDB1 ARABIC LIGATURE MEEM WITH MEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDB2 ARABIC LIGATURE QAF WITH MEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDB3 ARABIC LIGATURE NOON WITH HAH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDB4 ARABIC LIGATURE QAF WITH MEEM WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FDB5 ARABIC LIGATURE LAM WITH HAH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FDB6 ARABIC LIGATURE AIN WITH MEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDB7 ARABIC LIGATURE KAF WITH MEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDB8 ARABIC LIGATURE NOON WITH JEEM WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FDB9 ARABIC LIGATURE MEEM WITH KHAH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDBA ARABIC LIGATURE LAM WITH JEEM WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FDBB ARABIC LIGATURE KAF WITH MEEM WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FDBC ARABIC LIGATURE LAM WITH JEEM WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FDBD ARABIC LIGATURE NOON WITH JEEM WITH HAH FINAL FORM: not included in any glyphset definition\n * U+FDBE ARABIC LIGATURE JEEM WITH HAH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDBF ARABIC LIGATURE HAH WITH JEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDC0 ARABIC LIGATURE MEEM WITH JEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDC1 ARABIC LIGATURE FEH WITH MEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDC2 ARABIC LIGATURE BEH WITH HAH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDC3 ARABIC LIGATURE KAF WITH MEEM WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FDC4 ARABIC LIGATURE AIN WITH JEEM WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FDC5 ARABIC LIGATURE SAD WITH MEEM WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FDC6 ARABIC LIGATURE SEEN WITH KHAH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDC7 ARABIC LIGATURE NOON WITH JEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDF0 ARABIC LIGATURE SALLA USED AS KORANIC STOP SIGN ISOLATED FORM: not included in any glyphset definition\n * U+FDF1 ARABIC LIGATURE QALA USED AS KORANIC STOP SIGN ISOLATED FORM: not included in any glyphset definition\n * U+FDF3 ARABIC LIGATURE AKBAR ISOLATED FORM: not included in any glyphset definition\n * U+FDF4 ARABIC LIGATURE MOHAMMAD ISOLATED FORM: not included in any glyphset definition\n * U+FDF5 ARABIC LIGATURE SALAM ISOLATED FORM: not included in any glyphset definition\n * U+FDF6 ARABIC LIGATURE RASOUL ISOLATED FORM: not included in any glyphset definition\n * U+FDF7 ARABIC LIGATURE ALAYHE ISOLATED FORM: not included in any glyphset definition\n * U+FDF8 ARABIC LIGATURE WASALLAM ISOLATED FORM: not included in any glyphset definition\n * U+FDF9 ARABIC LIGATURE SALLA ISOLATED FORM: not included in any glyphset definition\n * U+FDFB ARABIC LIGATURE JALLAJALALOUHOU: not included in any glyphset definition\n * U+FE70 ARABIC FATHATAN ISOLATED FORM: not included in any glyphset definition\n * U+FE71 ARABIC TATWEEL WITH FATHATAN ABOVE: not included in any glyphset definition\n * U+FE72 ARABIC DAMMATAN ISOLATED FORM: not included in any glyphset definition\n * U+FE74 ARABIC KASRATAN ISOLATED FORM: not included in any glyphset definition\n * U+FE76 ARABIC FATHA ISOLATED FORM: not included in any glyphset definition\n * U+FE77 ARABIC FATHA MEDIAL FORM: not included in any glyphset definition\n * U+FE78 ARABIC DAMMA ISOLATED FORM: not included in any glyphset definition\n * U+FE79 ARABIC DAMMA MEDIAL FORM: not included in any glyphset definition\n * U+FE7A ARABIC KASRA ISOLATED FORM: not included in any glyphset definition\n * U+FE7B ARABIC KASRA MEDIAL FORM: not included in any glyphset definition\n * U+FE7C ARABIC SHADDA ISOLATED FORM: not included in any glyphset definition\n * U+FE7D ARABIC SHADDA MEDIAL FORM: not included in any glyphset definition\n * U+FE7E ARABIC SUKUN ISOLATED FORM: not included in any glyphset definition\n * U+FE7F ARABIC SUKUN MEDIAL FORM: not included in any glyphset definition\n\nOr you can add the above codepoints to one of the subsets supported by the font: `arabic`, `latin`, `latin-ext`, `menu` [code: unreachable-subsetting]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This check ensures that all encoded glyphs in the font are covered by a\n        subset declared in the METADATA.pb. Google Fonts splits the font into\n        a set of subset fonts based on the contents of the `subsets` field and\n        the subset definitions in the `glyphsets` repository.\n\n        Any encoded glyphs which are not by any of these subset definitions\n        will not be served in the subsetted fonts, and so will be unreachable to\n        the end user.\n    ",
                    "result": "WARN",
                    "severity": 2
                },
                {
                    "description": "Substitute copyright, registered and trademark symbols in name table entries.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/unwanted_chars>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "No need to substitute copyright, registered and trademark symbols in name table entries of this font.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Check the OS/2 usWeightClass is appropriate for the font's best SubFamily name.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/usweightclass>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2 usWeightClass is good",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Google Fonts expects variable fonts, static ttfs and static otfs to have\n        differing OS/2 usWeightClass values.\n\n        - For Variable Fonts, Thin-Black must be 100-900\n\n        - For static ttfs, Thin-Black can be 100-900 or 250-900\n\n        - For static otfs, Thin-Black must be 250-900\n\n        If static otfs are set lower than 250, text may appear blurry in\n        legacy Windows applications.\n\n        Glyphsapp users can change the usWeightClass value of an instance by adding\n        a 'weightClass' customParameter.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check font has a license.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/family/has_license>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Found license at '/Users/simon/others-repos/fonts/ofl/amiri/OFL.txt'",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Check license file has good copyright string.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/license/OFL_copyright>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "looks good",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        An OFL.txt file's first line should be the font copyright e.g:\n        \"Copyright 2019 The Montserrat Project Authors\n        (https://github.com/julietaula/montserrat)\"\n    ",
                    "result": "PASS",
                    "severity": 10
                },
                {
                    "description": "Check OFL body text is correct.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/license/OFL_body_text>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OFL license body text is correct",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check OFL body text is correct.\n        Often users will accidently delete parts of the body text.\n    ",
                    "result": "PASS",
                    "severity": 10
                },
                {
                    "description": "Check copyright namerecords match license file.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/license>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Licensing entry on name table is correctly set.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        A known licensing description must be provided in the NameID 14\n        (LICENSE DESCRIPTION) entries of the name table.\n\n        The source of truth for this check (to determine which license is in use) is\n        a file placed side-by-side to your font project including the licensing terms.\n\n        Depending on the chosen license, one of the following string snippets is\n        expected to be found on the NameID 13 (LICENSE DESCRIPTION) entries of the\n        name table:\n\n        - \"This Font Software is licensed under the SIL Open Font License, Version 1.1.\n          This license is available with a FAQ at: https://scripts.sil.org/OFL\"\n\n        - \"Licensed under the Apache License, Version 2.0\"\n\n        - \"Licensed under the Ubuntu Font Licence 1.0.\"\n\n\n        Currently accepted licenses are Apache or Open Font License. For a small set\n        of legacy families the Ubuntu Font License may be acceptable as well.\n\n        When in doubt, please choose OFL for new font projects.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "License URL matches License text on name table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/license_url>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font has a valid license URL in NAME table.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        A known license URL must be provided in the NameID 14 (LICENSE INFO URL)\n        entry of the name table.\n\n        The source of truth for this check is the licensing text found on the NameID 13\n        entry (LICENSE DESCRIPTION).\n\n        The string snippets used for detecting licensing terms are:\n\n        - \"This Font Software is licensed under the SIL Open Font License, Version 1.1.\n          This license is available with a FAQ at: https://scripts.sil.org/OFL\"\n\n        - \"Licensed under the Apache License, Version 2.0\"\n\n        - \"Licensed under the Ubuntu Font Licence 1.0.\"\n\n\n        Currently accepted licenses are Apache or Open Font License. For a small set of\n        legacy families the Ubuntu Font License may be acceptable as well.\n\n        When in doubt, please choose OFL for new font projects.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Description strings in the name table must not exceed 200 characters.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/description_max_length>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "A few name table entries with ID=10 (NameID.DESCRIPTION) are longer than 200 characters. Please check whether those entries are copyright notices mistakenly stored in the description string entries by a bug in an old FontLab version. If that's the case, then such copyright notices must be removed from these entries. [code: too-long]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        An old FontLab version had a bug which caused it to store copyright notices\n        in nameID 10 entries.\n\n        In order to detect those and distinguish them from actual legitimate usage of\n        this name table entry, we expect that such strings do not exceed a reasonable\n        length of 200 chars.\n\n        Longer strings are likely instances of the FontLab bug.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Show hinting filesize impact.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/hinting_impact>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Hinting filesize impact:\n\n |               | /Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf          |\n |:------------- | ---------------:|\n | Dehinted Size | 418.3kb |\n | Hinted Size   | 418.3kb   |\n | Increase      | 24 bytes      |\n | Change        | 0.0 %  |\n [code: size-impact]",
                            "status": "INFO",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This check is merely informative, displaying and useful comparison of filesizes\n        of hinted versus unhinted font files.\n    ",
                    "result": "INFO"
                },
                {
                    "description": "Ensure files are not too large.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/file_size>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font had a reasonable file size",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Serving extremely large font files on Google Fonts causes usability issues.\n        This check ensures that file sizes are reasonable.\n    ",
                    "result": "PASS",
                    "severity": 10
                },
                {
                    "description": "Version format is correct in 'name' table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/version_format>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Version format in NAME table entries is correct.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Font has ttfautohint params?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/has_ttfautohint_params>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font appears to our heuristic as not hinted using ttfautohint. [code: not-hinted]",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "result": "SKIP"
                },
                {
                    "description": "Font has old ttfautohint applied?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/old_ttfautohint>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Could not detect which version of ttfautohint was used in this font. It is typically specified as a comment in the font version entries of the 'name' table. Such font version strings are currently: ['Version 1.000'] [code: version-not-detected]",
                            "status": "INFO",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check if font has been hinted with an outdated version of ttfautohint.\n    ",
                    "result": "INFO"
                },
                {
                    "description": "EPAR table present in font?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/epar>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "EPAR table not present in font. To learn more see https://github.com/fonttools/fontbakery/issues/818 [code: lacks-EPAR]",
                            "status": "INFO",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The EPAR table is/was a way of expressing common licensing permissions and\n        restrictions in metadata; while almost nothing supported it, Dave Crossland\n        wonders that adding it to everything in Google Fonts could help make it\n        more popular.\n\n        More info is available at:\n        https://davelab6.github.io/epar/\n    ",
                    "result": "INFO",
                    "severity": 1
                },
                {
                    "description": "Is the Grid-fitting and Scan-conversion Procedure ('gasp') table set to optimize rendering?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/gasp>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "These are the ppm ranges declared on the gasp table:\n\nPPM <= 65535:\n\tflag = 0x0F\n\t- Use grid-fitting\n\t- Use grayscale rendering\n\t- Use gridfitting with ClearType symmetric smoothing\n\t- Use smoothing along multiple axes with ClearType\u00ae\n [code: ranges]",
                            "status": "INFO",
                            "traceback": null
                        },
                        {
                            "message": "The 'gasp' table is correctly set, with one gaspRange:value of 0xFFFF:0x0F.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Traditionally version 0 'gasp' tables were set so that font sizes below 8 ppem\n        had no grid fitting but did have antialiasing. From 9-16 ppem, just grid\n        fitting.\n        And fonts above 17ppem had both antialiasing and grid fitting toggled on.\n        The use of accelerated graphics cards and higher resolution screens make this\n        approach obsolete. Microsoft's DirectWrite pushed this even further with much\n        improved rendering built into the OS and apps.\n\n        In this scenario it makes sense to simply toggle all 4 flags ON for all font\n        sizes.\n    ",
                    "result": "INFO"
                },
                {
                    "description": "Make sure family name does not begin with a digit.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/familyname_first_char>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font family name first character is not a digit.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Font family names which start with a numeral are often not discoverable\n        in Windows applications.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Are there non-ASCII characters in ASCII-only NAME table entries?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/ascii_only_entries>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "None of the ASCII-only NAME table entries contain non-ASCII characteres.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The OpenType spec requires ASCII for the POSTSCRIPT_NAME (nameID 6).\n\n        For COPYRIGHT_NOTICE (nameID 0) ASCII is required because that string should be\n        the same in CFF fonts which also have this requirement in the OpenType spec.\n\n        Note:\n        A common place where we find non-ASCII strings is on name table entries\n        with NameID > 18, which are expressly for localising the ASCII-only IDs\n        into Hindi / Arabic / etc.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: check if fonts field only has unique \"full_name\" values.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/unique_full_name_values>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb \"fonts\" field only has unique \"full_name\" values.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: check if fonts field only contains unique style:weight pairs.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/unique_weight_style_pairs>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb \"fonts\" field only has unique style:weight pairs.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb license is \"APACHE2\", \"UFL\" or \"OFL\"?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/license>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font license is declared in METADATA.pb as \"OFL\"",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb should contain at least \"menu\" and \"latin\" subsets.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/menu_and_latin>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb contains \"menu\" and \"latin\" subsets.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb subsets should be alphabetically ordered.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/subsets_order>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb subsets are sorted in alphabetical order.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Check METADATA.pb includes production subsets.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/includes_production_subsets>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "No missing subsets",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check METADATA.pb file includes the same subsets as the family in production.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Copyright notice is the same in all fonts?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/copyright>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Copyright is consistent across family",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Check that METADATA.pb family values are all the same.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/familyname>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb: Family name is the same in all metadata \"fonts\" items.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: According to Google Fonts standards, families should have a Regular style.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/has_regular>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Family has a Regular style.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Regular should be 400.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/regular_is_400>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Regular has weight = 400.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Checks METADATA.pb font.name field matches family name declared on the name table.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/nameid/family_name>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Family name \"Amiri\" is identical in METADATA.pb and on the TTF file.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Checks METADATA.pb font.post_script_name matches postscript name declared on the name table.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/nameid/post_script_name>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Postscript name \"Amiri-Bold\" is identical in METADATA.pb and on the TTF file.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb font.full_name value matches fullname declared on the name table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/nameid/full_name>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font fullname \"Amiri Bold\" is identical in METADATA.pb and on the TTF file.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb font.name value should be same as the family name declared on the name table.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/nameid/font_name>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK: Family name \"Amiri\" is identical in METADATA.pb and on the TTF file.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This check ensures consistency between the font name declared on the name table\n        and the contents of the METADATA.pb file.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb font.full_name and font.post_script_name fields have equivalent values ?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/match_fullname_postscript>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb font fields \"full_name\" and \"post_script_name\" have equivalent values.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb font.filename and font.post_script_name fields have equivalent values?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/match_filename_postscript>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb font fields \"filename\" and \"post_script_name\" have equivalent values.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb font.name field contains font name in right format?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/valid_name_values>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb font.name field contains font name in right format.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb font.full_name field contains font name in right format?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/valid_full_name_values>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb font.full_name field contains font name in right format. (\"Amiri\" in \"Amiri Bold\")",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb font.filename field contains font name in right format?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/valid_filename_values>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb filename field contains font name in right format.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb font.post_script_name field contains font name in right format?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/valid_post_script_name_values>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb postScriptName field contains font name in right format.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Check name ID 25 to end with \"Italic\" for Italic VFs.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/valid_nameid25>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Not an Italic VF.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Due to a bug in (at least) Adobe Indesign, name ID 25\n        needs to be different for Italic VFs than their Upright counterparts.\n        Google Fonts chooses to append \"Italic\" here.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Copyright notices match canonical pattern in METADATA.pb",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/valid_copyright>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb copyright string is good",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The expected pattern for the copyright string adheres to the following rules:\n\n        * It must say \"Copyright\" followed by a 4 digit year (optionally followed by\n          a hyphen and another 4 digit year)\n\n        * Then it must say \"The <familyname> Project Authors\"\n\n        * And within parentheses, a URL for a git repository must be provided\n\n        * The check is case insensitive and does not validate whether the familyname\n          is correct, even though we'd expect it is (and we may soon update the check\n          to validate that aspect as well!)\n\n\n        Here is an example of a valid copyright string:\n\n        \"Copyright 2017 The Archivo Black Project Authors\n         (https://github.com/Omnibus-Type/ArchivoBlack)\"\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Copyright notices match canonical pattern in fonts",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/font_copyright>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Name Table entry: Copyright field 'Copyright 2010-2022 The Amiri Project Authors (https://github.com/aliftype/amiri).' matches canonical pattern.",
                            "status": "PASS",
                            "traceback": null
                        },
                        {
                            "message": "Name table copyright entries are good",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Copyright notice on METADATA.pb should not contain 'Reserved Font Name'.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/reserved_font_name>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb copyright field does not contain \"Reserved Font Name\".",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Copyright notice shouldn't exceed 500 chars.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/copyright_max_length>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Copyright notice string is shorter than 500 chars.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Font filenames match font.filename entries?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/filenames>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Filenames in METADATA.pb look good.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Note:\n        This check only looks for files in the current directory.\n\n        Font files in subdirectories are checked by these other two checks:\n         - com.google.fonts/check/metadata/undeclared_fonts\n         - com.google.fonts/check/repo/vf_has_static_fonts\n\n        We may want to merge them all into a single check.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb font.style \"italic\" matches font internals?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/italic_style>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "This check only applies to italic fonts.",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "result": "SKIP"
                },
                {
                    "description": "METADATA.pb font.style \"normal\" matches font internals?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/normal_style>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb font.style \"normal\" matches font internals.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb font.name and font.full_name fields match the values declared on the name table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/nameid/family_and_full_names>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb familyname and fullName fields match corresponding name table entries.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Check font name is the same as family name.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/match_name_familyname>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font name is the same as family name.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Check that font weight has a canonical value.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/canonical_weight_value>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font weight has a canonical value.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Check METADATA.pb font weights are correct.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/os2_weightclass>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2 usWeightClass or wght axis value matches weight specified at METADATA.pb",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check METADATA.pb font weights are correct.\n\n        For static fonts, the metadata weight should be the same as the static font's\n        OS/2 usWeightClass.\n\n        For variable fonts, the weight value should be 400 if the font's wght axis range\n        includes 400, otherwise it should be the value closest to 400.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb weight matches postScriptName for static fonts.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/match_weight_postscript>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Weight value matches postScriptName.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Font styles are named canonically?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/canonical_style_names>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font styles are named canonically.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Check URL on copyright string is the same as in repository_url field.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/consistent_repo_urls>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Sometimes, perhaps due to copy-pasting, projects may declare different URLs\n        between the font.coyright and the family.sources.repository_url fields.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Check for primary_script",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/primary_script>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Try to guess font's primary script and see if that's set in METADATA.pb.\n        This is an educated guess based on the number of glyphs per script in the font\n        and should be taken with caution.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Stricter unitsPerEm criteria for Google Fonts.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/unitsperem_strict>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font em size is good (unitsPerEm = 1000).",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Even though the OpenType spec allows unitsPerEm to be any value between 16\n        and 16384, the Google Fonts project aims at a narrower set of reasonable values.\n\n        The spec suggests usage of powers of two in order to get some performance\n        improvements on legacy renderers, so those values are acceptable.\n\n        But values of 500 or 1000 are also acceptable, with the added benefit that it\n        makes upm math easier for designers, while the performance hit of not using a\n        power of two is most likely negligible nowadays.\n\n        Additionally, values above 2048 would likely result in unreasonable\n        filesize increases.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Glyphs are similiar to Google Fonts version?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/production_glyphs_similarity>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Following glyphs differ greatly from Google Fonts version:\n\t* glyph01097\n\t* glyph01098\n\t* glyph01099\n\t* glyph01100\n\t* glyph01101\n\t* glyph01102\n\t* glyph01103\n\t* glyph01104\n\t* glyph01105\n\t* glyph01106\n\t* glyph01107\n\t* glyph01108\n\t* glyph01109\n\t* glyph01110\n\t* glyph01111\n\t* glyph01112\n\t* glyph01114\n\t* glyph01115\n\t* glyph01116\n\t* glyph01117\n\t* glyph01118\n\t* glyph01119\n\t* glyph01120\n\t* glyph01121\n\t* glyph01122\n\t* glyph01124\n\t* glyph01125\n\t* glyph01128\n\t* glyph01129\n\t* glyph01130\n\t* glyph01131\n\t* glyph01132\n\t* glyph01133\n\t* glyph01134\n\t* glyph01135\n\t* glyph01136\n\t* glyph01137\n\t* glyph01138\n\t* glyph01139\n\t* glyph01140\n\t* glyph01141\n\t* glyph01142\n\t* glyph01143\n\t* glyph01144\n\t* glyph01145\n\t* glyph01146\n\t* glyph01147\n\t* glyph01148\n\t* glyph01149\n\t* glyph01151\n\t* glyph01152\n\t* glyph01153\n\t* glyph01154\n\t* glyph01156\n\t* glyph01157\n\t* glyph01158\n\t* glyph01159\n\t* glyph01160\n\t* glyph01161\n\t* glyph01162\n\t* glyph01163\n\t* glyph01165\n\t* glyph01166\n\t* glyph01168\n\t* glyph01169\n\t* glyph01170\n\t* glyph01171\n\t* glyph01172\n\t* glyph01173\n\t* glyph01174\n\t* glyph01175\n\t* glyph01176\n\t* glyph01177\n\t* glyph01179\n\t* glyph01180\n\t* glyph01181\n\t* glyph01182\n\t* glyph01184\n\t* glyph01185\n\t* glyph01186\n\t* glyph01187\n\t* glyph01188\n\t* glyph01189\n\t* glyph01191\n\t* glyph01193\n\t* glyph01194\n\t* glyph01195\n\t* glyph01196\n\t* glyph01197\n\t* glyph01198\n\t* glyph01199\n\t* glyph01200\n\t* glyph01202\n\t* glyph01204\n\t* glyph01206\n\t* glyph01207\n\t* glyph01210\n\t* glyph01212\n\t* glyph01213\n\t* glyph01214\n\t* glyph01216\n\t* glyph01217\n\t* glyph01221\n\t* glyph01223\n\t* glyph01225\n\t* glyph01227\n\t* glyph01228\n\t* glyph01229\n\t* glyph01230\n\t* glyph01231\n\t* glyph01232\n\t* glyph01233\n\t* glyph01234\n\t* glyph01236\n\t* glyph01237\n\t* glyph01239\n\t* glyph01240\n\t* glyph01241\n\t* glyph01242\n\t* glyph01243\n\t* glyph01244\n\t* glyph01245\n\t* glyph01246\n\t* glyph01247\n\t* glyph01248\n\t* glyph01249\n\t* glyph01250\n\t* glyph01251\n\t* glyph01252\n\t* glyph01255\n\t* glyph01256\n\t* glyph01257\n\t* glyph01258\n\t* glyph01259\n\t* glyph01260\n\t* glyph01261\n\t* glyph01262\n\t* glyph01263\n\t* glyph01264\n\t* glyph01265\n\t* glyph01266\n\t* glyph01267\n\t* glyph01268\n\t* glyph01269\n\t* glyph01270\n\t* glyph01271\n\t* glyph01272\n\t* glyph01273\n\t* glyph01274\n\t* glyph01275\n\t* glyph01276\n\t* glyph01278\n\t* glyph01279\n\t* glyph01280\n\t* glyph01281\n\t* glyph01282\n\t* glyph01283\n\t* glyph01284\n\t* glyph01285\n\t* glyph01286\n\t* glyph01287\n\t* glyph01288\n\t* glyph01289\n\t* glyph01290\n\t* glyph01291\n\t* glyph01292\n\t* glyph01293\n\t* glyph01294\n\t* glyph01295\n\t* glyph01296\n\t* glyph01297\n\t* glyph01298\n\t* glyph01299\n\t* glyph01300\n\t* glyph01301\n\t* glyph01302\n\t* glyph01303\n\t* glyph01304\n\t* glyph01305\n\t* glyph01306\n\t* glyph01307\n\t* glyph01308\n\t* glyph01309\n\t* glyph01310\n\t* glyph01311\n\t* glyph01312\n\t* glyph01313\n\t* glyph01314\n\t* glyph01315\n\t* glyph01316\n\t* glyph01317\n\t* glyph01318\n\t* glyph01319\n\t* glyph01320\n\t* glyph01321\n\t* glyph01322\n\t* glyph01323\n\t* glyph01324\n\t* glyph01326\n\t* glyph01327\n\t* glyph01328\n\t* glyph01329\n\t* glyph01330\n\t* glyph01331\n\t* glyph01332\n\t* glyph01333\n\t* glyph01334\n\t* glyph01335\n\t* glyph01337\n\t* glyph01338\n\t* glyph01339\n\t* glyph01340\n\t* glyph01341\n\t* glyph01343\n\t* glyph01344\n\t* glyph01346\n\t* glyph01347\n\t* glyph01348\n\t* glyph01349\n\t* glyph01350\n\t* glyph01351\n\t* glyph01352\n\t* glyph01353\n\t* glyph01354\n\t* glyph01355\n\t* glyph01356\n\t* glyph01357\n\t* glyph01358\n\t* glyph01359\n\t* glyph01360\n\t* glyph01361\n\t* glyph01362\n\t* glyph01363\n\t* glyph01364\n\t* glyph01365\n\t* glyph01366\n\t* glyph01368\n\t* glyph01369\n\t* glyph01370\n\t* glyph01371\n\t* glyph01372\n\t* glyph01373\n\t* glyph01374\n\t* glyph01375\n\t* glyph01376\n\t* glyph01377\n\t* glyph01378\n\t* glyph01379\n\t* glyph01380\n\t* glyph01381\n\t* glyph01382\n\t* glyph01383\n\t* glyph01384\n\t* glyph01386\n\t* glyph01387\n\t* glyph01388\n\t* glyph01389\n\t* glyph01390\n\t* glyph01391\n\t* glyph01392\n\t* glyph01393\n\t* glyph01394\n\t* glyph01395\n\t* glyph01396\n\t* glyph01397\n\t* glyph01399\n\t* glyph01401\n\t* glyph01402\n\t* glyph01403\n\t* glyph01404\n\t* glyph01405\n\t* glyph01406\n\t* glyph01407\n\t* glyph01408\n\t* glyph01409\n\t* glyph01410\n\t* glyph01411\n\t* glyph01412\n\t* glyph01413\n\t* glyph01414\n\t* glyph01415\n\t* glyph01416\n\t* glyph01417\n\t* glyph01418\n\t* glyph01419\n\t* glyph01420\n\t* glyph01421\n\t* glyph01422\n\t* glyph01423\n\t* glyph01424\n\t* glyph01425\n\t* glyph01426\n\t* glyph01427\n\t* glyph01428\n\t* glyph01429\n\t* glyph01430\n\t* glyph01431\n\t* glyph01432\n\t* glyph01433\n\t* glyph01434\n\t* glyph01435\n\t* glyph01436\n\t* glyph01437\n\t* glyph01438\n\t* glyph01439\n\t* glyph01440\n\t* glyph01441\n\t* glyph01442\n\t* glyph01443\n\t* glyph01444\n\t* glyph01445\n\t* glyph01446\n\t* glyph01447\n\t* glyph01448\n\t* glyph01450\n\t* glyph01451\n\t* glyph01453\n\t* glyph01454\n\t* glyph01455\n\t* glyph01458\n\t* glyph01459\n\t* glyph01460\n\t* glyph01461\n\t* glyph01462\n\t* glyph01463\n\t* glyph01464\n\t* glyph01465\n\t* glyph01466\n\t* glyph01467\n\t* glyph01469\n\t* glyph01471\n\t* glyph01472\n\t* glyph01473\n\t* glyph01474\n\t* glyph01475\n\t* glyph01476\n\t* glyph01477\n\t* glyph01478\n\t* glyph01479\n\t* glyph01480\n\t* glyph01481\n\t* glyph01482\n\t* glyph01483\n\t* glyph01484\n\t* glyph01485\n\t* glyph01486\n\t* glyph01487\n\t* glyph01488\n\t* glyph01489\n\t* glyph01490\n\t* glyph01491\n\t* glyph01492\n\t* glyph01493\n\t* glyph01494\n\t* glyph01495\n\t* glyph01496\n\t* glyph01497\n\t* glyph01498\n\t* glyph01499\n\t* glyph01500\n\t* glyph01501\n\t* glyph01502\n\t* glyph01503\n\t* glyph01504\n\t* glyph01505\n\t* glyph01506\n\t* glyph01507\n\t* glyph01508\n\t* glyph01509\n\t* glyph01510\n\t* glyph01511\n\t* glyph01512\n\t* glyph01514\n\t* glyph01515\n\t* glyph01516\n\t* glyph01517\n\t* glyph01518\n\t* glyph01519\n\t* glyph01520\n\t* glyph01521\n\t* glyph01522\n\t* glyph01523\n\t* glyph01524\n\t* glyph01525\n\t* glyph01526\n\t* glyph01527\n\t* glyph01528\n\t* glyph01529\n\t* glyph01530\n\t* glyph01531\n\t* glyph01532\n\t* glyph01533\n\t* glyph01534\n\t* glyph01535\n\t* glyph01536\n\t* glyph01537\n\t* glyph01538\n\t* glyph01539\n\t* glyph01540\n\t* glyph01541\n\t* glyph01542\n\t* glyph01543\n\t* glyph01544\n\t* glyph01545\n\t* glyph01546\n\t* glyph01547\n\t* glyph01548\n\t* glyph01549\n\t* glyph01550\n\t* glyph01551\n\t* glyph01552\n\t* glyph01553\n\t* glyph01554\n\t* glyph01555\n\t* glyph01556\n\t* glyph01557\n\t* glyph01558\n\t* glyph01559\n\t* glyph01560\n\t* glyph01561\n\t* glyph01562\n\t* glyph01563\n\t* glyph01564\n\t* glyph01565\n\t* glyph01566\n\t* glyph01567\n\t* glyph01568\n\t* glyph01569\n\t* glyph01570\n\t* glyph01571\n\t* glyph01572\n\t* glyph01573\n\t* glyph01574\n\t* glyph01575\n\t* glyph01576\n\t* glyph01578\n\t* glyph01579\n\t* glyph01580\n\t* glyph01581\n\t* glyph01582\n\t* glyph01583\n\t* glyph01584\n\t* glyph01585\n\t* glyph01586\n\t* glyph01587\n\t* glyph01588\n\t* glyph01589\n\t* glyph01590\n\t* glyph01591\n\t* glyph01592\n\t* glyph01593\n\t* glyph01594\n\t* glyph01595\n\t* glyph01596\n\t* glyph01597\n\t* glyph01599\n\t* glyph01600\n\t* glyph01601\n\t* glyph01603\n\t* glyph01604\n\t* glyph01605\n\t* glyph01606\n\t* glyph01607\n\t* glyph01608\n\t* glyph01609\n\t* glyph01610\n\t* glyph01611\n\t* glyph01612\n\t* glyph01613\n\t* glyph01614\n\t* glyph01615\n\t* glyph01616\n\t* glyph01617\n\t* glyph01618\n\t* glyph01619\n\t* glyph01620\n\t* glyph01621\n\t* glyph01622\n\t* glyph01623\n\t* glyph01624\n\t* glyph01625\n\t* glyph01626\n\t* glyph01627\n\t* glyph01628\n\t* glyph01629\n\t* glyph01630\n\t* glyph01631\n\t* glyph01632\n\t* glyph01633\n\t* glyph01634\n\t* glyph01635\n\t* glyph01636\n\t* glyph01637\n\t* glyph01638\n\t* glyph01639\n\t* glyph01640\n\t* glyph01641\n\t* glyph01642\n\t* glyph01643\n\t* glyph01644\n\t* glyph01645\n\t* glyph01646\n\t* glyph01647\n\t* glyph01648\n\t* glyph01649\n\t* glyph01650\n\t* glyph01651\n\t* glyph01652\n\t* glyph01653\n\t* glyph01654\n\t* glyph01655\n\t* glyph01656\n\t* glyph01657\n\t* glyph01658\n\t* glyph01659\n\t* glyph01660\n\t* glyph01661\n\t* glyph01662\n\t* glyph01663\n\t* glyph01664\n\t* glyph01665\n\t* glyph01666\n\t* glyph01667\n\t* glyph01668\n\t* glyph01670\n\t* glyph01671\n\t* glyph01672\n\t* glyph01673\n\t* glyph01674\n\t* glyph01675\n\t* glyph01676\n\t* glyph01677\n\t* glyph01678\n\t* glyph01679\n\t* glyph01680\n\t* glyph01681\n\t* glyph01682\n\t* glyph01683\n\t* glyph01684\n\t* glyph01685\n\t* glyph01686\n\t* glyph01687\n\t* glyph01688\n\t* glyph01689\n\t* glyph01690\n\t* glyph01691\n\t* glyph01692\n\t* glyph01693\n\t* glyph01694\n\t* glyph01695\n\t* glyph01697\n\t* glyph01698\n\t* glyph01699\n\t* glyph01700\n\t* glyph01701\n\t* glyph01702\n\t* glyph01703\n\t* glyph01704\n\t* glyph01705\n\t* glyph01706\n\t* glyph01707\n\t* glyph01708\n\t* glyph01709\n\t* glyph01710\n\t* glyph01711\n\t* glyph01712\n\t* glyph01713\n\t* glyph01714\n\t* glyph01715\n\t* glyph01716\n\t* glyph01717\n\t* glyph01718\n\t* glyph01719\n\t* glyph01720\n\t* glyph01721\n\t* glyph01723\n\t* glyph01724\n\t* glyph01725\n\t* glyph01726\n\t* glyph01728\n\t* glyph01729\n\t* glyph01730\n\t* glyph01732\n\t* glyph01733\n\t* glyph01734\n\t* glyph01735\n\t* glyph01736\n\t* glyph01737\n\t* glyph01738\n\t* glyph01739\n\t* glyph01740\n\t* glyph01741\n\t* glyph01742\n\t* glyph01743\n\t* glyph01744\n\t* glyph01745\n\t* glyph01746\n\t* glyph01747\n\t* glyph01748\n\t* glyph01749\n\t* glyph01750\n\t* glyph01751\n\t* glyph01752\n\t* glyph01753\n\t* glyph01754\n\t* glyph01755\n\t* glyph01756\n\t* glyph01757\n\t* glyph01758\n\t* glyph01759\n\t* glyph01760\n\t* glyph01761\n\t* glyph01763\n\t* glyph01764\n\t* glyph01765\n\t* glyph01766\n\t* glyph01767\n\t* glyph01768\n\t* glyph01769\n\t* glyph01770\n\t* glyph01771\n\t* glyph01772\n\t* glyph01773\n\t* glyph01774\n\t* glyph01776\n\t* glyph01777\n\t* glyph01778\n\t* glyph01779\n\t* glyph01780\n\t* glyph01781\n\t* glyph01782\n\t* glyph01783\n\t* glyph01784\n\t* glyph01785\n\t* glyph01786\n\t* glyph01787\n\t* glyph01788\n\t* glyph01789\n\t* glyph01790\n\t* glyph01791\n\t* glyph01792\n\t* glyph01793\n\t* glyph01794\n\t* glyph01795\n\t* glyph01796\n\t* glyph01797\n\t* glyph01798\n\t* glyph01799\n\t* glyph01800\n\t* glyph01801\n\t* glyph01802\n\t* glyph01803\n\t* glyph01804\n\t* glyph01805\n\t* glyph01806\n\t* glyph01807\n\t* glyph01808\n\t* glyph01809\n\t* glyph01810\n\t* glyph01811\n\t* glyph01812\n\t* glyph01813\n\t* glyph01814\n\t* glyph01815\n\t* glyph01816\n\t* glyph01817\n\t* glyph01818\n\t* glyph01819\n\t* glyph01820\n\t* glyph01821\n\t* glyph01822\n\t* glyph01823\n\t* glyph01824\n\t* glyph01825\n\t* glyph01826\n\t* glyph01827\n\t* glyph01828\n\t* glyph01829\n\t* glyph01830\n\t* glyph01831\n\t* glyph01832\n\t* glyph01833\n\t* glyph01834\n\t* glyph01835\n\t* glyph01836\n\t* glyph01837\n\t* glyph01838\n\t* glyph01839\n\t* glyph01840\n\t* glyph01842\n\t* glyph01843\n\t* glyph01844\n\t* glyph01845\n\t* glyph01846\n\t* glyph01847\n\t* glyph01848\n\t* glyph01849\n\t* glyph01850\n\t* glyph01851\n\t* glyph01852\n\t* glyph01853\n\t* glyph01854\n\t* glyph01855\n\t* glyph01856\n\t* glyph01857\n\t* glyph01858\n\t* glyph01859\n\t* glyph01860\n\t* glyph01861\n\t* glyph01862\n\t* glyph01863\n\t* glyph01864\n\t* glyph01865\n\t* glyph01866\n\t* glyph01867\n\t* glyph01868\n\t* glyph01869\n\t* glyph01870\n\t* glyph01871\n\t* glyph01872\n\t* glyph01873\n\t* glyph01874\n\t* glyph01875\n\t* glyph01876\n\t* glyph01877\n\t* glyph01878\n\t* glyph01879\n\t* glyph01880\n\t* glyph01881\n\t* glyph01882\n\t* glyph01883\n\t* glyph01884\n\t* glyph01885\n\t* glyph01886\n\t* glyph01887\n\t* glyph01888\n\t* glyph01889\n\t* glyph01890\n\t* glyph01891\n\t* glyph01893\n\t* glyph01894\n\t* glyph01896\n\t* glyph01897\n\t* glyph01898\n\t* glyph01899\n\t* glyph01900\n\t* glyph01901\n\t* glyph01902\n\t* glyph01903\n\t* glyph01905\n\t* glyph01906\n\t* glyph01907\n\t* glyph01908\n\t* glyph01910\n\t* glyph01911\n\t* glyph01912\n\t* glyph01913\n\t* glyph01914\n\t* glyph01915\n\t* glyph01916\n\t* glyph01917\n\t* glyph01918\n\t* glyph01919\n\t* glyph01920\n\t* glyph01923\n\t* glyph01924\n\t* glyph01925\n\t* glyph01926\n\t* glyph01927\n\t* glyph01928\n\t* glyph01929\n\t* glyph01930\n\t* glyph01931\n\t* glyph01932\n\t* glyph01933\n\t* glyph01934\n\t* glyph01935\n\t* glyph01936\n\t* glyph01937\n\t* glyph01938\n\t* glyph01939\n\t* glyph01940\n\t* glyph01941\n\t* glyph01942\n\t* glyph01943\n\t* glyph01944\n\t* glyph01945\n\t* glyph01946\n\t* glyph01947\n\t* glyph01948\n\t* glyph01949\n\t* glyph01950\n\t* glyph01952\n\t* glyph01953\n\t* glyph01954\n\t* glyph01955\n\t* glyph01956\n\t* glyph01957\n\t* glyph01958\n\t* glyph01959\n\t* glyph01961\n\t* glyph01962\n\t* glyph01963\n\t* glyph01964\n\t* glyph01965\n\t* glyph01967\n\t* glyph01968\n\t* glyph01969\n\t* glyph01970\n\t* glyph01971\n\t* glyph01972\n\t* glyph01973\n\t* glyph01974\n\t* glyph01975\n\t* glyph01976\n\t* glyph01977\n\t* glyph01978\n\t* glyph01980\n\t* glyph01981\n\t* glyph01982\n\t* glyph01983\n\t* glyph01984\n\t* glyph01985\n\t* glyph01986\n\t* glyph01987\n\t* glyph01989\n\t* glyph01990\n\t* glyph01992\n\t* glyph01993\n\t* glyph01994\n\t* glyph01995\n\t* glyph01996\n\t* glyph01997\n\t* glyph02001\n\t* glyph02003\n\t* glyph02004\n\t* glyph02005\n\t* glyph02006\n\t* glyph02007\n\t* glyph02008\n\t* glyph02009\n\t* glyph02010\n\t* glyph02012\n\t* glyph02013\n\t* glyph02014\n\t* glyph02015\n\t* glyph02016\n\t* glyph02018\n\t* glyph02019\n\t* glyph02020\n\t* glyph02021\n\t* glyph02022\n\t* glyph02023\n\t* glyph02024\n\t* glyph02025\n\t* glyph02026\n\t* glyph02027\n\t* glyph02028\n\t* glyph02029\n\t* glyph02030\n\t* glyph02031\n\t* glyph02033\n\t* glyph02034\n\t* glyph02036\n\t* glyph02037\n\t* glyph02038\n\t* glyph02041\n\t* glyph02042\n\t* glyph02043\n\t* glyph02044\n\t* glyph02046\n\t* glyph02047\n\t* glyph02048\n\t* glyph02050\n\t* glyph02051\n\t* glyph02052\n\t* glyph02053\n\t* glyph02054\n\t* glyph02055\n\t* glyph02056\n\t* glyph02057\n\t* glyph02058\n\t* glyph02059\n\t* glyph02060\n\t* glyph02061\n\t* glyph02062\n\t* glyph02063\n\t* glyph02064\n\t* glyph02065\n\t* glyph02066\n\t* glyph02067\n\t* glyph02068\n\t* glyph02069\n\t* glyph02070\n\t* glyph02071\n\t* glyph02072\n\t* glyph02074\n\t* glyph02075\n\t* glyph02076\n\t* glyph02077\n\t* glyph02080\n\t* glyph02083\n\t* glyph02084\n\t* glyph02085\n\t* glyph02086\n\t* glyph02088\n\t* glyph02089\n\t* glyph02091\n\t* glyph02092\n\t* glyph02093\n\t* glyph02095\n\t* glyph02097\n\t* glyph02098\n\t* glyph02101\n\t* glyph02102\n\t* glyph02103\n\t* glyph02104\n\t* glyph02105\n\t* glyph02107\n\t* glyph02109\n\t* glyph02110\n\t* glyph02111\n\t* glyph02112\n\t* glyph02114\n\t* glyph02115\n\t* glyph02116\n\t* glyph02117\n\t* glyph02118\n\t* glyph02119\n\t* glyph02120\n\t* glyph02121\n\t* glyph02122\n\t* glyph02123\n\t* glyph02125\n\t* glyph02126\n\t* glyph02127\n\t* glyph02128\n\t* glyph02129\n\t* glyph02131\n\t* glyph02132\n\t* glyph02133\n\t* glyph02134\n\t* glyph02135\n\t* glyph02136\n\t* glyph02137\n\t* glyph02139\n\t* glyph02140\n\t* glyph02141\n\t* glyph02142\n\t* glyph02144\n\t* glyph02145\n\t* glyph02146\n\t* glyph02147\n\t* glyph02148\n\t* glyph02149\n\t* glyph02150\n\t* glyph02151\n\t* glyph02153\n\t* glyph02154\n\t* glyph02155\n\t* glyph02156\n\t* glyph02157\n\t* glyph02158\n\t* glyph02159\n\t* glyph02161\n\t* glyph02162\n\t* glyph02163\n\t* glyph02164\n\t* glyph02166\n\t* glyph02167\n\t* glyph02168\n\t* glyph02169\n\t* glyph02171\n\t* glyph02172\n\t* glyph02173\n\t* glyph02174\n\t* glyph02175\n\t* glyph02176\n\t* glyph02177\n\t* glyph02178\n\t* glyph02179\n\t* glyph02180\n\t* glyph02181\n\t* glyph02182\n\t* glyph02183\n\t* glyph02184\n\t* glyph02185\n\t* glyph02186\n\t* glyph02187\n\t* glyph02189\n\t* glyph02190\n\t* glyph02191\n\t* glyph02193\n\t* glyph02194\n\t* glyph02195\n\t* glyph02196\n\t* glyph02197\n\t* glyph02198\n\t* glyph02199\n\t* glyph02200\n\t* glyph02201\n\t* glyph02202\n\t* glyph02203\n\t* glyph02204\n\t* glyph02205\n\t* glyph02206\n\t* glyph02207\n\t* glyph02208\n\t* glyph02209\n\t* glyph02210\n\t* glyph02211\n\t* glyph02212\n\t* glyph02213\n\t* glyph02214\n\t* glyph02215\n\t* glyph02216\n\t* glyph02217\n\t* glyph02218\n\t* glyph02219\n\t* glyph02220\n\t* glyph02221\n\t* glyph02222\n\t* glyph02223\n\t* glyph02224\n\t* glyph02225\n\t* glyph02226\n\t* glyph02227\n\t* glyph02228\n\t* glyph02229\n\t* glyph02230\n\t* glyph02231\n\t* glyph02232\n\t* glyph02233\n\t* glyph02234\n\t* glyph02235\n\t* glyph02236\n\t* glyph02237\n\t* glyph02238\n\t* glyph02239\n\t* glyph02240\n\t* glyph02241\n\t* glyph02242\n\t* glyph02243\n\t* glyph02244\n\t* glyph02245\n\t* glyph02246\n\t* glyph02247\n\t* glyph02248\n\t* glyph02249\n\t* glyph02250\n\t* glyph02251\n\t* glyph02252\n\t* glyph02253\n\t* glyph02254\n\t* glyph02255\n\t* glyph02256\n\t* glyph02257\n\t* glyph02258\n\t* glyph02259\n\t* glyph02260\n\t* glyph02261\n\t* glyph02262\n\t* glyph02263\n\t* glyph02264\n\t* glyph02266\n\t* glyph02267\n\t* glyph02268\n\t* glyph02269\n\t* glyph02270\n\t* glyph02271\n\t* glyph02272\n\t* glyph02273\n\t* glyph02274\n\t* glyph02275\n\t* glyph02276\n\t* glyph02277\n\t* glyph02278\n\t* glyph02279\n\t* glyph02280\n\t* glyph02281\n\t* glyph02282\n\t* glyph02283\n\t* glyph02284\n\t* glyph02285\n\t* glyph02286\n\t* glyph02287\n\t* glyph02288\n\t* glyph02289\n\t* glyph02290\n\t* glyph02291\n\t* glyph02292\n\t* glyph02293\n\t* glyph02294\n\t* glyph02295\n\t* glyph02296\n\t* glyph02297\n\t* glyph02298\n\t* glyph02299\n\t* glyph02300\n\t* glyph02301\n\t* glyph02302\n\t* glyph02303\n\t* glyph02304\n\t* glyph02305\n\t* glyph02306\n\t* glyph02307\n\t* glyph02308\n\t* glyph02309\n\t* glyph02310\n\t* glyph02311\n\t* glyph02312\n\t* glyph02313\n\t* glyph02314\n\t* glyph02315\n\t* glyph02317\n\t* glyph02318\n\t* glyph02319\n\t* glyph02320\n\t* glyph02321\n\t* glyph02322\n\t* glyph02323\n\t* glyph02324\n\t* glyph02325\n\t* glyph02326\n\t* glyph02327\n\t* glyph02329\n\t* glyph02330\n\t* glyph02331\n\t* glyph02332\n\t* glyph02333\n\t* glyph02334\n\t* glyph02335\n\t* glyph02336\n\t* glyph02337\n\t* glyph02338\n\t* glyph02339\n\t* glyph02340\n\t* glyph02341\n\t* glyph02342\n\t* glyph02343\n\t* glyph02344\n\t* glyph02345\n\t* glyph02346\n\t* glyph02347\n\t* glyph02348\n\t* glyph02349\n\t* glyph02350\n\t* glyph02351\n\t* glyph02353\n\t* glyph02354\n\t* glyph02355\n\t* glyph02357\n\t* glyph02358\n\t* glyph02359\n\t* glyph02360\n\t* glyph02361\n\t* glyph02362\n\t* glyph02363\n\t* glyph02364\n\t* glyph02365\n\t* glyph02366\n\t* glyph02367\n\t* glyph02368\n\t* glyph02369\n\t* glyph02372\n\t* glyph02373\n\t* glyph02374\n\t* glyph02375\n\t* glyph02376\n\t* glyph02377\n\t* glyph02378\n\t* glyph02379\n\t* glyph02380\n\t* glyph02381\n\t* glyph02382\n\t* glyph02383\n\t* glyph02385\n\t* glyph02386\n\t* glyph02388\n\t* glyph02389\n\t* glyph02390\n\t* glyph02391\n\t* glyph02393\n\t* glyph02394\n\t* glyph02396\n\t* glyph02398\n\t* glyph02399\n\t* glyph02400\n\t* glyph02401\n\t* glyph02403\n\t* glyph02406\n\t* glyph02407\n\t* glyph02409\n\t* glyph02410\n\t* glyph02411\n\t* glyph02412\n\t* glyph02414\n\t* glyph02415\n\t* glyph02416\n\t* glyph02417\n\t* glyph02418\n\t* glyph02419\n\t* glyph02420\n\t* glyph02421\n\t* glyph02422\n\t* glyph02423\n\t* glyph02424\n\t* glyph02425\n\t* glyph02426\n\t* glyph02427\n\t* glyph02428\n\t* glyph02429\n\t* glyph02430\n\t* glyph02431\n\t* glyph02432\n\t* glyph02433\n\t* glyph02434\n\t* glyph02435\n\t* glyph02436\n\t* glyph02437\n\t* glyph02438\n\t* glyph02439\n\t* glyph02440\n\t* glyph02441\n\t* glyph02442\n\t* glyph02443\n\t* glyph02444\n\t* glyph02445\n\t* glyph02446\n\t* glyph02449\n\t* glyph02452\n\t* glyph02453\n\t* glyph02454\n\t* glyph02455\n\t* glyph02456\n\t* glyph02457\n\t* glyph02458\n\t* glyph02459\n\t* glyph02460\n\t* glyph02461\n\t* glyph02462\n\t* glyph02463\n\t* glyph02466\n\t* glyph02467\n\t* glyph02468\n\t* glyph02470\n\t* glyph02471\n\t* glyph02472\n\t* glyph02473\n\t* glyph02475\n\t* glyph02476\n\t* glyph02477\n\t* glyph02479\n\t* glyph02480\n\t* glyph02481\n\t* glyph02482\n\t* glyph02483\n\t* glyph02484\n\t* glyph02485\n\t* glyph02486\n\t* glyph02487\n\t* glyph02488\n\t* glyph02489\n\t* glyph02490\n\t* glyph02491\n\t* glyph02492\n\t* glyph02493\n\t* glyph02494\n\t* glyph02495\n\t* glyph02496\n\t* glyph02497\n\t* glyph02498\n\t* glyph02499\n\t* glyph02500\n\t* glyph02501\n\t* glyph02502\n\t* glyph02503\n\t* glyph02504\n\t* glyph02505\n\t* glyph02506\n\t* glyph02507\n\t* glyph02508\n\t* glyph02509\n\t* glyph02510\n\t* glyph02511\n\t* glyph02512\n\t* glyph02513\n\t* glyph02514\n\t* glyph02515\n\t* glyph02516\n\t* glyph02517\n\t* glyph02518\n\t* glyph02519\n\t* glyph02520\n\t* glyph02521\n\t* glyph02522\n\t* glyph02523\n\t* glyph02524\n\t* glyph02525\n\t* glyph02526\n\t* glyph02531\n\t* glyph02532\n\t* glyph02533\n\t* glyph02534\n\t* glyph02535\n\t* glyph02536\n\t* glyph02537\n\t* glyph02538\n\t* glyph02539\n\t* glyph02540\n\t* glyph02541\n\t* glyph02542\n\t* glyph02543\n\t* glyph02544\n\t* glyph02545\n\t* glyph02546\n\t* glyph02547\n\t* glyph02548\n\t* glyph02549\n\t* glyph02550\n\t* glyph02551\n\t* glyph02552\n\t* glyph02553\n\t* glyph02554\n\t* glyph02555\n\t* glyph02556\n\t* glyph02557\n\t* glyph02558\n\t* glyph02559\n\t* glyph02560\n\t* glyph02561\n\t* glyph02562\n\t* glyph02563\n\t* glyph02565\n\t* glyph02566\n\t* glyph02568\n\t* glyph02569\n\t* glyph02572\n\t* glyph02573\n\t* glyph02575\n\t* glyph02576\n\t* glyph02577\n\t* glyph02578\n\t* glyph02579\n\t* glyph02580\n\t* glyph02581\n\t* glyph02582\n\t* glyph02583\n\t* glyph02584\n\t* glyph02586\n\t* glyph02587\n\t* glyph02588\n\t* glyph02589\n\t* glyph02590\n\t* glyph02591\n\t* glyph02592\n\t* glyph02593\n\t* glyph02594\n\t* glyph02595\n\t* glyph02596\n\t* glyph02597\n\t* glyph02598\n\t* glyph02599\n\t* glyph02600\n\t* glyph02601\n\t* glyph02602\n\t* glyph02603\n\t* glyph02604\n\t* glyph02605\n\t* glyph02606\n\t* glyph02607\n\t* glyph02608\n\t* glyph02609\n\t* glyph02610\n\t* glyph02611\n\t* glyph02612\n\t* glyph02613\n\t* glyph02614\n\t* glyph02615\n\t* glyph02617\n\t* glyph02619\n\t* glyph02622\n\t* glyph02625\n\t* glyph02626\n\t* glyph02627\n\t* glyph02629\n\t* glyph02630\n\t* glyph02631\n\t* glyph02632\n\t* glyph02633\n\t* glyph02634\n\t* glyph02635\n\t* glyph02637\n\t* glyph02639\n\t* glyph02640\n\t* glyph02641\n\t* glyph02642\n\t* glyph02643\n\t* glyph02644\n\t* glyph02645\n\t* glyph02646\n\t* glyph02647\n\t* glyph02648\n\t* glyph02649\n\t* glyph02650\n\t* glyph02651\n\t* glyph02652\n\t* glyph02653\n\t* glyph02655\n\t* glyph02656\n\t* glyph02657\n\t* glyph02658\n\t* glyph02659\n\t* glyph02660\n\t* glyph02661\n\t* glyph02662\n\t* glyph02663\n\t* glyph02664\n\t* glyph02665\n\t* glyph02666\n\t* glyph02667\n\t* glyph02668\n\t* glyph02669\n\t* glyph02670\n\t* glyph02671\n\t* glyph02672\n\t* glyph02673\n\t* glyph02674\n\t* glyph02675\n\t* glyph02676\n\t* glyph02678\n\t* glyph02680\n\t* glyph02681\n\t* glyph02683\n\t* glyph02684\n\t* glyph02686\n\t* glyph02687\n\t* glyph02688\n\t* glyph02689\n\t* glyph02690\n\t* glyph02691\n\t* glyph02693\n\t* glyph02696\n\t* glyph02697\n\t* glyph02698\n\t* glyph02699\n\t* glyph02700\n\t* glyph02701\n\t* glyph02702\n\t* glyph02704\n\t* glyph02705\n\t* glyph02706\n\t* glyph02707\n\t* glyph02708\n\t* glyph02709\n\t* glyph02710\n\t* glyph02711\n\t* glyph02712\n\t* glyph02713\n\t* glyph02714\n\t* glyph02716\n\t* glyph02717\n\t* glyph02718\n\t* glyph02719\n\t* glyph02720\n\t* glyph02721\n\t* glyph02722\n\t* glyph02723\n\t* glyph02724\n\t* glyph02725\n\t* glyph02726\n\t* glyph02727\n\t* glyph02728\n\t* glyph02729\n\t* glyph02730\n\t* glyph02731\n\t* glyph02732\n\t* glyph02733\n\t* glyph02734\n\t* glyph02735\n\t* glyph02736\n\t* glyph02739\n\t* glyph02741\n\t* glyph02742\n\t* glyph02743\n\t* glyph02744\n\t* glyph02745\n\t* glyph02746\n\t* glyph02747\n\t* glyph02748\n\t* glyph02749\n\t* glyph02750\n\t* glyph02752\n\t* glyph02753\n\t* glyph02755\n\t* glyph02756\n\t* glyph02757\n\t* glyph02759\n\t* glyph02760\n\t* glyph02761\n\t* glyph02762\n\t* glyph02763\n\t* glyph02764\n\t* glyph02765\n\t* glyph02766\n\t* glyph02767\n\t* glyph02769\n\t* glyph02770\n\t* glyph02771\n\t* glyph02772\n\t* glyph02773\n\t* glyph02774\n\t* glyph02775\n\t* glyph02776\n\t* glyph02777\n\t* glyph02778\n\t* glyph02779\n\t* glyph02780\n\t* glyph02781\n\t* glyph02782\n\t* glyph02783\n\t* glyph02784\n\t* glyph02785\n\t* glyph02786\n\t* glyph02787\n\t* glyph02788\n\t* glyph02789\n\t* glyph02790\n\t* glyph02791\n\t* glyph02793\n\t* glyph02794\n\t* glyph02795\n\t* glyph02797\n\t* glyph02798\n\t* glyph02799\n\t* glyph02800\n\t* glyph02801\n\t* glyph02802\n\t* glyph02803\n\t* glyph02805\n\t* glyph02806\n\t* glyph02807\n\t* glyph02808\n\t* glyph02809\n\t* glyph02810\n\t* glyph02811\n\t* glyph02812\n\t* glyph02813\n\t* glyph02814\n\t* glyph02815\n\t* glyph02816\n\t* glyph02817\n\t* glyph02818\n\t* glyph02819\n\t* glyph02820\n\t* glyph02821\n\t* glyph02822\n\t* glyph02823\n\t* glyph02824\n\t* glyph02825\n\t* glyph02826\n\t* glyph02827\n\t* glyph02828\n\t* glyph02829\n\t* glyph02830\n\t* glyph02831\n\t* glyph02832\n\t* glyph02833\n\t* glyph02834\n\t* glyph02835\n\t* glyph02837\n\t* glyph02838\n\t* glyph02839\n\t* glyph02840\n\t* glyph02841\n\t* glyph02842\n\t* glyph02843\n\t* glyph02844\n\t* glyph02845\n\t* glyph02846\n\t* glyph02847\n\t* glyph02848\n\t* glyph02849\n\t* glyph02850\n\t* glyph02851\n\t* glyph02852\n\t* glyph02853\n\t* glyph02854\n\t* glyph02855\n\t* glyph02856\n\t* glyph02857\n\t* glyph02858\n\t* glyph02859\n\t* glyph02860\n\t* glyph02861\n\t* glyph02862\n\t* glyph02863\n\t* glyph02864\n\t* glyph02865\n\t* glyph02866\n\t* glyph02867\n\t* glyph02868\n\t* glyph02869\n\t* glyph02870\n\t* glyph02871\n\t* glyph02872\n\t* glyph02873\n\t* glyph02874\n\t* glyph02875\n\t* glyph02876\n\t* glyph02877\n\t* glyph02878\n\t* glyph02879\n\t* glyph02880\n\t* glyph02881\n\t* glyph02882\n\t* glyph02883\n\t* glyph02884\n\t* glyph02885\n\t* glyph02886\n\t* glyph02887\n\t* glyph02888\n\t* glyph02889\n\t* glyph02890\n\t* glyph02891\n\t* glyph02892\n\t* glyph02893\n\t* glyph02894\n\t* glyph02895\n\t* glyph02896\n\t* glyph02897\n\t* glyph02898\n\t* glyph02899\n\t* glyph02900\n\t* glyph02901\n\t* glyph02902\n\t* glyph02903\n\t* glyph02904\n\t* glyph02905\n\t* glyph02906\n\t* glyph02907\n\t* glyph02908\n\t* glyph02910\n\t* glyph02913\n\t* glyph02914\n\t* glyph02915\n\t* glyph02916\n\t* glyph02917\n\t* glyph02918\n\t* glyph02919\n\t* glyph02920\n\t* glyph02921\n\t* glyph02922\n\t* glyph02923\n\t* glyph02924\n\t* glyph02925\n\t* glyph02926\n\t* glyph02927\n\t* glyph02928\n\t* glyph02929\n\t* glyph02930\n\t* glyph02931\n\t* glyph02932\n\t* glyph02933\n\t* glyph02934\n\t* glyph02935\n\t* glyph02937\n\t* glyph02940\n\t* glyph02942\n\t* glyph02945\n\t* glyph02946\n\t* glyph02948\n\t* glyph02951\n\t* glyph02952\n\t* glyph02953\n\t* glyph02954\n\t* glyph02956\n\t* glyph02957\n\t* glyph02958\n\t* glyph02959\n\t* glyph02960\n\t* glyph02961\n\t* glyph02962\n\t* glyph02963\n\t* glyph02964\n\t* glyph02965\n\t* glyph02966\n\t* glyph02967\n\t* glyph02968\n\t* glyph02969\n\t* glyph02970\n\t* glyph02971\n\t* glyph02973\n\t* glyph02974\n\t* glyph02975\n\t* glyph02976\n\t* glyph02977\n\t* glyph02978\n\t* glyph02979\n\t* glyph02980\n\t* glyph02981\n\t* glyph02982\n\t* glyph02983\n\t* glyph02984\n\t* glyph02985\n\t* glyph02986\n\t* glyph02987\n\t* glyph02988\n\t* glyph02989\n\t* glyph02990\n\t* glyph02991\n\t* glyph02992\n\t* glyph02993\n\t* glyph02994\n\t* glyph02996\n\t* glyph02997\n\t* glyph03000\n\t* glyph03001\n\t* glyph03002\n\t* glyph03003\n\t* glyph03004\n\t* glyph03005\n\t* glyph03006\n\t* glyph03007\n\t* glyph03008\n\t* glyph03010\n\t* glyph03012\n\t* glyph03013\n\t* glyph03014\n\t* glyph03015\n\t* glyph03016\n\t* glyph03017\n\t* glyph03019\n\t* glyph03020\n\t* glyph03022\n\t* glyph03023\n\t* glyph03024\n\t* glyph03025\n\t* glyph03027\n\t* glyph03028\n\t* glyph03029\n\t* glyph03030\n\t* glyph03033\n\t* glyph03034\n\t* glyph03035\n\t* glyph03036\n\t* glyph03037\n\t* glyph03038\n\t* glyph03039\n\t* glyph03040\n\t* glyph03041\n\t* glyph03042\n\t* glyph03043\n\t* glyph03044\n\t* glyph03045\n\t* glyph03046\n\t* glyph03047\n\t* glyph03048\n\t* glyph03049\n\t* glyph03050\n\t* glyph03051\n\t* glyph03052\n\t* glyph03053\n\t* glyph03054\n\t* glyph03056\n\t* glyph03057\n\t* glyph03058\n\t* glyph03059\n\t* glyph03060\n\t* glyph03062\n\t* glyph03063\n\t* glyph03066\n\t* glyph03067\n\t* glyph03069\n\t* glyph03070\n\t* glyph03071\n\t* glyph03074\n\t* glyph03075\n\t* glyph03076\n\t* glyph03077\n\t* glyph03078\n\t* glyph03079\n\t* glyph03080\n\t* glyph03081\n\t* glyph03082\n\t* glyph03083\n\t* glyph03084\n\t* glyph03085\n\t* glyph03086\n\t* glyph03087\n\t* glyph03088\n\t* glyph03089\n\t* glyph03090\n\t* glyph03091\n\t* glyph03092\n\t* glyph03093\n\t* glyph03094\n\t* glyph03095\n\t* glyph03096\n\t* glyph03097\n\t* glyph03098\n\t* glyph03099\n\t* glyph03100\n\t* glyph03101\n\t* glyph03102\n\t* glyph03103\n\t* glyph03104\n\t* glyph03105\n\t* glyph03106\n\t* glyph03107\n\t* glyph03108\n\t* glyph03109\n\t* glyph03110\n\t* glyph03111\n\t* glyph03112\n\t* glyph03113\n\t* glyph03114\n\t* glyph03115\n\t* glyph03116\n\t* glyph03117\n\t* glyph03118\n\t* glyph03119\n\t* glyph03120\n\t* glyph03121\n\t* glyph03122\n\t* glyph03123\n\t* glyph03124\n\t* glyph03125\n\t* glyph03126\n\t* glyph03127\n\t* glyph03128\n\t* glyph03129\n\t* glyph03130\n\t* glyph03131\n\t* glyph03132\n\t* glyph03133\n\t* glyph03134\n\t* glyph03135\n\t* glyph03136\n\t* glyph03137\n\t* glyph03138\n\t* glyph03139\n\t* glyph03140\n\t* glyph03141\n\t* glyph03142\n\t* glyph03143\n\t* glyph03144\n\t* glyph03145\n\t* glyph03146\n\t* glyph03147\n\t* glyph03148\n\t* glyph03149\n\t* glyph03150\n\t* glyph03151\n\t* glyph03152\n\t* glyph03153\n\t* glyph03154\n\t* glyph03155\n\t* glyph03156\n\t* glyph03158\n\t* glyph03159\n\t* glyph03161\n\t* glyph03162\n\t* glyph03163\n\t* glyph03164\n\t* glyph03165\n\t* glyph03167\n\t* glyph03168\n\t* glyph03169\n\t* glyph03171\n\t* glyph03172\n\t* glyph03173\n\t* glyph03174\n\t* glyph03175\n\t* glyph03176\n\t* glyph03177\n\t* glyph03178\n\t* glyph03179\n\t* glyph03180\n\t* glyph03181\n\t* glyph03182\n\t* glyph03183\n\t* glyph03184\n\t* glyph03185\n\t* glyph03186\n\t* glyph03187\n\t* glyph03188\n\t* glyph03189\n\t* glyph03190\n\t* glyph03191\n\t* glyph03192\n\t* glyph03194\n\t* glyph03196\n\t* glyph03198\n\t* glyph03199\n\t* glyph03200\n\t* glyph03202\n\t* glyph03203\n\t* glyph03204\n\t* glyph03205\n\t* glyph03209\n\t* glyph03210\n\t* glyph03211\n\t* glyph03212\n\t* glyph03213\n\t* glyph03215\n\t* glyph03216\n\t* glyph03217\n\t* glyph03218\n\t* glyph03219\n\t* glyph03220\n\t* glyph03221\n\t* glyph03222\n\t* glyph03223\n\t* glyph03225\n\t* glyph03226\n\t* glyph03227\n\t* glyph03228\n\t* glyph03229\n\t* glyph03230\n\t* glyph03231\n\t* glyph03234\n\t* glyph03235\n\t* glyph03236\n\t* glyph03237\n\t* glyph03238\n\t* glyph03239\n\t* glyph03240\n\t* glyph03241\n\t* glyph03242\n\t* glyph03243\n\t* glyph03244\n\t* glyph03245\n\t* glyph03246\n\t* glyph03247\n\t* glyph03248\n\t* glyph03249\n\t* glyph03250\n\t* glyph03251\n\t* glyph03252\n\t* glyph03254\n\t* glyph03255\n\t* glyph03257\n\t* glyph03258\n\t* glyph03260\n\t* glyph03262\n\t* glyph03264\n\t* glyph03266\n\t* glyph03267\n\t* glyph03269\n\t* glyph03270\n\t* glyph03272\n\t* glyph03273\n\t* glyph03274\n\t* glyph03275\n\t* glyph03276\n\t* glyph03277\n\t* glyph03278\n\t* glyph03279\n\t* glyph03280\n\t* glyph03281\n\t* glyph03282\n\t* glyph03283\n\t* glyph03284\n\t* glyph03285\n\t* glyph03286\n\t* glyph03287\n\t* glyph03288\n\t* glyph03289\n\t* glyph03290\n\t* glyph03291\n\t* glyph03292\n\t* glyph03293\n\t* glyph03294\n\t* glyph03295\n\t* glyph03296\n\t* glyph03297\n\t* glyph03298\n\t* glyph03299\n\t* glyph03300\n\t* glyph03301\n\t* glyph03302\n\t* glyph03303\n\t* glyph03304\n\t* glyph03305\n\t* glyph03306\n\t* glyph03307\n\t* glyph03308\n\t* glyph03310\n\t* glyph03311\n\t* glyph03312\n\t* glyph03313\n\t* glyph03314\n\t* glyph03316\n\t* glyph03317\n\t* glyph03318\n\t* glyph03320\n\t* glyph03322\n\t* glyph03323\n\t* glyph03325\n\t* glyph03326\n\t* glyph03327\n\t* glyph03329\n\t* glyph03330\n\t* glyph03331\n\t* glyph03333\n\t* glyph03334\n\t* glyph03335\n\t* glyph03336\n\t* glyph03337\n\t* glyph03338\n\t* glyph03339\n\t* glyph03340\n\t* glyph03342\n\t* glyph03343\n\t* glyph03344\n\t* glyph03345\n\t* glyph03347\n\t* glyph03348\n\t* glyph03351\n\t* glyph03353\n\t* glyph03354\n\t* glyph03356\n\t* glyph03359\n\t* glyph03360\n\t* glyph03362\n\t* glyph03363\n\t* glyph03366\n\t* glyph03368\n\t* glyph03369\n\t* glyph03370\n\t* glyph03371\n\t* glyph03373\n\t* glyph03374\n\t* glyph03375\n\t* glyph03377\n\t* glyph03378\n\t* glyph03380\n\t* glyph03381\n\t* glyph03382\n\t* glyph03383\n\t* glyph03384\n\t* glyph03385\n\t* glyph03386\n\t* glyph03388\n\t* glyph03390\n\t* glyph03391\n\t* glyph03393\n\t* glyph03394\n\t* glyph03395\n\t* glyph03396\n\t* glyph03397\n\t* glyph03398\n\t* glyph03399\n\t* glyph03400\n\t* glyph03401\n\t* glyph03402\n\t* glyph03403\n\t* glyph03404\n\t* glyph03405\n\t* glyph03406\n\t* glyph03407\n\t* glyph03409\n\t* glyph03410\n\t* glyph03412\n\t* glyph03413\n\t* glyph03414\n\t* glyph03415\n\t* glyph03416\n\t* glyph03417\n\t* glyph03418\n\t* glyph03419\n\t* glyph03420\n\t* glyph03424\n\t* glyph03426\n\t* glyph03427\n\t* glyph03428\n\t* glyph03429\n\t* glyph03431\n\t* glyph03432\n\t* glyph03433\n\t* glyph03434\n\t* glyph03436\n\t* glyph03437\n\t* glyph03438\n\t* glyph03439\n\t* glyph03440\n\t* glyph03441\n\t* glyph03444\n\t* glyph03445\n\t* glyph03449\n\t* glyph03450\n\t* glyph03451\n\t* glyph03452\n\t* glyph03453\n\t* glyph03454\n\t* glyph03455\n\t* glyph03457\n\t* glyph03458\n\t* glyph03459\n\t* glyph03460\n\t* glyph03461\n\t* glyph03462\n\t* glyph03463\n\t* glyph03464\n\t* glyph03465\n\t* glyph03466\n\t* glyph03467\n\t* glyph03468\n\t* glyph03469\n\t* glyph03470\n\t* glyph03471\n\t* glyph03472\n\t* glyph03473\n\t* glyph03474\n\t* glyph03475\n\t* glyph03476\n\t* glyph03477\n\t* glyph03479\n\t* glyph03480\n\t* glyph03481\n\t* glyph03482\n\t* glyph03483\n\t* glyph03484\n\t* glyph03485\n\t* glyph03486\n\t* glyph03487\n\t* glyph03488\n\t* glyph03489\n\t* glyph03490\n\t* glyph03491\n\t* glyph03492\n\t* glyph03493\n\t* glyph03494\n\t* glyph03495\n\t* glyph03496\n\t* glyph03497\n\t* glyph03498\n\t* glyph03499\n\t* glyph03500\n\t* glyph03501\n\t* glyph03502\n\t* glyph03504\n\t* glyph03505\n\t* glyph03506\n\t* glyph03507\n\t* glyph03508\n\t* glyph03509\n\t* glyph03510\n\t* glyph03511\n\t* glyph03513\n\t* glyph03514\n\t* glyph03518\n\t* glyph03519\n\t* glyph03520\n\t* glyph03521\n\t* glyph03522\n\t* glyph03523\n\t* glyph03525\n\t* glyph03526\n\t* glyph03527\n\t* glyph03528\n\t* glyph03529\n\t* glyph03530\n\t* glyph03531\n\t* glyph03532\n\t* glyph03533\n\t* glyph03534\n\t* glyph03535\n\t* glyph03536\n\t* glyph03537\n\t* glyph03538\n\t* glyph03539\n\t* glyph03540\n\t* glyph03541\n\t* glyph03542\n\t* glyph03543\n\t* glyph03544\n\t* glyph03545\n\t* glyph03546\n\t* glyph03547\n\t* glyph03548\n\t* glyph03549\n\t* glyph03550\n\t* glyph03551\n\t* glyph03552\n\t* glyph03553\n\t* glyph03554\n\t* glyph03555\n\t* glyph03556\n\t* glyph03557\n\t* glyph03558\n\t* glyph03560\n\t* glyph03561\n\t* glyph03562\n\t* glyph03563\n\t* glyph03564\n\t* glyph03565\n\t* glyph03566\n\t* glyph03567\n\t* glyph03570\n\t* glyph03573\n\t* glyph03574\n\t* glyph03575\n\t* glyph03577\n\t* glyph03578\n\t* glyph03579\n\t* glyph03580\n\t* glyph03581\n\t* glyph03582\n\t* glyph03583\n\t* glyph03585\n\t* glyph03586\n\t* glyph03588\n\t* glyph03589\n\t* glyph03590\n\t* glyph03593\n\t* glyph03594\n\t* glyph03596\n\t* glyph03597\n\t* glyph03598\n\t* glyph03601\n\t* glyph03602\n\t* glyph03603\n\t* glyph03604\n\t* glyph03605\n\t* glyph03607\n\t* glyph03609\n\t* glyph03611\n\t* glyph03612\n\t* glyph03613\n\t* glyph03614\n\t* glyph03616\n\t* glyph03618\n\t* glyph03619\n\t* glyph03620\n\t* glyph03621\n\t* glyph03623\n\t* glyph03624\n\t* glyph03625\n\t* glyph03626\n\t* glyph03627\n\t* glyph03628\n\t* glyph03629\n\t* glyph03630\n\t* glyph03631\n\t* glyph03632\n\t* glyph03633\n\t* glyph03634\n\t* glyph03635\n\t* glyph03636\n\t* glyph03637\n\t* glyph03638\n\t* glyph03639\n\t* glyph03640\n\t* glyph03641\n\t* glyph03642\n\t* glyph03643\n\t* glyph03644\n\t* glyph03645\n\t* glyph03646\n\t* glyph03647\n\t* glyph03648\n\t* glyph03649\n\t* glyph03650\n\t* glyph03651\n\t* glyph03652\n\t* glyph03653\n\t* glyph03654\n\t* glyph03655\n\t* glyph03656\n\t* glyph03657\n\t* glyph03658\n\t* glyph03659\n\t* glyph03660\n\t* glyph03662\n\t* glyph03664\n\t* glyph03666\n\t* glyph03667\n\t* glyph03668\n\t* glyph03669\n\t* glyph03670\n\t* glyph03671\n\t* glyph03672\n\t* glyph03673\n\t* glyph03674\n\t* glyph03675\n\t* glyph03676\n\t* glyph03677\n\t* glyph03678\n\t* glyph03679\n\t* glyph03680\n\t* glyph03681\n\t* glyph03682\n\t* glyph03683\n\t* glyph03684\n\t* glyph03686\n\t* glyph03687\n\t* glyph03688\n\t* glyph03689\n\t* glyph03690\n\t* glyph03691\n\t* glyph03692\n\t* glyph03693\n\t* glyph03694\n\t* glyph03695\n\t* glyph03696\n\t* glyph03697\n\t* glyph03698\n\t* glyph03699\n\t* glyph03701\n\t* glyph03702\n\t* glyph03703\n\t* glyph03704\n\t* glyph03705\n\t* glyph03706\n\t* glyph03707\n\t* glyph03708\n\t* glyph03709\n\t* glyph03710\n\t* glyph03711\n\t* glyph03712\n\t* glyph03713\n\t* glyph03714\n\t* glyph03715\n\t* glyph03718\n\t* glyph03719\n\t* glyph03720\n\t* glyph03721\n\t* glyph03722\n\t* glyph03724\n\t* glyph03725\n\t* glyph03726\n\t* glyph03728\n\t* glyph03729\n\t* glyph03730\n\t* glyph03731\n\t* glyph03732\n\t* glyph03733\n\t* glyph03734\n\t* glyph03735\n\t* glyph03736\n\t* glyph03737\n\t* glyph03738\n\t* glyph03739\n\t* glyph03740\n\t* glyph03741\n\t* glyph03742\n\t* glyph03743\n\t* glyph03744\n\t* glyph03745\n\t* glyph03746\n\t* glyph03747\n\t* glyph03748\n\t* glyph03749\n\t* glyph03750\n\t* glyph03751\n\t* glyph03752\n\t* glyph03753\n\t* glyph03754\n\t* glyph03755\n\t* glyph03756\n\t* glyph03757\n\t* glyph03758\n\t* glyph03759\n\t* glyph03760\n\t* glyph03761\n\t* glyph03762\n\t* glyph03763\n\t* glyph03764\n\t* glyph03765\n\t* glyph03766\n\t* glyph03767\n\t* glyph03768\n\t* glyph03769\n\t* glyph03770\n\t* glyph03771\n\t* glyph03772\n\t* glyph03773\n\t* glyph03774\n\t* glyph03775\n\t* glyph03776\n\t* glyph03777\n\t* glyph03778\n\t* glyph03779\n\t* glyph03780\n\t* glyph03781\n\t* glyph03782\n\t* glyph03784\n\t* glyph03785\n\t* glyph03786\n\t* glyph03787\n\t* glyph03788\n\t* glyph03789\n\t* glyph03790\n\t* glyph03791\n\t* glyph03792\n\t* glyph03793\n\t* glyph03794\n\t* glyph03795\n\t* glyph03798\n\t* glyph03799\n\t* glyph03800\n\t* glyph03801\n\t* glyph03802\n\t* glyph03803\n\t* glyph03804\n\t* glyph03805\n\t* glyph03806\n\t* glyph03807\n\t* glyph03809\n\t* glyph03810\n\t* glyph03811\n\t* glyph03812\n\t* glyph03814\n\t* glyph03815\n\t* glyph03816\n\t* glyph03817\n\t* glyph03818\n\t* glyph03819\n\t* glyph03820\n\t* glyph03821\n\t* glyph03822\n\t* glyph03823\n\t* glyph03824\n\t* glyph03825\n\t* glyph03826\n\t* glyph03827\n\t* glyph03828\n\t* glyph03829\n\t* glyph03830\n\t* glyph03831\n\t* glyph03832\n\t* glyph03833\n\t* glyph03834\n\t* glyph03835\n\t* glyph03836\n\t* glyph03837\n\t* glyph03838\n\t* glyph03839\n\t* glyph03840\n\t* glyph03842\n\t* glyph03843\n\t* glyph03844\n\t* glyph03845\n\t* glyph03846\n\t* glyph03847\n\t* glyph03848\n\t* glyph03849\n\t* glyph03851\n\t* glyph03852\n\t* glyph03853\n\t* glyph03854\n\t* glyph03855\n\t* glyph03856\n\t* glyph03858\n\t* glyph03860\n\t* glyph03861\n\t* glyph03862\n\t* glyph03863\n\t* glyph03864\n\t* glyph03865\n\t* glyph03866\n\t* glyph03867\n\t* glyph03868\n\t* glyph03869\n\t* glyph03871\n\t* glyph03872\n\t* glyph03873\n\t* glyph03874\n\t* glyph03875\n\t* glyph03876\n\t* glyph03877\n\t* glyph03878\n\t* glyph03879\n\t* glyph03880\n\t* glyph03881\n\t* glyph03882\n\t* glyph03883\n\t* glyph03884\n\t* glyph03885\n\t* glyph03886\n\t* glyph03887\n\t* glyph03888\n\t* glyph03889\n\t* glyph03890\n\t* glyph03891\n\t* glyph03892\n\t* glyph03893\n\t* glyph03894\n\t* glyph03895\n\t* glyph03896\n\t* glyph03897\n\t* glyph03898\n\t* glyph03899\n\t* glyph03900\n\t* glyph03901\n\t* glyph03902\n\t* glyph03903\n\t* glyph03904\n\t* glyph03905\n\t* glyph03906\n\t* glyph03907\n\t* glyph03908\n\t* glyph03909\n\t* glyph03910\n\t* glyph03911\n\t* glyph03912\n\t* glyph03913\n\t* glyph03914\n\t* glyph03915\n\t* glyph03916\n\t* glyph03917\n\t* glyph03918\n\t* glyph03919\n\t* glyph03920\n\t* glyph03921\n\t* glyph03922\n\t* glyph03923\n\t* glyph03924\n\t* glyph03925\n\t* glyph03926\n\t* glyph03927\n\t* glyph03928\n\t* glyph03929\n\t* glyph03930\n\t* glyph03931\n\t* glyph03932\n\t* glyph03933\n\t* glyph03934\n\t* glyph03935\n\t* glyph03936\n\t* glyph03937\n\t* glyph03938\n\t* glyph03939\n\t* glyph03940\n\t* glyph03941\n\t* glyph03942\n\t* glyph03943\n\t* glyph03944\n\t* glyph03945\n\t* glyph03946\n\t* glyph03947\n\t* glyph03948\n\t* glyph03949\n\t* glyph03950\n\t* glyph03951\n\t* glyph03952\n\t* glyph03953\n\t* glyph03954\n\t* glyph03955\n\t* glyph03956\n\t* glyph03957\n\t* glyph03958\n\t* glyph03959\n\t* glyph03960\n\t* glyph03962\n\t* glyph03963\n\t* glyph03964\n\t* glyph03965\n\t* glyph03966\n\t* glyph03967\n\t* glyph03968\n\t* glyph03969\n\t* glyph03971\n\t* glyph03972\n\t* glyph03973\n\t* glyph03974\n\t* glyph03975\n\t* glyph03976\n\t* glyph03977\n\t* glyph03978\n\t* glyph03979\n\t* glyph03980\n\t* glyph03981\n\t* glyph03982\n\t* glyph03983\n\t* glyph03984\n\t* glyph03985\n\t* glyph03986\n\t* glyph03987\n\t* glyph03988\n\t* glyph03989\n\t* glyph03990\n\t* glyph03991\n\t* glyph03992\n\t* glyph03994\n\t* glyph03995\n\t* glyph03996\n\t* glyph03997\n\t* glyph03998\n\t* glyph03999\n\t* glyph04000\n\t* glyph04001\n\t* glyph04002\n\t* glyph04003\n\t* glyph04004\n\t* glyph04005\n\t* glyph04006\n\t* glyph04007\n\t* glyph04008\n\t* glyph04009\n\t* glyph04010\n\t* glyph04011\n\t* glyph04012\n\t* glyph04013\n\t* glyph04014\n\t* glyph04015\n\t* glyph04016\n\t* glyph04017\n\t* glyph04018\n\t* glyph04019\n\t* glyph04020\n\t* glyph04021\n\t* glyph04022\n\t* glyph04023\n\t* glyph04024\n\t* glyph04025\n\t* glyph04026\n\t* glyph04027\n\t* glyph04028\n\t* glyph04029\n\t* glyph04030\n\t* glyph04031\n\t* glyph04032\n\t* glyph04033\n\t* glyph04034\n\t* glyph04035\n\t* glyph04036\n\t* glyph04037\n\t* glyph04038\n\t* glyph04039\n\t* glyph04040\n\t* glyph04041\n\t* glyph04042\n\t* glyph04043\n\t* glyph04044\n\t* glyph04045\n\t* glyph04046\n\t* glyph04047\n\t* glyph04048\n\t* glyph04049\n\t* glyph04050\n\t* glyph04051\n\t* glyph04052\n\t* glyph04053\n\t* glyph04054\n\t* glyph04055\n\t* glyph04056\n\t* glyph04057\n\t* glyph04058\n\t* glyph04059\n\t* glyph04060\n\t* glyph04061\n\t* glyph04062\n\t* glyph04063\n\t* glyph04064\n\t* glyph04065\n\t* glyph04066\n\t* glyph04067\n\t* glyph04068\n\t* glyph04069\n\t* glyph04070\n\t* glyph04071\n\t* glyph04072\n\t* glyph04073\n\t* glyph04074\n\t* glyph04075\n\t* glyph04076\n\t* glyph04077\n\t* glyph04078\n\t* glyph04079\n\t* glyph04080\n\t* glyph04081\n\t* glyph04082\n\t* glyph04083\n\t* glyph04085\n\t* glyph04088\n\t* glyph04089\n\t* glyph04090\n\t* glyph04091\n\t* glyph04092\n\t* glyph04093\n\t* glyph04094\n\t* glyph04095\n\t* glyph04096\n\t* glyph04097\n\t* glyph04098\n\t* glyph04099\n\t* glyph04100\n\t* glyph04101\n\t* glyph04102\n\t* glyph04103\n\t* glyph04104\n\t* glyph04105\n\t* glyph04106\n\t* glyph04107\n\t* glyph04108\n\t* glyph04109\n\t* glyph04110\n\t* glyph04111\n\t* glyph04112\n\t* glyph04114\n\t* glyph04115\n\t* glyph04117\n\t* glyph04119\n\t* glyph04120\n\t* glyph04122\n\t* glyph04123\n\t* glyph04124\n\t* glyph04125\n\t* glyph04126\n\t* glyph04127\n\t* glyph04128\n\t* glyph04129\n\t* glyph04130\n\t* glyph04131\n\t* glyph04132\n\t* glyph04133\n\t* glyph04134\n\t* glyph04135\n\t* glyph04137\n\t* glyph04138\n\t* glyph04139\n\t* glyph04140\n\t* glyph04141\n\t* glyph04142\n\t* glyph04143\n\t* glyph04144\n\t* glyph04146\n\t* glyph04147\n\t* glyph04148\n\t* glyph04149\n\t* glyph04150\n\t* glyph04151\n\t* glyph04152\n\t* glyph04153\n\t* glyph04154\n\t* glyph04155\n\t* glyph04156\n\t* glyph04157\n\t* glyph04158\n\t* glyph04159\n\t* glyph04160\n\t* glyph04161\n\t* glyph04162\n\t* glyph04163\n\t* glyph04164\n\t* glyph04165\n\t* glyph04166\n\t* glyph04167\n\t* glyph04168\n\t* glyph04169\n\t* glyph04170\n\t* glyph04171\n\t* glyph04172\n\t* glyph04173\n\t* glyph04174\n\t* glyph04175\n\t* glyph04178\n\t* glyph04180\n\t* glyph04181\n\t* glyph04182\n\t* glyph04183\n\t* glyph04184\n\t* glyph04185\n\t* glyph04186\n\t* glyph04187\n\t* glyph04188\n\t* glyph04189\n\t* glyph04190\n\t* glyph04191\n\t* glyph04192\n\t* glyph04193\n\t* glyph04194\n\t* glyph04195\n\t* glyph04196\n\t* glyph04197\n\t* glyph04198\n\t* glyph04199\n\t* glyph04200\n\t* glyph04201\n\t* glyph04202\n\t* glyph04203\n\t* glyph04204\n\t* glyph04205\n\t* glyph04206\n\t* glyph04207\n\t* glyph04208\n\t* glyph04210\n\t* glyph04211\n\t* glyph04213\n\t* glyph04214\n\t* glyph04215\n\t* glyph04216\n\t* glyph04218\n\t* glyph04219\n\t* glyph04220\n\t* glyph04221\n\t* glyph04222\n\t* glyph04223\n\t* glyph04224\n\t* glyph04225\n\t* glyph04226\n\t* glyph04227\n\t* glyph04228\n\t* glyph04229\n\t* glyph04230\n\t* glyph04232\n\t* glyph04233\n\t* glyph04234\n\t* glyph04235\n\t* glyph04236\n\t* glyph04237\n\t* glyph04238\n\t* glyph04239\n\t* glyph04240\n\t* glyph04241\n\t* glyph04242\n\t* glyph04243\n\t* glyph04244\n\t* glyph04246\n\t* glyph04247\n\t* glyph04248\n\t* glyph04249\n\t* glyph04250\n\t* glyph04251\n\t* glyph04252\n\t* glyph04253\n\t* glyph04254\n\t* glyph04255\n\t* glyph04256\n\t* glyph04258\n\t* glyph04259\n\t* glyph04260\n\t* glyph04261\n\t* glyph04262\n\t* glyph04264\n\t* glyph04266\n\t* glyph04267\n\t* glyph04268\n\t* glyph04269\n\t* glyph04270\n\t* glyph04271\n\t* glyph04272\n\t* glyph04273\n\t* glyph04274\n\t* glyph04275\n\t* glyph04276\n\t* glyph04277\n\t* glyph04278\n\t* glyph04279\n\t* glyph04280\n\t* glyph04281\n\t* glyph04282\n\t* glyph04283\n\t* glyph04284\n\t* glyph04285\n\t* glyph04286\n\t* glyph04287\n\t* glyph04288\n\t* glyph04289\n\t* glyph04290\n\t* glyph04291\n\t* glyph04292\n\t* glyph04293\n\t* glyph04294\n\t* glyph04297\n\t* glyph04298\n\t* glyph04299\n\t* glyph04301\n\t* glyph04302\n\t* glyph04303\n\t* glyph04305\n\t* glyph04306\n\t* glyph04307\n\t* glyph04308\n\t* glyph04309\n\t* glyph04310\n\t* glyph04311\n\t* glyph04312\n\t* glyph04313\n\t* glyph04314\n\t* glyph04315\n\t* glyph04316\n\t* glyph04317\n\t* glyph04318\n\t* glyph04319\n\t* glyph04320\n\t* glyph04321\n\t* glyph04322\n\t* glyph04323\n\t* glyph04325\n\t* glyph04326\n\t* glyph04327\n\t* glyph04328\n\t* glyph04329\n\t* glyph04330\n\t* glyph04331\n\t* glyph04332\n\t* glyph04333\n\t* glyph04334\n\t* glyph04335\n\t* glyph04336\n\t* glyph04337\n\t* glyph04338\n\t* glyph04339\n\t* glyph04340\n\t* glyph04341\n\t* glyph04342\n\t* glyph04345\n\t* glyph04346\n\t* glyph04349\n\t* glyph04350\n\t* glyph04351\n\t* glyph04352\n\t* glyph04353\n\t* glyph04354\n\t* glyph04355\n\t* glyph04356\n\t* glyph04357\n\t* glyph04358\n\t* glyph04359\n\t* glyph04360\n\t* glyph04361\n\t* glyph04362\n\t* glyph04363\n\t* glyph04364\n\t* glyph04365\n\t* glyph04366\n\t* glyph04367\n\t* glyph04368\n\t* glyph04369\n\t* glyph04370\n\t* glyph04371\n\t* glyph04372\n\t* glyph04373\n\t* glyph04374\n\t* glyph04375\n\t* glyph04376\n\t* glyph04377\n\t* glyph04378\n\t* glyph04379\n\t* glyph04380\n\t* glyph04382\n\t* glyph04384\n\t* glyph04385\n\t* glyph04386\n\t* glyph04387\n\t* glyph04388\n\t* glyph04389\n\t* glyph04390\n\t* glyph04391\n\t* glyph04392\n\t* glyph04393\n\t* glyph04394\n\t* glyph04395\n\t* glyph04396\n\t* glyph04397\n\t* glyph04398\n\t* glyph04399\n\t* glyph04400\n\t* glyph04401\n\t* glyph04402\n\t* glyph04405\n\t* glyph04406\n\t* glyph04407\n\t* glyph04408\n\t* glyph04409\n\t* glyph04410\n\t* glyph04411\n\t* glyph04412\n\t* glyph04413\n\t* glyph04414\n\t* glyph04415\n\t* glyph04416\n\t* glyph04417\n\t* glyph04418\n\t* glyph04419\n\t* glyph04420\n\t* glyph04421\n\t* glyph04422\n\t* glyph04423\n\t* glyph04424\n\t* glyph04425\n\t* glyph04426\n\t* glyph04427\n\t* glyph04428\n\t* glyph04429\n\t* glyph04430\n\t* glyph04431\n\t* glyph04432\n\t* glyph04433\n\t* glyph04434\n\t* glyph04435\n\t* glyph04436\n\t* glyph04437\n\t* glyph04438\n\t* glyph04439\n\t* glyph04440\n\t* glyph04441\n\t* glyph04442\n\t* glyph04443\n\t* glyph04445\n\t* glyph04446\n\t* glyph04447\n\t* glyph04448\n\t* glyph04449\n\t* glyph04452\n\t* glyph04453\n\t* glyph04454\n\t* glyph04455\n\t* glyph04456\n\t* glyph04457\n\t* glyph04458\n\t* glyph04459\n\t* glyph04460\n\t* glyph04461\n\t* glyph04463\n\t* glyph04464\n\t* glyph04465\n\t* glyph04466\n\t* glyph04468\n\t* glyph04469\n\t* glyph04470\n\t* glyph04471\n\t* glyph04472\n\t* glyph04473\n\t* glyph04474\n\t* glyph04475\n\t* glyph04476\n\t* glyph04477\n\t* glyph04478\n\t* glyph04479\n\t* glyph04480\n\t* glyph04481\n\t* glyph04482\n\t* glyph04483\n\t* glyph04484\n\t* glyph04485\n\t* glyph04486\n\t* glyph04487\n\t* glyph04488\n\t* glyph04489\n\t* glyph04490\n\t* glyph04491\n\t* glyph04492\n\t* glyph04493\n\t* glyph04494\n\t* glyph04495\n\t* glyph04496\n\t* glyph04497\n\t* glyph04498\n\t* glyph04499\n\t* glyph04500\n\t* glyph04501\n\t* glyph04502\n\t* glyph04503\n\t* glyph04504\n\t* glyph04505\n\t* glyph04506\n\t* glyph04507\n\t* glyph04508\n\t* glyph04510\n\t* glyph04511\n\t* glyph04512\n\t* glyph04513\n\t* glyph04514\n\t* glyph04515\n\t* glyph04516\n\t* glyph04517\n\t* glyph04518\n\t* glyph04520\n\t* glyph04521\n\t* glyph04524\n\t* glyph04525\n\t* glyph04529\n\t* glyph04531\n\t* glyph04532\n\t* glyph04533\n\t* glyph04534\n\t* glyph04536\n\t* glyph04538\n\t* glyph04539\n\t* glyph04540\n\t* glyph04541\n\t* glyph04542\n\t* glyph04543\n\t* glyph04545\n\t* glyph04547\n\t* glyph04548\n\t* glyph04551\n\t* glyph04552\n\t* glyph04553\n\t* glyph04554\n\t* glyph04555\n\t* glyph04556\n\t* glyph04557\n\t* glyph04559\n\t* glyph04560\n\t* glyph04562\n\t* glyph04563\n\t* glyph04565\n\t* glyph04566\n\t* glyph04567\n\t* glyph04568\n\t* glyph04569\n\t* glyph04571\n\t* glyph04572\n\t* glyph04574\n\t* glyph04575\n\t* glyph04576\n\t* glyph04578\n\t* glyph04579\n\t* glyph04580\n\t* glyph04581\n\t* glyph04584\n\t* glyph04586\n\t* glyph04588\n\t* glyph04589\n\t* glyph04590\n\t* glyph04591\n\t* glyph04592\n\t* glyph04594\n\t* glyph04595\n\t* glyph04596\n\t* glyph04597\n\t* glyph04598\n\t* glyph04599\n\t* glyph04600\n\t* glyph04601\n\t* glyph04602\n\t* glyph04604\n\t* glyph04605\n\t* glyph04606\n\t* glyph04607\n\t* glyph04608\n\t* glyph04610\n\t* glyph04614\n\t* glyph04615\n\t* glyph04616\n\t* glyph04617\n\t* glyph04619\n\t* glyph04620\n\t* glyph04621\n\t* glyph04623\n\t* glyph04625\n\t* glyph04626\n\t* glyph04628\n\t* glyph04629\n\t* glyph04631\n\t* glyph04632\n\t* glyph04633\n\t* glyph04634\n\t* glyph04635\n\t* glyph04636\n\t* glyph04637\n\t* glyph04639\n\t* glyph04640\n\t* glyph04641\n\t* glyph04642\n\t* glyph04643\n\t* glyph04644\n\t* glyph04645\n\t* glyph04646\n\t* glyph04647\n\t* glyph04648\n\t* glyph04649\n\t* glyph04650\n\t* glyph04651\n\t* glyph04652\n\t* glyph04653\n\t* glyph04654\n\t* glyph04655\n\t* glyph04656\n\t* glyph04657\n\t* glyph04658\n\t* glyph04659\n\t* glyph04660\n\t* glyph04661\n\t* glyph04662\n\t* glyph04663\n\t* glyph04664\n\t* glyph04665\n\t* glyph04666\n\t* glyph04667\n\t* glyph04668\n\t* glyph04669\n\t* glyph04670\n\t* glyph04671\n\t* glyph04672\n\t* glyph04673\n\t* glyph04674\n\t* glyph04675\n\t* glyph04676\n\t* glyph04677\n\t* glyph04678\n\t* glyph04679\n\t* glyph04680\n\t* glyph04681\n\t* glyph04682\n\t* glyph04683\n\t* glyph04684\n\t* glyph04685\n\t* glyph04686\n\t* glyph04687\n\t* glyph04694\n\t* glyph04695\n\t* glyph04696\n\t* glyph04697\n\t* glyph04698\n\t* glyph04699\n\t* glyph04700\n\t* glyph04701\n\t* glyph04702\n\t* glyph04703\n\t* glyph04704\n\t* glyph04705\n\t* glyph04706\n\t* glyph04707\n\t* glyph04708\n\t* glyph04709\n\t* glyph04710\n\t* glyph04711\n\t* glyph04712\n\t* glyph04713\n\t* glyph04714\n\t* glyph04715\n\t* glyph04716\n\t* glyph04717\n\t* glyph04718\n\t* glyph04719\n\t* glyph04720\n\t* glyph04721\n\t* glyph04722\n\t* glyph04723\n\t* glyph04724\n\t* glyph04725\n\t* glyph04726\n\t* glyph04727\n\t* glyph04728\n\t* glyph04729\n\t* glyph04730\n\t* glyph04731\n\t* glyph04732\n\t* glyph04733\n\t* glyph04734\n\t* glyph04735\n\t* glyph04742\n\t* glyph04743\n\t* glyph04744\n\t* glyph04745\n\t* glyph04746\n\t* glyph04747\n\t* glyph04754\n\t* glyph04755\n\t* glyph04756\n\t* glyph04757\n\t* glyph04758\n\t* glyph04759\n\t* glyph04760\n\t* glyph04761\n\t* glyph04762\n\t* glyph04763\n\t* glyph04764\n\t* glyph04765\n\t* glyph04766\n\t* glyph04767\n\t* glyph04768\n\t* glyph04769\n\t* glyph04770\n\t* glyph04771\n\t* glyph04772\n\t* glyph04773\n\t* glyph04774\n\t* glyph04775\n\t* glyph04776\n\t* glyph04777\n\t* glyph04779\n\t* glyph04780\n\t* glyph04782\n\t* glyph04783\n\t* glyph04784\n\t* glyph04785\n\t* glyph04786\n\t* glyph04787\n\t* glyph04788\n\t* glyph04789\n\t* glyph04790\n\t* glyph04791\n\t* glyph04792\n\t* glyph04793\n\t* glyph04794\n\t* glyph04795\n\t* glyph04796\n\t* glyph04797\n\t* glyph04798\n\t* glyph04799\n\t* glyph04800\n\t* glyph04801\n\t* glyph04802\n\t* glyph04803\n\t* glyph04804\n\t* glyph04805\n\t* glyph04806\n\t* glyph04807\n\t* glyph04808\n\t* glyph04809\n\t* glyph04810\n\t* glyph04811\n\t* glyph04812\n\t* glyph04813\n\t* glyph04814\n\t* glyph04815\n\t* glyph04816\n\t* glyph04817\n\t* glyph04818\n\t* glyph04819\n\t* glyph04820\n\t* glyph04821\n\t* glyph04822\n\t* glyph04823\n\t* glyph04824\n\t* glyph04825\n\t* glyph04826\n\t* glyph04827\n\t* glyph04828\n\t* glyph04829\n\t* glyph04830\n\t* glyph04831\n\t* glyph04832\n\t* glyph04833\n\t* glyph04834\n\t* glyph04835\n\t* glyph04836\n\t* glyph04837\n\t* glyph04838\n\t* glyph04839\n\t* glyph04840\n\t* glyph04841\n\t* glyph04842\n\t* glyph04843\n\t* glyph04844\n\t* glyph04845\n\t* glyph04846\n\t* glyph04847\n\t* glyph04848\n\t* glyph04849\n\t* glyph04850\n\t* glyph04851\n\t* glyph04854\n\t* glyph04856\n\t* glyph04857\n\t* glyph04858\n\t* glyph04859\n\t* glyph04860\n\t* glyph04864\n\t* glyph04865\n\t* glyph04867\n\t* glyph04870\n\t* glyph04871\n\t* glyph04872\n\t* glyph04873\n\t* glyph04874\n\t* glyph04875\n\t* glyph04877\n\t* glyph04878\n\t* glyph04879\n\t* glyph04883\n\t* glyph04884\n\t* glyph04885\n\t* glyph04887\n\t* glyph04888\n\t* glyph04889\n\t* glyph04890\n\t* glyph04891\n\t* glyph04894\n\t* glyph04895\n\t* glyph04896\n\t* glyph04897\n\t* glyph04898\n\t* glyph04899\n\t* glyph04900\n\t* glyph04901\n\t* glyph04902\n\t* glyph04905\n\t* glyph04906\n\t* glyph04907\n\t* glyph04909\n\t* glyph04910\n\t* glyph04911\n\t* glyph04912\n\t* glyph04913\n\t* glyph04916\n\t* glyph04917\n\t* glyph04918\n\t* glyph04919\n\t* glyph04920\n\t* glyph04921\n\t* glyph04922\n\t* glyph04924\n\t* glyph04926\n\t* glyph04927\n\t* glyph04928\n\t* glyph04929\n\t* glyph04930\n\t* glyph04932\n\t* glyph04933\n\t* glyph04934\n\t* glyph04935\n\t* glyph04937\n\t* glyph04938\n\t* glyph04940\n\t* glyph04941\n\t* glyph04942\n\t* glyph04943\n\t* glyph04944\n\t* glyph04945\n\t* glyph04946\n\t* glyph04947\n\t* glyph04948\n\t* glyph04951\n\t* glyph04952\n\t* glyph04953\n\t* glyph04955\n\t* glyph04956\n\t* glyph04957\n\t* glyph04958\n\t* glyph04959\n\t* glyph04960\n\t* glyph04961\n\t* glyph04962\n\t* glyph04965\n\t* glyph04966\n\t* glyph04967\n\t* glyph04971\n\t* glyph04972\n\t* glyph04973\n\t* glyph04975\n\t* glyph04976\n\t* glyph04977\n\t* glyph04978\n\t* glyph04979\n\t* glyph04982\n\t* glyph04983\n\t* glyph04984\n\t* glyph04985\n\t* glyph04986\n\t* glyph04987\n\t* glyph04988\n\t* glyph04990\n\t* glyph04991\n\t* glyph04993\n\t* glyph04994\n\t* glyph04995\n\t* glyph04997\n\t* glyph04998\n\t* glyph04999\n\t* glyph05000\n\t* glyph05001\n\t* glyph05004\n\t* glyph05005\n\t* glyph05006\n\t* glyph05007\n\t* glyph05008\n\t* glyph05011\n\t* glyph05012\n\t* glyph05013\n\t* glyph05014\n\t* glyph05015\n\t* glyph05016\n\t* glyph05017\n\t* glyph05018\n\t* glyph05019\n\t* glyph05020\n\t* glyph05022\n\t* glyph05023\n\t* glyph05024\n\t* glyph05025\n\t* glyph05027\n\t* glyph05028\n\t* glyph05029\n\t* glyph05030\n\t* glyph05033\n\t* glyph05034\n\t* glyph05035\n\t* glyph05036\n\t* glyph05037\n\t* glyph05039\n\t* glyph05040\n\t* glyph05041\n\t* glyph05043\n\t* glyph05044\n\t* glyph05045\n\t* glyph05046\n\t* glyph05047\n\t* glyph05048\n\t* glyph05049\n\t* glyph05050\n\t* glyph05053\n\t* glyph05054\n\t* glyph05055\n\t* glyph05057\n\t* glyph05058\n\t* glyph05060\n\t* glyph05062\n\t* glyph05063\n\t* glyph05064\n\t* glyph05065\n\t* glyph05068\n\t* glyph05069\n\t* glyph05070\n\t* glyph05071\n\t* glyph05072\n\t* glyph05073\n\t* glyph05074\n\t* glyph05075\n\t* glyph05076\n\t* glyph05077\n\t* glyph05078\n\t* glyph05079\n\t* glyph05080\n\t* glyph05081\n\t* glyph05082\n\t* glyph05083\n\t* glyph05084\n\t* glyph05085\n\t* glyph05086\n\t* glyph05087\n\t* glyph05088\n\t* glyph05089\n\t* glyph05090\n\t* glyph05091\n\t* glyph05092\n\t* glyph05093\n\t* glyph05094\n\t* glyph05096\n\t* glyph05099\n\t* glyph05100\n\t* glyph05101\n\t* glyph05102\n\t* glyph05103\n\t* glyph05104\n\t* glyph05105\n\t* glyph05106\n\t* glyph05107\n\t* glyph05108\n\t* glyph05110\n\t* glyph05111\n\t* glyph05112\n\t* glyph05113\n\t* glyph05115\n\t* glyph05116\n\t* glyph05117\n\t* glyph05118\n\t* glyph05119\n\t* glyph05120\n\t* glyph05122\n\t* glyph05125\n\t* glyph05126\n\t* glyph05127\n\t* glyph05130\n\t* glyph05131\n\t* glyph05132\n\t* glyph05133\n\t* glyph05136\n\t* glyph05137\n\t* glyph05138\n\t* glyph05139\n\t* glyph05140\n\t* glyph05141\n\t* glyph05142\n\t* glyph05143\n\t* glyph05144\n\t* glyph05147\n\t* glyph05148\n\t* glyph05149\n\t* glyph05151\n\t* glyph05152\n\t* glyph05153\n\t* glyph05154\n\t* glyph05155\n\t* glyph05158\n\t* glyph05159\n\t* glyph05160\n\t* glyph05161\n\t* glyph05163\n\t* glyph05164\n\t* glyph05165\n\t* glyph05167\n\t* glyph05168\n\t* glyph05171\n\t* glyph05172\n\t* glyph05173\n\t* glyph05175\n\t* glyph05176\n\t* glyph05177\n\t* glyph05178\n\t* glyph05179\n\t* glyph05180\n\t* glyph05181\n\t* glyph05182\n\t* glyph05183\n\t* glyph05184\n\t* glyph05187\n\t* glyph05188\n\t* glyph05191\n\t* glyph05192\n\t* glyph05193\n\t* glyph05194\n\t* glyph05196\n\t* glyph05197\n\t* glyph05198\n\t* glyph05199\n\t* glyph05202\n\t* glyph05203\n\t* glyph05204\n\t* glyph05205\n\t* glyph05206\n\t* glyph05209\n\t* glyph05210\n\t* glyph05211\n\t* glyph05212\n\t* glyph05213\n\t* glyph05214\n\t* glyph05215\n\t* glyph05217\n\t* glyph05218\n\t* glyph05219\n\t* glyph05220\n\t* glyph05221\n\t* glyph05223\n\t* glyph05224\n\t* glyph05225\n\t* glyph05227\n\t* glyph05228\n\t* glyph05229\n\t* glyph05230\n\t* glyph05232\n\t* glyph05233\n\t* glyph05235\n\t* glyph05236\n\t* glyph05237\n\t* glyph05238\n\t* glyph05239\n\t* glyph05240\n\t* glyph05241\n\t* glyph05242\n\t* glyph05243\n\t* glyph05244\n\t* glyph05245\n\t* glyph05246\n\t* glyph05247\n\t* glyph05248\n\t* glyph05249\n\t* glyph05250\n\t* glyph05251\n\t* glyph05252\n\t* glyph05254\n\t* glyph05255\n\t* glyph05256\n\t* glyph05257\n\t* glyph05258\n\t* glyph05259\n\t* glyph05260\n\t* glyph05261\n\t* glyph05262\n\t* glyph05263\n\t* glyph05264\n\t* glyph05265\n\t* glyph05266\n\t* glyph05267\n\t* glyph05269\n\t* glyph05271\n\t* glyph05272\n\t* glyph05273\n\t* glyph05274\n\t* glyph05275\n\t* glyph05276\n\t* glyph05277\n\t* glyph05278\n\t* glyph05279\n\t* glyph05280\n\t* glyph05281\n\t* glyph05282\n\t* glyph05283\n\t* glyph05284\n\t* glyph05285\n\t* glyph05286\n\t* glyph05287\n\t* glyph05288\n\t* glyph05289\n\t* glyph05290\n\t* glyph05291\n\t* glyph05292\n\t* glyph05293\n\t* glyph05294\n\t* glyph05295\n\t* glyph05296\n\t* glyph05297\n\t* glyph05298\n\t* glyph05299\n\t* glyph05300\n\t* glyph05301\n\t* glyph05302\n\t* glyph05303\n\t* glyph05304\n\t* glyph05305\n\t* glyph05306\n\t* glyph05307\n\t* glyph05308\n\t* glyph05309\n\t* glyph05310\n\t* glyph05311\n\t* glyph05312\n\t* glyph05313\n\t* glyph05314\n\t* glyph05315\n\t* glyph05316\n\t* glyph05317\n\t* glyph05318\n\t* glyph05319\n\t* glyph05320\n\t* glyph05321\n\t* glyph05322\n\t* glyph05323\n\t* glyph05324\n\t* glyph05325\n\t* glyph05326\n\t* glyph05327\n\t* glyph05328\n\t* glyph05329\n\t* glyph05330\n\t* glyph05331\n\t* glyph05332\n\t* glyph05333\n\t* glyph05334\n\t* glyph05335\n\t* glyph05336\n\t* glyph05337\n\t* glyph05338\n\t* glyph05339\n\t* glyph05340\n\t* glyph05341\n\t* glyph05342\n\t* glyph05343\n\t* glyph05344\n\t* glyph05345\n\t* glyph05346\n\t* glyph05347\n\t* glyph05348\n\t* glyph05349\n\t* glyph05350\n\t* glyph05351\n\t* glyph05352\n\t* glyph05353\n\t* glyph05354\n\t* glyph05355\n\t* glyph05356\n\t* glyph05357\n\t* glyph05358\n\t* glyph05359\n\t* glyph05360\n\t* glyph05361\n\t* glyph05362\n\t* glyph05363\n\t* glyph05364\n\t* glyph05365\n\t* glyph05366\n\t* glyph05367\n\t* glyph05368\n\t* glyph05369\n\t* glyph05370\n\t* glyph05371\n\t* glyph05372\n\t* glyph05373\n\t* glyph05374\n\t* glyph05375\n\t* glyph05376\n\t* glyph05377\n\t* glyph05378\n\t* glyph05379\n\t* glyph05380\n\t* glyph05381\n\t* glyph05382\n\t* glyph05383\n\t* glyph05386\n\t* glyph05387\n\t* glyph05388\n\t* glyph05390\n\t* glyph05391\n\t* glyph05392\n\t* glyph05393\n\t* glyph05394\n\t* glyph05395\n\t* glyph05396\n\t* glyph05397\n\t* glyph05398\n\t* glyph05399\n\t* glyph05400\n\t* glyph05401\n\t* glyph05402\n\t* glyph05403\n\t* glyph05404\n\t* glyph05405\n\t* glyph05406\n\t* glyph05407\n\t* glyph05408\n\t* glyph05409\n\t* glyph05410\n\t* glyph05411\n\t* glyph05412\n\t* glyph05413\n\t* glyph05414\n\t* glyph05415\n\t* glyph05416\n\t* glyph05418\n\t* glyph05419\n\t* glyph05420\n\t* glyph05421\n\t* glyph05422\n\t* glyph05423\n\t* glyph05424\n\t* glyph05425\n\t* glyph05426\n\t* glyph05427\n\t* glyph05428\n\t* glyph05429\n\t* glyph05430\n\t* glyph05431\n\t* glyph05432\n\t* glyph05433\n\t* glyph05434\n\t* glyph05435\n\t* glyph05436\n\t* glyph05437\n\t* glyph05438\n\t* glyph05439\n\t* glyph05440\n\t* glyph05441\n\t* glyph05442\n\t* glyph05443\n\t* glyph05444\n\t* glyph05445\n\t* glyph05446\n\t* glyph05447\n\t* glyph05448\n\t* glyph05449\n\t* glyph05450\n\t* glyph05451\n\t* glyph05452\n\t* glyph05453\n\t* glyph05454\n\t* glyph05455\n\t* glyph05456\n\t* glyph05457\n\t* glyph05461\n\t* glyph05462\n\t* glyph05463\n\t* glyph05464\n\t* glyph05465\n\t* glyph05466\n\t* glyph05467\n\t* glyph05468\n\t* glyph05469\n\t* glyph05470\n\t* glyph05471\n\t* glyph05472\n\t* glyph05473\n\t* glyph05474\n\t* glyph05475\n\t* glyph05476\n\t* glyph05478\n\t* glyph05479\n\t* glyph05480\n\t* glyph05481\n\t* glyph05482\n\t* glyph05483\n\t* glyph05484\n\t* glyph05485\n\t* glyph05486\n\t* glyph05487\n\t* glyph05488\n\t* glyph05489\n\t* glyph05490\n\t* glyph05491\n\t* glyph05492\n\t* glyph05493\n\t* glyph05494\n\t* glyph05495\n\t* glyph05496\n\t* glyph05497\n\t* glyph05498\n\t* glyph05499\n\t* glyph05500\n\t* glyph05501\n\t* glyph05502\n\t* glyph05503\n\t* glyph05504\n\t* glyph05505\n\t* glyph05506\n\t* glyph05507\n\t* glyph05508\n\t* glyph05509\n\t* glyph05510\n\t* glyph05511\n\t* glyph05512\n\t* glyph05513\n\t* glyph05514\n\t* glyph05515\n\t* glyph05516\n\t* glyph05517\n\t* glyph05518\n\t* glyph05519\n\t* glyph05521\n\t* glyph05522\n\t* glyph05523\n\t* glyph05524\n\t* glyph05525\n\t* glyph05526\n\t* glyph05527\n\t* glyph05528\n\t* glyph05529\n\t* glyph05531\n\t* glyph05532\n\t* glyph05534\n\t* glyph05535\n\t* glyph05536\n\t* glyph05537\n\t* glyph05538\n\t* glyph05539\n\t* glyph05541\n\t* glyph05546\n\t* glyph05547\n\t* glyph05548\n\t* glyph05549\n\t* glyph05550\n\t* glyph05551\n\t* glyph05552\n\t* glyph05553\n\t* glyph05555\n\t* glyph05556\n\t* glyph05557\n\t* glyph05558\n\t* glyph05559\n\t* glyph05561\n\t* glyph05562\n\t* glyph05563\n\t* glyph05564\n\t* glyph05565\n\t* glyph05566\n\t* glyph05567\n\t* glyph05568\n\t* glyph05569\n\t* glyph05570\n\t* glyph05571\n\t* glyph05572\n\t* glyph05573\n\t* glyph05574\n\t* glyph05576\n\t* glyph05577\n\t* glyph05578\n\t* glyph05579\n\t* glyph05580\n\t* glyph05581\n\t* glyph05582\n\t* glyph05584\n\t* glyph05585\n\t* glyph05586\n\t* glyph05587\n\t* glyph05588\n\t* glyph05590\n\t* glyph05591\n\t* glyph05592\n\t* glyph05593\n\t* glyph05594\n\t* glyph05595\n\t* glyph05596\n\t* glyph05597\n\t* glyph05598\n\t* glyph05599\n\t* glyph05601\n\t* glyph05603\n\t* glyph05605\n\t* glyph05606\n\t* glyph05607\n\t* glyph05609\n\t* glyph05610\n\t* glyph05611\n\t* glyph05612\n\t* glyph05616\n\t* glyph05619\n\t* glyph05620\n\t* glyph05621\n\t* glyph05622\n\t* glyph05623\n\t* glyph05624\n\t* glyph05625\n\t* glyph05626\n\t* glyph05627\n\t* glyph05628\n\t* glyph05629\n\t* glyph05630\n\t* glyph05631\n\t* glyph05632\n\t* glyph05634\n\t* glyph05635\n\t* glyph05636\n\t* glyph05638\n\t* glyph05639\n\t* glyph05640\n\t* glyph05641\n\t* glyph05642\n\t* glyph05643\n\t* glyph05644\n\t* glyph05645\n\t* glyph05646\n\t* glyph05647\n\t* glyph05648\n\t* glyph05649\n\t* glyph05650\n\t* glyph05651\n\t* glyph05652\n\t* glyph05653\n\t* glyph05654\n\t* glyph05655\n\t* glyph05656\n\t* glyph05657\n\t* glyph05658\n\t* glyph05659\n\t* glyph05660\n\t* glyph05661\n\t* glyph05662\n\t* glyph05663\n\t* glyph05664\n\t* glyph05665\n\t* glyph05666\n\t* glyph05667\n\t* glyph05668\n\t* glyph05669\n\t* glyph05671\n\t* glyph05672\n\t* glyph05673\n\t* glyph05674\n\t* glyph05679\n\t* glyph05680\n\t* glyph05681\n\t* glyph05682\n\t* glyph05683\n\t* glyph05684\n\t* glyph05685\n\t* glyph05686\n\t* glyph05688\n\t* glyph05689\n\t* glyph05690\n\t* glyph05691\n\t* glyph05692\n\t* glyph05693\n\t* glyph05694\n\t* glyph05696\n\t* glyph05697\n\t* glyph05698\n\t* glyph05699\n\t* glyph05700\n\t* glyph05702\n\t* glyph05704\n\t* glyph05705\n\t* glyph05708\n\t* glyph05709\n\t* glyph05710\n\t* glyph05712\n\t* glyph05713\n\t* glyph05714\n\t* glyph05715\n\t* glyph05716\n\t* glyph05717\n\t* glyph05718\n\t* glyph05719\n\t* glyph05720\n\t* glyph05721\n\t* glyph05722\n\t* glyph05723\n\t* glyph05724\n\t* glyph05725\n\t* glyph05726\n\t* glyph05727\n\t* glyph05728\n\t* glyph05729\n\t* glyph05730\n\t* glyph05731\n\t* glyph05732\n\t* glyph05733\n\t* glyph05734\n\t* glyph05735\n\t* glyph05736\n\t* glyph05737\n\t* glyph05738\n\t* glyph05739\n\t* glyph05740\n\t* glyph05741\n\t* glyph05742\n\t* glyph05744\n\t* glyph05745\n\t* glyph05746\n\t* glyph05748\n\t* glyph05749\n\t* glyph05750\n\t* glyph05751\n\t* glyph05753\n\t* glyph05754\n\t* glyph05755\n\t* glyph05756\n\t* glyph05757\n\t* glyph05758\n\t* glyph05759\n\t* glyph05760\n\t* glyph05761\n\t* glyph05762\n\t* glyph05763\n\t* glyph05765\n\t* glyph05767\n\t* glyph05768\n\t* glyph05769\n\t* glyph05770\n\t* glyph05772\n\t* glyph05774\n\t* glyph05775\n\t* glyph05776\n\t* glyph05777\n\t* glyph05778\n\t* glyph05779\n\t* glyph05780\n\t* glyph05781\n\t* glyph05782\n\t* glyph05783\n\t* glyph05784\n\t* glyph05785\n\t* glyph05786\n\t* glyph05787\n\t* glyph05788\n\t* glyph05789\n\t* glyph05790\n\t* glyph05791\n\t* glyph05792\n\t* glyph05793\n\t* glyph05794\n\t* glyph05796\n\t* glyph05797\n\t* glyph05798\n\t* glyph05799\n\t* glyph05800\n\t* glyph05801\n\t* glyph05802\n\t* glyph05803\n\t* glyph05804\n\t* glyph05805\n\t* glyph05806\n\t* glyph05807\n\t* glyph05808\n\t* glyph05809\n\t* glyph05810\n\t* glyph05811\n\t* glyph05813\n\t* glyph05814\n\t* glyph05815\n\t* glyph05816\n\t* glyph05817\n\t* glyph05818\n\t* glyph05819\n\t* glyph05820\n\t* glyph05821\n\t* glyph05822\n\t* glyph05823\n\t* glyph05824\n\t* glyph05825\n\t* glyph05826\n\t* glyph05827\n\t* glyph05828\n\t* glyph05829\n\t* glyph05830\n\t* glyph05831\n\t* glyph05832\n\t* glyph05833\n\t* glyph05834\n\t* glyph05835\n\t* glyph05836\n\t* glyph05837\n\t* glyph05838\n\t* glyph05839\n\t* glyph05840\n\t* glyph05841\n\t* glyph05842\n\t* glyph05843\n\t* glyph05844\n\t* glyph05845\n\t* glyph05846\n\t* glyph05847\n\t* glyph05848\n\t* glyph05849\n\t* glyph05850\n\t* glyph05851\n\t* glyph05852\n\t* glyph05853\n\t* glyph05854\n\t* glyph05855\n\t* glyph05856\n\t* glyph05857\n\t* glyph05858\n\t* glyph05860\n\t* glyph05861\n\t* glyph05863\n\t* glyph05865\n\t* glyph05866\n\t* glyph05868\n\t* glyph05869\n\t* glyph05870\n\t* glyph05871\n\t* glyph05872\n\t* glyph05873\n\t* glyph05874\n\t* glyph05875\n\t* glyph05876\n\t* glyph05878\n\t* glyph05879\n\t* glyph05880\n\t* glyph05881\n\t* glyph05882\n\t* glyph05883\n\t* glyph05884\n\t* glyph05885\n\t* glyph05886\n\t* glyph05887\n\t* glyph05888\n\t* glyph05889\n\t* glyph05890\n\t* glyph05891\n\t* glyph05892\n\t* glyph05893\n\t* glyph05895\n\t* glyph05896\n\t* glyph05897\n\t* glyph05899\n\t* glyph05901\n\t* glyph05902\n\t* glyph05903\n\t* glyph05904\n\t* glyph05905\n\t* glyph05906\n\t* glyph05907\n\t* glyph05908\n\t* glyph05909\n\t* glyph05910\n\t* glyph05911\n\t* glyph05912\n\t* glyph05913\n\t* glyph05914\n\t* glyph05915\n\t* glyph05916\n\t* glyph05917\n\t* glyph05918\n\t* glyph05919\n\t* glyph05920\n\t* glyph05921\n\t* glyph05922\n\t* glyph05923\n\t* glyph05924\n\t* glyph05925\n\t* glyph05926\n\t* glyph05927\n\t* glyph05928\n\t* glyph05929\n\t* glyph05930\n\t* glyph05931\n\t* glyph05932\n\t* glyph05933\n\t* glyph05934\n\t* glyph05935\n\t* glyph05936\n\t* glyph05937\n\t* glyph05938\n\t* glyph05939\n\t* glyph05940\n\t* glyph05941\n\t* glyph05942\n\t* glyph05943\n\t* glyph05944\n\t* glyph05945\n\t* glyph05946\n\t* glyph05947\n\t* glyph05948\n\t* glyph05949\n\t* glyph05950\n\t* glyph05951\n\t* glyph05952\n\t* glyph05953\n\t* glyph05954\n\t* glyph05955\n\t* glyph05956\n\t* glyph05957\n\t* glyph05958\n\t* glyph05959\n\t* glyph05960\n\t* glyph05961\n\t* glyph05962\n\t* glyph05963\n\t* glyph05964\n\t* glyph05965\n\t* glyph05966\n\t* glyph05967\n\t* glyph05968\n\t* glyph05969\n\t* glyph05970\n\t* glyph05971\n\t* glyph05972\n\t* glyph05973\n\t* glyph06448\n\t* glyph06462\n\t* glyph06463\n\t* glyph06464\n\t* glyph06466\n\t* glyph06467\n\t* glyph06469 and glyph06470",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "result": "WARN"
                },
                {
                    "description": "Checking direction of slnt axis angles",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/slant_direction>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The 'slnt' axis values are defined as negative values for a clockwise (right)\n        lean, and positive values for counter-clockwise lean. This is counter-intuitive\n        for many designers who are used to think of a positive slant as a lean to\n        the right.\n\n        This check ensures that the slant axis direction is consistent with the specs.\n\n        https://docs.microsoft.com/en-us/typography/opentype/spec/dvaraxistag_slnt\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check font names are correct",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/font_names>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font names are good:\n\n| nameID | current | expected |\n| :--- | :--- | :--- |\n| Family Name | Amiri | Amiri |\n| Subfamily Name | Bold | Bold |\n| Full Name | Amiri Bold | Amiri Bold |\n| Poscript Name | Amiri-Bold | Amiri-Bold |",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Google Fonts has several rules which need to be adhered to when\n        setting a font's name table. Please read:\n        https://googlefonts.github.io/gf-guide/statics.html#supported-styles\n        https://googlefonts.github.io/gf-guide/statics.html#style-linking\n        https://googlefonts.github.io/gf-guide/statics.html#unsupported-styles\n        https://googlefonts.github.io/gf-guide/statics.html#single-weight-families\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Copyright field for this font on METADATA.pb matches all copyright notice entries on the name table ?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/nameid/copyright>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Copyright field for this font on METADATA.pb matches copyright notice entries on the name table.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Font has all mandatory 'name' table entries?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/mandatory_entries>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font contains values for all mandatory name table entries.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Length of copyright notice must not exceed 500 characters.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/copyright_length>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "All copyright notice name entries on the 'name' table are shorter than 500 characters.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This is an arbitrary max length for the copyright notice field of the name\n        table. We simply don't want such notices to be too long. Typically such notices\n        are actually much shorter than this with a length of roughly 70 or 80\n        characters.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check for font-v versioning.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/fontv>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Version string is: \"Version 1.000\"\nThe version string must ideally include a git commit hash and either a \"dev\" or a \"release\" suffix such as in the example below:\n\"Version 1.3; git-0d08353-release\" [code: bad-format]",
                            "status": "INFO",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The git sha1 tagging and dev/release features of Source Foundry `font-v` tool\n        are awesome and we would love to consider upstreaming the approach into\n        fontmake someday. For now we only emit an INFO if a given font does not yet\n        follow the experimental versioning style, but at some point we may start\n        enforcing it.\n    ",
                    "result": "INFO"
                },
                {
                    "description": "Check glyphs do not have components which are themselves components.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/glyf_nested_components>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Glyphs do not contain nested components.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        There have been bugs rendering variable fonts with nested components.\n        Additionally, some static fonts with nested components have been reported\n        to have rendering and printing issues.\n\n        For more info, see:\n        * https://github.com/fonttools/fontbakery/issues/2961\n        * https://github.com/arrowtype/recursive/issues/412\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check a static ttf can be generated from a variable font.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/generate_static>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Google Fonts may serve static fonts which have been generated from variable\n        fonts. This test will attempt to generate a static ttf using fontTool's\n        varLib mutator.\n\n        The target font will be the mean of each axis e.g:\n\n        ## VF font axes\n\n        - min weight, max weight = 400, 800\n\n        - min width, max width = 50, 100\n\n        ## Target Instance\n\n        - weight = 600\n\n        - width = 75\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check that variable fonts have an HVAR table.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/has_HVAR>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Not having a HVAR table can lead to costly text-layout operations on some\n        platforms, which we want to avoid.\n\n        So, all variable fonts on the Google Fonts collection should have an HVAR\n        with valid values.\n\n        More info on the HVAR table can be found at:\n        https://docs.microsoft.com/en-us/typography/opentype/spec/otvaroverview#variation-data-tables-and-miscellaneous-requirements\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Font enables smart dropout control in \"prep\" table instructions?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/smart_dropout>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "'prep' table contains instructions enabling smart dropout control.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This setup is meant to ensure consistent rendering quality for fonts across\n        all devices (with different rendering/hinting capabilities).\n\n        Below is the snippet of instructions we expect to see in the fonts:\n        B8 01 FF    PUSHW 0x01FF\n        85          SCANCTRL (unconditinally turn on\n                              dropout control mode)\n        B0 04       PUSHB 0x04\n        8D          SCANTYPE (enable smart dropout control)\n\n        \"Smart dropout control\" means activating rules 1, 2 and 5:\n        Rule 1: If a pixel's center falls within the glyph outline,\n                that pixel is turned on.\n        Rule 2: If a contour falls exactly on a pixel's center,\n                that pixel is turned on.\n        Rule 5: If a scan line between two adjacent pixel centers\n                (either vertical or horizontal) is intersected\n                by both an on-Transition contour and an off-Transition\n                contour and neither of the pixels was already turned on\n                by rules 1 and 2, turn on the pixel which is closer to\n                the midpoint between the on-Transition contour and\n                off-Transition contour. This is \"Smart\" dropout control.\n\n        For more detailed info (such as other rules not enabled in this snippet),\n        please refer to the TrueType Instruction Set documentation.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "There must not be VTT Talk sources in the font.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/vttclean>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "There are no tables with VTT Talk sources embedded in the font.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The goal here is to reduce filesizes and improve pageloading when dealing\n        with webfonts.\n\n        The VTT Talk sources are not necessary at runtime and endup being just dead\n        weight when left embedded in the font binaries. The sources should be kept on\n        the project files but stripped out when building release binaries.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Are there unwanted Apple tables?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/aat>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "There are no unwanted AAT tables.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Apple's TrueType reference manual [1] describes SFNT tables not in the\n        Microsoft OpenType specification [2] and these can sometimes sneak into final\n        release files, but Google Fonts should only have OpenType tables.\n\n        [1] https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6.html\n        [2] https://docs.microsoft.com/en-us/typography/opentype/spec/\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check a font's STAT table contains compulsory Axis Values.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/STAT>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check a font's STAT table contains compulsory Axis Values which exist\n        in the Google Fonts Axis Registry.\n\n        We cannot determine what Axis Values the user will set for axes such as\n        opsz, GRAD since these axes are unique for each font so we'll skip them.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check variable font instances",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/fvar_instances>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check a font's fvar instance coordinates comply with our guidelines:\n        https://googlefonts.github.io/gf-guide/variable.html#fvar-instances\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "All name entries referenced by fvar instances exist on the name table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/fvar_name_entries>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The purpose of this check is to make sure that all name entries referenced\n        by variable font instances do exist in the name table.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "PPEM must be an integer on hinted fonts.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/integer_ppem_if_hinted>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_hinted",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Hinted fonts must have head table flag bit 3 set.\n\n        Per https://docs.microsoft.com/en-us/typography/opentype/spec/head,\n        bit 3 of Head::flags decides whether PPEM should be rounded. This bit should\n        always be set for hinted fonts.\n\n        Note:\n        Bit 3 = Force ppem to integer values for all internal scaler math;\n                May use fractional ppem sizes if this bit is clear;\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Are there caret positions declared for every ligature?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/ligature_carets>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Looks good!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        All ligatures in a font must have corresponding caret (text cursor) positions\n        defined in the GDEF table, otherwhise, users may experience issues with\n        caret rendering.\n\n        If using GlyphsApp or UFOs, ligature carets can be defined as anchors with\n        names starting with 'caret_'. These can be compiled with fontmake as of\n        version v2.4.0.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Is there kerning info for non-ligated sequences?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/kerning_for_non_ligated_sequences>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "GPOS table lacks kerning info for the following non-ligated sequences:\n\n\t- f + f\n\n\t- f + b\n\n\t- b + f\n\n\t- f + h\n\n\t- h + f\n\n\t- f + i\n\n\t- i + f\n\n\t- f + j\n\n\t- j + f\n\n\t- f + k\n\n\t- k + f\n\n\t- f + l\n\n\t- l + b\n\n\t- h + i\n\n\t- i + j\n\n\t- j + k\n\n\t- k + l [code: lacks-kern-info]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Fonts with ligatures should have kerning on the corresponding non-ligated\n        sequences for text where ligatures aren't used\n        (eg https://github.com/impallari/Raleway/issues/14).\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Combined length of family and style must not exceed 27 characters.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/family_and_style_max_length>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "All name entries are good.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to a GlyphsApp tutorial [1], in order to make sure all versions of\n        Windows recognize it as a valid font file, we must make sure that the\n        concatenated length of the familyname (NameID.FONT_FAMILY_NAME) and\n        style (NameID.FONT_SUBFAMILY_NAME) strings in the name table do not\n        exceed 20 characters.\n\n        After discussing the problem in more detail at FontBakery issue #2179 [2] we\n        decided that allowing up to 27 chars would still be on the safe side, though.\n\n        [1] https://glyphsapp.com/tutorials/multiple-masters-part-3-setting-up-instances\n        [2] https://github.com/fonttools/fontbakery/issues/2179\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Name table entries should not contain line-breaks.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/line_breaks>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Name table entries are all single-line (no line-breaks found).",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        There are some entries on the name table that may include more than one line\n        of text. The Google Fonts team, though, prefers to keep the name table entries\n        short and simple without line breaks.\n\n        For instance, some designers like to include the full text of a font license in\n        the \"copyright notice\" entry, but for the GFonts collection this entry should\n        only mention year, author and other basic info in a manner enforced by\n        com.google.fonts/check/font_copyright\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Name table strings must not contain the string 'Reserved Font Name'.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/rfn>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "None of the name table strings contain \"Reserved Font Name\".",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Some designers adopt the \"Reserved Font Name\" clause of the OFL license. This\n        means that the original author reserves the rights to the family name and other\n        people can only distribute modified versions using a different family name.\n\n        Google Fonts published updates to the fonts in the collection in order to fix\n        issues and/or implement further improvements to the fonts. It is important to\n        keep the family name so that users of the webfonts can benefit from the updates.\n        Since it would forbid such usage scenario, all families in the GFonts collection\n        are required to not adopt the RFN clause.\n\n        This check ensures \"Reserved Font Name\" is not mentioned in the name table.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check family name for GF Guide compliance.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/family_name_compliance>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font name looks good.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Checks the family name for compliance with the Google Fonts Guide.\n        https://googlefonts.github.io/gf-guide/onboarding.html#new-fonts\n\n        If you want to have your family name added to the CamelCase\n        exceptions list, please submit a pull request to the\n        camelcased_familyname_exceptions.txt file.\n\n        Similarly, abbreviations can be submitted to the\n        abbreviations_familyname_exceptions.txt file.\n\n        These are located in the Lib/fontbakery/data/googlefonts/ directory\n        of the FontBakery source code currently hosted at\n        https://github.com/fonttools/fontbakery/\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Directory name in GFonts repo structure must match NameID 1 of the regular.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/repo/dirname_matches_nameid_1>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "A static fonts directory with at least two fonts must accompany variable fonts",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/repo/vf_has_static_fonts>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Please consider adding a subdirectory called \"static/\" and including in it static font files. [code: missing]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Variable font family directories kept in the google/fonts git repo may include\n        a static/ subdir containing static fonts.\n\n        These files are meant to be served for users that still lack support for\n        variable fonts in their web browsers.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "A font repository should not include FontBakery report files",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/repo/fb_report>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        A FontBakery report is ephemeral and so should be used for posting issues on a\n        bug-tracker instead of being hosted in the font project repository.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check upstream.yaml file contains all required fields",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/repo/upstream_yaml_has_required_fields>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: upstream_yaml",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        If a family has been pushed using the gftools packager, we must check that all\n        the required fields in the upstream.yaml file have been populated.\n    ",
                    "result": "SKIP",
                    "severity": 10
                },
                {
                    "description": "A font repository should not include ZIP files",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/repo/zip_files>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Sometimes people check in ZIPs into their font project repositories. While we\n        accept the practice of checking in binaries, we believe that a ZIP is a step\n        too far ;)\n\n        Note: a source purist position is that only source files and build scripts\n        should be checked in.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check font follows the Google Fonts vertical metric schema",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/vertical_metrics>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: not remote_styles",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This check generally enforces Google Fonts\u2019 vertical metrics specifications.\n        In particular:\n        * lineGap must be 0\n        * Sum of hhea ascender + abs(descender) + linegap must be\n          between 120% and 200% of UPM\n        * Warning if sum is over 150% of UPM\n\n        The threshold levels 150% (WARN) and 200% (FAIL) are somewhat arbitrarily chosen\n        and may hint at a glaring mistake in the metrics calculations or UPM settings.\n\n        Our documentation includes further information:\n        https://github.com/googlefonts/gf-docs/tree/main/VerticalMetrics\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check if the vertical metrics of a family are similar to the same family hosted on Google Fonts.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/vertical_metrics_regressions>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Vertical metrics have not regressed.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        If the family already exists on Google Fonts, we need to ensure that the\n        checked family's vertical metrics are similar. This check will test the\n        following schema which was outlined in Font Bakery issue #1162 [1]:\n\n        - The family should visually have the same vertical metrics as the Regular\n          style hosted on Google Fonts.\n\n        - If the family on Google Fonts has differing hhea and typo metrics, the family\n          being checked should use the typo metrics for both the hhea and typo entries.\n\n        - If the family on Google Fonts has use typo metrics not enabled and the family\n          being checked has it enabled, the hhea and typo metrics should use the family\n          on Google Fonts winAscent and winDescent values.\n\n        - If the upms differ, the values must be scaled so the visual appearance is\n          the same.\n\n        [1] https://github.com/fonttools/fontbakery/issues/1162\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check font follows the Google Fonts CJK vertical metric schema",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/cjk_vertical_metrics>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_cjk_font, not remote_styles",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        CJK fonts have different vertical metrics when compared to Latin fonts.\n        We follow the schema developed by dr Ken Lunde for Source Han Sans and\n        the Noto CJK fonts.\n\n        Our documentation includes further information:\n        https://github.com/googlefonts/gf-docs/tree/main/Spec#cjk-vertical-metrics\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check if the vertical metrics of a CJK family are similar to the same family hosted on Google Fonts.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/cjk_vertical_metrics_regressions>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_cjk_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check CJK family has the same vertical metrics as the same family\n        hosted on Google Fonts.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Does the font contain less than 150 CJK characters?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/cjk_not_enough_glyphs>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_claiming_to_be_cjk_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Kana has 150 characters and it's the smallest CJK writing system.\n\n        If a font contains less CJK glyphs than this writing system, we inform the\n        user that some glyphs may be encoded incorrectly.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check variable font instances don't have duplicate names",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont_duplicate_instance_names>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This check's purpose is to detect duplicate named instances names in a\n        given variable font.\n        Repeating instance names may be the result of instances for several VF axes\n        defined in `fvar`, but since currently only weight+italic tokens are allowed\n        in instance names as per GF specs, they ended up repeating.\n        Instead, only a base set of fonts for the most default representation of the\n        family can be defined through instances in the `fvar` table, all other\n        instances will have to be left to access through the `STAT` table.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Ensure VFs do not contain the ital axis.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/unsupported_axes>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The 'ital' axis is not supported yet in Google Chrome.\n\n        For the time being, we need to ensure that VFs do not contain this axis.\n        Once browser support is better, we can deprecate this check.\n\n        For more info regarding browser support, see:\n        https://arrowtype.github.io/vf-slnt-test/\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Ensure VFs with duplexed axes do not vary horizontal advance.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/duplexed_axis_reflow>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Certain axes, such as grade (GRAD) or roundness (ROND), should not\n        change any advanceWidth or kerning data across the font's design space.\n        This is because altering the advance width of glyphs can cause text reflow.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validate METADATA.pb axes values are within gf_axisregistry bounds.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/gf_axisregistry_bounds>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Each axis range in a METADATA.pb file must be registered, and within the bounds\n        of the axis definition in the Google Fonts Axis Registry, available at\n        https://github.com/google/fonts/tree/main/axisregistry\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validate METADATA.pb axes tags are defined in gf_axisregistry.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/gf_axisregistry_valid_tags>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Ensure all axes in a METADATA.pb file are registered in the\n        Google Fonts Axis Registry, available at\n        https://github.com/google/fonts/tree/main/axisregistry\n\n        Why does Google Fonts have its own Axis Registry?\n\n        We support a superset of the OpenType axis registry axis set, and use\n        additional metadata for each axis. Axes present in a font file but not in this\n        registry will not function via our API. No variable font is expected to\n        support all of the axes here.\n\n        Any font foundry or distributor library that offers variable fonts has a\n        implicit, latent, de-facto axis registry, which can be extracted by scanning\n        the library for axes' tags, labels, and min/def/max values. While in 2016\n        Microsoft originally offered to include more axes in the OpenType 1.8\n        specification (github.com/microsoft/OpenTypeDesignVariationAxisTags), as of\n        August 2020, this effort has stalled. We hope more foundries and distributors\n        will publish documents like this that make their axes explicit, to encourage\n        of adoption of variable fonts throughout the industry, and provide source\n        material for a future update to the OpenType specification's axis registry.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validate defaults on fvar table match registered fallback names in GFAxisRegistry.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/gf_axisregistry/fvar_axis_defaults>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check that axis defaults have a corresponding fallback name registered at the\n        Google Fonts Axis Registry, available at\n        https://github.com/google/fonts/tree/main/axisregistry\n\n        This is necessary for the following reasons:\n\n        To get ZIP files downloads on Google Fonts to be accurate \u2014 otherwise the\n        chosen default font is not generated. The Newsreader family, for instance, has\n        a default value on the 'opsz' axis of 16pt. If 16pt was not a registered\n        fallback position, then the ZIP file would instead include another position\n        as default (such as 14pt).\n\n        For the Variable fonts to display the correct location on the specimen page.\n\n        For VF with no weight axis to be displayed at all. For instance, Ballet, which\n        has no weight axis, was not appearing in sandbox because default position on\n        'opsz' axis was 16pt, and it was not yet a registered fallback positon.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validate STAT particle names and values match the fallback names in GFAxisRegistry.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/STAT/gf_axisregistry>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check that particle names and values on STAT table match the fallback names\n        in each axis entry at the Google Fonts Axis Registry, available at\n        https://github.com/google/fonts/tree/main/axisregistry\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validate VF axes match the ones declared on METADATA.pb.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/consistent_axis_enumeration>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        All font variation axes present in the font files must be properly declared\n        on METADATA.pb so that they can be served by the GFonts API.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Ensure METADATA.pb does not use escaped strings.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/escaped_strings>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        In some cases we've seen designer names and other fields with escaped strings\n        in METADATA files. Nowadays the strings can be full unicode strings and\n        do not need escaping.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Designers are listed correctly on the Google Fonts catalog?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/designer_profiles>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Google Fonts has a catalog of designers.\n\n        This check ensures that the online entries of the catalog can be found based\n        on the designer names listed on the METADATA.pb file.\n\n        It also validates the URLs and file formats are all correctly set.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Ensure variable fonts include an avar table.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/mandatory_avar_table>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Most variable fonts should include an avar table to correctly define\n        axes progression rates.\n\n        For example, a weight axis from 0% to 100% doesn't map directly to 100 to 1000,\n        because a 10% progression from 0% may be too much to define the 200,\n        while 90% may be too little to define the 900.\n\n        If the progression rates of axes is linear, this check can be ignored.\n        Fontmake will also skip adding an avar table if the progression rates\n        are linear. However, we still recommend designers visually proof each\n        instance is at the expected weight, width etc.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "On a family update, the DESCRIPTION.en_us.html file should ideally also be updated.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/description/family_update>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The DESCRIPTION.en_us.html file in this family has not changed in comparison to the latest font release on the google/fonts github repo.\nPlease consider mentioning note-worthy improvements made to the family recently. [code: description-not-updated]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        We want to ensure that any significant changes to the font family are\n        properly mentioned in the DESCRIPTION file.\n\n        In general, it means that the contents of the DESCRIPTION.en_us.html file\n        will typically change if when font files are updated. Please treat this check\n        as a reminder to do so whenever appropriate!\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Check small caps glyphs are available.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/missing_small_caps_glyphs>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Ensure small caps glyphs are available if\n        a font declares smcp or c2sc OT features.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Ensure Stylistic Sets have description.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/stylisticset_description>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Stylistic sets should provide description text. Programs such as InDesign,\n        TextEdit and Inkscape use that info to display to the users so that they know\n        what a given stylistic set offers.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "OS/2.fsSelection bit 7 (USE_TYPO_METRICS) is set in all fonts.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/os2/use_typo_metrics>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        All fonts on the Google Fonts collection should have OS/2.fsSelection bit 7\n        (USE_TYPO_METRICS) set. This requirement is part of the vertical metrics scheme\n        established as a Google Fonts policy aiming at a common ground supported by\n        all major font rendering environments.\n\n        For more details, read:\n        https://github.com/googlefonts/gf-docs/blob/main/VerticalMetrics/README.md\n\n        Below is the portion of that document that is most relevant to this check:\n\n        Use_Typo_Metrics must be enabled. This will force MS Applications to use the\n        OS/2 Typo values instead of the Win values. By doing this, we can freely set\n        the Win values to avoid clipping and control the line height with the typo\n        values. It has the added benefit of future line height compatibility. When\n        a new script is added, we simply change the Win values to the new yMin\n        and yMax, without needing to worry if the line height have changed.\n    ",
                    "result": "PASS",
                    "severity": 10
                },
                {
                    "description": "Ensure fonts have ScriptLangTags declared on the 'meta' table.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/meta/script_lang_tags>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "This font file does not have a 'meta' table. [code: lacks-meta-table]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The OpenType 'meta' table originated at Apple. Microsoft added it to OT with\n        just two DataMap records:\n\n        - dlng: comma-separated ScriptLangTags that indicate which scripts,\n          or languages and scripts, with possible variants, the font is designed for.\n\n        - slng: comma-separated ScriptLangTags that indicate which scripts,\n          or languages and scripts, with possible variants, the font supports.\n\n\n        The slng structure is intended to describe which languages and scripts the\n        font overall supports. For example, a Traditional Chinese font that also\n        contains Latin characters, can indicate Hant,Latn, showing that it supports\n        Hant, the Traditional Chinese variant of the Hani script, and it also\n        supports the Latn script.\n\n        The dlng structure is far more interesting. A font may contain various glyphs,\n        but only a particular subset of the glyphs may be truly \"leading\" in the design,\n        while other glyphs may have been included for technical reasons. Such a\n        Traditional Chinese font could only list Hant there, showing that it\u2019s designed\n        for Traditional Chinese, but the font would omit Latn, because the developers\n        don\u2019t think the font is really recommended for purely Latin-script use.\n\n        The tags used in the structures can comprise just script, or also language\n        and script. For example, if a font has Bulgarian Cyrillic alternates in the\n        locl feature for the cyrl BGR OT languagesystem, it could also indicate in\n        dlng explicitly that it supports bul-Cyrl. (Note that the scripts and languages\n        in meta use the ISO language and script codes, not the OpenType ones).\n\n        This check ensures that the font has the meta table containing the\n        slng and dlng structures.\n\n        All families in the Google Fonts collection should contain the 'meta' table.\n        Windows 10 already uses it when deciding on which fonts to fall back to.\n        The Google Fonts API and also other environments could use the data for\n        smarter filtering. Most importantly, those entries should be added\n        to the Noto fonts.\n\n        In the font making process, some environments store this data in external\n        files already. But the meta table provides a convenient way to store this\n        inside the font file, so some tools may add the data, and unrelated tools\n        may read this data. This makes the solution much more portable and universal.\n    ",
                    "result": "WARN",
                    "severity": 3
                },
                {
                    "description": "Ensure fonts do not contain any pre-production tables.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/no_debugging_tables>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Tables such as `Debg` are useful in the pre-production stages of font\n        development, but add unnecessary bloat to a production font and should\n        be removed before release.\n    ",
                    "result": "PASS",
                    "severity": 6
                },
                {
                    "description": "Check font family directory name.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/family_directory_name>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Directory name is \"amiri\", as expected.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        We want the directory name of a font family to be predictable and directly\n        derived from the family name, all lowercased and removing spaces.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check font can render its own name.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/render_own_name>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font can successfully render its own name (Amiri)",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        A base expectation is that a font family's regular/default (400 roman) style\n        can render its 'menu name' (nameID 1) in itself.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check samples can be rendered.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/can_render_samples>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        In order to prevent tofu from being seen on fonts.google.com, this check\n        verifies that all samples specified by METADATA.pb can be properly\n        rendered by the font.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check if category on METADATA.pb matches what can be inferred from the family name.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/category_hints>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Sometimes the font familyname contains words that hint at which is the most\n        likely correct category to be declared on METADATA.pb\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check font has the expected color font tables.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/colorfont_tables>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Looks Good!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        COLR v0 fonts are widely supported in most browsers so they do not require\n        an SVG color table. However, some environments (e.g. Safari, Adobe apps)\n        do not currently support COLR v1 so we need to add an SVG table to these fonts,\n        except in the case of variable fonts, since SVG does not support\n        OpenType Variations.\n\n        To automatically generate compatible SVG/COLR tables,\n        run the maximum_color tool in nanoemoji:\n        https://github.com/googlefonts/nanoemoji\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Color layers should have a minimum brightness",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/color_cpal_brightness>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Looks good!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Layers of a COLRv0 font should not be too dark or too bright. When layer colors\n        are set explicitly, they can't be changed and they may turn out illegible\n        against dark or bright backgrounds.\n\n        While traditional color-less fonts can be colored in design apps or CSS, a\n        black color definition in a COLRv0 font actually means that that layer will be\n        rendered in black regardless of the background color. This leads to text\n        becoming invisible against a dark background, for instance when using a dark\n        theme in a web browser or operating system.\n\n        This check ensures that layer colors are at least 10% bright and at most 90%\n        bright, when not already set to the current color (0xFFFF).\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Put an empty glyph on GID 1 right after the .notdef glyph for COLRv0 fonts.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/empty_glyph_on_gid1_for_colrv0>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Looks good!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        A rendering bug in Windows 10 paints whichever glyph is on GID 1 on top of\n        some glyphs, colored or not. This only occurs for COLR version 0 fonts.\n\n        Having a glyph with no contours on GID 1 is a practical workaround for that.\n\n        See https://github.com/googlefonts/gftools/issues/609\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Noto fonts must have an ARTICLE.en_us.html file",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/description/noto_has_article>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_noto",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Noto fonts are displayed in a different way on the fonts.google.com\n         web site, and so must also contain an article about them.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Checking file is named canonically.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/canonical_filename>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font filename is correct, \"Amiri-BoldItalic.ttf\".",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        A font's filename must be composed as \"<familyname>-<stylename>.ttf\":\n\n        - Nunito-Regular.ttf\n\n        - Oswald-BoldItalic.ttf\n\n\n        Variable fonts must list the axis tags in alphabetical order in\n        square brackets and separated by commas:\n\n        - Roboto[wdth,wght].ttf\n\n        - Familyname-Italic[wght].ttf\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Does DESCRIPTION file contain broken links?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/description/broken_links>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "All links in the DESCRIPTION file look good!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The snippet of HTML in the DESCRIPTION.en_us.html file is added to the font\n        family webpage on the Google Fonts website. For that reason, all hyperlinks\n        in it must be properly working.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "URLs on DESCRIPTION file must not display http(s) prefix.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/description/urls>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "All good!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The snippet of HTML in the DESCRIPTION.en_us.html file is added to the font\n        family webpage on the Google Fonts website.\n\n        Google Fonts has a content formatting policy for that snippet that expects the\n        text content of links not to include the http:// or https:// prefixes.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Does DESCRIPTION file contain a upstream Git repo URL?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/description/git_url>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Found a git repo URL: https://github.com/aliftype/amiri [code: url-found]",
                            "status": "INFO",
                            "traceback": null
                        },
                        {
                            "message": "Looks great!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The contents of the DESCRIPTION.en-us.html file are displayed on the\n        Google Fonts website in the about section of each font family specimen page.\n\n        Since all of the Google Fonts collection is composed of libre-licensed fonts,\n        this check enforces a policy that there must be a hypertext link in that page\n        directing users to the repository where the font project files are\n        made available.\n\n        Such hosting is typically done on sites like Github, Gitlab, GNU Savannah or\n        any other git-based version control service.\n    ",
                    "result": "INFO"
                },
                {
                    "description": "Is this a proper HTML snippet?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/description/valid_html>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "/Users/simon/others-repos/fonts/ofl/amiri/DESCRIPTION.en_us.html is a propper HTML file.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Sometimes people write malformed HTML markup. This check should ensure the\n        file is good.\n\n        Additionally, when packaging families for being pushed to the `google/fonts`\n        git repo, if there is no DESCRIPTION.en_us.html file, some older versions of\n        the `add_font.py` tool insert a placeholder description file which contains\n        invalid html. This file needs to either be replaced with an existing\n        description file or edited by hand.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "DESCRIPTION.en_us.html must have more than 200 bytes.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/description/min_length>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "DESCRIPTION.en_us.html is larger than 200 bytes.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "DESCRIPTION.en_us.html should end in a linebreak.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/description/eof_linebreak>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": ":-)",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Some older text-handling tools sometimes misbehave if the last line of data\n        in a text file is not terminated with a newline character (also known as '\\n').\n\n        We know that this is a very small detail, but for the sake of keeping all\n        DESCRIPTION.en_us.html files uniformly formatted throughout the GFonts\n        collection, we chose to adopt the practice of placing this final linebreak\n        character on them.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check METADATA.pb parse correctly.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/parses>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb parsed successfuly.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The purpose of this check is to ensure that the METADATA.pb file is not\n        malformed.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Font designer field in METADATA.pb must not be 'unknown'.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/unknown_designer>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font designer field is not 'unknown'.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Font designer field in METADATA.pb must not contain 'Multiple designers'.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/multiple_designers>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Looks good.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        For a while the string \"Multiple designers\" was used as a placeholder on\n        METADATA.pb files. We should replace all those instances with actual designer\n        names so that proper credits are displayed on the Google Fonts family\n        specimen pages.\n\n        If there's more than a single designer, the designer names must be\n        separated by commas.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Multiple values in font designer field in METADATA.pb must be separated by commas.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/designer_values>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Looks good.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        We must use commas instead of forward slashes because the server-side code\n        at the fonts.google.com directory will segment the string on the commas into\n        a list of names and display the first item in the list as the\n        \"principal designer\" while the remaining names are identified as \"contributors\".\n\n        See eg https://fonts.google.com/specimen/Rubik\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Does METADATA.pb copyright field contain broken links?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/broken_links>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "All links in the METADATA.pb file look good!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Ensure METADATA.pb lists all font binaries.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/undeclared_fonts>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The set of font binaries available, except the ones on a \"static\" subdir,\n        must match exactly those declared on the METADATA.pb file.\n\n        Also, to avoid confusion, we expect that font files (other than statics)\n        are not placed on subdirectories.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Ensure METADATA.pb category field is valid.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/category>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        There are only five acceptable values for the category field in a METADATA.pb\n        file:\n\n        - MONOSPACE\n\n        - SANS_SERIF\n\n        - SERIF\n\n        - DISPLAY\n\n        - HANDWRITING\n\n        This check is meant to avoid typos in this field.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Checking OS/2 fsType does not impose restrictions.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/fstype>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2 fsType is properly set to zero.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The fsType in the OS/2 table is a legacy DRM-related field. Fonts in the\n        Google Fonts collection must have it set to zero (also known as\n        \"Installable Embedding\"). This setting indicates that the fonts can be\n        embedded in documents and permanently installed by applications on\n        remote systems.\n\n        More detailed info is available at:\n        https://docs.microsoft.com/en-us/typography/opentype/spec/os2#fstype\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Checking OS/2 achVendID.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/vendor_id>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2 VendorID 'ALIF' looks good!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Microsoft keeps a list of font vendors and their respective contact info. This\n        list is updated regularly and is indexed by a 4-char \"Vendor ID\" which is\n        stored in the achVendID field of the OS/2 table.\n\n        Registering your ID is not mandatory, but it is a good practice since some\n        applications may display the type designer / type foundry contact info on some\n        dialog and also because that info will be visible on Microsoft's website:\n\n        https://docs.microsoft.com/en-us/typography/vendors/\n\n        This check verifies whether or not a given font's vendor ID is registered in\n        that list or if it has some of the default values used by the most common\n        font editors.\n\n        Each new FontBakery release includes a cached copy of that list of vendor IDs.\n        If you registered recently, you're safe to ignore warnings emitted by this\n        check, since your ID will soon be included in one of our upcoming releases.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check Google Fonts glyph coverage.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/glyph_coverage>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Missing required codepoints:\n\n\t- 0x030B (COMBINING DOUBLE ACUTE ACCENT)\n\n\n\t- 0x0218 (LATIN CAPITAL LETTER S WITH COMMA BELOW)\n\n\n\t- 0x1E9E (LATIN CAPITAL LETTER SHARP S)\n\n\n\t- 0x021A (LATIN CAPITAL LETTER T WITH COMMA BELOW)\n\n\n\t- 0x0219 (LATIN SMALL LETTER S WITH COMMA BELOW)\n\n\n\t- 0x021B (LATIN SMALL LETTER T WITH COMMA BELOW)\n\n\n\t- 0x2122 (TRADE MARK SIGN)\n [code: missing-codepoints]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Google Fonts expects that fonts in its collection support at least the minimal\n        set of characters defined in the `GF-latin-core` glyph-set.\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "Check for METADATA subsets with zero support.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/unsupported_subsets>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This check ensures that the subsets specified on a METADATA.pb file are\n        actually supported (even if only partially) by the font files.\n\n        Subsets for which none of the codepoints are supported will cause the\n        check to FAIL.\n    ",
                    "result": "PASS",
                    "severity": 10
                },
                {
                    "description": "Check for codepoints not covered by METADATA subsets.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/unreachable_subsetting>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The following codepoints supported by the font are not covered by\n    any subsets defined in the font's metadata file, and will never\n    be served. You can solve this by either manually adding additional\n    subset declarations to METADATA.pb, or by editing the glyphset\n    definitions.\n\n * U+02BE MODIFIER LETTER RIGHT HALF RING: not included in any glyphset definition\n * U+02BF MODIFIER LETTER LEFT HALF RING: not included in any glyphset definition\n * U+02C7 CARON: try adding one of: tifinagh, canadian-aboriginal\n * U+02D8 BREVE: try adding canadian-aboriginal\n * U+02D9 DOT ABOVE: try adding canadian-aboriginal\n * U+02DB OGONEK: try adding canadian-aboriginal\n * U+02DD DOUBLE ACUTE ACCENT: not included in any glyphset definition\n * U+0300 COMBINING GRAVE ACCENT: try adding one of: cherokee, tai-le, coptic\n * U+0301 COMBINING ACUTE ACCENT: try adding one of: tifinagh, cherokee, tai-le, coptic\n * U+0302 COMBINING CIRCUMFLEX ACCENT: try adding one of: cherokee, tifinagh, coptic\n * U+0303 COMBINING TILDE: not included in any glyphset definition\n * U+0304 COMBINING MACRON: try adding one of: cherokee, tifinagh, gothic, coptic\n * U+0305 COMBINING OVERLINE: try adding one of: gothic, coptic\n * U+0306 COMBINING BREVE: try adding tifinagh\n * U+0307 COMBINING DOT ABOVE: try adding one of: coptic, tai-le, tifinagh, canadian-aboriginal, malayalam\n * U+0308 COMBINING DIAERESIS: try adding one of: gothic, tai-le, coptic\n * U+030A COMBINING RING ABOVE: not included in any glyphset definition\n * U+030C COMBINING CARON: try adding one of: cherokee, tai-le\n * U+0312 COMBINING TURNED COMMA ABOVE: not included in any glyphset definition\n * U+0315 COMBINING COMMA ABOVE RIGHT: not included in any glyphset definition\n * U+0326 COMBINING COMMA BELOW: not included in any glyphset definition\n * U+0327 COMBINING CEDILLA: not included in any glyphset definition\n * U+0328 COMBINING OGONEK: not included in any glyphset definition\n * U+0604 ARABIC SIGN SAMVAT: not included in any glyphset definition\n * U+0606 ARABIC-INDIC CUBE ROOT: not included in any glyphset definition\n * U+0607 ARABIC-INDIC FOURTH ROOT: not included in any glyphset definition\n * U+0608 ARABIC RAY: not included in any glyphset definition\n * U+0609 ARABIC-INDIC PER MILLE SIGN: not included in any glyphset definition\n * U+060A ARABIC-INDIC PER TEN THOUSAND SIGN: not included in any glyphset definition\n * U+060E ARABIC POETIC VERSE SIGN: not included in any glyphset definition\n * U+060F ARABIC SIGN MISRA: not included in any glyphset definition\n * U+0610 ARABIC SIGN SALLALLAHOU ALAYHE WASSALLAM: not included in any glyphset definition\n * U+0611 ARABIC SIGN ALAYHE ASSALLAM: not included in any glyphset definition\n * U+0612 ARABIC SIGN RAHMATULLAH ALAYHE: not included in any glyphset definition\n * U+0613 ARABIC SIGN RADI ALLAHOU ANHU: not included in any glyphset definition\n * U+0614 ARABIC SIGN TAKHALLUS: not included in any glyphset definition\n * U+0615 ARABIC SMALL HIGH TAH: not included in any glyphset definition\n * U+0616 ARABIC SMALL HIGH LIGATURE ALEF WITH LAM WITH YEH: not included in any glyphset definition\n * U+0617 ARABIC SMALL HIGH ZAIN: not included in any glyphset definition\n * U+0618 ARABIC SMALL FATHA: not included in any glyphset definition\n * U+0619 ARABIC SMALL DAMMA: not included in any glyphset definition\n * U+061A ARABIC SMALL KASRA: not included in any glyphset definition\n * U+061C ARABIC LETTER MARK: not included in any glyphset definition\n * U+061D ARABIC END OF TEXT MARK: not included in any glyphset definition\n * U+0620 ARABIC LETTER KASHMIRI YEH: not included in any glyphset definition\n * U+063B ARABIC LETTER KEHEH WITH TWO DOTS ABOVE: not included in any glyphset definition\n * U+063C ARABIC LETTER KEHEH WITH THREE DOTS BELOW: not included in any glyphset definition\n * U+063D ARABIC LETTER FARSI YEH WITH INVERTED V: not included in any glyphset definition\n * U+063E ARABIC LETTER FARSI YEH WITH TWO DOTS ABOVE: not included in any glyphset definition\n * U+063F ARABIC LETTER FARSI YEH WITH THREE DOTS ABOVE: not included in any glyphset definition\n * U+065A ARABIC VOWEL SIGN SMALL V ABOVE: not included in any glyphset definition\n * U+065B ARABIC VOWEL SIGN INVERTED SMALL V ABOVE: not included in any glyphset definition\n * U+065C ARABIC VOWEL SIGN DOT BELOW: not included in any glyphset definition\n * U+065D ARABIC REVERSED DAMMA: not included in any glyphset definition\n * U+065E ARABIC FATHA WITH TWO DOTS: not included in any glyphset definition\n * U+065F ARABIC WAVY HAMZA BELOW: not included in any glyphset definition\n * U+066E ARABIC LETTER DOTLESS BEH: not included in any glyphset definition\n * U+066F ARABIC LETTER DOTLESS QAF: not included in any glyphset definition\n * U+0672 ARABIC LETTER ALEF WITH WAVY HAMZA ABOVE: not included in any glyphset definition\n * U+0673 ARABIC LETTER ALEF WITH WAVY HAMZA BELOW: not included in any glyphset definition\n * U+0674 ARABIC LETTER HIGH HAMZA: not included in any glyphset definition\n * U+0675 ARABIC LETTER HIGH HAMZA ALEF: not included in any glyphset definition\n * U+0676 ARABIC LETTER HIGH HAMZA WAW: not included in any glyphset definition\n * U+0677 ARABIC LETTER U WITH HAMZA ABOVE: not included in any glyphset definition\n * U+0678 ARABIC LETTER HIGH HAMZA YEH: not included in any glyphset definition\n * U+0682 ARABIC LETTER HAH WITH TWO DOTS VERTICAL ABOVE: not included in any glyphset definition\n * U+068B ARABIC LETTER DAL WITH DOT BELOW AND SMALL TAH: not included in any glyphset definition\n * U+068E ARABIC LETTER DUL: not included in any glyphset definition\n * U+0690 ARABIC LETTER DAL WITH FOUR DOTS ABOVE: not included in any glyphset definition\n * U+0692 ARABIC LETTER REH WITH SMALL V: not included in any glyphset definition\n * U+0694 ARABIC LETTER REH WITH DOT BELOW: not included in any glyphset definition\n * U+0695 ARABIC LETTER REH WITH SMALL V BELOW: not included in any glyphset definition\n * U+0697 ARABIC LETTER REH WITH TWO DOTS ABOVE: not included in any glyphset definition\n * U+069B ARABIC LETTER SEEN WITH THREE DOTS BELOW: not included in any glyphset definition\n * U+069D ARABIC LETTER SAD WITH TWO DOTS BELOW: not included in any glyphset definition\n * U+069E ARABIC LETTER SAD WITH THREE DOTS ABOVE: not included in any glyphset definition\n * U+069F ARABIC LETTER TAH WITH THREE DOTS ABOVE: not included in any glyphset definition\n * U+06A0 ARABIC LETTER AIN WITH THREE DOTS ABOVE: not included in any glyphset definition\n * U+06A1 ARABIC LETTER DOTLESS FEH: not included in any glyphset definition\n * U+06A3 ARABIC LETTER FEH WITH DOT BELOW: not included in any glyphset definition\n * U+06AC ARABIC LETTER KAF WITH DOT ABOVE: not included in any glyphset definition\n * U+06AD ARABIC LETTER NG: not included in any glyphset definition\n * U+06AE ARABIC LETTER KAF WITH THREE DOTS BELOW: not included in any glyphset definition\n * U+06B0 ARABIC LETTER GAF WITH RING: not included in any glyphset definition\n * U+06B2 ARABIC LETTER GAF WITH TWO DOTS BELOW: not included in any glyphset definition\n * U+06B4 ARABIC LETTER GAF WITH THREE DOTS ABOVE: not included in any glyphset definition\n * U+06B5 ARABIC LETTER LAM WITH SMALL V: not included in any glyphset definition\n * U+06B6 ARABIC LETTER LAM WITH DOT ABOVE: not included in any glyphset definition\n * U+06B7 ARABIC LETTER LAM WITH THREE DOTS ABOVE: not included in any glyphset definition\n * U+06B8 ARABIC LETTER LAM WITH THREE DOTS BELOW: not included in any glyphset definition\n * U+06B9 ARABIC LETTER NOON WITH DOT BELOW: not included in any glyphset definition\n * U+06BD ARABIC LETTER NOON WITH THREE DOTS ABOVE: not included in any glyphset definition\n * U+06BF ARABIC LETTER TCHEH WITH DOT ABOVE: not included in any glyphset definition\n * U+06C4 ARABIC LETTER WAW WITH RING: not included in any glyphset definition\n * U+06C5 ARABIC LETTER KIRGHIZ OE: not included in any glyphset definition\n * U+06C6 ARABIC LETTER OE: not included in any glyphset definition\n * U+06C7 ARABIC LETTER U: not included in any glyphset definition\n * U+06C8 ARABIC LETTER YU: not included in any glyphset definition\n * U+06C9 ARABIC LETTER KIRGHIZ YU: not included in any glyphset definition\n * U+06CA ARABIC LETTER WAW WITH TWO DOTS ABOVE: not included in any glyphset definition\n * U+06CB ARABIC LETTER VE: not included in any glyphset definition\n * U+06CE ARABIC LETTER YEH WITH SMALL V: not included in any glyphset definition\n * U+06CF ARABIC LETTER WAW WITH DOT ABOVE: not included in any glyphset definition\n * U+06D1 ARABIC LETTER YEH WITH THREE DOTS BELOW: not included in any glyphset definition\n * U+06D5 ARABIC LETTER AE: not included in any glyphset definition\n * U+06D6 ARABIC SMALL HIGH LIGATURE SAD WITH LAM WITH ALEF MAKSURA: not included in any glyphset definition\n * U+06D7 ARABIC SMALL HIGH LIGATURE QAF WITH LAM WITH ALEF MAKSURA: not included in any glyphset definition\n * U+06D8 ARABIC SMALL HIGH MEEM INITIAL FORM: not included in any glyphset definition\n * U+06D9 ARABIC SMALL HIGH LAM ALEF: not included in any glyphset definition\n * U+06DA ARABIC SMALL HIGH JEEM: not included in any glyphset definition\n * U+06DB ARABIC SMALL HIGH THREE DOTS: not included in any glyphset definition\n * U+06DC ARABIC SMALL HIGH SEEN: not included in any glyphset definition\n * U+06DF ARABIC SMALL HIGH ROUNDED ZERO: not included in any glyphset definition\n * U+06E0 ARABIC SMALL HIGH UPRIGHT RECTANGULAR ZERO: not included in any glyphset definition\n * U+06E1 ARABIC SMALL HIGH DOTLESS HEAD OF KHAH: not included in any glyphset definition\n * U+06E2 ARABIC SMALL HIGH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+06E3 ARABIC SMALL LOW SEEN: not included in any glyphset definition\n * U+06E4 ARABIC SMALL HIGH MADDA: not included in any glyphset definition\n * U+06E5 ARABIC SMALL WAW: not included in any glyphset definition\n * U+06E6 ARABIC SMALL YEH: not included in any glyphset definition\n * U+06E7 ARABIC SMALL HIGH YEH: not included in any glyphset definition\n * U+06E8 ARABIC SMALL HIGH NOON: not included in any glyphset definition\n * U+06EA ARABIC EMPTY CENTRE LOW STOP: not included in any glyphset definition\n * U+06EB ARABIC EMPTY CENTRE HIGH STOP: not included in any glyphset definition\n * U+06EC ARABIC ROUNDED HIGH STOP WITH FILLED CENTRE: not included in any glyphset definition\n * U+06ED ARABIC SMALL LOW MEEM: not included in any glyphset definition\n * U+06EE ARABIC LETTER DAL WITH INVERTED V: not included in any glyphset definition\n * U+06EF ARABIC LETTER REH WITH INVERTED V: not included in any glyphset definition\n * U+06FA ARABIC LETTER SHEEN WITH DOT BELOW: not included in any glyphset definition\n * U+06FB ARABIC LETTER DAD WITH DOT BELOW: not included in any glyphset definition\n * U+06FC ARABIC LETTER GHAIN WITH DOT BELOW: not included in any glyphset definition\n * U+06FF ARABIC LETTER HEH WITH INVERTED V: not included in any glyphset definition\n * U+0750 ARABIC LETTER BEH WITH THREE DOTS HORIZONTALLY BELOW: not included in any glyphset definition\n * U+0751 ARABIC LETTER BEH WITH DOT BELOW AND THREE DOTS ABOVE: not included in any glyphset definition\n * U+0752 ARABIC LETTER BEH WITH THREE DOTS POINTING UPWARDS BELOW: not included in any glyphset definition\n * U+0753 ARABIC LETTER BEH WITH THREE DOTS POINTING UPWARDS BELOW AND TWO DOTS ABOVE: not included in any glyphset definition\n * U+0754 ARABIC LETTER BEH WITH TWO DOTS BELOW AND DOT ABOVE: not included in any glyphset definition\n * U+0755 ARABIC LETTER BEH WITH INVERTED SMALL V BELOW: not included in any glyphset definition\n * U+0756 ARABIC LETTER BEH WITH SMALL V: not included in any glyphset definition\n * U+0757 ARABIC LETTER HAH WITH TWO DOTS ABOVE: not included in any glyphset definition\n * U+0758 ARABIC LETTER HAH WITH THREE DOTS POINTING UPWARDS BELOW: not included in any glyphset definition\n * U+0759 ARABIC LETTER DAL WITH TWO DOTS VERTICALLY BELOW AND SMALL TAH: not included in any glyphset definition\n * U+075A ARABIC LETTER DAL WITH INVERTED SMALL V BELOW: not included in any glyphset definition\n * U+075B ARABIC LETTER REH WITH STROKE: not included in any glyphset definition\n * U+075C ARABIC LETTER SEEN WITH FOUR DOTS ABOVE: not included in any glyphset definition\n * U+075D ARABIC LETTER AIN WITH TWO DOTS ABOVE: not included in any glyphset definition\n * U+075E ARABIC LETTER AIN WITH THREE DOTS POINTING DOWNWARDS ABOVE: not included in any glyphset definition\n * U+075F ARABIC LETTER AIN WITH TWO DOTS VERTICALLY ABOVE: not included in any glyphset definition\n * U+0760 ARABIC LETTER FEH WITH TWO DOTS BELOW: not included in any glyphset definition\n * U+0761 ARABIC LETTER FEH WITH THREE DOTS POINTING UPWARDS BELOW: not included in any glyphset definition\n * U+0762 ARABIC LETTER KEHEH WITH DOT ABOVE: not included in any glyphset definition\n * U+0763 ARABIC LETTER KEHEH WITH THREE DOTS ABOVE: not included in any glyphset definition\n * U+0764 ARABIC LETTER KEHEH WITH THREE DOTS POINTING UPWARDS BELOW: not included in any glyphset definition\n * U+0765 ARABIC LETTER MEEM WITH DOT ABOVE: not included in any glyphset definition\n * U+0766 ARABIC LETTER MEEM WITH DOT BELOW: not included in any glyphset definition\n * U+0767 ARABIC LETTER NOON WITH TWO DOTS BELOW: not included in any glyphset definition\n * U+0768 ARABIC LETTER NOON WITH SMALL TAH: not included in any glyphset definition\n * U+0769 ARABIC LETTER NOON WITH SMALL V: not included in any glyphset definition\n * U+076A ARABIC LETTER LAM WITH BAR: not included in any glyphset definition\n * U+076B ARABIC LETTER REH WITH TWO DOTS VERTICALLY ABOVE: not included in any glyphset definition\n * U+076C ARABIC LETTER REH WITH HAMZA ABOVE: not included in any glyphset definition\n * U+076D ARABIC LETTER SEEN WITH TWO DOTS VERTICALLY ABOVE: not included in any glyphset definition\n * U+076E ARABIC LETTER HAH WITH SMALL ARABIC LETTER TAH BELOW: not included in any glyphset definition\n * U+076F ARABIC LETTER HAH WITH SMALL ARABIC LETTER TAH AND TWO DOTS: not included in any glyphset definition\n * U+0770 ARABIC LETTER SEEN WITH SMALL ARABIC LETTER TAH AND TWO DOTS: not included in any glyphset definition\n * U+0771 ARABIC LETTER REH WITH SMALL ARABIC LETTER TAH AND TWO DOTS: not included in any glyphset definition\n * U+0772 ARABIC LETTER HAH WITH SMALL ARABIC LETTER TAH ABOVE: not included in any glyphset definition\n * U+0773 ARABIC LETTER ALEF WITH EXTENDED ARABIC-INDIC DIGIT TWO ABOVE: not included in any glyphset definition\n * U+0774 ARABIC LETTER ALEF WITH EXTENDED ARABIC-INDIC DIGIT THREE ABOVE: not included in any glyphset definition\n * U+0775 ARABIC LETTER FARSI YEH WITH EXTENDED ARABIC-INDIC DIGIT TWO ABOVE: not included in any glyphset definition\n * U+0776 ARABIC LETTER FARSI YEH WITH EXTENDED ARABIC-INDIC DIGIT THREE ABOVE: not included in any glyphset definition\n * U+0777 ARABIC LETTER FARSI YEH WITH EXTENDED ARABIC-INDIC DIGIT FOUR BELOW: not included in any glyphset definition\n * U+0778 ARABIC LETTER WAW WITH EXTENDED ARABIC-INDIC DIGIT TWO ABOVE: not included in any glyphset definition\n * U+0779 ARABIC LETTER WAW WITH EXTENDED ARABIC-INDIC DIGIT THREE ABOVE: not included in any glyphset definition\n * U+077A ARABIC LETTER YEH BARREE WITH EXTENDED ARABIC-INDIC DIGIT TWO ABOVE: not included in any glyphset definition\n * U+077B ARABIC LETTER YEH BARREE WITH EXTENDED ARABIC-INDIC DIGIT THREE ABOVE: not included in any glyphset definition\n * U+077C ARABIC LETTER HAH WITH EXTENDED ARABIC-INDIC DIGIT FOUR BELOW: not included in any glyphset definition\n * U+077D ARABIC LETTER SEEN WITH EXTENDED ARABIC-INDIC DIGIT FOUR ABOVE: not included in any glyphset definition\n * U+077E ARABIC LETTER SEEN WITH INVERTED V: not included in any glyphset definition\n * U+077F ARABIC LETTER KAF WITH TWO DOTS ABOVE: not included in any glyphset definition\n * U+0890 ARABIC POUND MARK ABOVE: not included in any glyphset definition\n * U+0891 ARABIC PIASTRE MARK ABOVE: not included in any glyphset definition\n * U+08A0 ARABIC LETTER BEH WITH SMALL V BELOW: not included in any glyphset definition\n * U+08AC ARABIC LETTER ROHINGYA YEH: not included in any glyphset definition\n * U+08B6 ARABIC LETTER BEH WITH SMALL MEEM ABOVE: not included in any glyphset definition\n * U+08B7 ARABIC LETTER PEH WITH SMALL MEEM ABOVE: not included in any glyphset definition\n * U+08B8 ARABIC LETTER TEH WITH SMALL TEH ABOVE: not included in any glyphset definition\n * U+08B9 ARABIC LETTER REH WITH SMALL NOON ABOVE: not included in any glyphset definition\n * U+08BA ARABIC LETTER YEH WITH TWO DOTS BELOW AND SMALL NOON ABOVE: not included in any glyphset definition\n * U+08BB ARABIC LETTER AFRICAN FEH: not included in any glyphset definition\n * U+08BC ARABIC LETTER AFRICAN QAF: not included in any glyphset definition\n * U+08BD ARABIC LETTER AFRICAN NOON: not included in any glyphset definition\n * U+08D1 ARABIC LARGE CIRCLE BELOW: not included in any glyphset definition\n * U+08E4 ARABIC CURLY FATHA: not included in any glyphset definition\n * U+08E5 ARABIC CURLY DAMMA: not included in any glyphset definition\n * U+08E6 ARABIC CURLY KASRA: not included in any glyphset definition\n * U+08E7 ARABIC CURLY FATHATAN: not included in any glyphset definition\n * U+08E8 ARABIC CURLY DAMMATAN: not included in any glyphset definition\n * U+08E9 ARABIC CURLY KASRATAN: not included in any glyphset definition\n * U+08EA ARABIC TONE ONE DOT ABOVE: not included in any glyphset definition\n * U+08EB ARABIC TONE TWO DOTS ABOVE: not included in any glyphset definition\n * U+08EC ARABIC TONE LOOP ABOVE: not included in any glyphset definition\n * U+08ED ARABIC TONE ONE DOT BELOW: not included in any glyphset definition\n * U+08EE ARABIC TONE TWO DOTS BELOW: not included in any glyphset definition\n * U+08EF ARABIC TONE LOOP BELOW: not included in any glyphset definition\n * U+08F0 ARABIC OPEN FATHATAN: not included in any glyphset definition\n * U+08F1 ARABIC OPEN DAMMATAN: not included in any glyphset definition\n * U+08F2 ARABIC OPEN KASRATAN: not included in any glyphset definition\n * U+08F3 ARABIC SMALL HIGH WAW: not included in any glyphset definition\n * U+08F4 ARABIC FATHA WITH RING: not included in any glyphset definition\n * U+08F5 ARABIC FATHA WITH DOT ABOVE: not included in any glyphset definition\n * U+08F6 ARABIC KASRA WITH DOT BELOW: not included in any glyphset definition\n * U+08F7 ARABIC LEFT ARROWHEAD ABOVE: not included in any glyphset definition\n * U+08F8 ARABIC RIGHT ARROWHEAD ABOVE: not included in any glyphset definition\n * U+08F9 ARABIC LEFT ARROWHEAD BELOW: not included in any glyphset definition\n * U+08FA ARABIC RIGHT ARROWHEAD BELOW: not included in any glyphset definition\n * U+08FB ARABIC DOUBLE RIGHT ARROWHEAD ABOVE: not included in any glyphset definition\n * U+08FC ARABIC DOUBLE RIGHT ARROWHEAD ABOVE WITH DOT: not included in any glyphset definition\n * U+08FD ARABIC RIGHT ARROWHEAD ABOVE WITH DOT: not included in any glyphset definition\n * U+08FE ARABIC DAMMA WITH DOT: not included in any glyphset definition\n * U+2000 EN QUAD: not included in any glyphset definition\n * U+2001 EM QUAD: not included in any glyphset definition\n * U+2003 EM SPACE: not included in any glyphset definition\n * U+2004 THREE-PER-EM SPACE: not included in any glyphset definition\n * U+2005 FOUR-PER-EM SPACE: not included in any glyphset definition\n * U+2006 SIX-PER-EM SPACE: not included in any glyphset definition\n * U+2007 FIGURE SPACE: not included in any glyphset definition\n * U+2008 PUNCTUATION SPACE: not included in any glyphset definition\n * U+200A HAIR SPACE: not included in any glyphset definition\n * U+200F RIGHT-TO-LEFT MARK: try adding one of: thaana, phags-pa\n * U+2012 FIGURE DASH: not included in any glyphset definition\n * U+2015 HORIZONTAL BAR: not included in any glyphset definition\n * U+201B SINGLE HIGH-REVERSED-9 QUOTATION MARK: not included in any glyphset definition\n * U+201F DOUBLE HIGH-REVERSED-9 QUOTATION MARK: not included in any glyphset definition\n * U+2021 DOUBLE DAGGER: not included in any glyphset definition\n * U+2024 ONE DOT LEADER: try adding armenian\n * U+2028 LINE SEPARATOR: not included in any glyphset definition\n * U+2029 PARAGRAPH SEPARATOR: not included in any glyphset definition\n * U+202A LEFT-TO-RIGHT EMBEDDING: not included in any glyphset definition\n * U+202B RIGHT-TO-LEFT EMBEDDING: not included in any glyphset definition\n * U+202C POP DIRECTIONAL FORMATTING: not included in any glyphset definition\n * U+202D LEFT-TO-RIGHT OVERRIDE: not included in any glyphset definition\n * U+202E RIGHT-TO-LEFT OVERRIDE: try adding tifinagh\n * U+202F NARROW NO-BREAK SPACE: try adding mongolian\n * U+2030 PER MILLE SIGN: not included in any glyphset definition\n * U+2038 CARET: not included in any glyphset definition\n * U+203E OVERLINE: not included in any glyphset definition\n * U+2042 ASTERISM: not included in any glyphset definition\n * U+2213 MINUS-OR-PLUS SIGN: not included in any glyphset definition\n * U+221A SQUARE ROOT: not included in any glyphset definition\n * U+25CC DOTTED CIRCLE: try adding one of: cham, buginese, meetei-mayek, balinese, bengali, hanunoo, canadian-aboriginal, buhid, rejang, hebrew, batak, tamil, coptic, thai, oriya, gurmukhi, khmer, mandaic, tagbanwa, tifinagh, new-tai-lue, mongolian, myanmar, tibetan, sinhala, chakma, kaithi, telugu, syloti-nagri, kayah-li, lepcha, tagalog, limbu, malayalam, brahmi, kharoshthi, javanese, phags-pa, tai-viet, lao, tai-le, gujarati, kannada, devanagari, thaana, sundanese\n * U+FB86 ARABIC LETTER DUL ISOLATED FORM: not included in any glyphset definition\n * U+FB87 ARABIC LETTER DUL FINAL FORM: not included in any glyphset definition\n * U+FBB2 ARABIC SYMBOL DOT ABOVE: not included in any glyphset definition\n * U+FBB3 ARABIC SYMBOL DOT BELOW: not included in any glyphset definition\n * U+FBB4 ARABIC SYMBOL TWO DOTS ABOVE: not included in any glyphset definition\n * U+FBB5 ARABIC SYMBOL TWO DOTS BELOW: not included in any glyphset definition\n * U+FBB6 ARABIC SYMBOL THREE DOTS ABOVE: not included in any glyphset definition\n * U+FBB7 ARABIC SYMBOL THREE DOTS BELOW: not included in any glyphset definition\n * U+FBB8 ARABIC SYMBOL THREE DOTS POINTING DOWNWARDS ABOVE: not included in any glyphset definition\n * U+FBB9 ARABIC SYMBOL THREE DOTS POINTING DOWNWARDS BELOW: not included in any glyphset definition\n * U+FBBA ARABIC SYMBOL FOUR DOTS ABOVE: not included in any glyphset definition\n * U+FBBB ARABIC SYMBOL FOUR DOTS BELOW: not included in any glyphset definition\n * U+FBBC ARABIC SYMBOL DOUBLE VERTICAL BAR BELOW: not included in any glyphset definition\n * U+FBBD ARABIC SYMBOL TWO DOTS VERTICALLY ABOVE: not included in any glyphset definition\n * U+FBBE ARABIC SYMBOL TWO DOTS VERTICALLY BELOW: not included in any glyphset definition\n * U+FBBF ARABIC SYMBOL RING: not included in any glyphset definition\n * U+FBC0 ARABIC SYMBOL SMALL TAH ABOVE: not included in any glyphset definition\n * U+FBC1 ARABIC SYMBOL SMALL TAH BELOW: not included in any glyphset definition\n * U+FBD3 ARABIC LETTER NG ISOLATED FORM: not included in any glyphset definition\n * U+FBD4 ARABIC LETTER NG FINAL FORM: not included in any glyphset definition\n * U+FBD5 ARABIC LETTER NG INITIAL FORM: not included in any glyphset definition\n * U+FBD6 ARABIC LETTER NG MEDIAL FORM: not included in any glyphset definition\n * U+FBD7 ARABIC LETTER U ISOLATED FORM: not included in any glyphset definition\n * U+FBD8 ARABIC LETTER U FINAL FORM: not included in any glyphset definition\n * U+FBD9 ARABIC LETTER OE ISOLATED FORM: not included in any glyphset definition\n * U+FBDA ARABIC LETTER OE FINAL FORM: not included in any glyphset definition\n * U+FBDB ARABIC LETTER YU ISOLATED FORM: not included in any glyphset definition\n * U+FBDC ARABIC LETTER YU FINAL FORM: not included in any glyphset definition\n * U+FBDD ARABIC LETTER U WITH HAMZA ABOVE ISOLATED FORM: not included in any glyphset definition\n * U+FBDE ARABIC LETTER VE ISOLATED FORM: not included in any glyphset definition\n * U+FBDF ARABIC LETTER VE FINAL FORM: not included in any glyphset definition\n * U+FBE0 ARABIC LETTER KIRGHIZ OE ISOLATED FORM: not included in any glyphset definition\n * U+FBE1 ARABIC LETTER KIRGHIZ OE FINAL FORM: not included in any glyphset definition\n * U+FBE2 ARABIC LETTER KIRGHIZ YU ISOLATED FORM: not included in any glyphset definition\n * U+FBE3 ARABIC LETTER KIRGHIZ YU FINAL FORM: not included in any glyphset definition\n * U+FBEA ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH ALEF ISOLATED FORM: not included in any glyphset definition\n * U+FBEB ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH ALEF FINAL FORM: not included in any glyphset definition\n * U+FBEC ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH AE ISOLATED FORM: not included in any glyphset definition\n * U+FBED ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH AE FINAL FORM: not included in any glyphset definition\n * U+FBEE ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH WAW ISOLATED FORM: not included in any glyphset definition\n * U+FBEF ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH WAW FINAL FORM: not included in any glyphset definition\n * U+FBF0 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH U ISOLATED FORM: not included in any glyphset definition\n * U+FBF1 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH U FINAL FORM: not included in any glyphset definition\n * U+FBF2 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH OE ISOLATED FORM: not included in any glyphset definition\n * U+FBF3 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH OE FINAL FORM: not included in any glyphset definition\n * U+FBF4 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH YU ISOLATED FORM: not included in any glyphset definition\n * U+FBF5 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH YU FINAL FORM: not included in any glyphset definition\n * U+FBF6 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH E ISOLATED FORM: not included in any glyphset definition\n * U+FBF7 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH E FINAL FORM: not included in any glyphset definition\n * U+FBF8 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH E INITIAL FORM: not included in any glyphset definition\n * U+FBF9 ARABIC LIGATURE UIGHUR KIRGHIZ YEH WITH HAMZA ABOVE WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FBFA ARABIC LIGATURE UIGHUR KIRGHIZ YEH WITH HAMZA ABOVE WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FBFB ARABIC LIGATURE UIGHUR KIRGHIZ YEH WITH HAMZA ABOVE WITH ALEF MAKSURA INITIAL FORM: not included in any glyphset definition\n * U+FC00 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC01 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FC02 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC03 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FC04 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FC05 ARABIC LIGATURE BEH WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC06 ARABIC LIGATURE BEH WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FC07 ARABIC LIGATURE BEH WITH KHAH ISOLATED FORM: not included in any glyphset definition\n * U+FC08 ARABIC LIGATURE BEH WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC09 ARABIC LIGATURE BEH WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FC0A ARABIC LIGATURE BEH WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FC0B ARABIC LIGATURE TEH WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC0C ARABIC LIGATURE TEH WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FC0D ARABIC LIGATURE TEH WITH KHAH ISOLATED FORM: not included in any glyphset definition\n * U+FC0E ARABIC LIGATURE TEH WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC0F ARABIC LIGATURE TEH WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FC10 ARABIC LIGATURE TEH WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FC11 ARABIC LIGATURE THEH WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC12 ARABIC LIGATURE THEH WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC13 ARABIC LIGATURE THEH WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FC14 ARABIC LIGATURE THEH WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FC15 ARABIC LIGATURE JEEM WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FC16 ARABIC LIGATURE JEEM WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC17 ARABIC LIGATURE HAH WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC18 ARABIC LIGATURE HAH WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC19 ARABIC LIGATURE KHAH WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC1A ARABIC LIGATURE KHAH WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FC1B ARABIC LIGATURE KHAH WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC1C ARABIC LIGATURE SEEN WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC1D ARABIC LIGATURE SEEN WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FC1E ARABIC LIGATURE SEEN WITH KHAH ISOLATED FORM: not included in any glyphset definition\n * U+FC1F ARABIC LIGATURE SEEN WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC20 ARABIC LIGATURE SAD WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FC21 ARABIC LIGATURE SAD WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC22 ARABIC LIGATURE DAD WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC23 ARABIC LIGATURE DAD WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FC24 ARABIC LIGATURE DAD WITH KHAH ISOLATED FORM: not included in any glyphset definition\n * U+FC25 ARABIC LIGATURE DAD WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC26 ARABIC LIGATURE TAH WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FC27 ARABIC LIGATURE TAH WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC28 ARABIC LIGATURE ZAH WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC29 ARABIC LIGATURE AIN WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC2A ARABIC LIGATURE AIN WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC2B ARABIC LIGATURE GHAIN WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC2C ARABIC LIGATURE GHAIN WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC2D ARABIC LIGATURE FEH WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC2E ARABIC LIGATURE FEH WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FC2F ARABIC LIGATURE FEH WITH KHAH ISOLATED FORM: not included in any glyphset definition\n * U+FC30 ARABIC LIGATURE FEH WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC31 ARABIC LIGATURE FEH WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FC32 ARABIC LIGATURE FEH WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FC33 ARABIC LIGATURE QAF WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FC34 ARABIC LIGATURE QAF WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC35 ARABIC LIGATURE QAF WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FC36 ARABIC LIGATURE QAF WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FC37 ARABIC LIGATURE KAF WITH ALEF ISOLATED FORM: not included in any glyphset definition\n * U+FC38 ARABIC LIGATURE KAF WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC39 ARABIC LIGATURE KAF WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FC3A ARABIC LIGATURE KAF WITH KHAH ISOLATED FORM: not included in any glyphset definition\n * U+FC3B ARABIC LIGATURE KAF WITH LAM ISOLATED FORM: not included in any glyphset definition\n * U+FC3C ARABIC LIGATURE KAF WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC3D ARABIC LIGATURE KAF WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FC3E ARABIC LIGATURE KAF WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FC3F ARABIC LIGATURE LAM WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC40 ARABIC LIGATURE LAM WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FC41 ARABIC LIGATURE LAM WITH KHAH ISOLATED FORM: not included in any glyphset definition\n * U+FC42 ARABIC LIGATURE LAM WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC43 ARABIC LIGATURE LAM WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FC44 ARABIC LIGATURE LAM WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FC45 ARABIC LIGATURE MEEM WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC46 ARABIC LIGATURE MEEM WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FC47 ARABIC LIGATURE MEEM WITH KHAH ISOLATED FORM: not included in any glyphset definition\n * U+FC48 ARABIC LIGATURE MEEM WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC49 ARABIC LIGATURE MEEM WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FC4A ARABIC LIGATURE MEEM WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FC4B ARABIC LIGATURE NOON WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC4C ARABIC LIGATURE NOON WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FC4D ARABIC LIGATURE NOON WITH KHAH ISOLATED FORM: not included in any glyphset definition\n * U+FC4E ARABIC LIGATURE NOON WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC4F ARABIC LIGATURE NOON WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FC50 ARABIC LIGATURE NOON WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FC51 ARABIC LIGATURE HEH WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC52 ARABIC LIGATURE HEH WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC53 ARABIC LIGATURE HEH WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FC54 ARABIC LIGATURE HEH WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FC55 ARABIC LIGATURE YEH WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC56 ARABIC LIGATURE YEH WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FC57 ARABIC LIGATURE YEH WITH KHAH ISOLATED FORM: not included in any glyphset definition\n * U+FC58 ARABIC LIGATURE YEH WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC59 ARABIC LIGATURE YEH WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FC5A ARABIC LIGATURE YEH WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FC5B ARABIC LIGATURE THAL WITH SUPERSCRIPT ALEF ISOLATED FORM: not included in any glyphset definition\n * U+FC5C ARABIC LIGATURE REH WITH SUPERSCRIPT ALEF ISOLATED FORM: not included in any glyphset definition\n * U+FC5D ARABIC LIGATURE ALEF MAKSURA WITH SUPERSCRIPT ALEF ISOLATED FORM: not included in any glyphset definition\n * U+FC5E ARABIC LIGATURE SHADDA WITH DAMMATAN ISOLATED FORM: not included in any glyphset definition\n * U+FC5F ARABIC LIGATURE SHADDA WITH KASRATAN ISOLATED FORM: not included in any glyphset definition\n * U+FC60 ARABIC LIGATURE SHADDA WITH FATHA ISOLATED FORM: not included in any glyphset definition\n * U+FC61 ARABIC LIGATURE SHADDA WITH DAMMA ISOLATED FORM: not included in any glyphset definition\n * U+FC62 ARABIC LIGATURE SHADDA WITH KASRA ISOLATED FORM: not included in any glyphset definition\n * U+FC63 ARABIC LIGATURE SHADDA WITH SUPERSCRIPT ALEF ISOLATED FORM: not included in any glyphset definition\n * U+FC64 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH REH FINAL FORM: not included in any glyphset definition\n * U+FC65 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH ZAIN FINAL FORM: not included in any glyphset definition\n * U+FC66 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FC67 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH NOON FINAL FORM: not included in any glyphset definition\n * U+FC68 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FC69 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FC6A ARABIC LIGATURE BEH WITH REH FINAL FORM: not included in any glyphset definition\n * U+FC6B ARABIC LIGATURE BEH WITH ZAIN FINAL FORM: not included in any glyphset definition\n * U+FC6C ARABIC LIGATURE BEH WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FC6D ARABIC LIGATURE BEH WITH NOON FINAL FORM: not included in any glyphset definition\n * U+FC6E ARABIC LIGATURE BEH WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FC6F ARABIC LIGATURE BEH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FC70 ARABIC LIGATURE TEH WITH REH FINAL FORM: not included in any glyphset definition\n * U+FC71 ARABIC LIGATURE TEH WITH ZAIN FINAL FORM: not included in any glyphset definition\n * U+FC72 ARABIC LIGATURE TEH WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FC73 ARABIC LIGATURE TEH WITH NOON FINAL FORM: not included in any glyphset definition\n * U+FC74 ARABIC LIGATURE TEH WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FC75 ARABIC LIGATURE TEH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FC76 ARABIC LIGATURE THEH WITH REH FINAL FORM: not included in any glyphset definition\n * U+FC77 ARABIC LIGATURE THEH WITH ZAIN FINAL FORM: not included in any glyphset definition\n * U+FC78 ARABIC LIGATURE THEH WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FC79 ARABIC LIGATURE THEH WITH NOON FINAL FORM: not included in any glyphset definition\n * U+FC7A ARABIC LIGATURE THEH WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FC7B ARABIC LIGATURE THEH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FC7C ARABIC LIGATURE FEH WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FC7D ARABIC LIGATURE FEH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FC7E ARABIC LIGATURE QAF WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FC7F ARABIC LIGATURE QAF WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FC80 ARABIC LIGATURE KAF WITH ALEF FINAL FORM: not included in any glyphset definition\n * U+FC81 ARABIC LIGATURE KAF WITH LAM FINAL FORM: not included in any glyphset definition\n * U+FC82 ARABIC LIGATURE KAF WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FC83 ARABIC LIGATURE KAF WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FC84 ARABIC LIGATURE KAF WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FC85 ARABIC LIGATURE LAM WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FC86 ARABIC LIGATURE LAM WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FC87 ARABIC LIGATURE LAM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FC88 ARABIC LIGATURE MEEM WITH ALEF FINAL FORM: not included in any glyphset definition\n * U+FC89 ARABIC LIGATURE MEEM WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FC8A ARABIC LIGATURE NOON WITH REH FINAL FORM: not included in any glyphset definition\n * U+FC8B ARABIC LIGATURE NOON WITH ZAIN FINAL FORM: not included in any glyphset definition\n * U+FC8C ARABIC LIGATURE NOON WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FC8D ARABIC LIGATURE NOON WITH NOON FINAL FORM: not included in any glyphset definition\n * U+FC8E ARABIC LIGATURE NOON WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FC8F ARABIC LIGATURE NOON WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FC90 ARABIC LIGATURE ALEF MAKSURA WITH SUPERSCRIPT ALEF FINAL FORM: not included in any glyphset definition\n * U+FC91 ARABIC LIGATURE YEH WITH REH FINAL FORM: not included in any glyphset definition\n * U+FC92 ARABIC LIGATURE YEH WITH ZAIN FINAL FORM: not included in any glyphset definition\n * U+FC93 ARABIC LIGATURE YEH WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FC94 ARABIC LIGATURE YEH WITH NOON FINAL FORM: not included in any glyphset definition\n * U+FC95 ARABIC LIGATURE YEH WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FC96 ARABIC LIGATURE YEH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FC97 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FC98 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FC99 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH KHAH INITIAL FORM: not included in any glyphset definition\n * U+FC9A ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FC9B ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH HEH INITIAL FORM: not included in any glyphset definition\n * U+FC9C ARABIC LIGATURE BEH WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FC9D ARABIC LIGATURE BEH WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FC9E ARABIC LIGATURE BEH WITH KHAH INITIAL FORM: not included in any glyphset definition\n * U+FC9F ARABIC LIGATURE BEH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCA0 ARABIC LIGATURE BEH WITH HEH INITIAL FORM: not included in any glyphset definition\n * U+FCA1 ARABIC LIGATURE TEH WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FCA2 ARABIC LIGATURE TEH WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FCA3 ARABIC LIGATURE TEH WITH KHAH INITIAL FORM: not included in any glyphset definition\n * U+FCA4 ARABIC LIGATURE TEH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCA5 ARABIC LIGATURE TEH WITH HEH INITIAL FORM: not included in any glyphset definition\n * U+FCA6 ARABIC LIGATURE THEH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCA7 ARABIC LIGATURE JEEM WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FCA8 ARABIC LIGATURE JEEM WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCA9 ARABIC LIGATURE HAH WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FCAA ARABIC LIGATURE HAH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCAB ARABIC LIGATURE KHAH WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FCAC ARABIC LIGATURE KHAH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCAD ARABIC LIGATURE SEEN WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FCAE ARABIC LIGATURE SEEN WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FCAF ARABIC LIGATURE SEEN WITH KHAH INITIAL FORM: not included in any glyphset definition\n * U+FCB0 ARABIC LIGATURE SEEN WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCB1 ARABIC LIGATURE SAD WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FCB2 ARABIC LIGATURE SAD WITH KHAH INITIAL FORM: not included in any glyphset definition\n * U+FCB3 ARABIC LIGATURE SAD WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCB4 ARABIC LIGATURE DAD WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FCB5 ARABIC LIGATURE DAD WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FCB6 ARABIC LIGATURE DAD WITH KHAH INITIAL FORM: not included in any glyphset definition\n * U+FCB7 ARABIC LIGATURE DAD WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCB8 ARABIC LIGATURE TAH WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FCB9 ARABIC LIGATURE ZAH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCBA ARABIC LIGATURE AIN WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FCBB ARABIC LIGATURE AIN WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCBC ARABIC LIGATURE GHAIN WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FCBD ARABIC LIGATURE GHAIN WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCBE ARABIC LIGATURE FEH WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FCBF ARABIC LIGATURE FEH WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FCC0 ARABIC LIGATURE FEH WITH KHAH INITIAL FORM: not included in any glyphset definition\n * U+FCC1 ARABIC LIGATURE FEH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCC2 ARABIC LIGATURE QAF WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FCC3 ARABIC LIGATURE QAF WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCC4 ARABIC LIGATURE KAF WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FCC5 ARABIC LIGATURE KAF WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FCC6 ARABIC LIGATURE KAF WITH KHAH INITIAL FORM: not included in any glyphset definition\n * U+FCC7 ARABIC LIGATURE KAF WITH LAM INITIAL FORM: not included in any glyphset definition\n * U+FCC8 ARABIC LIGATURE KAF WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCC9 ARABIC LIGATURE LAM WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FCCA ARABIC LIGATURE LAM WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FCCB ARABIC LIGATURE LAM WITH KHAH INITIAL FORM: not included in any glyphset definition\n * U+FCCC ARABIC LIGATURE LAM WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCCD ARABIC LIGATURE LAM WITH HEH INITIAL FORM: not included in any glyphset definition\n * U+FCCE ARABIC LIGATURE MEEM WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FCCF ARABIC LIGATURE MEEM WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FCD0 ARABIC LIGATURE MEEM WITH KHAH INITIAL FORM: not included in any glyphset definition\n * U+FCD1 ARABIC LIGATURE MEEM WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCD2 ARABIC LIGATURE NOON WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FCD3 ARABIC LIGATURE NOON WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FCD4 ARABIC LIGATURE NOON WITH KHAH INITIAL FORM: not included in any glyphset definition\n * U+FCD5 ARABIC LIGATURE NOON WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCD6 ARABIC LIGATURE NOON WITH HEH INITIAL FORM: not included in any glyphset definition\n * U+FCD7 ARABIC LIGATURE HEH WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FCD8 ARABIC LIGATURE HEH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCD9 ARABIC LIGATURE HEH WITH SUPERSCRIPT ALEF INITIAL FORM: not included in any glyphset definition\n * U+FCDA ARABIC LIGATURE YEH WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FCDB ARABIC LIGATURE YEH WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FCDC ARABIC LIGATURE YEH WITH KHAH INITIAL FORM: not included in any glyphset definition\n * U+FCDD ARABIC LIGATURE YEH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCDE ARABIC LIGATURE YEH WITH HEH INITIAL FORM: not included in any glyphset definition\n * U+FCDF ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH MEEM MEDIAL FORM: not included in any glyphset definition\n * U+FCE0 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH HEH MEDIAL FORM: not included in any glyphset definition\n * U+FCE1 ARABIC LIGATURE BEH WITH MEEM MEDIAL FORM: not included in any glyphset definition\n * U+FCE2 ARABIC LIGATURE BEH WITH HEH MEDIAL FORM: not included in any glyphset definition\n * U+FCE3 ARABIC LIGATURE TEH WITH MEEM MEDIAL FORM: not included in any glyphset definition\n * U+FCE4 ARABIC LIGATURE TEH WITH HEH MEDIAL FORM: not included in any glyphset definition\n * U+FCE5 ARABIC LIGATURE THEH WITH MEEM MEDIAL FORM: not included in any glyphset definition\n * U+FCE6 ARABIC LIGATURE THEH WITH HEH MEDIAL FORM: not included in any glyphset definition\n * U+FCE7 ARABIC LIGATURE SEEN WITH MEEM MEDIAL FORM: not included in any glyphset definition\n * U+FCE8 ARABIC LIGATURE SEEN WITH HEH MEDIAL FORM: not included in any glyphset definition\n * U+FCE9 ARABIC LIGATURE SHEEN WITH MEEM MEDIAL FORM: not included in any glyphset definition\n * U+FCEA ARABIC LIGATURE SHEEN WITH HEH MEDIAL FORM: not included in any glyphset definition\n * U+FCEB ARABIC LIGATURE KAF WITH LAM MEDIAL FORM: not included in any glyphset definition\n * U+FCEC ARABIC LIGATURE KAF WITH MEEM MEDIAL FORM: not included in any glyphset definition\n * U+FCED ARABIC LIGATURE LAM WITH MEEM MEDIAL FORM: not included in any glyphset definition\n * U+FCEE ARABIC LIGATURE NOON WITH MEEM MEDIAL FORM: not included in any glyphset definition\n * U+FCEF ARABIC LIGATURE NOON WITH HEH MEDIAL FORM: not included in any glyphset definition\n * U+FCF0 ARABIC LIGATURE YEH WITH MEEM MEDIAL FORM: not included in any glyphset definition\n * U+FCF1 ARABIC LIGATURE YEH WITH HEH MEDIAL FORM: not included in any glyphset definition\n * U+FCF2 ARABIC LIGATURE SHADDA WITH FATHA MEDIAL FORM: not included in any glyphset definition\n * U+FCF3 ARABIC LIGATURE SHADDA WITH DAMMA MEDIAL FORM: not included in any glyphset definition\n * U+FCF4 ARABIC LIGATURE SHADDA WITH KASRA MEDIAL FORM: not included in any glyphset definition\n * U+FCF5 ARABIC LIGATURE TAH WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FCF6 ARABIC LIGATURE TAH WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FCF7 ARABIC LIGATURE AIN WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FCF8 ARABIC LIGATURE AIN WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FCF9 ARABIC LIGATURE GHAIN WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FCFA ARABIC LIGATURE GHAIN WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FCFB ARABIC LIGATURE SEEN WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FCFC ARABIC LIGATURE SEEN WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FCFD ARABIC LIGATURE SHEEN WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FCFE ARABIC LIGATURE SHEEN WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FCFF ARABIC LIGATURE HAH WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FD00 ARABIC LIGATURE HAH WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FD01 ARABIC LIGATURE JEEM WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FD02 ARABIC LIGATURE JEEM WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FD03 ARABIC LIGATURE KHAH WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FD04 ARABIC LIGATURE KHAH WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FD05 ARABIC LIGATURE SAD WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FD06 ARABIC LIGATURE SAD WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FD07 ARABIC LIGATURE DAD WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FD08 ARABIC LIGATURE DAD WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FD09 ARABIC LIGATURE SHEEN WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FD0A ARABIC LIGATURE SHEEN WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FD0B ARABIC LIGATURE SHEEN WITH KHAH ISOLATED FORM: not included in any glyphset definition\n * U+FD0C ARABIC LIGATURE SHEEN WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FD0D ARABIC LIGATURE SHEEN WITH REH ISOLATED FORM: not included in any glyphset definition\n * U+FD0E ARABIC LIGATURE SEEN WITH REH ISOLATED FORM: not included in any glyphset definition\n * U+FD0F ARABIC LIGATURE SAD WITH REH ISOLATED FORM: not included in any glyphset definition\n * U+FD10 ARABIC LIGATURE DAD WITH REH ISOLATED FORM: not included in any glyphset definition\n * U+FD11 ARABIC LIGATURE TAH WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD12 ARABIC LIGATURE TAH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD13 ARABIC LIGATURE AIN WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD14 ARABIC LIGATURE AIN WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD15 ARABIC LIGATURE GHAIN WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD16 ARABIC LIGATURE GHAIN WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD17 ARABIC LIGATURE SEEN WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD18 ARABIC LIGATURE SEEN WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD19 ARABIC LIGATURE SHEEN WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD1A ARABIC LIGATURE SHEEN WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD1B ARABIC LIGATURE HAH WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD1C ARABIC LIGATURE HAH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD1D ARABIC LIGATURE JEEM WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD1E ARABIC LIGATURE JEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD1F ARABIC LIGATURE KHAH WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD20 ARABIC LIGATURE KHAH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD21 ARABIC LIGATURE SAD WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD22 ARABIC LIGATURE SAD WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD23 ARABIC LIGATURE DAD WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD24 ARABIC LIGATURE DAD WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD25 ARABIC LIGATURE SHEEN WITH JEEM FINAL FORM: not included in any glyphset definition\n * U+FD26 ARABIC LIGATURE SHEEN WITH HAH FINAL FORM: not included in any glyphset definition\n * U+FD27 ARABIC LIGATURE SHEEN WITH KHAH FINAL FORM: not included in any glyphset definition\n * U+FD28 ARABIC LIGATURE SHEEN WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FD29 ARABIC LIGATURE SHEEN WITH REH FINAL FORM: not included in any glyphset definition\n * U+FD2A ARABIC LIGATURE SEEN WITH REH FINAL FORM: not included in any glyphset definition\n * U+FD2B ARABIC LIGATURE SAD WITH REH FINAL FORM: not included in any glyphset definition\n * U+FD2C ARABIC LIGATURE DAD WITH REH FINAL FORM: not included in any glyphset definition\n * U+FD2D ARABIC LIGATURE SHEEN WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FD2E ARABIC LIGATURE SHEEN WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FD2F ARABIC LIGATURE SHEEN WITH KHAH INITIAL FORM: not included in any glyphset definition\n * U+FD30 ARABIC LIGATURE SHEEN WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD31 ARABIC LIGATURE SEEN WITH HEH INITIAL FORM: not included in any glyphset definition\n * U+FD32 ARABIC LIGATURE SHEEN WITH HEH INITIAL FORM: not included in any glyphset definition\n * U+FD33 ARABIC LIGATURE TAH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD34 ARABIC LIGATURE SEEN WITH JEEM MEDIAL FORM: not included in any glyphset definition\n * U+FD35 ARABIC LIGATURE SEEN WITH HAH MEDIAL FORM: not included in any glyphset definition\n * U+FD36 ARABIC LIGATURE SEEN WITH KHAH MEDIAL FORM: not included in any glyphset definition\n * U+FD37 ARABIC LIGATURE SHEEN WITH JEEM MEDIAL FORM: not included in any glyphset definition\n * U+FD38 ARABIC LIGATURE SHEEN WITH HAH MEDIAL FORM: not included in any glyphset definition\n * U+FD39 ARABIC LIGATURE SHEEN WITH KHAH MEDIAL FORM: not included in any glyphset definition\n * U+FD3A ARABIC LIGATURE TAH WITH MEEM MEDIAL FORM: not included in any glyphset definition\n * U+FD3B ARABIC LIGATURE ZAH WITH MEEM MEDIAL FORM: not included in any glyphset definition\n * U+FD3C ARABIC LIGATURE ALEF WITH FATHATAN FINAL FORM: not included in any glyphset definition\n * U+FD3D ARABIC LIGATURE ALEF WITH FATHATAN ISOLATED FORM: not included in any glyphset definition\n * U+FD50 ARABIC LIGATURE TEH WITH JEEM WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD51 ARABIC LIGATURE TEH WITH HAH WITH JEEM FINAL FORM: not included in any glyphset definition\n * U+FD52 ARABIC LIGATURE TEH WITH HAH WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FD53 ARABIC LIGATURE TEH WITH HAH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD54 ARABIC LIGATURE TEH WITH KHAH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD55 ARABIC LIGATURE TEH WITH MEEM WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FD56 ARABIC LIGATURE TEH WITH MEEM WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FD57 ARABIC LIGATURE TEH WITH MEEM WITH KHAH INITIAL FORM: not included in any glyphset definition\n * U+FD58 ARABIC LIGATURE JEEM WITH MEEM WITH HAH FINAL FORM: not included in any glyphset definition\n * U+FD59 ARABIC LIGATURE JEEM WITH MEEM WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FD5A ARABIC LIGATURE HAH WITH MEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD5B ARABIC LIGATURE HAH WITH MEEM WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD5C ARABIC LIGATURE SEEN WITH HAH WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FD5D ARABIC LIGATURE SEEN WITH JEEM WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FD5E ARABIC LIGATURE SEEN WITH JEEM WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD5F ARABIC LIGATURE SEEN WITH MEEM WITH HAH FINAL FORM: not included in any glyphset definition\n * U+FD60 ARABIC LIGATURE SEEN WITH MEEM WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FD61 ARABIC LIGATURE SEEN WITH MEEM WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FD62 ARABIC LIGATURE SEEN WITH MEEM WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FD63 ARABIC LIGATURE SEEN WITH MEEM WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD64 ARABIC LIGATURE SAD WITH HAH WITH HAH FINAL FORM: not included in any glyphset definition\n * U+FD65 ARABIC LIGATURE SAD WITH HAH WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FD66 ARABIC LIGATURE SAD WITH MEEM WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FD67 ARABIC LIGATURE SHEEN WITH HAH WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FD68 ARABIC LIGATURE SHEEN WITH HAH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD69 ARABIC LIGATURE SHEEN WITH JEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD6A ARABIC LIGATURE SHEEN WITH MEEM WITH KHAH FINAL FORM: not included in any glyphset definition\n * U+FD6B ARABIC LIGATURE SHEEN WITH MEEM WITH KHAH INITIAL FORM: not included in any glyphset definition\n * U+FD6C ARABIC LIGATURE SHEEN WITH MEEM WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FD6D ARABIC LIGATURE SHEEN WITH MEEM WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD6E ARABIC LIGATURE DAD WITH HAH WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD6F ARABIC LIGATURE DAD WITH KHAH WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FD70 ARABIC LIGATURE DAD WITH KHAH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD71 ARABIC LIGATURE TAH WITH MEEM WITH HAH FINAL FORM: not included in any glyphset definition\n * U+FD72 ARABIC LIGATURE TAH WITH MEEM WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FD73 ARABIC LIGATURE TAH WITH MEEM WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD74 ARABIC LIGATURE TAH WITH MEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD75 ARABIC LIGATURE AIN WITH JEEM WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FD76 ARABIC LIGATURE AIN WITH MEEM WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FD77 ARABIC LIGATURE AIN WITH MEEM WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD78 ARABIC LIGATURE AIN WITH MEEM WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD79 ARABIC LIGATURE GHAIN WITH MEEM WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FD7A ARABIC LIGATURE GHAIN WITH MEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD7B ARABIC LIGATURE GHAIN WITH MEEM WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD7C ARABIC LIGATURE FEH WITH KHAH WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FD7D ARABIC LIGATURE FEH WITH KHAH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD7E ARABIC LIGATURE QAF WITH MEEM WITH HAH FINAL FORM: not included in any glyphset definition\n * U+FD7F ARABIC LIGATURE QAF WITH MEEM WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FD80 ARABIC LIGATURE LAM WITH HAH WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FD81 ARABIC LIGATURE LAM WITH HAH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD82 ARABIC LIGATURE LAM WITH HAH WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD83 ARABIC LIGATURE LAM WITH JEEM WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FD84 ARABIC LIGATURE LAM WITH JEEM WITH JEEM FINAL FORM: not included in any glyphset definition\n * U+FD85 ARABIC LIGATURE LAM WITH KHAH WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FD86 ARABIC LIGATURE LAM WITH KHAH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD87 ARABIC LIGATURE LAM WITH MEEM WITH HAH FINAL FORM: not included in any glyphset definition\n * U+FD88 ARABIC LIGATURE LAM WITH MEEM WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FD89 ARABIC LIGATURE MEEM WITH HAH WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FD8A ARABIC LIGATURE MEEM WITH HAH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD8B ARABIC LIGATURE MEEM WITH HAH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD8C ARABIC LIGATURE MEEM WITH JEEM WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FD8D ARABIC LIGATURE MEEM WITH JEEM WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD8E ARABIC LIGATURE MEEM WITH KHAH WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FD8F ARABIC LIGATURE MEEM WITH KHAH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD92 ARABIC LIGATURE MEEM WITH JEEM WITH KHAH INITIAL FORM: not included in any glyphset definition\n * U+FD93 ARABIC LIGATURE HEH WITH MEEM WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FD94 ARABIC LIGATURE HEH WITH MEEM WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD95 ARABIC LIGATURE NOON WITH HAH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD96 ARABIC LIGATURE NOON WITH HAH WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD97 ARABIC LIGATURE NOON WITH JEEM WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FD98 ARABIC LIGATURE NOON WITH JEEM WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD99 ARABIC LIGATURE NOON WITH JEEM WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD9A ARABIC LIGATURE NOON WITH MEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD9B ARABIC LIGATURE NOON WITH MEEM WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD9C ARABIC LIGATURE YEH WITH MEEM WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FD9D ARABIC LIGATURE YEH WITH MEEM WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD9E ARABIC LIGATURE BEH WITH KHAH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD9F ARABIC LIGATURE TEH WITH JEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDA0 ARABIC LIGATURE TEH WITH JEEM WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FDA1 ARABIC LIGATURE TEH WITH KHAH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDA2 ARABIC LIGATURE TEH WITH KHAH WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FDA3 ARABIC LIGATURE TEH WITH MEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDA4 ARABIC LIGATURE TEH WITH MEEM WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FDA5 ARABIC LIGATURE JEEM WITH MEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDA6 ARABIC LIGATURE JEEM WITH HAH WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FDA7 ARABIC LIGATURE JEEM WITH MEEM WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FDA8 ARABIC LIGATURE SEEN WITH KHAH WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FDA9 ARABIC LIGATURE SAD WITH HAH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDAA ARABIC LIGATURE SHEEN WITH HAH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDAB ARABIC LIGATURE DAD WITH HAH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDAC ARABIC LIGATURE LAM WITH JEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDAD ARABIC LIGATURE LAM WITH MEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDAE ARABIC LIGATURE YEH WITH HAH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDAF ARABIC LIGATURE YEH WITH JEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDB0 ARABIC LIGATURE YEH WITH MEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDB1 ARABIC LIGATURE MEEM WITH MEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDB2 ARABIC LIGATURE QAF WITH MEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDB3 ARABIC LIGATURE NOON WITH HAH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDB4 ARABIC LIGATURE QAF WITH MEEM WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FDB5 ARABIC LIGATURE LAM WITH HAH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FDB6 ARABIC LIGATURE AIN WITH MEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDB7 ARABIC LIGATURE KAF WITH MEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDB8 ARABIC LIGATURE NOON WITH JEEM WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FDB9 ARABIC LIGATURE MEEM WITH KHAH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDBA ARABIC LIGATURE LAM WITH JEEM WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FDBB ARABIC LIGATURE KAF WITH MEEM WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FDBC ARABIC LIGATURE LAM WITH JEEM WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FDBD ARABIC LIGATURE NOON WITH JEEM WITH HAH FINAL FORM: not included in any glyphset definition\n * U+FDBE ARABIC LIGATURE JEEM WITH HAH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDBF ARABIC LIGATURE HAH WITH JEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDC0 ARABIC LIGATURE MEEM WITH JEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDC1 ARABIC LIGATURE FEH WITH MEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDC2 ARABIC LIGATURE BEH WITH HAH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDC3 ARABIC LIGATURE KAF WITH MEEM WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FDC4 ARABIC LIGATURE AIN WITH JEEM WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FDC5 ARABIC LIGATURE SAD WITH MEEM WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FDC6 ARABIC LIGATURE SEEN WITH KHAH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDC7 ARABIC LIGATURE NOON WITH JEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDF0 ARABIC LIGATURE SALLA USED AS KORANIC STOP SIGN ISOLATED FORM: not included in any glyphset definition\n * U+FDF1 ARABIC LIGATURE QALA USED AS KORANIC STOP SIGN ISOLATED FORM: not included in any glyphset definition\n * U+FDF3 ARABIC LIGATURE AKBAR ISOLATED FORM: not included in any glyphset definition\n * U+FDF4 ARABIC LIGATURE MOHAMMAD ISOLATED FORM: not included in any glyphset definition\n * U+FDF5 ARABIC LIGATURE SALAM ISOLATED FORM: not included in any glyphset definition\n * U+FDF6 ARABIC LIGATURE RASOUL ISOLATED FORM: not included in any glyphset definition\n * U+FDF7 ARABIC LIGATURE ALAYHE ISOLATED FORM: not included in any glyphset definition\n * U+FDF8 ARABIC LIGATURE WASALLAM ISOLATED FORM: not included in any glyphset definition\n * U+FDF9 ARABIC LIGATURE SALLA ISOLATED FORM: not included in any glyphset definition\n * U+FDFB ARABIC LIGATURE JALLAJALALOUHOU: not included in any glyphset definition\n * U+FE70 ARABIC FATHATAN ISOLATED FORM: not included in any glyphset definition\n * U+FE71 ARABIC TATWEEL WITH FATHATAN ABOVE: not included in any glyphset definition\n * U+FE72 ARABIC DAMMATAN ISOLATED FORM: not included in any glyphset definition\n * U+FE74 ARABIC KASRATAN ISOLATED FORM: not included in any glyphset definition\n * U+FE76 ARABIC FATHA ISOLATED FORM: not included in any glyphset definition\n * U+FE77 ARABIC FATHA MEDIAL FORM: not included in any glyphset definition\n * U+FE78 ARABIC DAMMA ISOLATED FORM: not included in any glyphset definition\n * U+FE79 ARABIC DAMMA MEDIAL FORM: not included in any glyphset definition\n * U+FE7A ARABIC KASRA ISOLATED FORM: not included in any glyphset definition\n * U+FE7B ARABIC KASRA MEDIAL FORM: not included in any glyphset definition\n * U+FE7C ARABIC SHADDA ISOLATED FORM: not included in any glyphset definition\n * U+FE7D ARABIC SHADDA MEDIAL FORM: not included in any glyphset definition\n * U+FE7E ARABIC SUKUN ISOLATED FORM: not included in any glyphset definition\n * U+FE7F ARABIC SUKUN MEDIAL FORM: not included in any glyphset definition\n\nOr you can add the above codepoints to one of the subsets supported by the font: `arabic`, `latin`, `latin-ext`, `menu` [code: unreachable-subsetting]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This check ensures that all encoded glyphs in the font are covered by a\n        subset declared in the METADATA.pb. Google Fonts splits the font into\n        a set of subset fonts based on the contents of the `subsets` field and\n        the subset definitions in the `glyphsets` repository.\n\n        Any encoded glyphs which are not by any of these subset definitions\n        will not be served in the subsetted fonts, and so will be unreachable to\n        the end user.\n    ",
                    "result": "WARN",
                    "severity": 2
                },
                {
                    "description": "Substitute copyright, registered and trademark symbols in name table entries.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/unwanted_chars>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "No need to substitute copyright, registered and trademark symbols in name table entries of this font.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Check the OS/2 usWeightClass is appropriate for the font's best SubFamily name.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/usweightclass>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2 usWeightClass is good",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Google Fonts expects variable fonts, static ttfs and static otfs to have\n        differing OS/2 usWeightClass values.\n\n        - For Variable Fonts, Thin-Black must be 100-900\n\n        - For static ttfs, Thin-Black can be 100-900 or 250-900\n\n        - For static otfs, Thin-Black must be 250-900\n\n        If static otfs are set lower than 250, text may appear blurry in\n        legacy Windows applications.\n\n        Glyphsapp users can change the usWeightClass value of an instance by adding\n        a 'weightClass' customParameter.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check font has a license.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/family/has_license>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Found license at '/Users/simon/others-repos/fonts/ofl/amiri/OFL.txt'",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Check license file has good copyright string.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/license/OFL_copyright>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "looks good",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        An OFL.txt file's first line should be the font copyright e.g:\n        \"Copyright 2019 The Montserrat Project Authors\n        (https://github.com/julietaula/montserrat)\"\n    ",
                    "result": "PASS",
                    "severity": 10
                },
                {
                    "description": "Check OFL body text is correct.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/license/OFL_body_text>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OFL license body text is correct",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check OFL body text is correct.\n        Often users will accidently delete parts of the body text.\n    ",
                    "result": "PASS",
                    "severity": 10
                },
                {
                    "description": "Check copyright namerecords match license file.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/license>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Licensing entry on name table is correctly set.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        A known licensing description must be provided in the NameID 14\n        (LICENSE DESCRIPTION) entries of the name table.\n\n        The source of truth for this check (to determine which license is in use) is\n        a file placed side-by-side to your font project including the licensing terms.\n\n        Depending on the chosen license, one of the following string snippets is\n        expected to be found on the NameID 13 (LICENSE DESCRIPTION) entries of the\n        name table:\n\n        - \"This Font Software is licensed under the SIL Open Font License, Version 1.1.\n          This license is available with a FAQ at: https://scripts.sil.org/OFL\"\n\n        - \"Licensed under the Apache License, Version 2.0\"\n\n        - \"Licensed under the Ubuntu Font Licence 1.0.\"\n\n\n        Currently accepted licenses are Apache or Open Font License. For a small set\n        of legacy families the Ubuntu Font License may be acceptable as well.\n\n        When in doubt, please choose OFL for new font projects.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "License URL matches License text on name table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/license_url>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font has a valid license URL in NAME table.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        A known license URL must be provided in the NameID 14 (LICENSE INFO URL)\n        entry of the name table.\n\n        The source of truth for this check is the licensing text found on the NameID 13\n        entry (LICENSE DESCRIPTION).\n\n        The string snippets used for detecting licensing terms are:\n\n        - \"This Font Software is licensed under the SIL Open Font License, Version 1.1.\n          This license is available with a FAQ at: https://scripts.sil.org/OFL\"\n\n        - \"Licensed under the Apache License, Version 2.0\"\n\n        - \"Licensed under the Ubuntu Font Licence 1.0.\"\n\n\n        Currently accepted licenses are Apache or Open Font License. For a small set of\n        legacy families the Ubuntu Font License may be acceptable as well.\n\n        When in doubt, please choose OFL for new font projects.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Description strings in the name table must not exceed 200 characters.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/description_max_length>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "A few name table entries with ID=10 (NameID.DESCRIPTION) are longer than 200 characters. Please check whether those entries are copyright notices mistakenly stored in the description string entries by a bug in an old FontLab version. If that's the case, then such copyright notices must be removed from these entries. [code: too-long]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        An old FontLab version had a bug which caused it to store copyright notices\n        in nameID 10 entries.\n\n        In order to detect those and distinguish them from actual legitimate usage of\n        this name table entry, we expect that such strings do not exceed a reasonable\n        length of 200 chars.\n\n        Longer strings are likely instances of the FontLab bug.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Show hinting filesize impact.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/hinting_impact>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Hinting filesize impact:\n\n |               | /Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf          |\n |:------------- | ---------------:|\n | Dehinted Size | 415.9kb |\n | Hinted Size   | 415.9kb   |\n | Increase      | 24 bytes      |\n | Change        | 0.0 %  |\n [code: size-impact]",
                            "status": "INFO",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This check is merely informative, displaying and useful comparison of filesizes\n        of hinted versus unhinted font files.\n    ",
                    "result": "INFO"
                },
                {
                    "description": "Ensure files are not too large.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/file_size>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font had a reasonable file size",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Serving extremely large font files on Google Fonts causes usability issues.\n        This check ensures that file sizes are reasonable.\n    ",
                    "result": "PASS",
                    "severity": 10
                },
                {
                    "description": "Version format is correct in 'name' table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/version_format>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Version format in NAME table entries is correct.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Font has ttfautohint params?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/has_ttfautohint_params>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font appears to our heuristic as not hinted using ttfautohint. [code: not-hinted]",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "result": "SKIP"
                },
                {
                    "description": "Font has old ttfautohint applied?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/old_ttfautohint>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Could not detect which version of ttfautohint was used in this font. It is typically specified as a comment in the font version entries of the 'name' table. Such font version strings are currently: ['Version 1.000'] [code: version-not-detected]",
                            "status": "INFO",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check if font has been hinted with an outdated version of ttfautohint.\n    ",
                    "result": "INFO"
                },
                {
                    "description": "EPAR table present in font?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/epar>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "EPAR table not present in font. To learn more see https://github.com/fonttools/fontbakery/issues/818 [code: lacks-EPAR]",
                            "status": "INFO",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The EPAR table is/was a way of expressing common licensing permissions and\n        restrictions in metadata; while almost nothing supported it, Dave Crossland\n        wonders that adding it to everything in Google Fonts could help make it\n        more popular.\n\n        More info is available at:\n        https://davelab6.github.io/epar/\n    ",
                    "result": "INFO",
                    "severity": 1
                },
                {
                    "description": "Is the Grid-fitting and Scan-conversion Procedure ('gasp') table set to optimize rendering?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/gasp>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "These are the ppm ranges declared on the gasp table:\n\nPPM <= 65535:\n\tflag = 0x0F\n\t- Use grid-fitting\n\t- Use grayscale rendering\n\t- Use gridfitting with ClearType symmetric smoothing\n\t- Use smoothing along multiple axes with ClearType\u00ae\n [code: ranges]",
                            "status": "INFO",
                            "traceback": null
                        },
                        {
                            "message": "The 'gasp' table is correctly set, with one gaspRange:value of 0xFFFF:0x0F.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Traditionally version 0 'gasp' tables were set so that font sizes below 8 ppem\n        had no grid fitting but did have antialiasing. From 9-16 ppem, just grid\n        fitting.\n        And fonts above 17ppem had both antialiasing and grid fitting toggled on.\n        The use of accelerated graphics cards and higher resolution screens make this\n        approach obsolete. Microsoft's DirectWrite pushed this even further with much\n        improved rendering built into the OS and apps.\n\n        In this scenario it makes sense to simply toggle all 4 flags ON for all font\n        sizes.\n    ",
                    "result": "INFO"
                },
                {
                    "description": "Make sure family name does not begin with a digit.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/familyname_first_char>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font family name first character is not a digit.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Font family names which start with a numeral are often not discoverable\n        in Windows applications.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Are there non-ASCII characters in ASCII-only NAME table entries?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/ascii_only_entries>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "None of the ASCII-only NAME table entries contain non-ASCII characteres.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The OpenType spec requires ASCII for the POSTSCRIPT_NAME (nameID 6).\n\n        For COPYRIGHT_NOTICE (nameID 0) ASCII is required because that string should be\n        the same in CFF fonts which also have this requirement in the OpenType spec.\n\n        Note:\n        A common place where we find non-ASCII strings is on name table entries\n        with NameID > 18, which are expressly for localising the ASCII-only IDs\n        into Hindi / Arabic / etc.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: check if fonts field only has unique \"full_name\" values.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/unique_full_name_values>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb \"fonts\" field only has unique \"full_name\" values.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: check if fonts field only contains unique style:weight pairs.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/unique_weight_style_pairs>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb \"fonts\" field only has unique style:weight pairs.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb license is \"APACHE2\", \"UFL\" or \"OFL\"?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/license>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font license is declared in METADATA.pb as \"OFL\"",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb should contain at least \"menu\" and \"latin\" subsets.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/menu_and_latin>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb contains \"menu\" and \"latin\" subsets.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb subsets should be alphabetically ordered.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/subsets_order>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb subsets are sorted in alphabetical order.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Check METADATA.pb includes production subsets.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/includes_production_subsets>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "No missing subsets",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check METADATA.pb file includes the same subsets as the family in production.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Copyright notice is the same in all fonts?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/copyright>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Copyright is consistent across family",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Check that METADATA.pb family values are all the same.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/familyname>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb: Family name is the same in all metadata \"fonts\" items.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: According to Google Fonts standards, families should have a Regular style.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/has_regular>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Family has a Regular style.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Regular should be 400.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/regular_is_400>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Regular has weight = 400.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Checks METADATA.pb font.name field matches family name declared on the name table.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/nameid/family_name>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Family name \"Amiri\" is identical in METADATA.pb and on the TTF file.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Checks METADATA.pb font.post_script_name matches postscript name declared on the name table.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/nameid/post_script_name>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Postscript name \"Amiri-BoldItalic\" is identical in METADATA.pb and on the TTF file.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb font.full_name value matches fullname declared on the name table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/nameid/full_name>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font fullname \"Amiri Bold Italic\" is identical in METADATA.pb and on the TTF file.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb font.name value should be same as the family name declared on the name table.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/nameid/font_name>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK: Family name \"Amiri\" is identical in METADATA.pb and on the TTF file.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This check ensures consistency between the font name declared on the name table\n        and the contents of the METADATA.pb file.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb font.full_name and font.post_script_name fields have equivalent values ?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/match_fullname_postscript>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb font fields \"full_name\" and \"post_script_name\" have equivalent values.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb font.filename and font.post_script_name fields have equivalent values?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/match_filename_postscript>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb font fields \"filename\" and \"post_script_name\" have equivalent values.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb font.name field contains font name in right format?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/valid_name_values>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb font.name field contains font name in right format.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb font.full_name field contains font name in right format?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/valid_full_name_values>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb font.full_name field contains font name in right format. (\"Amiri\" in \"Amiri Bold Italic\")",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb font.filename field contains font name in right format?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/valid_filename_values>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb filename field contains font name in right format.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb font.post_script_name field contains font name in right format?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/valid_post_script_name_values>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb postScriptName field contains font name in right format.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Check name ID 25 to end with \"Italic\" for Italic VFs.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/valid_nameid25>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Not an Italic VF.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Due to a bug in (at least) Adobe Indesign, name ID 25\n        needs to be different for Italic VFs than their Upright counterparts.\n        Google Fonts chooses to append \"Italic\" here.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Copyright notices match canonical pattern in METADATA.pb",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/valid_copyright>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb copyright string is good",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The expected pattern for the copyright string adheres to the following rules:\n\n        * It must say \"Copyright\" followed by a 4 digit year (optionally followed by\n          a hyphen and another 4 digit year)\n\n        * Then it must say \"The <familyname> Project Authors\"\n\n        * And within parentheses, a URL for a git repository must be provided\n\n        * The check is case insensitive and does not validate whether the familyname\n          is correct, even though we'd expect it is (and we may soon update the check\n          to validate that aspect as well!)\n\n\n        Here is an example of a valid copyright string:\n\n        \"Copyright 2017 The Archivo Black Project Authors\n         (https://github.com/Omnibus-Type/ArchivoBlack)\"\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Copyright notices match canonical pattern in fonts",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/font_copyright>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Name Table entry: Copyright field 'Copyright 2010-2022 The Amiri Project Authors (https://github.com/aliftype/amiri).' matches canonical pattern.",
                            "status": "PASS",
                            "traceback": null
                        },
                        {
                            "message": "Name table copyright entries are good",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Copyright notice on METADATA.pb should not contain 'Reserved Font Name'.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/reserved_font_name>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb copyright field does not contain \"Reserved Font Name\".",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Copyright notice shouldn't exceed 500 chars.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/copyright_max_length>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Copyright notice string is shorter than 500 chars.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Font filenames match font.filename entries?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/filenames>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Filenames in METADATA.pb look good.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Note:\n        This check only looks for files in the current directory.\n\n        Font files in subdirectories are checked by these other two checks:\n         - com.google.fonts/check/metadata/undeclared_fonts\n         - com.google.fonts/check/repo/vf_has_static_fonts\n\n        We may want to merge them all into a single check.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb font.style \"italic\" matches font internals?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/italic_style>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK: METADATA.pb font.style \"italic\" matches font internals.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb font.style \"normal\" matches font internals?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/normal_style>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "This check only applies to normal fonts.",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "result": "SKIP"
                },
                {
                    "description": "METADATA.pb font.name and font.full_name fields match the values declared on the name table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/nameid/family_and_full_names>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb familyname and fullName fields match corresponding name table entries.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Check font name is the same as family name.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/match_name_familyname>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font name is the same as family name.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Check that font weight has a canonical value.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/canonical_weight_value>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font weight has a canonical value.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Check METADATA.pb font weights are correct.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/os2_weightclass>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2 usWeightClass or wght axis value matches weight specified at METADATA.pb",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check METADATA.pb font weights are correct.\n\n        For static fonts, the metadata weight should be the same as the static font's\n        OS/2 usWeightClass.\n\n        For variable fonts, the weight value should be 400 if the font's wght axis range\n        includes 400, otherwise it should be the value closest to 400.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb weight matches postScriptName for static fonts.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/match_weight_postscript>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Weight value matches postScriptName.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Font styles are named canonically?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/canonical_style_names>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font styles are named canonically.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Check URL on copyright string is the same as in repository_url field.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/consistent_repo_urls>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Sometimes, perhaps due to copy-pasting, projects may declare different URLs\n        between the font.coyright and the family.sources.repository_url fields.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Check for primary_script",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/primary_script>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Try to guess font's primary script and see if that's set in METADATA.pb.\n        This is an educated guess based on the number of glyphs per script in the font\n        and should be taken with caution.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Stricter unitsPerEm criteria for Google Fonts.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/unitsperem_strict>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font em size is good (unitsPerEm = 1000).",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Even though the OpenType spec allows unitsPerEm to be any value between 16\n        and 16384, the Google Fonts project aims at a narrower set of reasonable values.\n\n        The spec suggests usage of powers of two in order to get some performance\n        improvements on legacy renderers, so those values are acceptable.\n\n        But values of 500 or 1000 are also acceptable, with the added benefit that it\n        makes upm math easier for designers, while the performance hit of not using a\n        power of two is most likely negligible nowadays.\n\n        Additionally, values above 2048 would likely result in unreasonable\n        filesize increases.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Glyphs are similiar to Google Fonts version?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/production_glyphs_similarity>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Following glyphs differ greatly from Google Fonts version:\n\t* glyph01097\n\t* glyph01098\n\t* glyph01099\n\t* glyph01100\n\t* glyph01101\n\t* glyph01102\n\t* glyph01103\n\t* glyph01104\n\t* glyph01105\n\t* glyph01106\n\t* glyph01107\n\t* glyph01108\n\t* glyph01109\n\t* glyph01110\n\t* glyph01111\n\t* glyph01112\n\t* glyph01114\n\t* glyph01115\n\t* glyph01116\n\t* glyph01117\n\t* glyph01118\n\t* glyph01119\n\t* glyph01120\n\t* glyph01121\n\t* glyph01122\n\t* glyph01124\n\t* glyph01125\n\t* glyph01128\n\t* glyph01129\n\t* glyph01130\n\t* glyph01131\n\t* glyph01132\n\t* glyph01133\n\t* glyph01134\n\t* glyph01135\n\t* glyph01136\n\t* glyph01137\n\t* glyph01138\n\t* glyph01139\n\t* glyph01140\n\t* glyph01141\n\t* glyph01142\n\t* glyph01143\n\t* glyph01144\n\t* glyph01145\n\t* glyph01146\n\t* glyph01147\n\t* glyph01148\n\t* glyph01149\n\t* glyph01151\n\t* glyph01152\n\t* glyph01153\n\t* glyph01154\n\t* glyph01156\n\t* glyph01157\n\t* glyph01158\n\t* glyph01159\n\t* glyph01160\n\t* glyph01161\n\t* glyph01162\n\t* glyph01163\n\t* glyph01165\n\t* glyph01166\n\t* glyph01168\n\t* glyph01169\n\t* glyph01170\n\t* glyph01171\n\t* glyph01172\n\t* glyph01173\n\t* glyph01174\n\t* glyph01175\n\t* glyph01176\n\t* glyph01177\n\t* glyph01179\n\t* glyph01180\n\t* glyph01181\n\t* glyph01182\n\t* glyph01184\n\t* glyph01185\n\t* glyph01186\n\t* glyph01187\n\t* glyph01188\n\t* glyph01189\n\t* glyph01191\n\t* glyph01193\n\t* glyph01194\n\t* glyph01195\n\t* glyph01196\n\t* glyph01197\n\t* glyph01198\n\t* glyph01199\n\t* glyph01200\n\t* glyph01202\n\t* glyph01204\n\t* glyph01206\n\t* glyph01207\n\t* glyph01210\n\t* glyph01212\n\t* glyph01213\n\t* glyph01214\n\t* glyph01216\n\t* glyph01217\n\t* glyph01221\n\t* glyph01223\n\t* glyph01225\n\t* glyph01227\n\t* glyph01228\n\t* glyph01229\n\t* glyph01230\n\t* glyph01231\n\t* glyph01232\n\t* glyph01233\n\t* glyph01234\n\t* glyph01236\n\t* glyph01237\n\t* glyph01239\n\t* glyph01240\n\t* glyph01241\n\t* glyph01242\n\t* glyph01243\n\t* glyph01244\n\t* glyph01245\n\t* glyph01246\n\t* glyph01247\n\t* glyph01248\n\t* glyph01249\n\t* glyph01250\n\t* glyph01251\n\t* glyph01252\n\t* glyph01255\n\t* glyph01256\n\t* glyph01257\n\t* glyph01258\n\t* glyph01259\n\t* glyph01260\n\t* glyph01261\n\t* glyph01262\n\t* glyph01263\n\t* glyph01264\n\t* glyph01265\n\t* glyph01266\n\t* glyph01267\n\t* glyph01268\n\t* glyph01269\n\t* glyph01270\n\t* glyph01271\n\t* glyph01272\n\t* glyph01273\n\t* glyph01274\n\t* glyph01275\n\t* glyph01276\n\t* glyph01278\n\t* glyph01279\n\t* glyph01280\n\t* glyph01281\n\t* glyph01282\n\t* glyph01283\n\t* glyph01284\n\t* glyph01285\n\t* glyph01286\n\t* glyph01287\n\t* glyph01288\n\t* glyph01289\n\t* glyph01290\n\t* glyph01291\n\t* glyph01292\n\t* glyph01293\n\t* glyph01294\n\t* glyph01295\n\t* glyph01296\n\t* glyph01297\n\t* glyph01298\n\t* glyph01299\n\t* glyph01300\n\t* glyph01301\n\t* glyph01302\n\t* glyph01303\n\t* glyph01304\n\t* glyph01305\n\t* glyph01306\n\t* glyph01307\n\t* glyph01308\n\t* glyph01309\n\t* glyph01310\n\t* glyph01311\n\t* glyph01312\n\t* glyph01313\n\t* glyph01314\n\t* glyph01315\n\t* glyph01316\n\t* glyph01317\n\t* glyph01318\n\t* glyph01319\n\t* glyph01320\n\t* glyph01321\n\t* glyph01322\n\t* glyph01323\n\t* glyph01324\n\t* glyph01326\n\t* glyph01327\n\t* glyph01328\n\t* glyph01329\n\t* glyph01330\n\t* glyph01331\n\t* glyph01332\n\t* glyph01333\n\t* glyph01334\n\t* glyph01335\n\t* glyph01337\n\t* glyph01338\n\t* glyph01339\n\t* glyph01340\n\t* glyph01341\n\t* glyph01343\n\t* glyph01344\n\t* glyph01346\n\t* glyph01347\n\t* glyph01348\n\t* glyph01349\n\t* glyph01350\n\t* glyph01351\n\t* glyph01352\n\t* glyph01353\n\t* glyph01354\n\t* glyph01355\n\t* glyph01356\n\t* glyph01357\n\t* glyph01358\n\t* glyph01359\n\t* glyph01360\n\t* glyph01361\n\t* glyph01362\n\t* glyph01363\n\t* glyph01364\n\t* glyph01365\n\t* glyph01366\n\t* glyph01368\n\t* glyph01369\n\t* glyph01370\n\t* glyph01371\n\t* glyph01372\n\t* glyph01373\n\t* glyph01374\n\t* glyph01375\n\t* glyph01376\n\t* glyph01377\n\t* glyph01378\n\t* glyph01379\n\t* glyph01380\n\t* glyph01381\n\t* glyph01382\n\t* glyph01383\n\t* glyph01384\n\t* glyph01386\n\t* glyph01387\n\t* glyph01388\n\t* glyph01389\n\t* glyph01390\n\t* glyph01391\n\t* glyph01392\n\t* glyph01393\n\t* glyph01394\n\t* glyph01395\n\t* glyph01396\n\t* glyph01397\n\t* glyph01399\n\t* glyph01401\n\t* glyph01402\n\t* glyph01403\n\t* glyph01404\n\t* glyph01405\n\t* glyph01406\n\t* glyph01407\n\t* glyph01408\n\t* glyph01409\n\t* glyph01410\n\t* glyph01411\n\t* glyph01412\n\t* glyph01413\n\t* glyph01414\n\t* glyph01415\n\t* glyph01416\n\t* glyph01417\n\t* glyph01418\n\t* glyph01419\n\t* glyph01420\n\t* glyph01421\n\t* glyph01422\n\t* glyph01423\n\t* glyph01424\n\t* glyph01425\n\t* glyph01426\n\t* glyph01427\n\t* glyph01428\n\t* glyph01429\n\t* glyph01430\n\t* glyph01431\n\t* glyph01432\n\t* glyph01433\n\t* glyph01434\n\t* glyph01435\n\t* glyph01436\n\t* glyph01437\n\t* glyph01438\n\t* glyph01439\n\t* glyph01440\n\t* glyph01441\n\t* glyph01442\n\t* glyph01443\n\t* glyph01444\n\t* glyph01445\n\t* glyph01446\n\t* glyph01447\n\t* glyph01448\n\t* glyph01450\n\t* glyph01451\n\t* glyph01453\n\t* glyph01454\n\t* glyph01455\n\t* glyph01458\n\t* glyph01459\n\t* glyph01460\n\t* glyph01461\n\t* glyph01462\n\t* glyph01463\n\t* glyph01464\n\t* glyph01465\n\t* glyph01466\n\t* glyph01467\n\t* glyph01469\n\t* glyph01471\n\t* glyph01472\n\t* glyph01473\n\t* glyph01474\n\t* glyph01475\n\t* glyph01476\n\t* glyph01477\n\t* glyph01478\n\t* glyph01479\n\t* glyph01480\n\t* glyph01481\n\t* glyph01482\n\t* glyph01483\n\t* glyph01484\n\t* glyph01485\n\t* glyph01486\n\t* glyph01487\n\t* glyph01488\n\t* glyph01489\n\t* glyph01490\n\t* glyph01491\n\t* glyph01492\n\t* glyph01493\n\t* glyph01494\n\t* glyph01495\n\t* glyph01496\n\t* glyph01497\n\t* glyph01498\n\t* glyph01499\n\t* glyph01500\n\t* glyph01501\n\t* glyph01502\n\t* glyph01503\n\t* glyph01504\n\t* glyph01505\n\t* glyph01506\n\t* glyph01507\n\t* glyph01508\n\t* glyph01509\n\t* glyph01510\n\t* glyph01511\n\t* glyph01512\n\t* glyph01514\n\t* glyph01515\n\t* glyph01516\n\t* glyph01517\n\t* glyph01518\n\t* glyph01519\n\t* glyph01520\n\t* glyph01521\n\t* glyph01522\n\t* glyph01523\n\t* glyph01524\n\t* glyph01525\n\t* glyph01526\n\t* glyph01527\n\t* glyph01528\n\t* glyph01529\n\t* glyph01530\n\t* glyph01531\n\t* glyph01532\n\t* glyph01533\n\t* glyph01534\n\t* glyph01535\n\t* glyph01536\n\t* glyph01537\n\t* glyph01538\n\t* glyph01539\n\t* glyph01540\n\t* glyph01541\n\t* glyph01542\n\t* glyph01543\n\t* glyph01544\n\t* glyph01545\n\t* glyph01546\n\t* glyph01547\n\t* glyph01548\n\t* glyph01549\n\t* glyph01550\n\t* glyph01551\n\t* glyph01552\n\t* glyph01553\n\t* glyph01554\n\t* glyph01555\n\t* glyph01556\n\t* glyph01557\n\t* glyph01558\n\t* glyph01559\n\t* glyph01560\n\t* glyph01561\n\t* glyph01562\n\t* glyph01563\n\t* glyph01564\n\t* glyph01565\n\t* glyph01566\n\t* glyph01567\n\t* glyph01568\n\t* glyph01569\n\t* glyph01570\n\t* glyph01571\n\t* glyph01572\n\t* glyph01573\n\t* glyph01574\n\t* glyph01575\n\t* glyph01576\n\t* glyph01578\n\t* glyph01579\n\t* glyph01580\n\t* glyph01581\n\t* glyph01582\n\t* glyph01583\n\t* glyph01584\n\t* glyph01585\n\t* glyph01586\n\t* glyph01587\n\t* glyph01588\n\t* glyph01589\n\t* glyph01590\n\t* glyph01591\n\t* glyph01592\n\t* glyph01594\n\t* glyph01595\n\t* glyph01596\n\t* glyph01597\n\t* glyph01599\n\t* glyph01600\n\t* glyph01601\n\t* glyph01603\n\t* glyph01604\n\t* glyph01605\n\t* glyph01606\n\t* glyph01607\n\t* glyph01608\n\t* glyph01609\n\t* glyph01610\n\t* glyph01611\n\t* glyph01612\n\t* glyph01613\n\t* glyph01614\n\t* glyph01615\n\t* glyph01616\n\t* glyph01617\n\t* glyph01618\n\t* glyph01619\n\t* glyph01620\n\t* glyph01621\n\t* glyph01622\n\t* glyph01623\n\t* glyph01624\n\t* glyph01625\n\t* glyph01626\n\t* glyph01627\n\t* glyph01628\n\t* glyph01629\n\t* glyph01630\n\t* glyph01631\n\t* glyph01632\n\t* glyph01633\n\t* glyph01634\n\t* glyph01635\n\t* glyph01636\n\t* glyph01637\n\t* glyph01638\n\t* glyph01639\n\t* glyph01640\n\t* glyph01641\n\t* glyph01642\n\t* glyph01643\n\t* glyph01644\n\t* glyph01645\n\t* glyph01646\n\t* glyph01647\n\t* glyph01648\n\t* glyph01649\n\t* glyph01650\n\t* glyph01651\n\t* glyph01652\n\t* glyph01653\n\t* glyph01654\n\t* glyph01655\n\t* glyph01656\n\t* glyph01657\n\t* glyph01658\n\t* glyph01659\n\t* glyph01660\n\t* glyph01661\n\t* glyph01662\n\t* glyph01663\n\t* glyph01664\n\t* glyph01665\n\t* glyph01666\n\t* glyph01667\n\t* glyph01668\n\t* glyph01670\n\t* glyph01671\n\t* glyph01672\n\t* glyph01673\n\t* glyph01674\n\t* glyph01675\n\t* glyph01676\n\t* glyph01677\n\t* glyph01678\n\t* glyph01679\n\t* glyph01680\n\t* glyph01681\n\t* glyph01682\n\t* glyph01683\n\t* glyph01684\n\t* glyph01685\n\t* glyph01686\n\t* glyph01687\n\t* glyph01688\n\t* glyph01689\n\t* glyph01690\n\t* glyph01691\n\t* glyph01692\n\t* glyph01693\n\t* glyph01694\n\t* glyph01695\n\t* glyph01697\n\t* glyph01698\n\t* glyph01699\n\t* glyph01700\n\t* glyph01701\n\t* glyph01702\n\t* glyph01703\n\t* glyph01704\n\t* glyph01705\n\t* glyph01706\n\t* glyph01707\n\t* glyph01708\n\t* glyph01709\n\t* glyph01710\n\t* glyph01711\n\t* glyph01712\n\t* glyph01713\n\t* glyph01714\n\t* glyph01715\n\t* glyph01716\n\t* glyph01717\n\t* glyph01718\n\t* glyph01719\n\t* glyph01720\n\t* glyph01721\n\t* glyph01723\n\t* glyph01724\n\t* glyph01725\n\t* glyph01726\n\t* glyph01728\n\t* glyph01729\n\t* glyph01730\n\t* glyph01732\n\t* glyph01733\n\t* glyph01734\n\t* glyph01735\n\t* glyph01736\n\t* glyph01737\n\t* glyph01738\n\t* glyph01739\n\t* glyph01740\n\t* glyph01741\n\t* glyph01742\n\t* glyph01743\n\t* glyph01744\n\t* glyph01745\n\t* glyph01746\n\t* glyph01747\n\t* glyph01748\n\t* glyph01749\n\t* glyph01750\n\t* glyph01751\n\t* glyph01752\n\t* glyph01753\n\t* glyph01754\n\t* glyph01755\n\t* glyph01756\n\t* glyph01757\n\t* glyph01758\n\t* glyph01759\n\t* glyph01760\n\t* glyph01761\n\t* glyph01763\n\t* glyph01764\n\t* glyph01765\n\t* glyph01766\n\t* glyph01767\n\t* glyph01768\n\t* glyph01769\n\t* glyph01770\n\t* glyph01771\n\t* glyph01772\n\t* glyph01773\n\t* glyph01774\n\t* glyph01776\n\t* glyph01777\n\t* glyph01778\n\t* glyph01779\n\t* glyph01780\n\t* glyph01781\n\t* glyph01782\n\t* glyph01783\n\t* glyph01784\n\t* glyph01785\n\t* glyph01786\n\t* glyph01787\n\t* glyph01788\n\t* glyph01789\n\t* glyph01790\n\t* glyph01791\n\t* glyph01792\n\t* glyph01793\n\t* glyph01794\n\t* glyph01795\n\t* glyph01796\n\t* glyph01797\n\t* glyph01798\n\t* glyph01799\n\t* glyph01800\n\t* glyph01801\n\t* glyph01802\n\t* glyph01803\n\t* glyph01804\n\t* glyph01805\n\t* glyph01806\n\t* glyph01807\n\t* glyph01808\n\t* glyph01809\n\t* glyph01810\n\t* glyph01811\n\t* glyph01812\n\t* glyph01813\n\t* glyph01814\n\t* glyph01815\n\t* glyph01816\n\t* glyph01817\n\t* glyph01818\n\t* glyph01819\n\t* glyph01820\n\t* glyph01821\n\t* glyph01822\n\t* glyph01823\n\t* glyph01824\n\t* glyph01825\n\t* glyph01826\n\t* glyph01827\n\t* glyph01828\n\t* glyph01829\n\t* glyph01830\n\t* glyph01831\n\t* glyph01832\n\t* glyph01833\n\t* glyph01834\n\t* glyph01835\n\t* glyph01836\n\t* glyph01837\n\t* glyph01838\n\t* glyph01839\n\t* glyph01840\n\t* glyph01842\n\t* glyph01843\n\t* glyph01844\n\t* glyph01845\n\t* glyph01846\n\t* glyph01847\n\t* glyph01848\n\t* glyph01849\n\t* glyph01850\n\t* glyph01851\n\t* glyph01852\n\t* glyph01853\n\t* glyph01854\n\t* glyph01855\n\t* glyph01856\n\t* glyph01857\n\t* glyph01858\n\t* glyph01859\n\t* glyph01860\n\t* glyph01861\n\t* glyph01862\n\t* glyph01863\n\t* glyph01864\n\t* glyph01865\n\t* glyph01866\n\t* glyph01867\n\t* glyph01868\n\t* glyph01869\n\t* glyph01870\n\t* glyph01871\n\t* glyph01872\n\t* glyph01873\n\t* glyph01874\n\t* glyph01875\n\t* glyph01876\n\t* glyph01877\n\t* glyph01878\n\t* glyph01879\n\t* glyph01880\n\t* glyph01881\n\t* glyph01882\n\t* glyph01883\n\t* glyph01884\n\t* glyph01885\n\t* glyph01886\n\t* glyph01887\n\t* glyph01888\n\t* glyph01889\n\t* glyph01890\n\t* glyph01891\n\t* glyph01893\n\t* glyph01894\n\t* glyph01896\n\t* glyph01897\n\t* glyph01898\n\t* glyph01899\n\t* glyph01900\n\t* glyph01901\n\t* glyph01902\n\t* glyph01903\n\t* glyph01905\n\t* glyph01906\n\t* glyph01907\n\t* glyph01908\n\t* glyph01910\n\t* glyph01911\n\t* glyph01912\n\t* glyph01913\n\t* glyph01914\n\t* glyph01915\n\t* glyph01916\n\t* glyph01917\n\t* glyph01918\n\t* glyph01919\n\t* glyph01920\n\t* glyph01923\n\t* glyph01924\n\t* glyph01925\n\t* glyph01926\n\t* glyph01927\n\t* glyph01928\n\t* glyph01929\n\t* glyph01930\n\t* glyph01931\n\t* glyph01932\n\t* glyph01933\n\t* glyph01934\n\t* glyph01935\n\t* glyph01936\n\t* glyph01937\n\t* glyph01938\n\t* glyph01939\n\t* glyph01940\n\t* glyph01941\n\t* glyph01942\n\t* glyph01943\n\t* glyph01944\n\t* glyph01945\n\t* glyph01946\n\t* glyph01947\n\t* glyph01948\n\t* glyph01949\n\t* glyph01950\n\t* glyph01952\n\t* glyph01953\n\t* glyph01954\n\t* glyph01955\n\t* glyph01956\n\t* glyph01957\n\t* glyph01958\n\t* glyph01959\n\t* glyph01961\n\t* glyph01962\n\t* glyph01963\n\t* glyph01964\n\t* glyph01965\n\t* glyph01967\n\t* glyph01968\n\t* glyph01969\n\t* glyph01970\n\t* glyph01971\n\t* glyph01972\n\t* glyph01973\n\t* glyph01974\n\t* glyph01975\n\t* glyph01976\n\t* glyph01977\n\t* glyph01978\n\t* glyph01980\n\t* glyph01981\n\t* glyph01982\n\t* glyph01983\n\t* glyph01984\n\t* glyph01985\n\t* glyph01986\n\t* glyph01987\n\t* glyph01989\n\t* glyph01990\n\t* glyph01992\n\t* glyph01993\n\t* glyph01994\n\t* glyph01995\n\t* glyph01996\n\t* glyph01997\n\t* glyph02001\n\t* glyph02003\n\t* glyph02004\n\t* glyph02005\n\t* glyph02006\n\t* glyph02007\n\t* glyph02008\n\t* glyph02009\n\t* glyph02010\n\t* glyph02012\n\t* glyph02013\n\t* glyph02014\n\t* glyph02015\n\t* glyph02016\n\t* glyph02018\n\t* glyph02019\n\t* glyph02020\n\t* glyph02021\n\t* glyph02022\n\t* glyph02023\n\t* glyph02024\n\t* glyph02025\n\t* glyph02026\n\t* glyph02027\n\t* glyph02028\n\t* glyph02029\n\t* glyph02030\n\t* glyph02031\n\t* glyph02033\n\t* glyph02034\n\t* glyph02036\n\t* glyph02037\n\t* glyph02038\n\t* glyph02041\n\t* glyph02042\n\t* glyph02043\n\t* glyph02044\n\t* glyph02046\n\t* glyph02047\n\t* glyph02048\n\t* glyph02050\n\t* glyph02051\n\t* glyph02052\n\t* glyph02053\n\t* glyph02054\n\t* glyph02055\n\t* glyph02056\n\t* glyph02057\n\t* glyph02058\n\t* glyph02059\n\t* glyph02060\n\t* glyph02061\n\t* glyph02062\n\t* glyph02063\n\t* glyph02064\n\t* glyph02065\n\t* glyph02066\n\t* glyph02067\n\t* glyph02068\n\t* glyph02069\n\t* glyph02070\n\t* glyph02071\n\t* glyph02072\n\t* glyph02074\n\t* glyph02075\n\t* glyph02076\n\t* glyph02077\n\t* glyph02080\n\t* glyph02083\n\t* glyph02084\n\t* glyph02085\n\t* glyph02086\n\t* glyph02088\n\t* glyph02089\n\t* glyph02091\n\t* glyph02092\n\t* glyph02093\n\t* glyph02095\n\t* glyph02097\n\t* glyph02098\n\t* glyph02101\n\t* glyph02102\n\t* glyph02103\n\t* glyph02104\n\t* glyph02105\n\t* glyph02107\n\t* glyph02109\n\t* glyph02110\n\t* glyph02111\n\t* glyph02112\n\t* glyph02114\n\t* glyph02115\n\t* glyph02116\n\t* glyph02117\n\t* glyph02118\n\t* glyph02119\n\t* glyph02120\n\t* glyph02121\n\t* glyph02122\n\t* glyph02123\n\t* glyph02125\n\t* glyph02126\n\t* glyph02127\n\t* glyph02128\n\t* glyph02129\n\t* glyph02131\n\t* glyph02132\n\t* glyph02133\n\t* glyph02134\n\t* glyph02135\n\t* glyph02136\n\t* glyph02137\n\t* glyph02139\n\t* glyph02140\n\t* glyph02141\n\t* glyph02142\n\t* glyph02144\n\t* glyph02145\n\t* glyph02146\n\t* glyph02147\n\t* glyph02148\n\t* glyph02149\n\t* glyph02150\n\t* glyph02151\n\t* glyph02153\n\t* glyph02154\n\t* glyph02155\n\t* glyph02156\n\t* glyph02157\n\t* glyph02158\n\t* glyph02159\n\t* glyph02161\n\t* glyph02162\n\t* glyph02163\n\t* glyph02164\n\t* glyph02166\n\t* glyph02167\n\t* glyph02168\n\t* glyph02169\n\t* glyph02171\n\t* glyph02172\n\t* glyph02173\n\t* glyph02174\n\t* glyph02175\n\t* glyph02176\n\t* glyph02177\n\t* glyph02178\n\t* glyph02179\n\t* glyph02180\n\t* glyph02181\n\t* glyph02182\n\t* glyph02183\n\t* glyph02184\n\t* glyph02185\n\t* glyph02186\n\t* glyph02187\n\t* glyph02189\n\t* glyph02190\n\t* glyph02191\n\t* glyph02193\n\t* glyph02194\n\t* glyph02195\n\t* glyph02196\n\t* glyph02197\n\t* glyph02198\n\t* glyph02199\n\t* glyph02200\n\t* glyph02201\n\t* glyph02202\n\t* glyph02203\n\t* glyph02204\n\t* glyph02205\n\t* glyph02206\n\t* glyph02207\n\t* glyph02208\n\t* glyph02209\n\t* glyph02210\n\t* glyph02211\n\t* glyph02212\n\t* glyph02213\n\t* glyph02214\n\t* glyph02215\n\t* glyph02216\n\t* glyph02217\n\t* glyph02218\n\t* glyph02219\n\t* glyph02220\n\t* glyph02221\n\t* glyph02222\n\t* glyph02223\n\t* glyph02224\n\t* glyph02225\n\t* glyph02226\n\t* glyph02227\n\t* glyph02228\n\t* glyph02229\n\t* glyph02230\n\t* glyph02231\n\t* glyph02232\n\t* glyph02233\n\t* glyph02234\n\t* glyph02235\n\t* glyph02236\n\t* glyph02237\n\t* glyph02238\n\t* glyph02239\n\t* glyph02240\n\t* glyph02241\n\t* glyph02242\n\t* glyph02243\n\t* glyph02244\n\t* glyph02245\n\t* glyph02246\n\t* glyph02247\n\t* glyph02248\n\t* glyph02249\n\t* glyph02250\n\t* glyph02251\n\t* glyph02252\n\t* glyph02253\n\t* glyph02254\n\t* glyph02255\n\t* glyph02256\n\t* glyph02257\n\t* glyph02258\n\t* glyph02259\n\t* glyph02260\n\t* glyph02261\n\t* glyph02262\n\t* glyph02263\n\t* glyph02264\n\t* glyph02266\n\t* glyph02267\n\t* glyph02268\n\t* glyph02269\n\t* glyph02270\n\t* glyph02271\n\t* glyph02272\n\t* glyph02273\n\t* glyph02274\n\t* glyph02275\n\t* glyph02276\n\t* glyph02277\n\t* glyph02278\n\t* glyph02279\n\t* glyph02280\n\t* glyph02281\n\t* glyph02282\n\t* glyph02283\n\t* glyph02284\n\t* glyph02285\n\t* glyph02286\n\t* glyph02287\n\t* glyph02288\n\t* glyph02289\n\t* glyph02290\n\t* glyph02291\n\t* glyph02292\n\t* glyph02293\n\t* glyph02294\n\t* glyph02295\n\t* glyph02296\n\t* glyph02297\n\t* glyph02298\n\t* glyph02299\n\t* glyph02300\n\t* glyph02301\n\t* glyph02302\n\t* glyph02303\n\t* glyph02304\n\t* glyph02305\n\t* glyph02306\n\t* glyph02307\n\t* glyph02308\n\t* glyph02309\n\t* glyph02310\n\t* glyph02311\n\t* glyph02312\n\t* glyph02313\n\t* glyph02314\n\t* glyph02315\n\t* glyph02317\n\t* glyph02318\n\t* glyph02319\n\t* glyph02320\n\t* glyph02321\n\t* glyph02322\n\t* glyph02323\n\t* glyph02324\n\t* glyph02325\n\t* glyph02326\n\t* glyph02327\n\t* glyph02329\n\t* glyph02330\n\t* glyph02331\n\t* glyph02332\n\t* glyph02333\n\t* glyph02334\n\t* glyph02335\n\t* glyph02336\n\t* glyph02337\n\t* glyph02338\n\t* glyph02339\n\t* glyph02340\n\t* glyph02341\n\t* glyph02342\n\t* glyph02343\n\t* glyph02344\n\t* glyph02345\n\t* glyph02346\n\t* glyph02347\n\t* glyph02348\n\t* glyph02349\n\t* glyph02350\n\t* glyph02351\n\t* glyph02353\n\t* glyph02354\n\t* glyph02355\n\t* glyph02357\n\t* glyph02358\n\t* glyph02359\n\t* glyph02360\n\t* glyph02361\n\t* glyph02362\n\t* glyph02363\n\t* glyph02364\n\t* glyph02365\n\t* glyph02366\n\t* glyph02367\n\t* glyph02368\n\t* glyph02369\n\t* glyph02372\n\t* glyph02373\n\t* glyph02374\n\t* glyph02375\n\t* glyph02376\n\t* glyph02377\n\t* glyph02378\n\t* glyph02379\n\t* glyph02380\n\t* glyph02381\n\t* glyph02382\n\t* glyph02383\n\t* glyph02385\n\t* glyph02386\n\t* glyph02388\n\t* glyph02389\n\t* glyph02390\n\t* glyph02391\n\t* glyph02393\n\t* glyph02394\n\t* glyph02396\n\t* glyph02398\n\t* glyph02399\n\t* glyph02400\n\t* glyph02401\n\t* glyph02403\n\t* glyph02406\n\t* glyph02407\n\t* glyph02409\n\t* glyph02410\n\t* glyph02411\n\t* glyph02412\n\t* glyph02414\n\t* glyph02415\n\t* glyph02416\n\t* glyph02417\n\t* glyph02418\n\t* glyph02419\n\t* glyph02420\n\t* glyph02421\n\t* glyph02422\n\t* glyph02423\n\t* glyph02424\n\t* glyph02425\n\t* glyph02426\n\t* glyph02427\n\t* glyph02428\n\t* glyph02429\n\t* glyph02430\n\t* glyph02431\n\t* glyph02432\n\t* glyph02433\n\t* glyph02434\n\t* glyph02435\n\t* glyph02436\n\t* glyph02437\n\t* glyph02438\n\t* glyph02439\n\t* glyph02440\n\t* glyph02441\n\t* glyph02442\n\t* glyph02443\n\t* glyph02444\n\t* glyph02445\n\t* glyph02446\n\t* glyph02449\n\t* glyph02452\n\t* glyph02453\n\t* glyph02454\n\t* glyph02455\n\t* glyph02456\n\t* glyph02457\n\t* glyph02458\n\t* glyph02459\n\t* glyph02460\n\t* glyph02461\n\t* glyph02462\n\t* glyph02463\n\t* glyph02466\n\t* glyph02467\n\t* glyph02468\n\t* glyph02470\n\t* glyph02471\n\t* glyph02472\n\t* glyph02473\n\t* glyph02475\n\t* glyph02476\n\t* glyph02477\n\t* glyph02479\n\t* glyph02480\n\t* glyph02481\n\t* glyph02482\n\t* glyph02483\n\t* glyph02484\n\t* glyph02485\n\t* glyph02486\n\t* glyph02487\n\t* glyph02488\n\t* glyph02489\n\t* glyph02490\n\t* glyph02491\n\t* glyph02492\n\t* glyph02493\n\t* glyph02494\n\t* glyph02495\n\t* glyph02496\n\t* glyph02497\n\t* glyph02498\n\t* glyph02499\n\t* glyph02500\n\t* glyph02501\n\t* glyph02502\n\t* glyph02503\n\t* glyph02504\n\t* glyph02505\n\t* glyph02506\n\t* glyph02507\n\t* glyph02508\n\t* glyph02509\n\t* glyph02510\n\t* glyph02511\n\t* glyph02512\n\t* glyph02513\n\t* glyph02514\n\t* glyph02515\n\t* glyph02516\n\t* glyph02517\n\t* glyph02518\n\t* glyph02519\n\t* glyph02520\n\t* glyph02521\n\t* glyph02522\n\t* glyph02523\n\t* glyph02524\n\t* glyph02525\n\t* glyph02526\n\t* glyph02531\n\t* glyph02532\n\t* glyph02533\n\t* glyph02534\n\t* glyph02535\n\t* glyph02536\n\t* glyph02537\n\t* glyph02538\n\t* glyph02539\n\t* glyph02540\n\t* glyph02541\n\t* glyph02542\n\t* glyph02543\n\t* glyph02544\n\t* glyph02545\n\t* glyph02546\n\t* glyph02547\n\t* glyph02548\n\t* glyph02549\n\t* glyph02550\n\t* glyph02551\n\t* glyph02552\n\t* glyph02553\n\t* glyph02554\n\t* glyph02555\n\t* glyph02556\n\t* glyph02557\n\t* glyph02558\n\t* glyph02559\n\t* glyph02560\n\t* glyph02561\n\t* glyph02562\n\t* glyph02563\n\t* glyph02565\n\t* glyph02566\n\t* glyph02568\n\t* glyph02569\n\t* glyph02572\n\t* glyph02573\n\t* glyph02575\n\t* glyph02576\n\t* glyph02577\n\t* glyph02578\n\t* glyph02579\n\t* glyph02580\n\t* glyph02581\n\t* glyph02582\n\t* glyph02583\n\t* glyph02584\n\t* glyph02586\n\t* glyph02587\n\t* glyph02588\n\t* glyph02589\n\t* glyph02590\n\t* glyph02591\n\t* glyph02592\n\t* glyph02593\n\t* glyph02594\n\t* glyph02595\n\t* glyph02596\n\t* glyph02597\n\t* glyph02598\n\t* glyph02599\n\t* glyph02600\n\t* glyph02601\n\t* glyph02602\n\t* glyph02603\n\t* glyph02604\n\t* glyph02605\n\t* glyph02606\n\t* glyph02607\n\t* glyph02608\n\t* glyph02609\n\t* glyph02610\n\t* glyph02611\n\t* glyph02612\n\t* glyph02613\n\t* glyph02614\n\t* glyph02615\n\t* glyph02617\n\t* glyph02619\n\t* glyph02622\n\t* glyph02625\n\t* glyph02626\n\t* glyph02627\n\t* glyph02629\n\t* glyph02630\n\t* glyph02631\n\t* glyph02632\n\t* glyph02633\n\t* glyph02634\n\t* glyph02635\n\t* glyph02637\n\t* glyph02639\n\t* glyph02640\n\t* glyph02641\n\t* glyph02642\n\t* glyph02643\n\t* glyph02644\n\t* glyph02645\n\t* glyph02646\n\t* glyph02648\n\t* glyph02649\n\t* glyph02650\n\t* glyph02651\n\t* glyph02652\n\t* glyph02653\n\t* glyph02655\n\t* glyph02656\n\t* glyph02657\n\t* glyph02658\n\t* glyph02659\n\t* glyph02660\n\t* glyph02661\n\t* glyph02662\n\t* glyph02663\n\t* glyph02664\n\t* glyph02665\n\t* glyph02666\n\t* glyph02667\n\t* glyph02668\n\t* glyph02669\n\t* glyph02670\n\t* glyph02671\n\t* glyph02672\n\t* glyph02673\n\t* glyph02674\n\t* glyph02675\n\t* glyph02676\n\t* glyph02678\n\t* glyph02680\n\t* glyph02681\n\t* glyph02683\n\t* glyph02684\n\t* glyph02686\n\t* glyph02687\n\t* glyph02688\n\t* glyph02689\n\t* glyph02690\n\t* glyph02691\n\t* glyph02693\n\t* glyph02696\n\t* glyph02697\n\t* glyph02698\n\t* glyph02699\n\t* glyph02700\n\t* glyph02701\n\t* glyph02702\n\t* glyph02704\n\t* glyph02705\n\t* glyph02706\n\t* glyph02707\n\t* glyph02708\n\t* glyph02709\n\t* glyph02710\n\t* glyph02711\n\t* glyph02712\n\t* glyph02713\n\t* glyph02714\n\t* glyph02716\n\t* glyph02717\n\t* glyph02718\n\t* glyph02719\n\t* glyph02720\n\t* glyph02721\n\t* glyph02722\n\t* glyph02723\n\t* glyph02724\n\t* glyph02725\n\t* glyph02726\n\t* glyph02727\n\t* glyph02728\n\t* glyph02729\n\t* glyph02730\n\t* glyph02731\n\t* glyph02732\n\t* glyph02733\n\t* glyph02734\n\t* glyph02735\n\t* glyph02736\n\t* glyph02739\n\t* glyph02741\n\t* glyph02742\n\t* glyph02743\n\t* glyph02744\n\t* glyph02745\n\t* glyph02746\n\t* glyph02747\n\t* glyph02748\n\t* glyph02749\n\t* glyph02750\n\t* glyph02752\n\t* glyph02753\n\t* glyph02755\n\t* glyph02756\n\t* glyph02757\n\t* glyph02759\n\t* glyph02760\n\t* glyph02761\n\t* glyph02762\n\t* glyph02763\n\t* glyph02764\n\t* glyph02765\n\t* glyph02766\n\t* glyph02767\n\t* glyph02769\n\t* glyph02770\n\t* glyph02771\n\t* glyph02772\n\t* glyph02773\n\t* glyph02774\n\t* glyph02775\n\t* glyph02776\n\t* glyph02777\n\t* glyph02778\n\t* glyph02779\n\t* glyph02780\n\t* glyph02781\n\t* glyph02782\n\t* glyph02783\n\t* glyph02784\n\t* glyph02785\n\t* glyph02786\n\t* glyph02787\n\t* glyph02788\n\t* glyph02789\n\t* glyph02790\n\t* glyph02791\n\t* glyph02793\n\t* glyph02794\n\t* glyph02795\n\t* glyph02797\n\t* glyph02798\n\t* glyph02799\n\t* glyph02800\n\t* glyph02801\n\t* glyph02802\n\t* glyph02803\n\t* glyph02805\n\t* glyph02806\n\t* glyph02807\n\t* glyph02808\n\t* glyph02809\n\t* glyph02810\n\t* glyph02811\n\t* glyph02812\n\t* glyph02813\n\t* glyph02814\n\t* glyph02815\n\t* glyph02816\n\t* glyph02817\n\t* glyph02818\n\t* glyph02819\n\t* glyph02820\n\t* glyph02821\n\t* glyph02822\n\t* glyph02823\n\t* glyph02824\n\t* glyph02825\n\t* glyph02826\n\t* glyph02827\n\t* glyph02828\n\t* glyph02829\n\t* glyph02830\n\t* glyph02831\n\t* glyph02832\n\t* glyph02833\n\t* glyph02834\n\t* glyph02835\n\t* glyph02837\n\t* glyph02838\n\t* glyph02839\n\t* glyph02840\n\t* glyph02841\n\t* glyph02842\n\t* glyph02843\n\t* glyph02844\n\t* glyph02845\n\t* glyph02846\n\t* glyph02847\n\t* glyph02848\n\t* glyph02849\n\t* glyph02850\n\t* glyph02851\n\t* glyph02852\n\t* glyph02853\n\t* glyph02854\n\t* glyph02855\n\t* glyph02856\n\t* glyph02857\n\t* glyph02858\n\t* glyph02859\n\t* glyph02860\n\t* glyph02861\n\t* glyph02862\n\t* glyph02863\n\t* glyph02864\n\t* glyph02865\n\t* glyph02866\n\t* glyph02867\n\t* glyph02868\n\t* glyph02869\n\t* glyph02870\n\t* glyph02871\n\t* glyph02872\n\t* glyph02873\n\t* glyph02874\n\t* glyph02875\n\t* glyph02876\n\t* glyph02877\n\t* glyph02878\n\t* glyph02879\n\t* glyph02880\n\t* glyph02881\n\t* glyph02882\n\t* glyph02883\n\t* glyph02884\n\t* glyph02885\n\t* glyph02886\n\t* glyph02887\n\t* glyph02888\n\t* glyph02889\n\t* glyph02890\n\t* glyph02891\n\t* glyph02892\n\t* glyph02893\n\t* glyph02894\n\t* glyph02895\n\t* glyph02896\n\t* glyph02897\n\t* glyph02898\n\t* glyph02899\n\t* glyph02900\n\t* glyph02901\n\t* glyph02902\n\t* glyph02903\n\t* glyph02904\n\t* glyph02905\n\t* glyph02906\n\t* glyph02907\n\t* glyph02908\n\t* glyph02910\n\t* glyph02913\n\t* glyph02914\n\t* glyph02915\n\t* glyph02916\n\t* glyph02917\n\t* glyph02918\n\t* glyph02919\n\t* glyph02920\n\t* glyph02921\n\t* glyph02922\n\t* glyph02923\n\t* glyph02924\n\t* glyph02925\n\t* glyph02926\n\t* glyph02927\n\t* glyph02928\n\t* glyph02929\n\t* glyph02930\n\t* glyph02931\n\t* glyph02932\n\t* glyph02933\n\t* glyph02934\n\t* glyph02935\n\t* glyph02937\n\t* glyph02940\n\t* glyph02942\n\t* glyph02945\n\t* glyph02946\n\t* glyph02948\n\t* glyph02951\n\t* glyph02952\n\t* glyph02953\n\t* glyph02954\n\t* glyph02956\n\t* glyph02957\n\t* glyph02958\n\t* glyph02959\n\t* glyph02960\n\t* glyph02961\n\t* glyph02962\n\t* glyph02963\n\t* glyph02964\n\t* glyph02965\n\t* glyph02966\n\t* glyph02967\n\t* glyph02968\n\t* glyph02969\n\t* glyph02970\n\t* glyph02971\n\t* glyph02973\n\t* glyph02974\n\t* glyph02975\n\t* glyph02976\n\t* glyph02977\n\t* glyph02978\n\t* glyph02979\n\t* glyph02980\n\t* glyph02981\n\t* glyph02982\n\t* glyph02983\n\t* glyph02984\n\t* glyph02985\n\t* glyph02986\n\t* glyph02987\n\t* glyph02988\n\t* glyph02989\n\t* glyph02990\n\t* glyph02991\n\t* glyph02992\n\t* glyph02993\n\t* glyph02994\n\t* glyph02996\n\t* glyph02997\n\t* glyph03000\n\t* glyph03001\n\t* glyph03002\n\t* glyph03003\n\t* glyph03004\n\t* glyph03005\n\t* glyph03006\n\t* glyph03007\n\t* glyph03008\n\t* glyph03010\n\t* glyph03012\n\t* glyph03013\n\t* glyph03014\n\t* glyph03015\n\t* glyph03016\n\t* glyph03017\n\t* glyph03019\n\t* glyph03020\n\t* glyph03022\n\t* glyph03023\n\t* glyph03024\n\t* glyph03025\n\t* glyph03027\n\t* glyph03028\n\t* glyph03029\n\t* glyph03030\n\t* glyph03033\n\t* glyph03034\n\t* glyph03035\n\t* glyph03036\n\t* glyph03037\n\t* glyph03038\n\t* glyph03039\n\t* glyph03040\n\t* glyph03041\n\t* glyph03042\n\t* glyph03043\n\t* glyph03044\n\t* glyph03045\n\t* glyph03046\n\t* glyph03047\n\t* glyph03048\n\t* glyph03049\n\t* glyph03050\n\t* glyph03051\n\t* glyph03052\n\t* glyph03053\n\t* glyph03054\n\t* glyph03056\n\t* glyph03057\n\t* glyph03058\n\t* glyph03059\n\t* glyph03060\n\t* glyph03062\n\t* glyph03063\n\t* glyph03066\n\t* glyph03067\n\t* glyph03069\n\t* glyph03070\n\t* glyph03071\n\t* glyph03074\n\t* glyph03075\n\t* glyph03076\n\t* glyph03077\n\t* glyph03078\n\t* glyph03079\n\t* glyph03080\n\t* glyph03081\n\t* glyph03082\n\t* glyph03083\n\t* glyph03084\n\t* glyph03085\n\t* glyph03086\n\t* glyph03087\n\t* glyph03088\n\t* glyph03089\n\t* glyph03090\n\t* glyph03091\n\t* glyph03092\n\t* glyph03093\n\t* glyph03094\n\t* glyph03095\n\t* glyph03096\n\t* glyph03097\n\t* glyph03098\n\t* glyph03099\n\t* glyph03100\n\t* glyph03101\n\t* glyph03102\n\t* glyph03103\n\t* glyph03104\n\t* glyph03105\n\t* glyph03106\n\t* glyph03107\n\t* glyph03108\n\t* glyph03109\n\t* glyph03110\n\t* glyph03111\n\t* glyph03112\n\t* glyph03113\n\t* glyph03114\n\t* glyph03115\n\t* glyph03116\n\t* glyph03117\n\t* glyph03118\n\t* glyph03119\n\t* glyph03120\n\t* glyph03121\n\t* glyph03122\n\t* glyph03123\n\t* glyph03124\n\t* glyph03125\n\t* glyph03126\n\t* glyph03127\n\t* glyph03128\n\t* glyph03129\n\t* glyph03130\n\t* glyph03131\n\t* glyph03132\n\t* glyph03133\n\t* glyph03134\n\t* glyph03135\n\t* glyph03136\n\t* glyph03137\n\t* glyph03138\n\t* glyph03139\n\t* glyph03140\n\t* glyph03141\n\t* glyph03142\n\t* glyph03143\n\t* glyph03144\n\t* glyph03145\n\t* glyph03146\n\t* glyph03147\n\t* glyph03148\n\t* glyph03149\n\t* glyph03150\n\t* glyph03151\n\t* glyph03152\n\t* glyph03153\n\t* glyph03154\n\t* glyph03155\n\t* glyph03156\n\t* glyph03158\n\t* glyph03159\n\t* glyph03161\n\t* glyph03162\n\t* glyph03163\n\t* glyph03164\n\t* glyph03165\n\t* glyph03167\n\t* glyph03168\n\t* glyph03169\n\t* glyph03171\n\t* glyph03172\n\t* glyph03173\n\t* glyph03174\n\t* glyph03175\n\t* glyph03176\n\t* glyph03177\n\t* glyph03178\n\t* glyph03179\n\t* glyph03180\n\t* glyph03181\n\t* glyph03182\n\t* glyph03183\n\t* glyph03184\n\t* glyph03185\n\t* glyph03186\n\t* glyph03187\n\t* glyph03188\n\t* glyph03189\n\t* glyph03190\n\t* glyph03191\n\t* glyph03192\n\t* glyph03194\n\t* glyph03196\n\t* glyph03198\n\t* glyph03199\n\t* glyph03200\n\t* glyph03202\n\t* glyph03203\n\t* glyph03204\n\t* glyph03205\n\t* glyph03209\n\t* glyph03210\n\t* glyph03211\n\t* glyph03212\n\t* glyph03213\n\t* glyph03215\n\t* glyph03216\n\t* glyph03217\n\t* glyph03218\n\t* glyph03219\n\t* glyph03220\n\t* glyph03221\n\t* glyph03222\n\t* glyph03223\n\t* glyph03225\n\t* glyph03226\n\t* glyph03227\n\t* glyph03228\n\t* glyph03229\n\t* glyph03230\n\t* glyph03231\n\t* glyph03234\n\t* glyph03235\n\t* glyph03236\n\t* glyph03237\n\t* glyph03238\n\t* glyph03239\n\t* glyph03240\n\t* glyph03241\n\t* glyph03242\n\t* glyph03243\n\t* glyph03244\n\t* glyph03245\n\t* glyph03246\n\t* glyph03247\n\t* glyph03248\n\t* glyph03249\n\t* glyph03250\n\t* glyph03251\n\t* glyph03252\n\t* glyph03254\n\t* glyph03255\n\t* glyph03257\n\t* glyph03258\n\t* glyph03260\n\t* glyph03262\n\t* glyph03264\n\t* glyph03266\n\t* glyph03267\n\t* glyph03269\n\t* glyph03270\n\t* glyph03272\n\t* glyph03273\n\t* glyph03274\n\t* glyph03275\n\t* glyph03276\n\t* glyph03277\n\t* glyph03278\n\t* glyph03279\n\t* glyph03280\n\t* glyph03281\n\t* glyph03282\n\t* glyph03283\n\t* glyph03284\n\t* glyph03285\n\t* glyph03286\n\t* glyph03287\n\t* glyph03288\n\t* glyph03289\n\t* glyph03290\n\t* glyph03291\n\t* glyph03292\n\t* glyph03293\n\t* glyph03294\n\t* glyph03295\n\t* glyph03296\n\t* glyph03297\n\t* glyph03298\n\t* glyph03299\n\t* glyph03300\n\t* glyph03301\n\t* glyph03302\n\t* glyph03303\n\t* glyph03304\n\t* glyph03305\n\t* glyph03306\n\t* glyph03307\n\t* glyph03308\n\t* glyph03310\n\t* glyph03311\n\t* glyph03312\n\t* glyph03313\n\t* glyph03314\n\t* glyph03316\n\t* glyph03317\n\t* glyph03318\n\t* glyph03320\n\t* glyph03322\n\t* glyph03323\n\t* glyph03325\n\t* glyph03326\n\t* glyph03327\n\t* glyph03329\n\t* glyph03330\n\t* glyph03331\n\t* glyph03333\n\t* glyph03334\n\t* glyph03335\n\t* glyph03336\n\t* glyph03337\n\t* glyph03338\n\t* glyph03339\n\t* glyph03340\n\t* glyph03342\n\t* glyph03343\n\t* glyph03344\n\t* glyph03345\n\t* glyph03347\n\t* glyph03348\n\t* glyph03351\n\t* glyph03353\n\t* glyph03354\n\t* glyph03356\n\t* glyph03359\n\t* glyph03360\n\t* glyph03362\n\t* glyph03363\n\t* glyph03366\n\t* glyph03368\n\t* glyph03369\n\t* glyph03370\n\t* glyph03371\n\t* glyph03373\n\t* glyph03374\n\t* glyph03375\n\t* glyph03377\n\t* glyph03378\n\t* glyph03380\n\t* glyph03381\n\t* glyph03382\n\t* glyph03383\n\t* glyph03384\n\t* glyph03385\n\t* glyph03386\n\t* glyph03388\n\t* glyph03390\n\t* glyph03391\n\t* glyph03393\n\t* glyph03394\n\t* glyph03395\n\t* glyph03396\n\t* glyph03397\n\t* glyph03398\n\t* glyph03399\n\t* glyph03400\n\t* glyph03401\n\t* glyph03402\n\t* glyph03403\n\t* glyph03404\n\t* glyph03405\n\t* glyph03406\n\t* glyph03407\n\t* glyph03409\n\t* glyph03410\n\t* glyph03412\n\t* glyph03413\n\t* glyph03414\n\t* glyph03415\n\t* glyph03416\n\t* glyph03417\n\t* glyph03418\n\t* glyph03419\n\t* glyph03420\n\t* glyph03424\n\t* glyph03426\n\t* glyph03427\n\t* glyph03428\n\t* glyph03429\n\t* glyph03431\n\t* glyph03432\n\t* glyph03433\n\t* glyph03434\n\t* glyph03436\n\t* glyph03437\n\t* glyph03438\n\t* glyph03439\n\t* glyph03440\n\t* glyph03441\n\t* glyph03444\n\t* glyph03445\n\t* glyph03449\n\t* glyph03450\n\t* glyph03451\n\t* glyph03452\n\t* glyph03453\n\t* glyph03454\n\t* glyph03455\n\t* glyph03457\n\t* glyph03458\n\t* glyph03459\n\t* glyph03460\n\t* glyph03461\n\t* glyph03462\n\t* glyph03463\n\t* glyph03464\n\t* glyph03465\n\t* glyph03466\n\t* glyph03467\n\t* glyph03468\n\t* glyph03469\n\t* glyph03470\n\t* glyph03471\n\t* glyph03472\n\t* glyph03473\n\t* glyph03474\n\t* glyph03475\n\t* glyph03476\n\t* glyph03477\n\t* glyph03479\n\t* glyph03480\n\t* glyph03481\n\t* glyph03482\n\t* glyph03483\n\t* glyph03484\n\t* glyph03485\n\t* glyph03486\n\t* glyph03487\n\t* glyph03488\n\t* glyph03489\n\t* glyph03490\n\t* glyph03491\n\t* glyph03492\n\t* glyph03493\n\t* glyph03494\n\t* glyph03495\n\t* glyph03496\n\t* glyph03497\n\t* glyph03498\n\t* glyph03499\n\t* glyph03500\n\t* glyph03501\n\t* glyph03502\n\t* glyph03504\n\t* glyph03505\n\t* glyph03506\n\t* glyph03507\n\t* glyph03508\n\t* glyph03509\n\t* glyph03510\n\t* glyph03511\n\t* glyph03513\n\t* glyph03514\n\t* glyph03518\n\t* glyph03519\n\t* glyph03520\n\t* glyph03521\n\t* glyph03522\n\t* glyph03523\n\t* glyph03525\n\t* glyph03526\n\t* glyph03527\n\t* glyph03528\n\t* glyph03529\n\t* glyph03530\n\t* glyph03531\n\t* glyph03532\n\t* glyph03533\n\t* glyph03534\n\t* glyph03535\n\t* glyph03536\n\t* glyph03537\n\t* glyph03538\n\t* glyph03539\n\t* glyph03540\n\t* glyph03541\n\t* glyph03543\n\t* glyph03544\n\t* glyph03545\n\t* glyph03546\n\t* glyph03547\n\t* glyph03548\n\t* glyph03549\n\t* glyph03550\n\t* glyph03551\n\t* glyph03552\n\t* glyph03553\n\t* glyph03554\n\t* glyph03555\n\t* glyph03556\n\t* glyph03557\n\t* glyph03558\n\t* glyph03560\n\t* glyph03561\n\t* glyph03562\n\t* glyph03563\n\t* glyph03564\n\t* glyph03565\n\t* glyph03566\n\t* glyph03567\n\t* glyph03570\n\t* glyph03573\n\t* glyph03574\n\t* glyph03575\n\t* glyph03577\n\t* glyph03578\n\t* glyph03579\n\t* glyph03580\n\t* glyph03581\n\t* glyph03582\n\t* glyph03583\n\t* glyph03585\n\t* glyph03586\n\t* glyph03588\n\t* glyph03589\n\t* glyph03590\n\t* glyph03593\n\t* glyph03594\n\t* glyph03596\n\t* glyph03597\n\t* glyph03598\n\t* glyph03601\n\t* glyph03602\n\t* glyph03603\n\t* glyph03604\n\t* glyph03605\n\t* glyph03607\n\t* glyph03609\n\t* glyph03611\n\t* glyph03612\n\t* glyph03613\n\t* glyph03614\n\t* glyph03616\n\t* glyph03618\n\t* glyph03619\n\t* glyph03620\n\t* glyph03621\n\t* glyph03623\n\t* glyph03624\n\t* glyph03625\n\t* glyph03626\n\t* glyph03627\n\t* glyph03628\n\t* glyph03629\n\t* glyph03630\n\t* glyph03631\n\t* glyph03632\n\t* glyph03633\n\t* glyph03634\n\t* glyph03635\n\t* glyph03636\n\t* glyph03637\n\t* glyph03638\n\t* glyph03639\n\t* glyph03640\n\t* glyph03641\n\t* glyph03642\n\t* glyph03643\n\t* glyph03644\n\t* glyph03645\n\t* glyph03646\n\t* glyph03647\n\t* glyph03648\n\t* glyph03649\n\t* glyph03650\n\t* glyph03651\n\t* glyph03652\n\t* glyph03653\n\t* glyph03654\n\t* glyph03655\n\t* glyph03656\n\t* glyph03657\n\t* glyph03658\n\t* glyph03659\n\t* glyph03660\n\t* glyph03662\n\t* glyph03664\n\t* glyph03666\n\t* glyph03667\n\t* glyph03668\n\t* glyph03669\n\t* glyph03670\n\t* glyph03671\n\t* glyph03672\n\t* glyph03673\n\t* glyph03674\n\t* glyph03675\n\t* glyph03676\n\t* glyph03677\n\t* glyph03678\n\t* glyph03679\n\t* glyph03680\n\t* glyph03681\n\t* glyph03682\n\t* glyph03683\n\t* glyph03684\n\t* glyph03686\n\t* glyph03687\n\t* glyph03688\n\t* glyph03689\n\t* glyph03690\n\t* glyph03691\n\t* glyph03692\n\t* glyph03693\n\t* glyph03694\n\t* glyph03695\n\t* glyph03696\n\t* glyph03697\n\t* glyph03698\n\t* glyph03699\n\t* glyph03701\n\t* glyph03702\n\t* glyph03703\n\t* glyph03704\n\t* glyph03705\n\t* glyph03706\n\t* glyph03707\n\t* glyph03708\n\t* glyph03709\n\t* glyph03710\n\t* glyph03711\n\t* glyph03712\n\t* glyph03713\n\t* glyph03714\n\t* glyph03715\n\t* glyph03718\n\t* glyph03719\n\t* glyph03720\n\t* glyph03721\n\t* glyph03722\n\t* glyph03724\n\t* glyph03725\n\t* glyph03726\n\t* glyph03728\n\t* glyph03729\n\t* glyph03730\n\t* glyph03731\n\t* glyph03732\n\t* glyph03733\n\t* glyph03734\n\t* glyph03735\n\t* glyph03736\n\t* glyph03737\n\t* glyph03738\n\t* glyph03739\n\t* glyph03740\n\t* glyph03741\n\t* glyph03742\n\t* glyph03743\n\t* glyph03744\n\t* glyph03745\n\t* glyph03746\n\t* glyph03747\n\t* glyph03748\n\t* glyph03749\n\t* glyph03750\n\t* glyph03751\n\t* glyph03752\n\t* glyph03753\n\t* glyph03754\n\t* glyph03755\n\t* glyph03756\n\t* glyph03757\n\t* glyph03758\n\t* glyph03759\n\t* glyph03760\n\t* glyph03761\n\t* glyph03762\n\t* glyph03763\n\t* glyph03764\n\t* glyph03765\n\t* glyph03766\n\t* glyph03767\n\t* glyph03768\n\t* glyph03769\n\t* glyph03770\n\t* glyph03771\n\t* glyph03772\n\t* glyph03773\n\t* glyph03774\n\t* glyph03775\n\t* glyph03776\n\t* glyph03777\n\t* glyph03778\n\t* glyph03779\n\t* glyph03780\n\t* glyph03781\n\t* glyph03782\n\t* glyph03784\n\t* glyph03785\n\t* glyph03786\n\t* glyph03787\n\t* glyph03788\n\t* glyph03789\n\t* glyph03790\n\t* glyph03791\n\t* glyph03792\n\t* glyph03793\n\t* glyph03794\n\t* glyph03795\n\t* glyph03798\n\t* glyph03799\n\t* glyph03800\n\t* glyph03801\n\t* glyph03802\n\t* glyph03803\n\t* glyph03804\n\t* glyph03805\n\t* glyph03806\n\t* glyph03807\n\t* glyph03809\n\t* glyph03810\n\t* glyph03811\n\t* glyph03812\n\t* glyph03814\n\t* glyph03815\n\t* glyph03816\n\t* glyph03817\n\t* glyph03818\n\t* glyph03819\n\t* glyph03820\n\t* glyph03821\n\t* glyph03822\n\t* glyph03823\n\t* glyph03824\n\t* glyph03825\n\t* glyph03826\n\t* glyph03827\n\t* glyph03828\n\t* glyph03829\n\t* glyph03830\n\t* glyph03831\n\t* glyph03832\n\t* glyph03833\n\t* glyph03834\n\t* glyph03835\n\t* glyph03836\n\t* glyph03837\n\t* glyph03838\n\t* glyph03839\n\t* glyph03840\n\t* glyph03842\n\t* glyph03843\n\t* glyph03844\n\t* glyph03845\n\t* glyph03846\n\t* glyph03847\n\t* glyph03848\n\t* glyph03849\n\t* glyph03851\n\t* glyph03852\n\t* glyph03853\n\t* glyph03854\n\t* glyph03855\n\t* glyph03856\n\t* glyph03858\n\t* glyph03860\n\t* glyph03861\n\t* glyph03862\n\t* glyph03863\n\t* glyph03864\n\t* glyph03865\n\t* glyph03866\n\t* glyph03867\n\t* glyph03868\n\t* glyph03869\n\t* glyph03871\n\t* glyph03872\n\t* glyph03873\n\t* glyph03874\n\t* glyph03875\n\t* glyph03876\n\t* glyph03877\n\t* glyph03878\n\t* glyph03879\n\t* glyph03880\n\t* glyph03881\n\t* glyph03882\n\t* glyph03883\n\t* glyph03884\n\t* glyph03885\n\t* glyph03886\n\t* glyph03887\n\t* glyph03888\n\t* glyph03889\n\t* glyph03890\n\t* glyph03891\n\t* glyph03892\n\t* glyph03893\n\t* glyph03894\n\t* glyph03895\n\t* glyph03896\n\t* glyph03897\n\t* glyph03898\n\t* glyph03899\n\t* glyph03900\n\t* glyph03901\n\t* glyph03902\n\t* glyph03903\n\t* glyph03904\n\t* glyph03905\n\t* glyph03906\n\t* glyph03907\n\t* glyph03908\n\t* glyph03909\n\t* glyph03910\n\t* glyph03911\n\t* glyph03912\n\t* glyph03913\n\t* glyph03914\n\t* glyph03915\n\t* glyph03916\n\t* glyph03917\n\t* glyph03918\n\t* glyph03919\n\t* glyph03920\n\t* glyph03921\n\t* glyph03922\n\t* glyph03923\n\t* glyph03924\n\t* glyph03925\n\t* glyph03926\n\t* glyph03927\n\t* glyph03928\n\t* glyph03929\n\t* glyph03930\n\t* glyph03931\n\t* glyph03932\n\t* glyph03933\n\t* glyph03934\n\t* glyph03935\n\t* glyph03936\n\t* glyph03937\n\t* glyph03938\n\t* glyph03939\n\t* glyph03940\n\t* glyph03941\n\t* glyph03942\n\t* glyph03943\n\t* glyph03944\n\t* glyph03945\n\t* glyph03946\n\t* glyph03947\n\t* glyph03948\n\t* glyph03949\n\t* glyph03950\n\t* glyph03951\n\t* glyph03952\n\t* glyph03953\n\t* glyph03954\n\t* glyph03955\n\t* glyph03956\n\t* glyph03957\n\t* glyph03958\n\t* glyph03959\n\t* glyph03960\n\t* glyph03962\n\t* glyph03963\n\t* glyph03964\n\t* glyph03965\n\t* glyph03966\n\t* glyph03967\n\t* glyph03968\n\t* glyph03969\n\t* glyph03971\n\t* glyph03972\n\t* glyph03973\n\t* glyph03974\n\t* glyph03975\n\t* glyph03976\n\t* glyph03977\n\t* glyph03978\n\t* glyph03979\n\t* glyph03980\n\t* glyph03981\n\t* glyph03982\n\t* glyph03983\n\t* glyph03984\n\t* glyph03985\n\t* glyph03986\n\t* glyph03987\n\t* glyph03988\n\t* glyph03989\n\t* glyph03990\n\t* glyph03991\n\t* glyph03992\n\t* glyph03994\n\t* glyph03995\n\t* glyph03996\n\t* glyph03997\n\t* glyph03998\n\t* glyph03999\n\t* glyph04000\n\t* glyph04001\n\t* glyph04002\n\t* glyph04003\n\t* glyph04004\n\t* glyph04005\n\t* glyph04006\n\t* glyph04007\n\t* glyph04008\n\t* glyph04009\n\t* glyph04010\n\t* glyph04011\n\t* glyph04012\n\t* glyph04013\n\t* glyph04014\n\t* glyph04015\n\t* glyph04016\n\t* glyph04017\n\t* glyph04018\n\t* glyph04019\n\t* glyph04020\n\t* glyph04021\n\t* glyph04022\n\t* glyph04023\n\t* glyph04024\n\t* glyph04025\n\t* glyph04026\n\t* glyph04027\n\t* glyph04028\n\t* glyph04029\n\t* glyph04030\n\t* glyph04031\n\t* glyph04032\n\t* glyph04033\n\t* glyph04034\n\t* glyph04035\n\t* glyph04036\n\t* glyph04037\n\t* glyph04038\n\t* glyph04039\n\t* glyph04040\n\t* glyph04041\n\t* glyph04042\n\t* glyph04043\n\t* glyph04044\n\t* glyph04045\n\t* glyph04046\n\t* glyph04047\n\t* glyph04048\n\t* glyph04049\n\t* glyph04050\n\t* glyph04051\n\t* glyph04052\n\t* glyph04053\n\t* glyph04054\n\t* glyph04055\n\t* glyph04056\n\t* glyph04057\n\t* glyph04058\n\t* glyph04059\n\t* glyph04060\n\t* glyph04061\n\t* glyph04062\n\t* glyph04063\n\t* glyph04064\n\t* glyph04065\n\t* glyph04066\n\t* glyph04067\n\t* glyph04068\n\t* glyph04069\n\t* glyph04070\n\t* glyph04071\n\t* glyph04072\n\t* glyph04073\n\t* glyph04074\n\t* glyph04075\n\t* glyph04076\n\t* glyph04077\n\t* glyph04078\n\t* glyph04079\n\t* glyph04080\n\t* glyph04081\n\t* glyph04082\n\t* glyph04083\n\t* glyph04085\n\t* glyph04088\n\t* glyph04089\n\t* glyph04090\n\t* glyph04091\n\t* glyph04092\n\t* glyph04093\n\t* glyph04094\n\t* glyph04095\n\t* glyph04096\n\t* glyph04097\n\t* glyph04098\n\t* glyph04099\n\t* glyph04100\n\t* glyph04101\n\t* glyph04102\n\t* glyph04103\n\t* glyph04104\n\t* glyph04105\n\t* glyph04106\n\t* glyph04107\n\t* glyph04108\n\t* glyph04109\n\t* glyph04110\n\t* glyph04111\n\t* glyph04112\n\t* glyph04114\n\t* glyph04115\n\t* glyph04117\n\t* glyph04119\n\t* glyph04120\n\t* glyph04122\n\t* glyph04123\n\t* glyph04124\n\t* glyph04125\n\t* glyph04126\n\t* glyph04127\n\t* glyph04128\n\t* glyph04129\n\t* glyph04130\n\t* glyph04131\n\t* glyph04132\n\t* glyph04133\n\t* glyph04134\n\t* glyph04135\n\t* glyph04137\n\t* glyph04138\n\t* glyph04139\n\t* glyph04140\n\t* glyph04141\n\t* glyph04142\n\t* glyph04143\n\t* glyph04144\n\t* glyph04146\n\t* glyph04147\n\t* glyph04148\n\t* glyph04149\n\t* glyph04150\n\t* glyph04151\n\t* glyph04152\n\t* glyph04153\n\t* glyph04154\n\t* glyph04155\n\t* glyph04156\n\t* glyph04157\n\t* glyph04158\n\t* glyph04159\n\t* glyph04160\n\t* glyph04161\n\t* glyph04162\n\t* glyph04163\n\t* glyph04164\n\t* glyph04165\n\t* glyph04166\n\t* glyph04167\n\t* glyph04168\n\t* glyph04169\n\t* glyph04170\n\t* glyph04171\n\t* glyph04172\n\t* glyph04173\n\t* glyph04174\n\t* glyph04175\n\t* glyph04178\n\t* glyph04180\n\t* glyph04181\n\t* glyph04182\n\t* glyph04183\n\t* glyph04184\n\t* glyph04185\n\t* glyph04186\n\t* glyph04187\n\t* glyph04188\n\t* glyph04189\n\t* glyph04190\n\t* glyph04191\n\t* glyph04192\n\t* glyph04193\n\t* glyph04194\n\t* glyph04195\n\t* glyph04196\n\t* glyph04197\n\t* glyph04198\n\t* glyph04199\n\t* glyph04200\n\t* glyph04201\n\t* glyph04202\n\t* glyph04203\n\t* glyph04204\n\t* glyph04205\n\t* glyph04206\n\t* glyph04207\n\t* glyph04208\n\t* glyph04210\n\t* glyph04211\n\t* glyph04213\n\t* glyph04214\n\t* glyph04215\n\t* glyph04216\n\t* glyph04218\n\t* glyph04219\n\t* glyph04220\n\t* glyph04221\n\t* glyph04222\n\t* glyph04223\n\t* glyph04224\n\t* glyph04225\n\t* glyph04226\n\t* glyph04227\n\t* glyph04228\n\t* glyph04229\n\t* glyph04230\n\t* glyph04232\n\t* glyph04233\n\t* glyph04234\n\t* glyph04235\n\t* glyph04236\n\t* glyph04237\n\t* glyph04238\n\t* glyph04239\n\t* glyph04240\n\t* glyph04241\n\t* glyph04242\n\t* glyph04243\n\t* glyph04244\n\t* glyph04246\n\t* glyph04247\n\t* glyph04248\n\t* glyph04249\n\t* glyph04250\n\t* glyph04251\n\t* glyph04252\n\t* glyph04253\n\t* glyph04254\n\t* glyph04255\n\t* glyph04256\n\t* glyph04258\n\t* glyph04259\n\t* glyph04260\n\t* glyph04261\n\t* glyph04262\n\t* glyph04264\n\t* glyph04266\n\t* glyph04267\n\t* glyph04268\n\t* glyph04269\n\t* glyph04270\n\t* glyph04271\n\t* glyph04272\n\t* glyph04273\n\t* glyph04274\n\t* glyph04275\n\t* glyph04276\n\t* glyph04277\n\t* glyph04278\n\t* glyph04279\n\t* glyph04280\n\t* glyph04281\n\t* glyph04282\n\t* glyph04283\n\t* glyph04284\n\t* glyph04285\n\t* glyph04286\n\t* glyph04287\n\t* glyph04288\n\t* glyph04289\n\t* glyph04290\n\t* glyph04291\n\t* glyph04292\n\t* glyph04293\n\t* glyph04294\n\t* glyph04297\n\t* glyph04298\n\t* glyph04299\n\t* glyph04301\n\t* glyph04302\n\t* glyph04303\n\t* glyph04305\n\t* glyph04306\n\t* glyph04307\n\t* glyph04308\n\t* glyph04309\n\t* glyph04310\n\t* glyph04311\n\t* glyph04312\n\t* glyph04313\n\t* glyph04314\n\t* glyph04315\n\t* glyph04316\n\t* glyph04317\n\t* glyph04318\n\t* glyph04319\n\t* glyph04320\n\t* glyph04321\n\t* glyph04322\n\t* glyph04323\n\t* glyph04325\n\t* glyph04326\n\t* glyph04327\n\t* glyph04328\n\t* glyph04329\n\t* glyph04330\n\t* glyph04331\n\t* glyph04332\n\t* glyph04333\n\t* glyph04334\n\t* glyph04335\n\t* glyph04336\n\t* glyph04337\n\t* glyph04338\n\t* glyph04339\n\t* glyph04340\n\t* glyph04341\n\t* glyph04342\n\t* glyph04345\n\t* glyph04346\n\t* glyph04349\n\t* glyph04350\n\t* glyph04351\n\t* glyph04352\n\t* glyph04353\n\t* glyph04354\n\t* glyph04355\n\t* glyph04356\n\t* glyph04357\n\t* glyph04358\n\t* glyph04359\n\t* glyph04360\n\t* glyph04361\n\t* glyph04362\n\t* glyph04363\n\t* glyph04364\n\t* glyph04365\n\t* glyph04366\n\t* glyph04367\n\t* glyph04368\n\t* glyph04369\n\t* glyph04370\n\t* glyph04371\n\t* glyph04372\n\t* glyph04373\n\t* glyph04374\n\t* glyph04375\n\t* glyph04376\n\t* glyph04377\n\t* glyph04378\n\t* glyph04379\n\t* glyph04380\n\t* glyph04382\n\t* glyph04384\n\t* glyph04385\n\t* glyph04386\n\t* glyph04387\n\t* glyph04388\n\t* glyph04389\n\t* glyph04390\n\t* glyph04391\n\t* glyph04392\n\t* glyph04393\n\t* glyph04394\n\t* glyph04395\n\t* glyph04396\n\t* glyph04397\n\t* glyph04398\n\t* glyph04399\n\t* glyph04400\n\t* glyph04401\n\t* glyph04402\n\t* glyph04405\n\t* glyph04406\n\t* glyph04407\n\t* glyph04408\n\t* glyph04409\n\t* glyph04410\n\t* glyph04411\n\t* glyph04412\n\t* glyph04413\n\t* glyph04414\n\t* glyph04415\n\t* glyph04416\n\t* glyph04417\n\t* glyph04418\n\t* glyph04419\n\t* glyph04420\n\t* glyph04421\n\t* glyph04422\n\t* glyph04423\n\t* glyph04424\n\t* glyph04425\n\t* glyph04426\n\t* glyph04427\n\t* glyph04428\n\t* glyph04429\n\t* glyph04430\n\t* glyph04431\n\t* glyph04432\n\t* glyph04433\n\t* glyph04434\n\t* glyph04435\n\t* glyph04436\n\t* glyph04437\n\t* glyph04438\n\t* glyph04439\n\t* glyph04440\n\t* glyph04441\n\t* glyph04442\n\t* glyph04443\n\t* glyph04445\n\t* glyph04446\n\t* glyph04447\n\t* glyph04448\n\t* glyph04449\n\t* glyph04452\n\t* glyph04453\n\t* glyph04454\n\t* glyph04455\n\t* glyph04456\n\t* glyph04457\n\t* glyph04458\n\t* glyph04459\n\t* glyph04460\n\t* glyph04461\n\t* glyph04463\n\t* glyph04464\n\t* glyph04465\n\t* glyph04466\n\t* glyph04468\n\t* glyph04469\n\t* glyph04470\n\t* glyph04471\n\t* glyph04472\n\t* glyph04473\n\t* glyph04474\n\t* glyph04475\n\t* glyph04476\n\t* glyph04477\n\t* glyph04478\n\t* glyph04479\n\t* glyph04480\n\t* glyph04481\n\t* glyph04482\n\t* glyph04483\n\t* glyph04484\n\t* glyph04485\n\t* glyph04486\n\t* glyph04487\n\t* glyph04488\n\t* glyph04489\n\t* glyph04490\n\t* glyph04491\n\t* glyph04492\n\t* glyph04493\n\t* glyph04494\n\t* glyph04495\n\t* glyph04496\n\t* glyph04497\n\t* glyph04498\n\t* glyph04499\n\t* glyph04500\n\t* glyph04501\n\t* glyph04502\n\t* glyph04503\n\t* glyph04504\n\t* glyph04505\n\t* glyph04506\n\t* glyph04507\n\t* glyph04508\n\t* glyph04510\n\t* glyph04511\n\t* glyph04512\n\t* glyph04513\n\t* glyph04514\n\t* glyph04515\n\t* glyph04516\n\t* glyph04517\n\t* glyph04518\n\t* glyph04520\n\t* glyph04521\n\t* glyph04524\n\t* glyph04525\n\t* glyph04529\n\t* glyph04531\n\t* glyph04532\n\t* glyph04533\n\t* glyph04534\n\t* glyph04536\n\t* glyph04538\n\t* glyph04539\n\t* glyph04540\n\t* glyph04541\n\t* glyph04542\n\t* glyph04543\n\t* glyph04545\n\t* glyph04547\n\t* glyph04548\n\t* glyph04551\n\t* glyph04552\n\t* glyph04553\n\t* glyph04554\n\t* glyph04555\n\t* glyph04556\n\t* glyph04557\n\t* glyph04559\n\t* glyph04560\n\t* glyph04562\n\t* glyph04563\n\t* glyph04565\n\t* glyph04566\n\t* glyph04567\n\t* glyph04568\n\t* glyph04569\n\t* glyph04571\n\t* glyph04572\n\t* glyph04574\n\t* glyph04575\n\t* glyph04576\n\t* glyph04578\n\t* glyph04579\n\t* glyph04580\n\t* glyph04581\n\t* glyph04584\n\t* glyph04586\n\t* glyph04588\n\t* glyph04589\n\t* glyph04590\n\t* glyph04591\n\t* glyph04592\n\t* glyph04594\n\t* glyph04595\n\t* glyph04596\n\t* glyph04597\n\t* glyph04598\n\t* glyph04599\n\t* glyph04600\n\t* glyph04601\n\t* glyph04602\n\t* glyph04604\n\t* glyph04605\n\t* glyph04606\n\t* glyph04607\n\t* glyph04608\n\t* glyph04610\n\t* glyph04614\n\t* glyph04615\n\t* glyph04616\n\t* glyph04617\n\t* glyph04618\n\t* glyph04619\n\t* glyph04620\n\t* glyph04621\n\t* glyph04623\n\t* glyph04625\n\t* glyph04626\n\t* glyph04628\n\t* glyph04629\n\t* glyph04631\n\t* glyph04632\n\t* glyph04633\n\t* glyph04634\n\t* glyph04635\n\t* glyph04636\n\t* glyph04637\n\t* glyph04639\n\t* glyph04640\n\t* glyph04641\n\t* glyph04642\n\t* glyph04643\n\t* glyph04644\n\t* glyph04645\n\t* glyph04646\n\t* glyph04647\n\t* glyph04648\n\t* glyph04649\n\t* glyph04650\n\t* glyph04651\n\t* glyph04652\n\t* glyph04653\n\t* glyph04654\n\t* glyph04655\n\t* glyph04656\n\t* glyph04657\n\t* glyph04658\n\t* glyph04659\n\t* glyph04660\n\t* glyph04661\n\t* glyph04662\n\t* glyph04663\n\t* glyph04664\n\t* glyph04665\n\t* glyph04666\n\t* glyph04667\n\t* glyph04668\n\t* glyph04669\n\t* glyph04670\n\t* glyph04671\n\t* glyph04672\n\t* glyph04673\n\t* glyph04674\n\t* glyph04675\n\t* glyph04676\n\t* glyph04677\n\t* glyph04678\n\t* glyph04679\n\t* glyph04680\n\t* glyph04681\n\t* glyph04682\n\t* glyph04683\n\t* glyph04684\n\t* glyph04685\n\t* glyph04686\n\t* glyph04687\n\t* glyph04694\n\t* glyph04695\n\t* glyph04696\n\t* glyph04697\n\t* glyph04698\n\t* glyph04699\n\t* glyph04700\n\t* glyph04701\n\t* glyph04702\n\t* glyph04703\n\t* glyph04704\n\t* glyph04705\n\t* glyph04706\n\t* glyph04707\n\t* glyph04708\n\t* glyph04709\n\t* glyph04710\n\t* glyph04711\n\t* glyph04712\n\t* glyph04713\n\t* glyph04714\n\t* glyph04715\n\t* glyph04716\n\t* glyph04717\n\t* glyph04718\n\t* glyph04719\n\t* glyph04720\n\t* glyph04721\n\t* glyph04722\n\t* glyph04723\n\t* glyph04724\n\t* glyph04725\n\t* glyph04726\n\t* glyph04727\n\t* glyph04728\n\t* glyph04729\n\t* glyph04730\n\t* glyph04731\n\t* glyph04732\n\t* glyph04733\n\t* glyph04734\n\t* glyph04735\n\t* glyph04742\n\t* glyph04743\n\t* glyph04744\n\t* glyph04745\n\t* glyph04746\n\t* glyph04747\n\t* glyph04754\n\t* glyph04755\n\t* glyph04756\n\t* glyph04757\n\t* glyph04758\n\t* glyph04759\n\t* glyph04760\n\t* glyph04761\n\t* glyph04762\n\t* glyph04763\n\t* glyph04764\n\t* glyph04765\n\t* glyph04766\n\t* glyph04767\n\t* glyph04768\n\t* glyph04769\n\t* glyph04770\n\t* glyph04771\n\t* glyph04772\n\t* glyph04773\n\t* glyph04774\n\t* glyph04775\n\t* glyph04776\n\t* glyph04777\n\t* glyph04779\n\t* glyph04780\n\t* glyph04782\n\t* glyph04783\n\t* glyph04784\n\t* glyph04785\n\t* glyph04786\n\t* glyph04787\n\t* glyph04788\n\t* glyph04789\n\t* glyph04790\n\t* glyph04791\n\t* glyph04792\n\t* glyph04793\n\t* glyph04794\n\t* glyph04795\n\t* glyph04796\n\t* glyph04797\n\t* glyph04798\n\t* glyph04799\n\t* glyph04800\n\t* glyph04801\n\t* glyph04802\n\t* glyph04803\n\t* glyph04804\n\t* glyph04805\n\t* glyph04806\n\t* glyph04807\n\t* glyph04808\n\t* glyph04809\n\t* glyph04810\n\t* glyph04811\n\t* glyph04812\n\t* glyph04813\n\t* glyph04814\n\t* glyph04815\n\t* glyph04816\n\t* glyph04817\n\t* glyph04818\n\t* glyph04819\n\t* glyph04820\n\t* glyph04821\n\t* glyph04822\n\t* glyph04823\n\t* glyph04824\n\t* glyph04825\n\t* glyph04826\n\t* glyph04827\n\t* glyph04828\n\t* glyph04829\n\t* glyph04830\n\t* glyph04831\n\t* glyph04832\n\t* glyph04833\n\t* glyph04834\n\t* glyph04835\n\t* glyph04836\n\t* glyph04837\n\t* glyph04838\n\t* glyph04839\n\t* glyph04840\n\t* glyph04841\n\t* glyph04842\n\t* glyph04843\n\t* glyph04844\n\t* glyph04845\n\t* glyph04846\n\t* glyph04847\n\t* glyph04848\n\t* glyph04849\n\t* glyph04850\n\t* glyph04851\n\t* glyph04854\n\t* glyph04856\n\t* glyph04857\n\t* glyph04858\n\t* glyph04859\n\t* glyph04860\n\t* glyph04864\n\t* glyph04865\n\t* glyph04867\n\t* glyph04870\n\t* glyph04871\n\t* glyph04872\n\t* glyph04873\n\t* glyph04874\n\t* glyph04875\n\t* glyph04877\n\t* glyph04878\n\t* glyph04879\n\t* glyph04883\n\t* glyph04884\n\t* glyph04885\n\t* glyph04887\n\t* glyph04888\n\t* glyph04889\n\t* glyph04890\n\t* glyph04891\n\t* glyph04894\n\t* glyph04895\n\t* glyph04896\n\t* glyph04897\n\t* glyph04898\n\t* glyph04899\n\t* glyph04900\n\t* glyph04901\n\t* glyph04902\n\t* glyph04905\n\t* glyph04906\n\t* glyph04907\n\t* glyph04909\n\t* glyph04910\n\t* glyph04911\n\t* glyph04912\n\t* glyph04913\n\t* glyph04916\n\t* glyph04917\n\t* glyph04918\n\t* glyph04919\n\t* glyph04920\n\t* glyph04921\n\t* glyph04922\n\t* glyph04924\n\t* glyph04926\n\t* glyph04927\n\t* glyph04928\n\t* glyph04929\n\t* glyph04930\n\t* glyph04932\n\t* glyph04933\n\t* glyph04934\n\t* glyph04935\n\t* glyph04937\n\t* glyph04938\n\t* glyph04940\n\t* glyph04941\n\t* glyph04942\n\t* glyph04943\n\t* glyph04944\n\t* glyph04945\n\t* glyph04946\n\t* glyph04947\n\t* glyph04948\n\t* glyph04951\n\t* glyph04952\n\t* glyph04953\n\t* glyph04955\n\t* glyph04956\n\t* glyph04957\n\t* glyph04958\n\t* glyph04959\n\t* glyph04960\n\t* glyph04961\n\t* glyph04962\n\t* glyph04965\n\t* glyph04966\n\t* glyph04967\n\t* glyph04971\n\t* glyph04972\n\t* glyph04973\n\t* glyph04975\n\t* glyph04976\n\t* glyph04977\n\t* glyph04978\n\t* glyph04979\n\t* glyph04982\n\t* glyph04983\n\t* glyph04984\n\t* glyph04985\n\t* glyph04986\n\t* glyph04987\n\t* glyph04988\n\t* glyph04990\n\t* glyph04991\n\t* glyph04993\n\t* glyph04994\n\t* glyph04995\n\t* glyph04997\n\t* glyph04998\n\t* glyph04999\n\t* glyph05000\n\t* glyph05001\n\t* glyph05004\n\t* glyph05005\n\t* glyph05006\n\t* glyph05007\n\t* glyph05008\n\t* glyph05011\n\t* glyph05012\n\t* glyph05013\n\t* glyph05014\n\t* glyph05015\n\t* glyph05016\n\t* glyph05017\n\t* glyph05018\n\t* glyph05019\n\t* glyph05020\n\t* glyph05022\n\t* glyph05023\n\t* glyph05024\n\t* glyph05025\n\t* glyph05027\n\t* glyph05028\n\t* glyph05029\n\t* glyph05030\n\t* glyph05033\n\t* glyph05034\n\t* glyph05035\n\t* glyph05036\n\t* glyph05037\n\t* glyph05039\n\t* glyph05040\n\t* glyph05041\n\t* glyph05043\n\t* glyph05044\n\t* glyph05045\n\t* glyph05046\n\t* glyph05047\n\t* glyph05048\n\t* glyph05049\n\t* glyph05050\n\t* glyph05053\n\t* glyph05054\n\t* glyph05055\n\t* glyph05057\n\t* glyph05058\n\t* glyph05060\n\t* glyph05062\n\t* glyph05063\n\t* glyph05064\n\t* glyph05065\n\t* glyph05068\n\t* glyph05069\n\t* glyph05070\n\t* glyph05071\n\t* glyph05072\n\t* glyph05073\n\t* glyph05074\n\t* glyph05075\n\t* glyph05076\n\t* glyph05077\n\t* glyph05078\n\t* glyph05079\n\t* glyph05080\n\t* glyph05081\n\t* glyph05082\n\t* glyph05083\n\t* glyph05084\n\t* glyph05085\n\t* glyph05086\n\t* glyph05087\n\t* glyph05088\n\t* glyph05089\n\t* glyph05090\n\t* glyph05091\n\t* glyph05092\n\t* glyph05093\n\t* glyph05094\n\t* glyph05096\n\t* glyph05099\n\t* glyph05100\n\t* glyph05101\n\t* glyph05102\n\t* glyph05103\n\t* glyph05104\n\t* glyph05105\n\t* glyph05106\n\t* glyph05107\n\t* glyph05108\n\t* glyph05110\n\t* glyph05111\n\t* glyph05112\n\t* glyph05113\n\t* glyph05115\n\t* glyph05116\n\t* glyph05117\n\t* glyph05118\n\t* glyph05119\n\t* glyph05120\n\t* glyph05122\n\t* glyph05125\n\t* glyph05126\n\t* glyph05127\n\t* glyph05130\n\t* glyph05131\n\t* glyph05132\n\t* glyph05133\n\t* glyph05136\n\t* glyph05137\n\t* glyph05138\n\t* glyph05139\n\t* glyph05140\n\t* glyph05141\n\t* glyph05142\n\t* glyph05143\n\t* glyph05144\n\t* glyph05147\n\t* glyph05148\n\t* glyph05149\n\t* glyph05151\n\t* glyph05152\n\t* glyph05153\n\t* glyph05154\n\t* glyph05155\n\t* glyph05158\n\t* glyph05159\n\t* glyph05160\n\t* glyph05161\n\t* glyph05163\n\t* glyph05164\n\t* glyph05165\n\t* glyph05167\n\t* glyph05168\n\t* glyph05171\n\t* glyph05172\n\t* glyph05173\n\t* glyph05175\n\t* glyph05176\n\t* glyph05177\n\t* glyph05178\n\t* glyph05179\n\t* glyph05180\n\t* glyph05181\n\t* glyph05182\n\t* glyph05183\n\t* glyph05184\n\t* glyph05187\n\t* glyph05188\n\t* glyph05191\n\t* glyph05192\n\t* glyph05193\n\t* glyph05194\n\t* glyph05196\n\t* glyph05197\n\t* glyph05198\n\t* glyph05199\n\t* glyph05202\n\t* glyph05204\n\t* glyph05205\n\t* glyph05206\n\t* glyph05209\n\t* glyph05210\n\t* glyph05211\n\t* glyph05212\n\t* glyph05213\n\t* glyph05214\n\t* glyph05215\n\t* glyph05217\n\t* glyph05218\n\t* glyph05219\n\t* glyph05220\n\t* glyph05221\n\t* glyph05223\n\t* glyph05224\n\t* glyph05225\n\t* glyph05227\n\t* glyph05228\n\t* glyph05229\n\t* glyph05230\n\t* glyph05232\n\t* glyph05233\n\t* glyph05235\n\t* glyph05236\n\t* glyph05237\n\t* glyph05238\n\t* glyph05239\n\t* glyph05240\n\t* glyph05241\n\t* glyph05242\n\t* glyph05243\n\t* glyph05244\n\t* glyph05245\n\t* glyph05246\n\t* glyph05247\n\t* glyph05248\n\t* glyph05249\n\t* glyph05250\n\t* glyph05251\n\t* glyph05252\n\t* glyph05254\n\t* glyph05255\n\t* glyph05256\n\t* glyph05257\n\t* glyph05258\n\t* glyph05259\n\t* glyph05260\n\t* glyph05261\n\t* glyph05262\n\t* glyph05263\n\t* glyph05264\n\t* glyph05265\n\t* glyph05266\n\t* glyph05267\n\t* glyph05269\n\t* glyph05271\n\t* glyph05272\n\t* glyph05273\n\t* glyph05274\n\t* glyph05275\n\t* glyph05276\n\t* glyph05277\n\t* glyph05278\n\t* glyph05279\n\t* glyph05280\n\t* glyph05281\n\t* glyph05282\n\t* glyph05283\n\t* glyph05284\n\t* glyph05285\n\t* glyph05286\n\t* glyph05287\n\t* glyph05288\n\t* glyph05289\n\t* glyph05290\n\t* glyph05291\n\t* glyph05292\n\t* glyph05293\n\t* glyph05294\n\t* glyph05295\n\t* glyph05296\n\t* glyph05297\n\t* glyph05298\n\t* glyph05299\n\t* glyph05300\n\t* glyph05301\n\t* glyph05302\n\t* glyph05303\n\t* glyph05304\n\t* glyph05305\n\t* glyph05306\n\t* glyph05307\n\t* glyph05308\n\t* glyph05309\n\t* glyph05310\n\t* glyph05311\n\t* glyph05312\n\t* glyph05313\n\t* glyph05314\n\t* glyph05315\n\t* glyph05316\n\t* glyph05317\n\t* glyph05318\n\t* glyph05319\n\t* glyph05320\n\t* glyph05321\n\t* glyph05322\n\t* glyph05323\n\t* glyph05324\n\t* glyph05325\n\t* glyph05326\n\t* glyph05327\n\t* glyph05328\n\t* glyph05329\n\t* glyph05330\n\t* glyph05331\n\t* glyph05332\n\t* glyph05333\n\t* glyph05334\n\t* glyph05335\n\t* glyph05336\n\t* glyph05337\n\t* glyph05338\n\t* glyph05339\n\t* glyph05340\n\t* glyph05341\n\t* glyph05342\n\t* glyph05343\n\t* glyph05344\n\t* glyph05345\n\t* glyph05346\n\t* glyph05347\n\t* glyph05348\n\t* glyph05349\n\t* glyph05350\n\t* glyph05351\n\t* glyph05352\n\t* glyph05353\n\t* glyph05354\n\t* glyph05355\n\t* glyph05356\n\t* glyph05357\n\t* glyph05358\n\t* glyph05359\n\t* glyph05360\n\t* glyph05361\n\t* glyph05362\n\t* glyph05363\n\t* glyph05364\n\t* glyph05365\n\t* glyph05366\n\t* glyph05367\n\t* glyph05368\n\t* glyph05369\n\t* glyph05370\n\t* glyph05371\n\t* glyph05372\n\t* glyph05373\n\t* glyph05374\n\t* glyph05375\n\t* glyph05376\n\t* glyph05377\n\t* glyph05378\n\t* glyph05379\n\t* glyph05380\n\t* glyph05381\n\t* glyph05382\n\t* glyph05383\n\t* glyph05386\n\t* glyph05387\n\t* glyph05388\n\t* glyph05390\n\t* glyph05391\n\t* glyph05392\n\t* glyph05393\n\t* glyph05394\n\t* glyph05395\n\t* glyph05396\n\t* glyph05397\n\t* glyph05398\n\t* glyph05399\n\t* glyph05400\n\t* glyph05401\n\t* glyph05402\n\t* glyph05403\n\t* glyph05404\n\t* glyph05405\n\t* glyph05406\n\t* glyph05407\n\t* glyph05408\n\t* glyph05409\n\t* glyph05410\n\t* glyph05411\n\t* glyph05412\n\t* glyph05413\n\t* glyph05414\n\t* glyph05415\n\t* glyph05416\n\t* glyph05418\n\t* glyph05419\n\t* glyph05420\n\t* glyph05421\n\t* glyph05422\n\t* glyph05423\n\t* glyph05424\n\t* glyph05425\n\t* glyph05426\n\t* glyph05427\n\t* glyph05428\n\t* glyph05429\n\t* glyph05430\n\t* glyph05431\n\t* glyph05432\n\t* glyph05433\n\t* glyph05434\n\t* glyph05435\n\t* glyph05436\n\t* glyph05437\n\t* glyph05438\n\t* glyph05439\n\t* glyph05440\n\t* glyph05441\n\t* glyph05442\n\t* glyph05443\n\t* glyph05444\n\t* glyph05445\n\t* glyph05446\n\t* glyph05447\n\t* glyph05448\n\t* glyph05449\n\t* glyph05450\n\t* glyph05451\n\t* glyph05452\n\t* glyph05453\n\t* glyph05454\n\t* glyph05455\n\t* glyph05456\n\t* glyph05457\n\t* glyph05461\n\t* glyph05462\n\t* glyph05463\n\t* glyph05464\n\t* glyph05465\n\t* glyph05466\n\t* glyph05467\n\t* glyph05468\n\t* glyph05469\n\t* glyph05470\n\t* glyph05471\n\t* glyph05472\n\t* glyph05473\n\t* glyph05474\n\t* glyph05475\n\t* glyph05476\n\t* glyph05478\n\t* glyph05479\n\t* glyph05480\n\t* glyph05481\n\t* glyph05482\n\t* glyph05483\n\t* glyph05484\n\t* glyph05485\n\t* glyph05486\n\t* glyph05487\n\t* glyph05488\n\t* glyph05489\n\t* glyph05490\n\t* glyph05491\n\t* glyph05492\n\t* glyph05493\n\t* glyph05494\n\t* glyph05495\n\t* glyph05496\n\t* glyph05497\n\t* glyph05498\n\t* glyph05499\n\t* glyph05500\n\t* glyph05501\n\t* glyph05502\n\t* glyph05503\n\t* glyph05504\n\t* glyph05505\n\t* glyph05506\n\t* glyph05507\n\t* glyph05508\n\t* glyph05509\n\t* glyph05510\n\t* glyph05511\n\t* glyph05512\n\t* glyph05513\n\t* glyph05514\n\t* glyph05515\n\t* glyph05516\n\t* glyph05517\n\t* glyph05518\n\t* glyph05519\n\t* glyph05521\n\t* glyph05522\n\t* glyph05523\n\t* glyph05524\n\t* glyph05525\n\t* glyph05526\n\t* glyph05527\n\t* glyph05528\n\t* glyph05529\n\t* glyph05531\n\t* glyph05532\n\t* glyph05534\n\t* glyph05535\n\t* glyph05536\n\t* glyph05537\n\t* glyph05538\n\t* glyph05539\n\t* glyph05541\n\t* glyph05546\n\t* glyph05547\n\t* glyph05548\n\t* glyph05549\n\t* glyph05550\n\t* glyph05551\n\t* glyph05552\n\t* glyph05553\n\t* glyph05555\n\t* glyph05556\n\t* glyph05557\n\t* glyph05558\n\t* glyph05559\n\t* glyph05561\n\t* glyph05562\n\t* glyph05563\n\t* glyph05564\n\t* glyph05565\n\t* glyph05566\n\t* glyph05567\n\t* glyph05568\n\t* glyph05569\n\t* glyph05570\n\t* glyph05571\n\t* glyph05572\n\t* glyph05573\n\t* glyph05574\n\t* glyph05576\n\t* glyph05577\n\t* glyph05578\n\t* glyph05579\n\t* glyph05580\n\t* glyph05581\n\t* glyph05582\n\t* glyph05584\n\t* glyph05585\n\t* glyph05586\n\t* glyph05587\n\t* glyph05588\n\t* glyph05590\n\t* glyph05591\n\t* glyph05592\n\t* glyph05593\n\t* glyph05594\n\t* glyph05595\n\t* glyph05596\n\t* glyph05597\n\t* glyph05598\n\t* glyph05599\n\t* glyph05601\n\t* glyph05603\n\t* glyph05605\n\t* glyph05606\n\t* glyph05607\n\t* glyph05609\n\t* glyph05610\n\t* glyph05611\n\t* glyph05612\n\t* glyph05616\n\t* glyph05619\n\t* glyph05620\n\t* glyph05621\n\t* glyph05622\n\t* glyph05623\n\t* glyph05624\n\t* glyph05625\n\t* glyph05626\n\t* glyph05627\n\t* glyph05628\n\t* glyph05629\n\t* glyph05630\n\t* glyph05631\n\t* glyph05632\n\t* glyph05634\n\t* glyph05635\n\t* glyph05636\n\t* glyph05638\n\t* glyph05639\n\t* glyph05640\n\t* glyph05641\n\t* glyph05642\n\t* glyph05643\n\t* glyph05644\n\t* glyph05645\n\t* glyph05646\n\t* glyph05647\n\t* glyph05648\n\t* glyph05649\n\t* glyph05650\n\t* glyph05651\n\t* glyph05652\n\t* glyph05653\n\t* glyph05654\n\t* glyph05655\n\t* glyph05656\n\t* glyph05657\n\t* glyph05658\n\t* glyph05659\n\t* glyph05660\n\t* glyph05661\n\t* glyph05662\n\t* glyph05663\n\t* glyph05664\n\t* glyph05665\n\t* glyph05666\n\t* glyph05667\n\t* glyph05668\n\t* glyph05669\n\t* glyph05671\n\t* glyph05672\n\t* glyph05673\n\t* glyph05674\n\t* glyph05679\n\t* glyph05680\n\t* glyph05681\n\t* glyph05682\n\t* glyph05683\n\t* glyph05684\n\t* glyph05685\n\t* glyph05686\n\t* glyph05688\n\t* glyph05689\n\t* glyph05690\n\t* glyph05691\n\t* glyph05692\n\t* glyph05693\n\t* glyph05694\n\t* glyph05696\n\t* glyph05697\n\t* glyph05698\n\t* glyph05699\n\t* glyph05700\n\t* glyph05702\n\t* glyph05704\n\t* glyph05705\n\t* glyph05708\n\t* glyph05709\n\t* glyph05710\n\t* glyph05712\n\t* glyph05713\n\t* glyph05714\n\t* glyph05715\n\t* glyph05716\n\t* glyph05717\n\t* glyph05718\n\t* glyph05719\n\t* glyph05720\n\t* glyph05721\n\t* glyph05722\n\t* glyph05723\n\t* glyph05724\n\t* glyph05725\n\t* glyph05726\n\t* glyph05727\n\t* glyph05728\n\t* glyph05729\n\t* glyph05730\n\t* glyph05731\n\t* glyph05732\n\t* glyph05733\n\t* glyph05734\n\t* glyph05735\n\t* glyph05736\n\t* glyph05737\n\t* glyph05738\n\t* glyph05739\n\t* glyph05740\n\t* glyph05741\n\t* glyph05742\n\t* glyph05744\n\t* glyph05745\n\t* glyph05746\n\t* glyph05748\n\t* glyph05749\n\t* glyph05750\n\t* glyph05751\n\t* glyph05753\n\t* glyph05754\n\t* glyph05755\n\t* glyph05756\n\t* glyph05757\n\t* glyph05758\n\t* glyph05759\n\t* glyph05760\n\t* glyph05761\n\t* glyph05762\n\t* glyph05763\n\t* glyph05765\n\t* glyph05767\n\t* glyph05768\n\t* glyph05769\n\t* glyph05770\n\t* glyph05772\n\t* glyph05774\n\t* glyph05775\n\t* glyph05776\n\t* glyph05777\n\t* glyph05778\n\t* glyph05779\n\t* glyph05780\n\t* glyph05781\n\t* glyph05782\n\t* glyph05783\n\t* glyph05784\n\t* glyph05785\n\t* glyph05786\n\t* glyph05787\n\t* glyph05788\n\t* glyph05789\n\t* glyph05790\n\t* glyph05791\n\t* glyph05792\n\t* glyph05793\n\t* glyph05794\n\t* glyph05796\n\t* glyph05797\n\t* glyph05798\n\t* glyph05799\n\t* glyph05800\n\t* glyph05801\n\t* glyph05802\n\t* glyph05803\n\t* glyph05804\n\t* glyph05805\n\t* glyph05806\n\t* glyph05807\n\t* glyph05808\n\t* glyph05809\n\t* glyph05810\n\t* glyph05811\n\t* glyph05813\n\t* glyph05814\n\t* glyph05815\n\t* glyph05816\n\t* glyph05817\n\t* glyph05818\n\t* glyph05819\n\t* glyph05820\n\t* glyph05821\n\t* glyph05822\n\t* glyph05823\n\t* glyph05824\n\t* glyph05825\n\t* glyph05826\n\t* glyph05827\n\t* glyph05828\n\t* glyph05829\n\t* glyph05830\n\t* glyph05831\n\t* glyph05832\n\t* glyph05833\n\t* glyph05834\n\t* glyph05835\n\t* glyph05836\n\t* glyph05837\n\t* glyph05838\n\t* glyph05839\n\t* glyph05840\n\t* glyph05841\n\t* glyph05842\n\t* glyph05843\n\t* glyph05844\n\t* glyph05845\n\t* glyph05846\n\t* glyph05847\n\t* glyph05848\n\t* glyph05849\n\t* glyph05850\n\t* glyph05851\n\t* glyph05852\n\t* glyph05853\n\t* glyph05854\n\t* glyph05855\n\t* glyph05856\n\t* glyph05857\n\t* glyph05858\n\t* glyph05860\n\t* glyph05861\n\t* glyph05863\n\t* glyph05865\n\t* glyph05866\n\t* glyph05868\n\t* glyph05869\n\t* glyph05870\n\t* glyph05871\n\t* glyph05872\n\t* glyph05873\n\t* glyph05874\n\t* glyph05875\n\t* glyph05876\n\t* glyph05878\n\t* glyph05879\n\t* glyph05880\n\t* glyph05881\n\t* glyph05882\n\t* glyph05883\n\t* glyph05884\n\t* glyph05885\n\t* glyph05886\n\t* glyph05887\n\t* glyph05888\n\t* glyph05889\n\t* glyph05890\n\t* glyph05891\n\t* glyph05892\n\t* glyph05893\n\t* glyph05895\n\t* glyph05896\n\t* glyph05897\n\t* glyph05899\n\t* glyph05901\n\t* glyph05902\n\t* glyph05903\n\t* glyph05904\n\t* glyph05905\n\t* glyph05906\n\t* glyph05907\n\t* glyph05908\n\t* glyph05909\n\t* glyph05910\n\t* glyph05911\n\t* glyph05912\n\t* glyph05913\n\t* glyph05914\n\t* glyph05915\n\t* glyph05916\n\t* glyph05917\n\t* glyph05918\n\t* glyph05919\n\t* glyph05920\n\t* glyph05921\n\t* glyph05922\n\t* glyph05923\n\t* glyph05924\n\t* glyph05925\n\t* glyph05926\n\t* glyph05927\n\t* glyph05928\n\t* glyph05929\n\t* glyph05930\n\t* glyph05931\n\t* glyph05932\n\t* glyph05933\n\t* glyph05934\n\t* glyph05935\n\t* glyph05936\n\t* glyph05937\n\t* glyph05938\n\t* glyph05939\n\t* glyph05940\n\t* glyph05941\n\t* glyph05942\n\t* glyph05943\n\t* glyph05944\n\t* glyph05945\n\t* glyph05946\n\t* glyph05947\n\t* glyph05948\n\t* glyph05949\n\t* glyph05950\n\t* glyph05951\n\t* glyph05952\n\t* glyph05953\n\t* glyph05954\n\t* glyph05955\n\t* glyph05956\n\t* glyph05957\n\t* glyph05958\n\t* glyph05959\n\t* glyph05960\n\t* glyph05961\n\t* glyph05962\n\t* glyph05963\n\t* glyph05964\n\t* glyph05965\n\t* glyph05966\n\t* glyph05967\n\t* glyph05968\n\t* glyph05969\n\t* glyph05970\n\t* glyph05971\n\t* glyph05972\n\t* glyph05973\n\t* glyph05974\n\t* glyph06450\n\t* glyph06464\n\t* glyph06465\n\t* glyph06467\n\t* glyph06468\n\t* glyph06469\n\t* glyph06470\n\t* glyph06471\n\t* glyph06472 and glyph06473",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "result": "WARN"
                },
                {
                    "description": "Checking direction of slnt axis angles",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/slant_direction>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The 'slnt' axis values are defined as negative values for a clockwise (right)\n        lean, and positive values for counter-clockwise lean. This is counter-intuitive\n        for many designers who are used to think of a positive slant as a lean to\n        the right.\n\n        This check ensures that the slant axis direction is consistent with the specs.\n\n        https://docs.microsoft.com/en-us/typography/opentype/spec/dvaraxistag_slnt\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check font names are correct",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/font_names>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font names are good:\n\n| nameID | current | expected |\n| :--- | :--- | :--- |\n| Family Name | Amiri | Amiri |\n| Subfamily Name | Bold Italic | Bold Italic |\n| Full Name | Amiri Bold Italic | Amiri Bold Italic |\n| Poscript Name | Amiri-BoldItalic | Amiri-BoldItalic |",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Google Fonts has several rules which need to be adhered to when\n        setting a font's name table. Please read:\n        https://googlefonts.github.io/gf-guide/statics.html#supported-styles\n        https://googlefonts.github.io/gf-guide/statics.html#style-linking\n        https://googlefonts.github.io/gf-guide/statics.html#unsupported-styles\n        https://googlefonts.github.io/gf-guide/statics.html#single-weight-families\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Copyright field for this font on METADATA.pb matches all copyright notice entries on the name table ?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/nameid/copyright>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Copyright field for this font on METADATA.pb matches copyright notice entries on the name table.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Font has all mandatory 'name' table entries?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/mandatory_entries>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font contains values for all mandatory name table entries.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Length of copyright notice must not exceed 500 characters.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/copyright_length>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "All copyright notice name entries on the 'name' table are shorter than 500 characters.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This is an arbitrary max length for the copyright notice field of the name\n        table. We simply don't want such notices to be too long. Typically such notices\n        are actually much shorter than this with a length of roughly 70 or 80\n        characters.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check for font-v versioning.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/fontv>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Version string is: \"Version 1.000\"\nThe version string must ideally include a git commit hash and either a \"dev\" or a \"release\" suffix such as in the example below:\n\"Version 1.3; git-0d08353-release\" [code: bad-format]",
                            "status": "INFO",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The git sha1 tagging and dev/release features of Source Foundry `font-v` tool\n        are awesome and we would love to consider upstreaming the approach into\n        fontmake someday. For now we only emit an INFO if a given font does not yet\n        follow the experimental versioning style, but at some point we may start\n        enforcing it.\n    ",
                    "result": "INFO"
                },
                {
                    "description": "Check glyphs do not have components which are themselves components.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/glyf_nested_components>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Glyphs do not contain nested components.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        There have been bugs rendering variable fonts with nested components.\n        Additionally, some static fonts with nested components have been reported\n        to have rendering and printing issues.\n\n        For more info, see:\n        * https://github.com/fonttools/fontbakery/issues/2961\n        * https://github.com/arrowtype/recursive/issues/412\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check a static ttf can be generated from a variable font.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/generate_static>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Google Fonts may serve static fonts which have been generated from variable\n        fonts. This test will attempt to generate a static ttf using fontTool's\n        varLib mutator.\n\n        The target font will be the mean of each axis e.g:\n\n        ## VF font axes\n\n        - min weight, max weight = 400, 800\n\n        - min width, max width = 50, 100\n\n        ## Target Instance\n\n        - weight = 600\n\n        - width = 75\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check that variable fonts have an HVAR table.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/has_HVAR>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Not having a HVAR table can lead to costly text-layout operations on some\n        platforms, which we want to avoid.\n\n        So, all variable fonts on the Google Fonts collection should have an HVAR\n        with valid values.\n\n        More info on the HVAR table can be found at:\n        https://docs.microsoft.com/en-us/typography/opentype/spec/otvaroverview#variation-data-tables-and-miscellaneous-requirements\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Font enables smart dropout control in \"prep\" table instructions?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/smart_dropout>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "'prep' table contains instructions enabling smart dropout control.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This setup is meant to ensure consistent rendering quality for fonts across\n        all devices (with different rendering/hinting capabilities).\n\n        Below is the snippet of instructions we expect to see in the fonts:\n        B8 01 FF    PUSHW 0x01FF\n        85          SCANCTRL (unconditinally turn on\n                              dropout control mode)\n        B0 04       PUSHB 0x04\n        8D          SCANTYPE (enable smart dropout control)\n\n        \"Smart dropout control\" means activating rules 1, 2 and 5:\n        Rule 1: If a pixel's center falls within the glyph outline,\n                that pixel is turned on.\n        Rule 2: If a contour falls exactly on a pixel's center,\n                that pixel is turned on.\n        Rule 5: If a scan line between two adjacent pixel centers\n                (either vertical or horizontal) is intersected\n                by both an on-Transition contour and an off-Transition\n                contour and neither of the pixels was already turned on\n                by rules 1 and 2, turn on the pixel which is closer to\n                the midpoint between the on-Transition contour and\n                off-Transition contour. This is \"Smart\" dropout control.\n\n        For more detailed info (such as other rules not enabled in this snippet),\n        please refer to the TrueType Instruction Set documentation.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "There must not be VTT Talk sources in the font.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/vttclean>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "There are no tables with VTT Talk sources embedded in the font.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The goal here is to reduce filesizes and improve pageloading when dealing\n        with webfonts.\n\n        The VTT Talk sources are not necessary at runtime and endup being just dead\n        weight when left embedded in the font binaries. The sources should be kept on\n        the project files but stripped out when building release binaries.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Are there unwanted Apple tables?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/aat>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "There are no unwanted AAT tables.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Apple's TrueType reference manual [1] describes SFNT tables not in the\n        Microsoft OpenType specification [2] and these can sometimes sneak into final\n        release files, but Google Fonts should only have OpenType tables.\n\n        [1] https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6.html\n        [2] https://docs.microsoft.com/en-us/typography/opentype/spec/\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check a font's STAT table contains compulsory Axis Values.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/STAT>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check a font's STAT table contains compulsory Axis Values which exist\n        in the Google Fonts Axis Registry.\n\n        We cannot determine what Axis Values the user will set for axes such as\n        opsz, GRAD since these axes are unique for each font so we'll skip them.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check variable font instances",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/fvar_instances>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check a font's fvar instance coordinates comply with our guidelines:\n        https://googlefonts.github.io/gf-guide/variable.html#fvar-instances\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "All name entries referenced by fvar instances exist on the name table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/fvar_name_entries>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The purpose of this check is to make sure that all name entries referenced\n        by variable font instances do exist in the name table.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "PPEM must be an integer on hinted fonts.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/integer_ppem_if_hinted>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_hinted",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Hinted fonts must have head table flag bit 3 set.\n\n        Per https://docs.microsoft.com/en-us/typography/opentype/spec/head,\n        bit 3 of Head::flags decides whether PPEM should be rounded. This bit should\n        always be set for hinted fonts.\n\n        Note:\n        Bit 3 = Force ppem to integer values for all internal scaler math;\n                May use fractional ppem sizes if this bit is clear;\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Are there caret positions declared for every ligature?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/ligature_carets>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Looks good!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        All ligatures in a font must have corresponding caret (text cursor) positions\n        defined in the GDEF table, otherwhise, users may experience issues with\n        caret rendering.\n\n        If using GlyphsApp or UFOs, ligature carets can be defined as anchors with\n        names starting with 'caret_'. These can be compiled with fontmake as of\n        version v2.4.0.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Is there kerning info for non-ligated sequences?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/kerning_for_non_ligated_sequences>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "GPOS table lacks kerning info for the following non-ligated sequences:\n\n\t- f + f\n\n\t- f + b\n\n\t- b + f\n\n\t- f + h\n\n\t- h + f\n\n\t- f + i\n\n\t- i + f\n\n\t- f + j\n\n\t- j + f\n\n\t- f + k\n\n\t- k + f\n\n\t- f + l\n\n\t- l + b\n\n\t- h + i\n\n\t- i + j\n\n\t- j + k\n\n\t- k + l [code: lacks-kern-info]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Fonts with ligatures should have kerning on the corresponding non-ligated\n        sequences for text where ligatures aren't used\n        (eg https://github.com/impallari/Raleway/issues/14).\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Combined length of family and style must not exceed 27 characters.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/family_and_style_max_length>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "All name entries are good.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to a GlyphsApp tutorial [1], in order to make sure all versions of\n        Windows recognize it as a valid font file, we must make sure that the\n        concatenated length of the familyname (NameID.FONT_FAMILY_NAME) and\n        style (NameID.FONT_SUBFAMILY_NAME) strings in the name table do not\n        exceed 20 characters.\n\n        After discussing the problem in more detail at FontBakery issue #2179 [2] we\n        decided that allowing up to 27 chars would still be on the safe side, though.\n\n        [1] https://glyphsapp.com/tutorials/multiple-masters-part-3-setting-up-instances\n        [2] https://github.com/fonttools/fontbakery/issues/2179\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Name table entries should not contain line-breaks.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/line_breaks>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Name table entries are all single-line (no line-breaks found).",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        There are some entries on the name table that may include more than one line\n        of text. The Google Fonts team, though, prefers to keep the name table entries\n        short and simple without line breaks.\n\n        For instance, some designers like to include the full text of a font license in\n        the \"copyright notice\" entry, but for the GFonts collection this entry should\n        only mention year, author and other basic info in a manner enforced by\n        com.google.fonts/check/font_copyright\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Name table strings must not contain the string 'Reserved Font Name'.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/rfn>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "None of the name table strings contain \"Reserved Font Name\".",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Some designers adopt the \"Reserved Font Name\" clause of the OFL license. This\n        means that the original author reserves the rights to the family name and other\n        people can only distribute modified versions using a different family name.\n\n        Google Fonts published updates to the fonts in the collection in order to fix\n        issues and/or implement further improvements to the fonts. It is important to\n        keep the family name so that users of the webfonts can benefit from the updates.\n        Since it would forbid such usage scenario, all families in the GFonts collection\n        are required to not adopt the RFN clause.\n\n        This check ensures \"Reserved Font Name\" is not mentioned in the name table.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check family name for GF Guide compliance.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/family_name_compliance>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font name looks good.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Checks the family name for compliance with the Google Fonts Guide.\n        https://googlefonts.github.io/gf-guide/onboarding.html#new-fonts\n\n        If you want to have your family name added to the CamelCase\n        exceptions list, please submit a pull request to the\n        camelcased_familyname_exceptions.txt file.\n\n        Similarly, abbreviations can be submitted to the\n        abbreviations_familyname_exceptions.txt file.\n\n        These are located in the Lib/fontbakery/data/googlefonts/ directory\n        of the FontBakery source code currently hosted at\n        https://github.com/fonttools/fontbakery/\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Directory name in GFonts repo structure must match NameID 1 of the regular.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/repo/dirname_matches_nameid_1>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "A static fonts directory with at least two fonts must accompany variable fonts",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/repo/vf_has_static_fonts>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Please consider adding a subdirectory called \"static/\" and including in it static font files. [code: missing]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Variable font family directories kept in the google/fonts git repo may include\n        a static/ subdir containing static fonts.\n\n        These files are meant to be served for users that still lack support for\n        variable fonts in their web browsers.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "A font repository should not include FontBakery report files",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/repo/fb_report>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        A FontBakery report is ephemeral and so should be used for posting issues on a\n        bug-tracker instead of being hosted in the font project repository.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check upstream.yaml file contains all required fields",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/repo/upstream_yaml_has_required_fields>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: upstream_yaml",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        If a family has been pushed using the gftools packager, we must check that all\n        the required fields in the upstream.yaml file have been populated.\n    ",
                    "result": "SKIP",
                    "severity": 10
                },
                {
                    "description": "A font repository should not include ZIP files",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/repo/zip_files>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Sometimes people check in ZIPs into their font project repositories. While we\n        accept the practice of checking in binaries, we believe that a ZIP is a step\n        too far ;)\n\n        Note: a source purist position is that only source files and build scripts\n        should be checked in.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check font follows the Google Fonts vertical metric schema",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/vertical_metrics>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: not remote_styles",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This check generally enforces Google Fonts\u2019 vertical metrics specifications.\n        In particular:\n        * lineGap must be 0\n        * Sum of hhea ascender + abs(descender) + linegap must be\n          between 120% and 200% of UPM\n        * Warning if sum is over 150% of UPM\n\n        The threshold levels 150% (WARN) and 200% (FAIL) are somewhat arbitrarily chosen\n        and may hint at a glaring mistake in the metrics calculations or UPM settings.\n\n        Our documentation includes further information:\n        https://github.com/googlefonts/gf-docs/tree/main/VerticalMetrics\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check if the vertical metrics of a family are similar to the same family hosted on Google Fonts.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/vertical_metrics_regressions>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Vertical metrics have not regressed.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        If the family already exists on Google Fonts, we need to ensure that the\n        checked family's vertical metrics are similar. This check will test the\n        following schema which was outlined in Font Bakery issue #1162 [1]:\n\n        - The family should visually have the same vertical metrics as the Regular\n          style hosted on Google Fonts.\n\n        - If the family on Google Fonts has differing hhea and typo metrics, the family\n          being checked should use the typo metrics for both the hhea and typo entries.\n\n        - If the family on Google Fonts has use typo metrics not enabled and the family\n          being checked has it enabled, the hhea and typo metrics should use the family\n          on Google Fonts winAscent and winDescent values.\n\n        - If the upms differ, the values must be scaled so the visual appearance is\n          the same.\n\n        [1] https://github.com/fonttools/fontbakery/issues/1162\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check font follows the Google Fonts CJK vertical metric schema",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/cjk_vertical_metrics>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_cjk_font, not remote_styles",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        CJK fonts have different vertical metrics when compared to Latin fonts.\n        We follow the schema developed by dr Ken Lunde for Source Han Sans and\n        the Noto CJK fonts.\n\n        Our documentation includes further information:\n        https://github.com/googlefonts/gf-docs/tree/main/Spec#cjk-vertical-metrics\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check if the vertical metrics of a CJK family are similar to the same family hosted on Google Fonts.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/cjk_vertical_metrics_regressions>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_cjk_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check CJK family has the same vertical metrics as the same family\n        hosted on Google Fonts.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Does the font contain less than 150 CJK characters?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/cjk_not_enough_glyphs>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_claiming_to_be_cjk_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Kana has 150 characters and it's the smallest CJK writing system.\n\n        If a font contains less CJK glyphs than this writing system, we inform the\n        user that some glyphs may be encoded incorrectly.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check variable font instances don't have duplicate names",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont_duplicate_instance_names>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This check's purpose is to detect duplicate named instances names in a\n        given variable font.\n        Repeating instance names may be the result of instances for several VF axes\n        defined in `fvar`, but since currently only weight+italic tokens are allowed\n        in instance names as per GF specs, they ended up repeating.\n        Instead, only a base set of fonts for the most default representation of the\n        family can be defined through instances in the `fvar` table, all other\n        instances will have to be left to access through the `STAT` table.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Ensure VFs do not contain the ital axis.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/unsupported_axes>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The 'ital' axis is not supported yet in Google Chrome.\n\n        For the time being, we need to ensure that VFs do not contain this axis.\n        Once browser support is better, we can deprecate this check.\n\n        For more info regarding browser support, see:\n        https://arrowtype.github.io/vf-slnt-test/\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Ensure VFs with duplexed axes do not vary horizontal advance.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/duplexed_axis_reflow>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Certain axes, such as grade (GRAD) or roundness (ROND), should not\n        change any advanceWidth or kerning data across the font's design space.\n        This is because altering the advance width of glyphs can cause text reflow.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validate METADATA.pb axes values are within gf_axisregistry bounds.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/gf_axisregistry_bounds>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Each axis range in a METADATA.pb file must be registered, and within the bounds\n        of the axis definition in the Google Fonts Axis Registry, available at\n        https://github.com/google/fonts/tree/main/axisregistry\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validate METADATA.pb axes tags are defined in gf_axisregistry.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/gf_axisregistry_valid_tags>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Ensure all axes in a METADATA.pb file are registered in the\n        Google Fonts Axis Registry, available at\n        https://github.com/google/fonts/tree/main/axisregistry\n\n        Why does Google Fonts have its own Axis Registry?\n\n        We support a superset of the OpenType axis registry axis set, and use\n        additional metadata for each axis. Axes present in a font file but not in this\n        registry will not function via our API. No variable font is expected to\n        support all of the axes here.\n\n        Any font foundry or distributor library that offers variable fonts has a\n        implicit, latent, de-facto axis registry, which can be extracted by scanning\n        the library for axes' tags, labels, and min/def/max values. While in 2016\n        Microsoft originally offered to include more axes in the OpenType 1.8\n        specification (github.com/microsoft/OpenTypeDesignVariationAxisTags), as of\n        August 2020, this effort has stalled. We hope more foundries and distributors\n        will publish documents like this that make their axes explicit, to encourage\n        of adoption of variable fonts throughout the industry, and provide source\n        material for a future update to the OpenType specification's axis registry.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validate defaults on fvar table match registered fallback names in GFAxisRegistry.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/gf_axisregistry/fvar_axis_defaults>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check that axis defaults have a corresponding fallback name registered at the\n        Google Fonts Axis Registry, available at\n        https://github.com/google/fonts/tree/main/axisregistry\n\n        This is necessary for the following reasons:\n\n        To get ZIP files downloads on Google Fonts to be accurate \u2014 otherwise the\n        chosen default font is not generated. The Newsreader family, for instance, has\n        a default value on the 'opsz' axis of 16pt. If 16pt was not a registered\n        fallback position, then the ZIP file would instead include another position\n        as default (such as 14pt).\n\n        For the Variable fonts to display the correct location on the specimen page.\n\n        For VF with no weight axis to be displayed at all. For instance, Ballet, which\n        has no weight axis, was not appearing in sandbox because default position on\n        'opsz' axis was 16pt, and it was not yet a registered fallback positon.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validate STAT particle names and values match the fallback names in GFAxisRegistry.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/STAT/gf_axisregistry>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check that particle names and values on STAT table match the fallback names\n        in each axis entry at the Google Fonts Axis Registry, available at\n        https://github.com/google/fonts/tree/main/axisregistry\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validate VF axes match the ones declared on METADATA.pb.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/consistent_axis_enumeration>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        All font variation axes present in the font files must be properly declared\n        on METADATA.pb so that they can be served by the GFonts API.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Ensure METADATA.pb does not use escaped strings.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/escaped_strings>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        In some cases we've seen designer names and other fields with escaped strings\n        in METADATA files. Nowadays the strings can be full unicode strings and\n        do not need escaping.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Designers are listed correctly on the Google Fonts catalog?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/designer_profiles>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Google Fonts has a catalog of designers.\n\n        This check ensures that the online entries of the catalog can be found based\n        on the designer names listed on the METADATA.pb file.\n\n        It also validates the URLs and file formats are all correctly set.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Ensure variable fonts include an avar table.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/mandatory_avar_table>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Most variable fonts should include an avar table to correctly define\n        axes progression rates.\n\n        For example, a weight axis from 0% to 100% doesn't map directly to 100 to 1000,\n        because a 10% progression from 0% may be too much to define the 200,\n        while 90% may be too little to define the 900.\n\n        If the progression rates of axes is linear, this check can be ignored.\n        Fontmake will also skip adding an avar table if the progression rates\n        are linear. However, we still recommend designers visually proof each\n        instance is at the expected weight, width etc.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "On a family update, the DESCRIPTION.en_us.html file should ideally also be updated.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/description/family_update>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The DESCRIPTION.en_us.html file in this family has not changed in comparison to the latest font release on the google/fonts github repo.\nPlease consider mentioning note-worthy improvements made to the family recently. [code: description-not-updated]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        We want to ensure that any significant changes to the font family are\n        properly mentioned in the DESCRIPTION file.\n\n        In general, it means that the contents of the DESCRIPTION.en_us.html file\n        will typically change if when font files are updated. Please treat this check\n        as a reminder to do so whenever appropriate!\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Check small caps glyphs are available.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/missing_small_caps_glyphs>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Ensure small caps glyphs are available if\n        a font declares smcp or c2sc OT features.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Ensure Stylistic Sets have description.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/stylisticset_description>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Stylistic sets should provide description text. Programs such as InDesign,\n        TextEdit and Inkscape use that info to display to the users so that they know\n        what a given stylistic set offers.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "OS/2.fsSelection bit 7 (USE_TYPO_METRICS) is set in all fonts.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/os2/use_typo_metrics>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        All fonts on the Google Fonts collection should have OS/2.fsSelection bit 7\n        (USE_TYPO_METRICS) set. This requirement is part of the vertical metrics scheme\n        established as a Google Fonts policy aiming at a common ground supported by\n        all major font rendering environments.\n\n        For more details, read:\n        https://github.com/googlefonts/gf-docs/blob/main/VerticalMetrics/README.md\n\n        Below is the portion of that document that is most relevant to this check:\n\n        Use_Typo_Metrics must be enabled. This will force MS Applications to use the\n        OS/2 Typo values instead of the Win values. By doing this, we can freely set\n        the Win values to avoid clipping and control the line height with the typo\n        values. It has the added benefit of future line height compatibility. When\n        a new script is added, we simply change the Win values to the new yMin\n        and yMax, without needing to worry if the line height have changed.\n    ",
                    "result": "PASS",
                    "severity": 10
                },
                {
                    "description": "Ensure fonts have ScriptLangTags declared on the 'meta' table.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/meta/script_lang_tags>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "This font file does not have a 'meta' table. [code: lacks-meta-table]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The OpenType 'meta' table originated at Apple. Microsoft added it to OT with\n        just two DataMap records:\n\n        - dlng: comma-separated ScriptLangTags that indicate which scripts,\n          or languages and scripts, with possible variants, the font is designed for.\n\n        - slng: comma-separated ScriptLangTags that indicate which scripts,\n          or languages and scripts, with possible variants, the font supports.\n\n\n        The slng structure is intended to describe which languages and scripts the\n        font overall supports. For example, a Traditional Chinese font that also\n        contains Latin characters, can indicate Hant,Latn, showing that it supports\n        Hant, the Traditional Chinese variant of the Hani script, and it also\n        supports the Latn script.\n\n        The dlng structure is far more interesting. A font may contain various glyphs,\n        but only a particular subset of the glyphs may be truly \"leading\" in the design,\n        while other glyphs may have been included for technical reasons. Such a\n        Traditional Chinese font could only list Hant there, showing that it\u2019s designed\n        for Traditional Chinese, but the font would omit Latn, because the developers\n        don\u2019t think the font is really recommended for purely Latin-script use.\n\n        The tags used in the structures can comprise just script, or also language\n        and script. For example, if a font has Bulgarian Cyrillic alternates in the\n        locl feature for the cyrl BGR OT languagesystem, it could also indicate in\n        dlng explicitly that it supports bul-Cyrl. (Note that the scripts and languages\n        in meta use the ISO language and script codes, not the OpenType ones).\n\n        This check ensures that the font has the meta table containing the\n        slng and dlng structures.\n\n        All families in the Google Fonts collection should contain the 'meta' table.\n        Windows 10 already uses it when deciding on which fonts to fall back to.\n        The Google Fonts API and also other environments could use the data for\n        smarter filtering. Most importantly, those entries should be added\n        to the Noto fonts.\n\n        In the font making process, some environments store this data in external\n        files already. But the meta table provides a convenient way to store this\n        inside the font file, so some tools may add the data, and unrelated tools\n        may read this data. This makes the solution much more portable and universal.\n    ",
                    "result": "WARN",
                    "severity": 3
                },
                {
                    "description": "Ensure fonts do not contain any pre-production tables.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/no_debugging_tables>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Tables such as `Debg` are useful in the pre-production stages of font\n        development, but add unnecessary bloat to a production font and should\n        be removed before release.\n    ",
                    "result": "PASS",
                    "severity": 6
                },
                {
                    "description": "Check font family directory name.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/family_directory_name>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Directory name is \"amiri\", as expected.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        We want the directory name of a font family to be predictable and directly\n        derived from the family name, all lowercased and removing spaces.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check font can render its own name.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/render_own_name>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font can successfully render its own name (Amiri)",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        A base expectation is that a font family's regular/default (400 roman) style\n        can render its 'menu name' (nameID 1) in itself.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check samples can be rendered.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/can_render_samples>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        In order to prevent tofu from being seen on fonts.google.com, this check\n        verifies that all samples specified by METADATA.pb can be properly\n        rendered by the font.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check if category on METADATA.pb matches what can be inferred from the family name.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/category_hints>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Sometimes the font familyname contains words that hint at which is the most\n        likely correct category to be declared on METADATA.pb\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check font has the expected color font tables.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/colorfont_tables>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Looks Good!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        COLR v0 fonts are widely supported in most browsers so they do not require\n        an SVG color table. However, some environments (e.g. Safari, Adobe apps)\n        do not currently support COLR v1 so we need to add an SVG table to these fonts,\n        except in the case of variable fonts, since SVG does not support\n        OpenType Variations.\n\n        To automatically generate compatible SVG/COLR tables,\n        run the maximum_color tool in nanoemoji:\n        https://github.com/googlefonts/nanoemoji\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Color layers should have a minimum brightness",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/color_cpal_brightness>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Looks good!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Layers of a COLRv0 font should not be too dark or too bright. When layer colors\n        are set explicitly, they can't be changed and they may turn out illegible\n        against dark or bright backgrounds.\n\n        While traditional color-less fonts can be colored in design apps or CSS, a\n        black color definition in a COLRv0 font actually means that that layer will be\n        rendered in black regardless of the background color. This leads to text\n        becoming invisible against a dark background, for instance when using a dark\n        theme in a web browser or operating system.\n\n        This check ensures that layer colors are at least 10% bright and at most 90%\n        bright, when not already set to the current color (0xFFFF).\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Put an empty glyph on GID 1 right after the .notdef glyph for COLRv0 fonts.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/empty_glyph_on_gid1_for_colrv0>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Looks good!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        A rendering bug in Windows 10 paints whichever glyph is on GID 1 on top of\n        some glyphs, colored or not. This only occurs for COLR version 0 fonts.\n\n        Having a glyph with no contours on GID 1 is a practical workaround for that.\n\n        See https://github.com/googlefonts/gftools/issues/609\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Noto fonts must have an ARTICLE.en_us.html file",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/description/noto_has_article>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_noto",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Noto fonts are displayed in a different way on the fonts.google.com\n         web site, and so must also contain an article about them.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Checking file is named canonically.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/canonical_filename>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font filename is correct, \"Amiri-Italic.ttf\".",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        A font's filename must be composed as \"<familyname>-<stylename>.ttf\":\n\n        - Nunito-Regular.ttf\n\n        - Oswald-BoldItalic.ttf\n\n\n        Variable fonts must list the axis tags in alphabetical order in\n        square brackets and separated by commas:\n\n        - Roboto[wdth,wght].ttf\n\n        - Familyname-Italic[wght].ttf\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Does DESCRIPTION file contain broken links?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/description/broken_links>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "All links in the DESCRIPTION file look good!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The snippet of HTML in the DESCRIPTION.en_us.html file is added to the font\n        family webpage on the Google Fonts website. For that reason, all hyperlinks\n        in it must be properly working.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "URLs on DESCRIPTION file must not display http(s) prefix.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/description/urls>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "All good!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The snippet of HTML in the DESCRIPTION.en_us.html file is added to the font\n        family webpage on the Google Fonts website.\n\n        Google Fonts has a content formatting policy for that snippet that expects the\n        text content of links not to include the http:// or https:// prefixes.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Does DESCRIPTION file contain a upstream Git repo URL?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/description/git_url>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Found a git repo URL: https://github.com/aliftype/amiri [code: url-found]",
                            "status": "INFO",
                            "traceback": null
                        },
                        {
                            "message": "Looks great!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The contents of the DESCRIPTION.en-us.html file are displayed on the\n        Google Fonts website in the about section of each font family specimen page.\n\n        Since all of the Google Fonts collection is composed of libre-licensed fonts,\n        this check enforces a policy that there must be a hypertext link in that page\n        directing users to the repository where the font project files are\n        made available.\n\n        Such hosting is typically done on sites like Github, Gitlab, GNU Savannah or\n        any other git-based version control service.\n    ",
                    "result": "INFO"
                },
                {
                    "description": "Is this a proper HTML snippet?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/description/valid_html>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "/Users/simon/others-repos/fonts/ofl/amiri/DESCRIPTION.en_us.html is a propper HTML file.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Sometimes people write malformed HTML markup. This check should ensure the\n        file is good.\n\n        Additionally, when packaging families for being pushed to the `google/fonts`\n        git repo, if there is no DESCRIPTION.en_us.html file, some older versions of\n        the `add_font.py` tool insert a placeholder description file which contains\n        invalid html. This file needs to either be replaced with an existing\n        description file or edited by hand.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "DESCRIPTION.en_us.html must have more than 200 bytes.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/description/min_length>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "DESCRIPTION.en_us.html is larger than 200 bytes.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "DESCRIPTION.en_us.html should end in a linebreak.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/description/eof_linebreak>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": ":-)",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Some older text-handling tools sometimes misbehave if the last line of data\n        in a text file is not terminated with a newline character (also known as '\\n').\n\n        We know that this is a very small detail, but for the sake of keeping all\n        DESCRIPTION.en_us.html files uniformly formatted throughout the GFonts\n        collection, we chose to adopt the practice of placing this final linebreak\n        character on them.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check METADATA.pb parse correctly.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/parses>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb parsed successfuly.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The purpose of this check is to ensure that the METADATA.pb file is not\n        malformed.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Font designer field in METADATA.pb must not be 'unknown'.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/unknown_designer>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font designer field is not 'unknown'.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Font designer field in METADATA.pb must not contain 'Multiple designers'.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/multiple_designers>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Looks good.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        For a while the string \"Multiple designers\" was used as a placeholder on\n        METADATA.pb files. We should replace all those instances with actual designer\n        names so that proper credits are displayed on the Google Fonts family\n        specimen pages.\n\n        If there's more than a single designer, the designer names must be\n        separated by commas.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Multiple values in font designer field in METADATA.pb must be separated by commas.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/designer_values>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Looks good.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        We must use commas instead of forward slashes because the server-side code\n        at the fonts.google.com directory will segment the string on the commas into\n        a list of names and display the first item in the list as the\n        \"principal designer\" while the remaining names are identified as \"contributors\".\n\n        See eg https://fonts.google.com/specimen/Rubik\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Does METADATA.pb copyright field contain broken links?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/broken_links>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "All links in the METADATA.pb file look good!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Ensure METADATA.pb lists all font binaries.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/undeclared_fonts>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The set of font binaries available, except the ones on a \"static\" subdir,\n        must match exactly those declared on the METADATA.pb file.\n\n        Also, to avoid confusion, we expect that font files (other than statics)\n        are not placed on subdirectories.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Ensure METADATA.pb category field is valid.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/category>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        There are only five acceptable values for the category field in a METADATA.pb\n        file:\n\n        - MONOSPACE\n\n        - SANS_SERIF\n\n        - SERIF\n\n        - DISPLAY\n\n        - HANDWRITING\n\n        This check is meant to avoid typos in this field.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Checking OS/2 fsType does not impose restrictions.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/fstype>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2 fsType is properly set to zero.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The fsType in the OS/2 table is a legacy DRM-related field. Fonts in the\n        Google Fonts collection must have it set to zero (also known as\n        \"Installable Embedding\"). This setting indicates that the fonts can be\n        embedded in documents and permanently installed by applications on\n        remote systems.\n\n        More detailed info is available at:\n        https://docs.microsoft.com/en-us/typography/opentype/spec/os2#fstype\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Checking OS/2 achVendID.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/vendor_id>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2 VendorID 'ALIF' looks good!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Microsoft keeps a list of font vendors and their respective contact info. This\n        list is updated regularly and is indexed by a 4-char \"Vendor ID\" which is\n        stored in the achVendID field of the OS/2 table.\n\n        Registering your ID is not mandatory, but it is a good practice since some\n        applications may display the type designer / type foundry contact info on some\n        dialog and also because that info will be visible on Microsoft's website:\n\n        https://docs.microsoft.com/en-us/typography/vendors/\n\n        This check verifies whether or not a given font's vendor ID is registered in\n        that list or if it has some of the default values used by the most common\n        font editors.\n\n        Each new FontBakery release includes a cached copy of that list of vendor IDs.\n        If you registered recently, you're safe to ignore warnings emitted by this\n        check, since your ID will soon be included in one of our upcoming releases.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check Google Fonts glyph coverage.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/glyph_coverage>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Missing required codepoints:\n\n\t- 0x030B (COMBINING DOUBLE ACUTE ACCENT)\n\n\n\t- 0x0218 (LATIN CAPITAL LETTER S WITH COMMA BELOW)\n\n\n\t- 0x1E9E (LATIN CAPITAL LETTER SHARP S)\n\n\n\t- 0x021A (LATIN CAPITAL LETTER T WITH COMMA BELOW)\n\n\n\t- 0x0219 (LATIN SMALL LETTER S WITH COMMA BELOW)\n\n\n\t- 0x021B (LATIN SMALL LETTER T WITH COMMA BELOW)\n\n\n\t- 0x2122 (TRADE MARK SIGN)\n [code: missing-codepoints]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Google Fonts expects that fonts in its collection support at least the minimal\n        set of characters defined in the `GF-latin-core` glyph-set.\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "Check for METADATA subsets with zero support.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/unsupported_subsets>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This check ensures that the subsets specified on a METADATA.pb file are\n        actually supported (even if only partially) by the font files.\n\n        Subsets for which none of the codepoints are supported will cause the\n        check to FAIL.\n    ",
                    "result": "PASS",
                    "severity": 10
                },
                {
                    "description": "Check for codepoints not covered by METADATA subsets.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/unreachable_subsetting>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The following codepoints supported by the font are not covered by\n    any subsets defined in the font's metadata file, and will never\n    be served. You can solve this by either manually adding additional\n    subset declarations to METADATA.pb, or by editing the glyphset\n    definitions.\n\n * U+02BE MODIFIER LETTER RIGHT HALF RING: not included in any glyphset definition\n * U+02BF MODIFIER LETTER LEFT HALF RING: not included in any glyphset definition\n * U+02C7 CARON: try adding one of: tifinagh, canadian-aboriginal\n * U+02D8 BREVE: try adding canadian-aboriginal\n * U+02D9 DOT ABOVE: try adding canadian-aboriginal\n * U+02DB OGONEK: try adding canadian-aboriginal\n * U+02DD DOUBLE ACUTE ACCENT: not included in any glyphset definition\n * U+0300 COMBINING GRAVE ACCENT: try adding one of: coptic, cherokee, tai-le\n * U+0301 COMBINING ACUTE ACCENT: try adding one of: coptic, cherokee, tifinagh, tai-le\n * U+0302 COMBINING CIRCUMFLEX ACCENT: try adding one of: coptic, cherokee, tifinagh\n * U+0303 COMBINING TILDE: not included in any glyphset definition\n * U+0304 COMBINING MACRON: try adding one of: coptic, gothic, cherokee, tifinagh\n * U+0305 COMBINING OVERLINE: try adding one of: coptic, gothic\n * U+0306 COMBINING BREVE: try adding tifinagh\n * U+0307 COMBINING DOT ABOVE: try adding one of: tai-le, tifinagh, canadian-aboriginal, coptic, malayalam\n * U+0308 COMBINING DIAERESIS: try adding one of: coptic, gothic, tai-le\n * U+030A COMBINING RING ABOVE: not included in any glyphset definition\n * U+030C COMBINING CARON: try adding one of: cherokee, tai-le\n * U+0312 COMBINING TURNED COMMA ABOVE: not included in any glyphset definition\n * U+0315 COMBINING COMMA ABOVE RIGHT: not included in any glyphset definition\n * U+0323 COMBINING DOT BELOW: try adding one of: coptic, malayalam, cherokee, tifinagh\n * U+0326 COMBINING COMMA BELOW: not included in any glyphset definition\n * U+0327 COMBINING CEDILLA: not included in any glyphset definition\n * U+0328 COMBINING OGONEK: not included in any glyphset definition\n * U+0604 ARABIC SIGN SAMVAT: not included in any glyphset definition\n * U+0606 ARABIC-INDIC CUBE ROOT: not included in any glyphset definition\n * U+0607 ARABIC-INDIC FOURTH ROOT: not included in any glyphset definition\n * U+0608 ARABIC RAY: not included in any glyphset definition\n * U+0609 ARABIC-INDIC PER MILLE SIGN: not included in any glyphset definition\n * U+060A ARABIC-INDIC PER TEN THOUSAND SIGN: not included in any glyphset definition\n * U+060E ARABIC POETIC VERSE SIGN: not included in any glyphset definition\n * U+060F ARABIC SIGN MISRA: not included in any glyphset definition\n * U+0610 ARABIC SIGN SALLALLAHOU ALAYHE WASSALLAM: not included in any glyphset definition\n * U+0611 ARABIC SIGN ALAYHE ASSALLAM: not included in any glyphset definition\n * U+0612 ARABIC SIGN RAHMATULLAH ALAYHE: not included in any glyphset definition\n * U+0613 ARABIC SIGN RADI ALLAHOU ANHU: not included in any glyphset definition\n * U+0614 ARABIC SIGN TAKHALLUS: not included in any glyphset definition\n * U+0615 ARABIC SMALL HIGH TAH: not included in any glyphset definition\n * U+0616 ARABIC SMALL HIGH LIGATURE ALEF WITH LAM WITH YEH: not included in any glyphset definition\n * U+0617 ARABIC SMALL HIGH ZAIN: not included in any glyphset definition\n * U+0618 ARABIC SMALL FATHA: not included in any glyphset definition\n * U+0619 ARABIC SMALL DAMMA: not included in any glyphset definition\n * U+061A ARABIC SMALL KASRA: not included in any glyphset definition\n * U+061C ARABIC LETTER MARK: not included in any glyphset definition\n * U+061D ARABIC END OF TEXT MARK: not included in any glyphset definition\n * U+0620 ARABIC LETTER KASHMIRI YEH: not included in any glyphset definition\n * U+063B ARABIC LETTER KEHEH WITH TWO DOTS ABOVE: not included in any glyphset definition\n * U+063C ARABIC LETTER KEHEH WITH THREE DOTS BELOW: not included in any glyphset definition\n * U+063D ARABIC LETTER FARSI YEH WITH INVERTED V: not included in any glyphset definition\n * U+063E ARABIC LETTER FARSI YEH WITH TWO DOTS ABOVE: not included in any glyphset definition\n * U+063F ARABIC LETTER FARSI YEH WITH THREE DOTS ABOVE: not included in any glyphset definition\n * U+065A ARABIC VOWEL SIGN SMALL V ABOVE: not included in any glyphset definition\n * U+065B ARABIC VOWEL SIGN INVERTED SMALL V ABOVE: not included in any glyphset definition\n * U+065C ARABIC VOWEL SIGN DOT BELOW: not included in any glyphset definition\n * U+065D ARABIC REVERSED DAMMA: not included in any glyphset definition\n * U+065E ARABIC FATHA WITH TWO DOTS: not included in any glyphset definition\n * U+065F ARABIC WAVY HAMZA BELOW: not included in any glyphset definition\n * U+066E ARABIC LETTER DOTLESS BEH: not included in any glyphset definition\n * U+066F ARABIC LETTER DOTLESS QAF: not included in any glyphset definition\n * U+0672 ARABIC LETTER ALEF WITH WAVY HAMZA ABOVE: not included in any glyphset definition\n * U+0673 ARABIC LETTER ALEF WITH WAVY HAMZA BELOW: not included in any glyphset definition\n * U+0674 ARABIC LETTER HIGH HAMZA: not included in any glyphset definition\n * U+0675 ARABIC LETTER HIGH HAMZA ALEF: not included in any glyphset definition\n * U+0676 ARABIC LETTER HIGH HAMZA WAW: not included in any glyphset definition\n * U+0677 ARABIC LETTER U WITH HAMZA ABOVE: not included in any glyphset definition\n * U+0678 ARABIC LETTER HIGH HAMZA YEH: not included in any glyphset definition\n * U+0682 ARABIC LETTER HAH WITH TWO DOTS VERTICAL ABOVE: not included in any glyphset definition\n * U+068B ARABIC LETTER DAL WITH DOT BELOW AND SMALL TAH: not included in any glyphset definition\n * U+068E ARABIC LETTER DUL: not included in any glyphset definition\n * U+0690 ARABIC LETTER DAL WITH FOUR DOTS ABOVE: not included in any glyphset definition\n * U+0692 ARABIC LETTER REH WITH SMALL V: not included in any glyphset definition\n * U+0694 ARABIC LETTER REH WITH DOT BELOW: not included in any glyphset definition\n * U+0695 ARABIC LETTER REH WITH SMALL V BELOW: not included in any glyphset definition\n * U+0697 ARABIC LETTER REH WITH TWO DOTS ABOVE: not included in any glyphset definition\n * U+069B ARABIC LETTER SEEN WITH THREE DOTS BELOW: not included in any glyphset definition\n * U+069D ARABIC LETTER SAD WITH TWO DOTS BELOW: not included in any glyphset definition\n * U+069E ARABIC LETTER SAD WITH THREE DOTS ABOVE: not included in any glyphset definition\n * U+069F ARABIC LETTER TAH WITH THREE DOTS ABOVE: not included in any glyphset definition\n * U+06A0 ARABIC LETTER AIN WITH THREE DOTS ABOVE: not included in any glyphset definition\n * U+06A1 ARABIC LETTER DOTLESS FEH: not included in any glyphset definition\n * U+06A3 ARABIC LETTER FEH WITH DOT BELOW: not included in any glyphset definition\n * U+06AC ARABIC LETTER KAF WITH DOT ABOVE: not included in any glyphset definition\n * U+06AD ARABIC LETTER NG: not included in any glyphset definition\n * U+06AE ARABIC LETTER KAF WITH THREE DOTS BELOW: not included in any glyphset definition\n * U+06B0 ARABIC LETTER GAF WITH RING: not included in any glyphset definition\n * U+06B2 ARABIC LETTER GAF WITH TWO DOTS BELOW: not included in any glyphset definition\n * U+06B4 ARABIC LETTER GAF WITH THREE DOTS ABOVE: not included in any glyphset definition\n * U+06B5 ARABIC LETTER LAM WITH SMALL V: not included in any glyphset definition\n * U+06B6 ARABIC LETTER LAM WITH DOT ABOVE: not included in any glyphset definition\n * U+06B7 ARABIC LETTER LAM WITH THREE DOTS ABOVE: not included in any glyphset definition\n * U+06B8 ARABIC LETTER LAM WITH THREE DOTS BELOW: not included in any glyphset definition\n * U+06B9 ARABIC LETTER NOON WITH DOT BELOW: not included in any glyphset definition\n * U+06BD ARABIC LETTER NOON WITH THREE DOTS ABOVE: not included in any glyphset definition\n * U+06BF ARABIC LETTER TCHEH WITH DOT ABOVE: not included in any glyphset definition\n * U+06C4 ARABIC LETTER WAW WITH RING: not included in any glyphset definition\n * U+06C5 ARABIC LETTER KIRGHIZ OE: not included in any glyphset definition\n * U+06C6 ARABIC LETTER OE: not included in any glyphset definition\n * U+06C7 ARABIC LETTER U: not included in any glyphset definition\n * U+06C8 ARABIC LETTER YU: not included in any glyphset definition\n * U+06C9 ARABIC LETTER KIRGHIZ YU: not included in any glyphset definition\n * U+06CA ARABIC LETTER WAW WITH TWO DOTS ABOVE: not included in any glyphset definition\n * U+06CB ARABIC LETTER VE: not included in any glyphset definition\n * U+06CE ARABIC LETTER YEH WITH SMALL V: not included in any glyphset definition\n * U+06CF ARABIC LETTER WAW WITH DOT ABOVE: not included in any glyphset definition\n * U+06D1 ARABIC LETTER YEH WITH THREE DOTS BELOW: not included in any glyphset definition\n * U+06D5 ARABIC LETTER AE: not included in any glyphset definition\n * U+06D6 ARABIC SMALL HIGH LIGATURE SAD WITH LAM WITH ALEF MAKSURA: not included in any glyphset definition\n * U+06D7 ARABIC SMALL HIGH LIGATURE QAF WITH LAM WITH ALEF MAKSURA: not included in any glyphset definition\n * U+06D8 ARABIC SMALL HIGH MEEM INITIAL FORM: not included in any glyphset definition\n * U+06D9 ARABIC SMALL HIGH LAM ALEF: not included in any glyphset definition\n * U+06DA ARABIC SMALL HIGH JEEM: not included in any glyphset definition\n * U+06DB ARABIC SMALL HIGH THREE DOTS: not included in any glyphset definition\n * U+06DC ARABIC SMALL HIGH SEEN: not included in any glyphset definition\n * U+06DF ARABIC SMALL HIGH ROUNDED ZERO: not included in any glyphset definition\n * U+06E0 ARABIC SMALL HIGH UPRIGHT RECTANGULAR ZERO: not included in any glyphset definition\n * U+06E1 ARABIC SMALL HIGH DOTLESS HEAD OF KHAH: not included in any glyphset definition\n * U+06E2 ARABIC SMALL HIGH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+06E3 ARABIC SMALL LOW SEEN: not included in any glyphset definition\n * U+06E4 ARABIC SMALL HIGH MADDA: not included in any glyphset definition\n * U+06E5 ARABIC SMALL WAW: not included in any glyphset definition\n * U+06E6 ARABIC SMALL YEH: not included in any glyphset definition\n * U+06E7 ARABIC SMALL HIGH YEH: not included in any glyphset definition\n * U+06E8 ARABIC SMALL HIGH NOON: not included in any glyphset definition\n * U+06EA ARABIC EMPTY CENTRE LOW STOP: not included in any glyphset definition\n * U+06EB ARABIC EMPTY CENTRE HIGH STOP: not included in any glyphset definition\n * U+06EC ARABIC ROUNDED HIGH STOP WITH FILLED CENTRE: not included in any glyphset definition\n * U+06ED ARABIC SMALL LOW MEEM: not included in any glyphset definition\n * U+06EE ARABIC LETTER DAL WITH INVERTED V: not included in any glyphset definition\n * U+06EF ARABIC LETTER REH WITH INVERTED V: not included in any glyphset definition\n * U+06FA ARABIC LETTER SHEEN WITH DOT BELOW: not included in any glyphset definition\n * U+06FB ARABIC LETTER DAD WITH DOT BELOW: not included in any glyphset definition\n * U+06FC ARABIC LETTER GHAIN WITH DOT BELOW: not included in any glyphset definition\n * U+06FF ARABIC LETTER HEH WITH INVERTED V: not included in any glyphset definition\n * U+0750 ARABIC LETTER BEH WITH THREE DOTS HORIZONTALLY BELOW: not included in any glyphset definition\n * U+0751 ARABIC LETTER BEH WITH DOT BELOW AND THREE DOTS ABOVE: not included in any glyphset definition\n * U+0752 ARABIC LETTER BEH WITH THREE DOTS POINTING UPWARDS BELOW: not included in any glyphset definition\n * U+0753 ARABIC LETTER BEH WITH THREE DOTS POINTING UPWARDS BELOW AND TWO DOTS ABOVE: not included in any glyphset definition\n * U+0754 ARABIC LETTER BEH WITH TWO DOTS BELOW AND DOT ABOVE: not included in any glyphset definition\n * U+0755 ARABIC LETTER BEH WITH INVERTED SMALL V BELOW: not included in any glyphset definition\n * U+0756 ARABIC LETTER BEH WITH SMALL V: not included in any glyphset definition\n * U+0757 ARABIC LETTER HAH WITH TWO DOTS ABOVE: not included in any glyphset definition\n * U+0758 ARABIC LETTER HAH WITH THREE DOTS POINTING UPWARDS BELOW: not included in any glyphset definition\n * U+0759 ARABIC LETTER DAL WITH TWO DOTS VERTICALLY BELOW AND SMALL TAH: not included in any glyphset definition\n * U+075A ARABIC LETTER DAL WITH INVERTED SMALL V BELOW: not included in any glyphset definition\n * U+075B ARABIC LETTER REH WITH STROKE: not included in any glyphset definition\n * U+075C ARABIC LETTER SEEN WITH FOUR DOTS ABOVE: not included in any glyphset definition\n * U+075D ARABIC LETTER AIN WITH TWO DOTS ABOVE: not included in any glyphset definition\n * U+075E ARABIC LETTER AIN WITH THREE DOTS POINTING DOWNWARDS ABOVE: not included in any glyphset definition\n * U+075F ARABIC LETTER AIN WITH TWO DOTS VERTICALLY ABOVE: not included in any glyphset definition\n * U+0760 ARABIC LETTER FEH WITH TWO DOTS BELOW: not included in any glyphset definition\n * U+0761 ARABIC LETTER FEH WITH THREE DOTS POINTING UPWARDS BELOW: not included in any glyphset definition\n * U+0762 ARABIC LETTER KEHEH WITH DOT ABOVE: not included in any glyphset definition\n * U+0763 ARABIC LETTER KEHEH WITH THREE DOTS ABOVE: not included in any glyphset definition\n * U+0764 ARABIC LETTER KEHEH WITH THREE DOTS POINTING UPWARDS BELOW: not included in any glyphset definition\n * U+0765 ARABIC LETTER MEEM WITH DOT ABOVE: not included in any glyphset definition\n * U+0766 ARABIC LETTER MEEM WITH DOT BELOW: not included in any glyphset definition\n * U+0767 ARABIC LETTER NOON WITH TWO DOTS BELOW: not included in any glyphset definition\n * U+0768 ARABIC LETTER NOON WITH SMALL TAH: not included in any glyphset definition\n * U+0769 ARABIC LETTER NOON WITH SMALL V: not included in any glyphset definition\n * U+076A ARABIC LETTER LAM WITH BAR: not included in any glyphset definition\n * U+076B ARABIC LETTER REH WITH TWO DOTS VERTICALLY ABOVE: not included in any glyphset definition\n * U+076C ARABIC LETTER REH WITH HAMZA ABOVE: not included in any glyphset definition\n * U+076D ARABIC LETTER SEEN WITH TWO DOTS VERTICALLY ABOVE: not included in any glyphset definition\n * U+076E ARABIC LETTER HAH WITH SMALL ARABIC LETTER TAH BELOW: not included in any glyphset definition\n * U+076F ARABIC LETTER HAH WITH SMALL ARABIC LETTER TAH AND TWO DOTS: not included in any glyphset definition\n * U+0770 ARABIC LETTER SEEN WITH SMALL ARABIC LETTER TAH AND TWO DOTS: not included in any glyphset definition\n * U+0771 ARABIC LETTER REH WITH SMALL ARABIC LETTER TAH AND TWO DOTS: not included in any glyphset definition\n * U+0772 ARABIC LETTER HAH WITH SMALL ARABIC LETTER TAH ABOVE: not included in any glyphset definition\n * U+0773 ARABIC LETTER ALEF WITH EXTENDED ARABIC-INDIC DIGIT TWO ABOVE: not included in any glyphset definition\n * U+0774 ARABIC LETTER ALEF WITH EXTENDED ARABIC-INDIC DIGIT THREE ABOVE: not included in any glyphset definition\n * U+0775 ARABIC LETTER FARSI YEH WITH EXTENDED ARABIC-INDIC DIGIT TWO ABOVE: not included in any glyphset definition\n * U+0776 ARABIC LETTER FARSI YEH WITH EXTENDED ARABIC-INDIC DIGIT THREE ABOVE: not included in any glyphset definition\n * U+0777 ARABIC LETTER FARSI YEH WITH EXTENDED ARABIC-INDIC DIGIT FOUR BELOW: not included in any glyphset definition\n * U+0778 ARABIC LETTER WAW WITH EXTENDED ARABIC-INDIC DIGIT TWO ABOVE: not included in any glyphset definition\n * U+0779 ARABIC LETTER WAW WITH EXTENDED ARABIC-INDIC DIGIT THREE ABOVE: not included in any glyphset definition\n * U+077A ARABIC LETTER YEH BARREE WITH EXTENDED ARABIC-INDIC DIGIT TWO ABOVE: not included in any glyphset definition\n * U+077B ARABIC LETTER YEH BARREE WITH EXTENDED ARABIC-INDIC DIGIT THREE ABOVE: not included in any glyphset definition\n * U+077C ARABIC LETTER HAH WITH EXTENDED ARABIC-INDIC DIGIT FOUR BELOW: not included in any glyphset definition\n * U+077D ARABIC LETTER SEEN WITH EXTENDED ARABIC-INDIC DIGIT FOUR ABOVE: not included in any glyphset definition\n * U+077E ARABIC LETTER SEEN WITH INVERTED V: not included in any glyphset definition\n * U+077F ARABIC LETTER KAF WITH TWO DOTS ABOVE: not included in any glyphset definition\n * U+0890 ARABIC POUND MARK ABOVE: not included in any glyphset definition\n * U+0891 ARABIC PIASTRE MARK ABOVE: not included in any glyphset definition\n * U+08A0 ARABIC LETTER BEH WITH SMALL V BELOW: not included in any glyphset definition\n * U+08AC ARABIC LETTER ROHINGYA YEH: not included in any glyphset definition\n * U+08B6 ARABIC LETTER BEH WITH SMALL MEEM ABOVE: not included in any glyphset definition\n * U+08B7 ARABIC LETTER PEH WITH SMALL MEEM ABOVE: not included in any glyphset definition\n * U+08B8 ARABIC LETTER TEH WITH SMALL TEH ABOVE: not included in any glyphset definition\n * U+08B9 ARABIC LETTER REH WITH SMALL NOON ABOVE: not included in any glyphset definition\n * U+08BA ARABIC LETTER YEH WITH TWO DOTS BELOW AND SMALL NOON ABOVE: not included in any glyphset definition\n * U+08BB ARABIC LETTER AFRICAN FEH: not included in any glyphset definition\n * U+08BC ARABIC LETTER AFRICAN QAF: not included in any glyphset definition\n * U+08BD ARABIC LETTER AFRICAN NOON: not included in any glyphset definition\n * U+08D1 ARABIC LARGE CIRCLE BELOW: not included in any glyphset definition\n * U+08E4 ARABIC CURLY FATHA: not included in any glyphset definition\n * U+08E5 ARABIC CURLY DAMMA: not included in any glyphset definition\n * U+08E6 ARABIC CURLY KASRA: not included in any glyphset definition\n * U+08E7 ARABIC CURLY FATHATAN: not included in any glyphset definition\n * U+08E8 ARABIC CURLY DAMMATAN: not included in any glyphset definition\n * U+08E9 ARABIC CURLY KASRATAN: not included in any glyphset definition\n * U+08EA ARABIC TONE ONE DOT ABOVE: not included in any glyphset definition\n * U+08EB ARABIC TONE TWO DOTS ABOVE: not included in any glyphset definition\n * U+08EC ARABIC TONE LOOP ABOVE: not included in any glyphset definition\n * U+08ED ARABIC TONE ONE DOT BELOW: not included in any glyphset definition\n * U+08EE ARABIC TONE TWO DOTS BELOW: not included in any glyphset definition\n * U+08EF ARABIC TONE LOOP BELOW: not included in any glyphset definition\n * U+08F0 ARABIC OPEN FATHATAN: not included in any glyphset definition\n * U+08F1 ARABIC OPEN DAMMATAN: not included in any glyphset definition\n * U+08F2 ARABIC OPEN KASRATAN: not included in any glyphset definition\n * U+08F3 ARABIC SMALL HIGH WAW: not included in any glyphset definition\n * U+08F4 ARABIC FATHA WITH RING: not included in any glyphset definition\n * U+08F5 ARABIC FATHA WITH DOT ABOVE: not included in any glyphset definition\n * U+08F6 ARABIC KASRA WITH DOT BELOW: not included in any glyphset definition\n * U+08F7 ARABIC LEFT ARROWHEAD ABOVE: not included in any glyphset definition\n * U+08F8 ARABIC RIGHT ARROWHEAD ABOVE: not included in any glyphset definition\n * U+08F9 ARABIC LEFT ARROWHEAD BELOW: not included in any glyphset definition\n * U+08FA ARABIC RIGHT ARROWHEAD BELOW: not included in any glyphset definition\n * U+08FB ARABIC DOUBLE RIGHT ARROWHEAD ABOVE: not included in any glyphset definition\n * U+08FC ARABIC DOUBLE RIGHT ARROWHEAD ABOVE WITH DOT: not included in any glyphset definition\n * U+08FD ARABIC RIGHT ARROWHEAD ABOVE WITH DOT: not included in any glyphset definition\n * U+08FE ARABIC DAMMA WITH DOT: not included in any glyphset definition\n * U+2000 EN QUAD: not included in any glyphset definition\n * U+2001 EM QUAD: not included in any glyphset definition\n * U+2003 EM SPACE: not included in any glyphset definition\n * U+2004 THREE-PER-EM SPACE: not included in any glyphset definition\n * U+2005 FOUR-PER-EM SPACE: not included in any glyphset definition\n * U+2006 SIX-PER-EM SPACE: not included in any glyphset definition\n * U+2007 FIGURE SPACE: not included in any glyphset definition\n * U+2008 PUNCTUATION SPACE: not included in any glyphset definition\n * U+200A HAIR SPACE: not included in any glyphset definition\n * U+200F RIGHT-TO-LEFT MARK: try adding one of: thaana, phags-pa\n * U+2012 FIGURE DASH: not included in any glyphset definition\n * U+2015 HORIZONTAL BAR: not included in any glyphset definition\n * U+201B SINGLE HIGH-REVERSED-9 QUOTATION MARK: not included in any glyphset definition\n * U+201F DOUBLE HIGH-REVERSED-9 QUOTATION MARK: not included in any glyphset definition\n * U+2021 DOUBLE DAGGER: not included in any glyphset definition\n * U+2024 ONE DOT LEADER: try adding armenian\n * U+2028 LINE SEPARATOR: not included in any glyphset definition\n * U+2029 PARAGRAPH SEPARATOR: not included in any glyphset definition\n * U+202A LEFT-TO-RIGHT EMBEDDING: not included in any glyphset definition\n * U+202B RIGHT-TO-LEFT EMBEDDING: not included in any glyphset definition\n * U+202C POP DIRECTIONAL FORMATTING: not included in any glyphset definition\n * U+202D LEFT-TO-RIGHT OVERRIDE: not included in any glyphset definition\n * U+202E RIGHT-TO-LEFT OVERRIDE: try adding tifinagh\n * U+202F NARROW NO-BREAK SPACE: try adding mongolian\n * U+2030 PER MILLE SIGN: not included in any glyphset definition\n * U+2038 CARET: not included in any glyphset definition\n * U+203E OVERLINE: not included in any glyphset definition\n * U+2042 ASTERISM: not included in any glyphset definition\n * U+2213 MINUS-OR-PLUS SIGN: not included in any glyphset definition\n * U+221A SQUARE ROOT: not included in any glyphset definition\n * U+25CC DOTTED CIRCLE: try adding one of: thaana, mongolian, new-tai-lue, sundanese, brahmi, lepcha, bengali, gurmukhi, lao, kharoshthi, syloti-nagri, khmer, oriya, tibetan, rejang, telugu, balinese, canadian-aboriginal, cham, gujarati, coptic, hanunoo, malayalam, limbu, hebrew, sinhala, buginese, tagalog, batak, tifinagh, mandaic, kannada, tagbanwa, tai-viet, chakma, tai-le, myanmar, devanagari, tamil, thai, kaithi, meetei-mayek, javanese, buhid, kayah-li, phags-pa\n * U+FB86 ARABIC LETTER DUL ISOLATED FORM: not included in any glyphset definition\n * U+FB87 ARABIC LETTER DUL FINAL FORM: not included in any glyphset definition\n * U+FBB2 ARABIC SYMBOL DOT ABOVE: not included in any glyphset definition\n * U+FBB3 ARABIC SYMBOL DOT BELOW: not included in any glyphset definition\n * U+FBB4 ARABIC SYMBOL TWO DOTS ABOVE: not included in any glyphset definition\n * U+FBB5 ARABIC SYMBOL TWO DOTS BELOW: not included in any glyphset definition\n * U+FBB6 ARABIC SYMBOL THREE DOTS ABOVE: not included in any glyphset definition\n * U+FBB7 ARABIC SYMBOL THREE DOTS BELOW: not included in any glyphset definition\n * U+FBB8 ARABIC SYMBOL THREE DOTS POINTING DOWNWARDS ABOVE: not included in any glyphset definition\n * U+FBB9 ARABIC SYMBOL THREE DOTS POINTING DOWNWARDS BELOW: not included in any glyphset definition\n * U+FBBA ARABIC SYMBOL FOUR DOTS ABOVE: not included in any glyphset definition\n * U+FBBB ARABIC SYMBOL FOUR DOTS BELOW: not included in any glyphset definition\n * U+FBBC ARABIC SYMBOL DOUBLE VERTICAL BAR BELOW: not included in any glyphset definition\n * U+FBBD ARABIC SYMBOL TWO DOTS VERTICALLY ABOVE: not included in any glyphset definition\n * U+FBBE ARABIC SYMBOL TWO DOTS VERTICALLY BELOW: not included in any glyphset definition\n * U+FBBF ARABIC SYMBOL RING: not included in any glyphset definition\n * U+FBC0 ARABIC SYMBOL SMALL TAH ABOVE: not included in any glyphset definition\n * U+FBC1 ARABIC SYMBOL SMALL TAH BELOW: not included in any glyphset definition\n * U+FBD3 ARABIC LETTER NG ISOLATED FORM: not included in any glyphset definition\n * U+FBD4 ARABIC LETTER NG FINAL FORM: not included in any glyphset definition\n * U+FBD5 ARABIC LETTER NG INITIAL FORM: not included in any glyphset definition\n * U+FBD6 ARABIC LETTER NG MEDIAL FORM: not included in any glyphset definition\n * U+FBD7 ARABIC LETTER U ISOLATED FORM: not included in any glyphset definition\n * U+FBD8 ARABIC LETTER U FINAL FORM: not included in any glyphset definition\n * U+FBD9 ARABIC LETTER OE ISOLATED FORM: not included in any glyphset definition\n * U+FBDA ARABIC LETTER OE FINAL FORM: not included in any glyphset definition\n * U+FBDB ARABIC LETTER YU ISOLATED FORM: not included in any glyphset definition\n * U+FBDC ARABIC LETTER YU FINAL FORM: not included in any glyphset definition\n * U+FBDD ARABIC LETTER U WITH HAMZA ABOVE ISOLATED FORM: not included in any glyphset definition\n * U+FBDE ARABIC LETTER VE ISOLATED FORM: not included in any glyphset definition\n * U+FBDF ARABIC LETTER VE FINAL FORM: not included in any glyphset definition\n * U+FBE0 ARABIC LETTER KIRGHIZ OE ISOLATED FORM: not included in any glyphset definition\n * U+FBE1 ARABIC LETTER KIRGHIZ OE FINAL FORM: not included in any glyphset definition\n * U+FBE2 ARABIC LETTER KIRGHIZ YU ISOLATED FORM: not included in any glyphset definition\n * U+FBE3 ARABIC LETTER KIRGHIZ YU FINAL FORM: not included in any glyphset definition\n * U+FBEA ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH ALEF ISOLATED FORM: not included in any glyphset definition\n * U+FBEB ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH ALEF FINAL FORM: not included in any glyphset definition\n * U+FBEC ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH AE ISOLATED FORM: not included in any glyphset definition\n * U+FBED ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH AE FINAL FORM: not included in any glyphset definition\n * U+FBEE ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH WAW ISOLATED FORM: not included in any glyphset definition\n * U+FBEF ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH WAW FINAL FORM: not included in any glyphset definition\n * U+FBF0 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH U ISOLATED FORM: not included in any glyphset definition\n * U+FBF1 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH U FINAL FORM: not included in any glyphset definition\n * U+FBF2 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH OE ISOLATED FORM: not included in any glyphset definition\n * U+FBF3 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH OE FINAL FORM: not included in any glyphset definition\n * U+FBF4 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH YU ISOLATED FORM: not included in any glyphset definition\n * U+FBF5 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH YU FINAL FORM: not included in any glyphset definition\n * U+FBF6 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH E ISOLATED FORM: not included in any glyphset definition\n * U+FBF7 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH E FINAL FORM: not included in any glyphset definition\n * U+FBF8 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH E INITIAL FORM: not included in any glyphset definition\n * U+FBF9 ARABIC LIGATURE UIGHUR KIRGHIZ YEH WITH HAMZA ABOVE WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FBFA ARABIC LIGATURE UIGHUR KIRGHIZ YEH WITH HAMZA ABOVE WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FBFB ARABIC LIGATURE UIGHUR KIRGHIZ YEH WITH HAMZA ABOVE WITH ALEF MAKSURA INITIAL FORM: not included in any glyphset definition\n * U+FC00 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC01 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FC02 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC03 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FC04 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FC05 ARABIC LIGATURE BEH WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC06 ARABIC LIGATURE BEH WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FC07 ARABIC LIGATURE BEH WITH KHAH ISOLATED FORM: not included in any glyphset definition\n * U+FC08 ARABIC LIGATURE BEH WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC09 ARABIC LIGATURE BEH WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FC0A ARABIC LIGATURE BEH WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FC0B ARABIC LIGATURE TEH WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC0C ARABIC LIGATURE TEH WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FC0D ARABIC LIGATURE TEH WITH KHAH ISOLATED FORM: not included in any glyphset definition\n * U+FC0E ARABIC LIGATURE TEH WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC0F ARABIC LIGATURE TEH WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FC10 ARABIC LIGATURE TEH WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FC11 ARABIC LIGATURE THEH WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC12 ARABIC LIGATURE THEH WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC13 ARABIC LIGATURE THEH WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FC14 ARABIC LIGATURE THEH WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FC15 ARABIC LIGATURE JEEM WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FC16 ARABIC LIGATURE JEEM WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC17 ARABIC LIGATURE HAH WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC18 ARABIC LIGATURE HAH WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC19 ARABIC LIGATURE KHAH WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC1A ARABIC LIGATURE KHAH WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FC1B ARABIC LIGATURE KHAH WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC1C ARABIC LIGATURE SEEN WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC1D ARABIC LIGATURE SEEN WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FC1E ARABIC LIGATURE SEEN WITH KHAH ISOLATED FORM: not included in any glyphset definition\n * U+FC1F ARABIC LIGATURE SEEN WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC20 ARABIC LIGATURE SAD WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FC21 ARABIC LIGATURE SAD WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC22 ARABIC LIGATURE DAD WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC23 ARABIC LIGATURE DAD WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FC24 ARABIC LIGATURE DAD WITH KHAH ISOLATED FORM: not included in any glyphset definition\n * U+FC25 ARABIC LIGATURE DAD WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC26 ARABIC LIGATURE TAH WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FC27 ARABIC LIGATURE TAH WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC28 ARABIC LIGATURE ZAH WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC29 ARABIC LIGATURE AIN WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC2A ARABIC LIGATURE AIN WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC2B ARABIC LIGATURE GHAIN WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC2C ARABIC LIGATURE GHAIN WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC2D ARABIC LIGATURE FEH WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC2E ARABIC LIGATURE FEH WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FC2F ARABIC LIGATURE FEH WITH KHAH ISOLATED FORM: not included in any glyphset definition\n * U+FC30 ARABIC LIGATURE FEH WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC31 ARABIC LIGATURE FEH WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FC32 ARABIC LIGATURE FEH WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FC33 ARABIC LIGATURE QAF WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FC34 ARABIC LIGATURE QAF WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC35 ARABIC LIGATURE QAF WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FC36 ARABIC LIGATURE QAF WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FC37 ARABIC LIGATURE KAF WITH ALEF ISOLATED FORM: not included in any glyphset definition\n * U+FC38 ARABIC LIGATURE KAF WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC39 ARABIC LIGATURE KAF WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FC3A ARABIC LIGATURE KAF WITH KHAH ISOLATED FORM: not included in any glyphset definition\n * U+FC3B ARABIC LIGATURE KAF WITH LAM ISOLATED FORM: not included in any glyphset definition\n * U+FC3C ARABIC LIGATURE KAF WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC3D ARABIC LIGATURE KAF WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FC3E ARABIC LIGATURE KAF WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FC3F ARABIC LIGATURE LAM WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC40 ARABIC LIGATURE LAM WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FC41 ARABIC LIGATURE LAM WITH KHAH ISOLATED FORM: not included in any glyphset definition\n * U+FC42 ARABIC LIGATURE LAM WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC43 ARABIC LIGATURE LAM WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FC44 ARABIC LIGATURE LAM WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FC45 ARABIC LIGATURE MEEM WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC46 ARABIC LIGATURE MEEM WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FC47 ARABIC LIGATURE MEEM WITH KHAH ISOLATED FORM: not included in any glyphset definition\n * U+FC48 ARABIC LIGATURE MEEM WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC49 ARABIC LIGATURE MEEM WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FC4A ARABIC LIGATURE MEEM WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FC4B ARABIC LIGATURE NOON WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC4C ARABIC LIGATURE NOON WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FC4D ARABIC LIGATURE NOON WITH KHAH ISOLATED FORM: not included in any glyphset definition\n * U+FC4E ARABIC LIGATURE NOON WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC4F ARABIC LIGATURE NOON WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FC50 ARABIC LIGATURE NOON WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FC51 ARABIC LIGATURE HEH WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC52 ARABIC LIGATURE HEH WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC53 ARABIC LIGATURE HEH WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FC54 ARABIC LIGATURE HEH WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FC55 ARABIC LIGATURE YEH WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC56 ARABIC LIGATURE YEH WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FC57 ARABIC LIGATURE YEH WITH KHAH ISOLATED FORM: not included in any glyphset definition\n * U+FC58 ARABIC LIGATURE YEH WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC59 ARABIC LIGATURE YEH WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FC5A ARABIC LIGATURE YEH WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FC5B ARABIC LIGATURE THAL WITH SUPERSCRIPT ALEF ISOLATED FORM: not included in any glyphset definition\n * U+FC5C ARABIC LIGATURE REH WITH SUPERSCRIPT ALEF ISOLATED FORM: not included in any glyphset definition\n * U+FC5D ARABIC LIGATURE ALEF MAKSURA WITH SUPERSCRIPT ALEF ISOLATED FORM: not included in any glyphset definition\n * U+FC5E ARABIC LIGATURE SHADDA WITH DAMMATAN ISOLATED FORM: not included in any glyphset definition\n * U+FC5F ARABIC LIGATURE SHADDA WITH KASRATAN ISOLATED FORM: not included in any glyphset definition\n * U+FC60 ARABIC LIGATURE SHADDA WITH FATHA ISOLATED FORM: not included in any glyphset definition\n * U+FC61 ARABIC LIGATURE SHADDA WITH DAMMA ISOLATED FORM: not included in any glyphset definition\n * U+FC62 ARABIC LIGATURE SHADDA WITH KASRA ISOLATED FORM: not included in any glyphset definition\n * U+FC63 ARABIC LIGATURE SHADDA WITH SUPERSCRIPT ALEF ISOLATED FORM: not included in any glyphset definition\n * U+FC64 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH REH FINAL FORM: not included in any glyphset definition\n * U+FC65 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH ZAIN FINAL FORM: not included in any glyphset definition\n * U+FC66 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FC67 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH NOON FINAL FORM: not included in any glyphset definition\n * U+FC68 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FC69 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FC6A ARABIC LIGATURE BEH WITH REH FINAL FORM: not included in any glyphset definition\n * U+FC6B ARABIC LIGATURE BEH WITH ZAIN FINAL FORM: not included in any glyphset definition\n * U+FC6C ARABIC LIGATURE BEH WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FC6D ARABIC LIGATURE BEH WITH NOON FINAL FORM: not included in any glyphset definition\n * U+FC6E ARABIC LIGATURE BEH WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FC6F ARABIC LIGATURE BEH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FC70 ARABIC LIGATURE TEH WITH REH FINAL FORM: not included in any glyphset definition\n * U+FC71 ARABIC LIGATURE TEH WITH ZAIN FINAL FORM: not included in any glyphset definition\n * U+FC72 ARABIC LIGATURE TEH WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FC73 ARABIC LIGATURE TEH WITH NOON FINAL FORM: not included in any glyphset definition\n * U+FC74 ARABIC LIGATURE TEH WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FC75 ARABIC LIGATURE TEH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FC76 ARABIC LIGATURE THEH WITH REH FINAL FORM: not included in any glyphset definition\n * U+FC77 ARABIC LIGATURE THEH WITH ZAIN FINAL FORM: not included in any glyphset definition\n * U+FC78 ARABIC LIGATURE THEH WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FC79 ARABIC LIGATURE THEH WITH NOON FINAL FORM: not included in any glyphset definition\n * U+FC7A ARABIC LIGATURE THEH WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FC7B ARABIC LIGATURE THEH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FC7C ARABIC LIGATURE FEH WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FC7D ARABIC LIGATURE FEH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FC7E ARABIC LIGATURE QAF WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FC7F ARABIC LIGATURE QAF WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FC80 ARABIC LIGATURE KAF WITH ALEF FINAL FORM: not included in any glyphset definition\n * U+FC81 ARABIC LIGATURE KAF WITH LAM FINAL FORM: not included in any glyphset definition\n * U+FC82 ARABIC LIGATURE KAF WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FC83 ARABIC LIGATURE KAF WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FC84 ARABIC LIGATURE KAF WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FC85 ARABIC LIGATURE LAM WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FC86 ARABIC LIGATURE LAM WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FC87 ARABIC LIGATURE LAM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FC88 ARABIC LIGATURE MEEM WITH ALEF FINAL FORM: not included in any glyphset definition\n * U+FC89 ARABIC LIGATURE MEEM WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FC8A ARABIC LIGATURE NOON WITH REH FINAL FORM: not included in any glyphset definition\n * U+FC8B ARABIC LIGATURE NOON WITH ZAIN FINAL FORM: not included in any glyphset definition\n * U+FC8C ARABIC LIGATURE NOON WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FC8D ARABIC LIGATURE NOON WITH NOON FINAL FORM: not included in any glyphset definition\n * U+FC8E ARABIC LIGATURE NOON WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FC8F ARABIC LIGATURE NOON WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FC90 ARABIC LIGATURE ALEF MAKSURA WITH SUPERSCRIPT ALEF FINAL FORM: not included in any glyphset definition\n * U+FC91 ARABIC LIGATURE YEH WITH REH FINAL FORM: not included in any glyphset definition\n * U+FC92 ARABIC LIGATURE YEH WITH ZAIN FINAL FORM: not included in any glyphset definition\n * U+FC93 ARABIC LIGATURE YEH WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FC94 ARABIC LIGATURE YEH WITH NOON FINAL FORM: not included in any glyphset definition\n * U+FC95 ARABIC LIGATURE YEH WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FC96 ARABIC LIGATURE YEH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FC97 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FC98 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FC99 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH KHAH INITIAL FORM: not included in any glyphset definition\n * U+FC9A ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FC9B ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH HEH INITIAL FORM: not included in any glyphset definition\n * U+FC9C ARABIC LIGATURE BEH WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FC9D ARABIC LIGATURE BEH WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FC9E ARABIC LIGATURE BEH WITH KHAH INITIAL FORM: not included in any glyphset definition\n * U+FC9F ARABIC LIGATURE BEH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCA0 ARABIC LIGATURE BEH WITH HEH INITIAL FORM: not included in any glyphset definition\n * U+FCA1 ARABIC LIGATURE TEH WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FCA2 ARABIC LIGATURE TEH WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FCA3 ARABIC LIGATURE TEH WITH KHAH INITIAL FORM: not included in any glyphset definition\n * U+FCA4 ARABIC LIGATURE TEH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCA5 ARABIC LIGATURE TEH WITH HEH INITIAL FORM: not included in any glyphset definition\n * U+FCA6 ARABIC LIGATURE THEH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCA7 ARABIC LIGATURE JEEM WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FCA8 ARABIC LIGATURE JEEM WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCA9 ARABIC LIGATURE HAH WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FCAA ARABIC LIGATURE HAH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCAB ARABIC LIGATURE KHAH WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FCAC ARABIC LIGATURE KHAH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCAD ARABIC LIGATURE SEEN WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FCAE ARABIC LIGATURE SEEN WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FCAF ARABIC LIGATURE SEEN WITH KHAH INITIAL FORM: not included in any glyphset definition\n * U+FCB0 ARABIC LIGATURE SEEN WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCB1 ARABIC LIGATURE SAD WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FCB2 ARABIC LIGATURE SAD WITH KHAH INITIAL FORM: not included in any glyphset definition\n * U+FCB3 ARABIC LIGATURE SAD WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCB4 ARABIC LIGATURE DAD WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FCB5 ARABIC LIGATURE DAD WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FCB6 ARABIC LIGATURE DAD WITH KHAH INITIAL FORM: not included in any glyphset definition\n * U+FCB7 ARABIC LIGATURE DAD WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCB8 ARABIC LIGATURE TAH WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FCB9 ARABIC LIGATURE ZAH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCBA ARABIC LIGATURE AIN WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FCBB ARABIC LIGATURE AIN WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCBC ARABIC LIGATURE GHAIN WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FCBD ARABIC LIGATURE GHAIN WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCBE ARABIC LIGATURE FEH WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FCBF ARABIC LIGATURE FEH WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FCC0 ARABIC LIGATURE FEH WITH KHAH INITIAL FORM: not included in any glyphset definition\n * U+FCC1 ARABIC LIGATURE FEH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCC2 ARABIC LIGATURE QAF WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FCC3 ARABIC LIGATURE QAF WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCC4 ARABIC LIGATURE KAF WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FCC5 ARABIC LIGATURE KAF WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FCC6 ARABIC LIGATURE KAF WITH KHAH INITIAL FORM: not included in any glyphset definition\n * U+FCC7 ARABIC LIGATURE KAF WITH LAM INITIAL FORM: not included in any glyphset definition\n * U+FCC8 ARABIC LIGATURE KAF WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCC9 ARABIC LIGATURE LAM WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FCCA ARABIC LIGATURE LAM WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FCCB ARABIC LIGATURE LAM WITH KHAH INITIAL FORM: not included in any glyphset definition\n * U+FCCC ARABIC LIGATURE LAM WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCCD ARABIC LIGATURE LAM WITH HEH INITIAL FORM: not included in any glyphset definition\n * U+FCCE ARABIC LIGATURE MEEM WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FCCF ARABIC LIGATURE MEEM WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FCD0 ARABIC LIGATURE MEEM WITH KHAH INITIAL FORM: not included in any glyphset definition\n * U+FCD1 ARABIC LIGATURE MEEM WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCD2 ARABIC LIGATURE NOON WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FCD3 ARABIC LIGATURE NOON WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FCD4 ARABIC LIGATURE NOON WITH KHAH INITIAL FORM: not included in any glyphset definition\n * U+FCD5 ARABIC LIGATURE NOON WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCD6 ARABIC LIGATURE NOON WITH HEH INITIAL FORM: not included in any glyphset definition\n * U+FCD7 ARABIC LIGATURE HEH WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FCD8 ARABIC LIGATURE HEH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCD9 ARABIC LIGATURE HEH WITH SUPERSCRIPT ALEF INITIAL FORM: not included in any glyphset definition\n * U+FCDA ARABIC LIGATURE YEH WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FCDB ARABIC LIGATURE YEH WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FCDC ARABIC LIGATURE YEH WITH KHAH INITIAL FORM: not included in any glyphset definition\n * U+FCDD ARABIC LIGATURE YEH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCDE ARABIC LIGATURE YEH WITH HEH INITIAL FORM: not included in any glyphset definition\n * U+FCDF ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH MEEM MEDIAL FORM: not included in any glyphset definition\n * U+FCE0 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH HEH MEDIAL FORM: not included in any glyphset definition\n * U+FCE1 ARABIC LIGATURE BEH WITH MEEM MEDIAL FORM: not included in any glyphset definition\n * U+FCE2 ARABIC LIGATURE BEH WITH HEH MEDIAL FORM: not included in any glyphset definition\n * U+FCE3 ARABIC LIGATURE TEH WITH MEEM MEDIAL FORM: not included in any glyphset definition\n * U+FCE4 ARABIC LIGATURE TEH WITH HEH MEDIAL FORM: not included in any glyphset definition\n * U+FCE5 ARABIC LIGATURE THEH WITH MEEM MEDIAL FORM: not included in any glyphset definition\n * U+FCE6 ARABIC LIGATURE THEH WITH HEH MEDIAL FORM: not included in any glyphset definition\n * U+FCE7 ARABIC LIGATURE SEEN WITH MEEM MEDIAL FORM: not included in any glyphset definition\n * U+FCE8 ARABIC LIGATURE SEEN WITH HEH MEDIAL FORM: not included in any glyphset definition\n * U+FCE9 ARABIC LIGATURE SHEEN WITH MEEM MEDIAL FORM: not included in any glyphset definition\n * U+FCEA ARABIC LIGATURE SHEEN WITH HEH MEDIAL FORM: not included in any glyphset definition\n * U+FCEB ARABIC LIGATURE KAF WITH LAM MEDIAL FORM: not included in any glyphset definition\n * U+FCEC ARABIC LIGATURE KAF WITH MEEM MEDIAL FORM: not included in any glyphset definition\n * U+FCED ARABIC LIGATURE LAM WITH MEEM MEDIAL FORM: not included in any glyphset definition\n * U+FCEE ARABIC LIGATURE NOON WITH MEEM MEDIAL FORM: not included in any glyphset definition\n * U+FCEF ARABIC LIGATURE NOON WITH HEH MEDIAL FORM: not included in any glyphset definition\n * U+FCF0 ARABIC LIGATURE YEH WITH MEEM MEDIAL FORM: not included in any glyphset definition\n * U+FCF1 ARABIC LIGATURE YEH WITH HEH MEDIAL FORM: not included in any glyphset definition\n * U+FCF2 ARABIC LIGATURE SHADDA WITH FATHA MEDIAL FORM: not included in any glyphset definition\n * U+FCF3 ARABIC LIGATURE SHADDA WITH DAMMA MEDIAL FORM: not included in any glyphset definition\n * U+FCF4 ARABIC LIGATURE SHADDA WITH KASRA MEDIAL FORM: not included in any glyphset definition\n * U+FCF5 ARABIC LIGATURE TAH WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FCF6 ARABIC LIGATURE TAH WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FCF7 ARABIC LIGATURE AIN WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FCF8 ARABIC LIGATURE AIN WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FCF9 ARABIC LIGATURE GHAIN WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FCFA ARABIC LIGATURE GHAIN WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FCFB ARABIC LIGATURE SEEN WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FCFC ARABIC LIGATURE SEEN WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FCFD ARABIC LIGATURE SHEEN WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FCFE ARABIC LIGATURE SHEEN WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FCFF ARABIC LIGATURE HAH WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FD00 ARABIC LIGATURE HAH WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FD01 ARABIC LIGATURE JEEM WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FD02 ARABIC LIGATURE JEEM WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FD03 ARABIC LIGATURE KHAH WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FD04 ARABIC LIGATURE KHAH WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FD05 ARABIC LIGATURE SAD WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FD06 ARABIC LIGATURE SAD WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FD07 ARABIC LIGATURE DAD WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FD08 ARABIC LIGATURE DAD WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FD09 ARABIC LIGATURE SHEEN WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FD0A ARABIC LIGATURE SHEEN WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FD0B ARABIC LIGATURE SHEEN WITH KHAH ISOLATED FORM: not included in any glyphset definition\n * U+FD0C ARABIC LIGATURE SHEEN WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FD0D ARABIC LIGATURE SHEEN WITH REH ISOLATED FORM: not included in any glyphset definition\n * U+FD0E ARABIC LIGATURE SEEN WITH REH ISOLATED FORM: not included in any glyphset definition\n * U+FD0F ARABIC LIGATURE SAD WITH REH ISOLATED FORM: not included in any glyphset definition\n * U+FD10 ARABIC LIGATURE DAD WITH REH ISOLATED FORM: not included in any glyphset definition\n * U+FD11 ARABIC LIGATURE TAH WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD12 ARABIC LIGATURE TAH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD13 ARABIC LIGATURE AIN WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD14 ARABIC LIGATURE AIN WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD15 ARABIC LIGATURE GHAIN WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD16 ARABIC LIGATURE GHAIN WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD17 ARABIC LIGATURE SEEN WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD18 ARABIC LIGATURE SEEN WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD19 ARABIC LIGATURE SHEEN WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD1A ARABIC LIGATURE SHEEN WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD1B ARABIC LIGATURE HAH WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD1C ARABIC LIGATURE HAH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD1D ARABIC LIGATURE JEEM WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD1E ARABIC LIGATURE JEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD1F ARABIC LIGATURE KHAH WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD20 ARABIC LIGATURE KHAH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD21 ARABIC LIGATURE SAD WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD22 ARABIC LIGATURE SAD WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD23 ARABIC LIGATURE DAD WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD24 ARABIC LIGATURE DAD WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD25 ARABIC LIGATURE SHEEN WITH JEEM FINAL FORM: not included in any glyphset definition\n * U+FD26 ARABIC LIGATURE SHEEN WITH HAH FINAL FORM: not included in any glyphset definition\n * U+FD27 ARABIC LIGATURE SHEEN WITH KHAH FINAL FORM: not included in any glyphset definition\n * U+FD28 ARABIC LIGATURE SHEEN WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FD29 ARABIC LIGATURE SHEEN WITH REH FINAL FORM: not included in any glyphset definition\n * U+FD2A ARABIC LIGATURE SEEN WITH REH FINAL FORM: not included in any glyphset definition\n * U+FD2B ARABIC LIGATURE SAD WITH REH FINAL FORM: not included in any glyphset definition\n * U+FD2C ARABIC LIGATURE DAD WITH REH FINAL FORM: not included in any glyphset definition\n * U+FD2D ARABIC LIGATURE SHEEN WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FD2E ARABIC LIGATURE SHEEN WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FD2F ARABIC LIGATURE SHEEN WITH KHAH INITIAL FORM: not included in any glyphset definition\n * U+FD30 ARABIC LIGATURE SHEEN WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD31 ARABIC LIGATURE SEEN WITH HEH INITIAL FORM: not included in any glyphset definition\n * U+FD32 ARABIC LIGATURE SHEEN WITH HEH INITIAL FORM: not included in any glyphset definition\n * U+FD33 ARABIC LIGATURE TAH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD34 ARABIC LIGATURE SEEN WITH JEEM MEDIAL FORM: not included in any glyphset definition\n * U+FD35 ARABIC LIGATURE SEEN WITH HAH MEDIAL FORM: not included in any glyphset definition\n * U+FD36 ARABIC LIGATURE SEEN WITH KHAH MEDIAL FORM: not included in any glyphset definition\n * U+FD37 ARABIC LIGATURE SHEEN WITH JEEM MEDIAL FORM: not included in any glyphset definition\n * U+FD38 ARABIC LIGATURE SHEEN WITH HAH MEDIAL FORM: not included in any glyphset definition\n * U+FD39 ARABIC LIGATURE SHEEN WITH KHAH MEDIAL FORM: not included in any glyphset definition\n * U+FD3A ARABIC LIGATURE TAH WITH MEEM MEDIAL FORM: not included in any glyphset definition\n * U+FD3B ARABIC LIGATURE ZAH WITH MEEM MEDIAL FORM: not included in any glyphset definition\n * U+FD3C ARABIC LIGATURE ALEF WITH FATHATAN FINAL FORM: not included in any glyphset definition\n * U+FD3D ARABIC LIGATURE ALEF WITH FATHATAN ISOLATED FORM: not included in any glyphset definition\n * U+FD50 ARABIC LIGATURE TEH WITH JEEM WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD51 ARABIC LIGATURE TEH WITH HAH WITH JEEM FINAL FORM: not included in any glyphset definition\n * U+FD52 ARABIC LIGATURE TEH WITH HAH WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FD53 ARABIC LIGATURE TEH WITH HAH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD54 ARABIC LIGATURE TEH WITH KHAH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD55 ARABIC LIGATURE TEH WITH MEEM WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FD56 ARABIC LIGATURE TEH WITH MEEM WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FD57 ARABIC LIGATURE TEH WITH MEEM WITH KHAH INITIAL FORM: not included in any glyphset definition\n * U+FD58 ARABIC LIGATURE JEEM WITH MEEM WITH HAH FINAL FORM: not included in any glyphset definition\n * U+FD59 ARABIC LIGATURE JEEM WITH MEEM WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FD5A ARABIC LIGATURE HAH WITH MEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD5B ARABIC LIGATURE HAH WITH MEEM WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD5C ARABIC LIGATURE SEEN WITH HAH WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FD5D ARABIC LIGATURE SEEN WITH JEEM WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FD5E ARABIC LIGATURE SEEN WITH JEEM WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD5F ARABIC LIGATURE SEEN WITH MEEM WITH HAH FINAL FORM: not included in any glyphset definition\n * U+FD60 ARABIC LIGATURE SEEN WITH MEEM WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FD61 ARABIC LIGATURE SEEN WITH MEEM WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FD62 ARABIC LIGATURE SEEN WITH MEEM WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FD63 ARABIC LIGATURE SEEN WITH MEEM WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD64 ARABIC LIGATURE SAD WITH HAH WITH HAH FINAL FORM: not included in any glyphset definition\n * U+FD65 ARABIC LIGATURE SAD WITH HAH WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FD66 ARABIC LIGATURE SAD WITH MEEM WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FD67 ARABIC LIGATURE SHEEN WITH HAH WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FD68 ARABIC LIGATURE SHEEN WITH HAH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD69 ARABIC LIGATURE SHEEN WITH JEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD6A ARABIC LIGATURE SHEEN WITH MEEM WITH KHAH FINAL FORM: not included in any glyphset definition\n * U+FD6B ARABIC LIGATURE SHEEN WITH MEEM WITH KHAH INITIAL FORM: not included in any glyphset definition\n * U+FD6C ARABIC LIGATURE SHEEN WITH MEEM WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FD6D ARABIC LIGATURE SHEEN WITH MEEM WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD6E ARABIC LIGATURE DAD WITH HAH WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD6F ARABIC LIGATURE DAD WITH KHAH WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FD70 ARABIC LIGATURE DAD WITH KHAH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD71 ARABIC LIGATURE TAH WITH MEEM WITH HAH FINAL FORM: not included in any glyphset definition\n * U+FD72 ARABIC LIGATURE TAH WITH MEEM WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FD73 ARABIC LIGATURE TAH WITH MEEM WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD74 ARABIC LIGATURE TAH WITH MEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD75 ARABIC LIGATURE AIN WITH JEEM WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FD76 ARABIC LIGATURE AIN WITH MEEM WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FD77 ARABIC LIGATURE AIN WITH MEEM WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD78 ARABIC LIGATURE AIN WITH MEEM WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD79 ARABIC LIGATURE GHAIN WITH MEEM WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FD7A ARABIC LIGATURE GHAIN WITH MEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD7B ARABIC LIGATURE GHAIN WITH MEEM WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD7C ARABIC LIGATURE FEH WITH KHAH WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FD7D ARABIC LIGATURE FEH WITH KHAH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD7E ARABIC LIGATURE QAF WITH MEEM WITH HAH FINAL FORM: not included in any glyphset definition\n * U+FD7F ARABIC LIGATURE QAF WITH MEEM WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FD80 ARABIC LIGATURE LAM WITH HAH WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FD81 ARABIC LIGATURE LAM WITH HAH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD82 ARABIC LIGATURE LAM WITH HAH WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD83 ARABIC LIGATURE LAM WITH JEEM WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FD84 ARABIC LIGATURE LAM WITH JEEM WITH JEEM FINAL FORM: not included in any glyphset definition\n * U+FD85 ARABIC LIGATURE LAM WITH KHAH WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FD86 ARABIC LIGATURE LAM WITH KHAH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD87 ARABIC LIGATURE LAM WITH MEEM WITH HAH FINAL FORM: not included in any glyphset definition\n * U+FD88 ARABIC LIGATURE LAM WITH MEEM WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FD89 ARABIC LIGATURE MEEM WITH HAH WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FD8A ARABIC LIGATURE MEEM WITH HAH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD8B ARABIC LIGATURE MEEM WITH HAH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD8C ARABIC LIGATURE MEEM WITH JEEM WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FD8D ARABIC LIGATURE MEEM WITH JEEM WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD8E ARABIC LIGATURE MEEM WITH KHAH WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FD8F ARABIC LIGATURE MEEM WITH KHAH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD92 ARABIC LIGATURE MEEM WITH JEEM WITH KHAH INITIAL FORM: not included in any glyphset definition\n * U+FD93 ARABIC LIGATURE HEH WITH MEEM WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FD94 ARABIC LIGATURE HEH WITH MEEM WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD95 ARABIC LIGATURE NOON WITH HAH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD96 ARABIC LIGATURE NOON WITH HAH WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD97 ARABIC LIGATURE NOON WITH JEEM WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FD98 ARABIC LIGATURE NOON WITH JEEM WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD99 ARABIC LIGATURE NOON WITH JEEM WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD9A ARABIC LIGATURE NOON WITH MEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD9B ARABIC LIGATURE NOON WITH MEEM WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD9C ARABIC LIGATURE YEH WITH MEEM WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FD9D ARABIC LIGATURE YEH WITH MEEM WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD9E ARABIC LIGATURE BEH WITH KHAH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD9F ARABIC LIGATURE TEH WITH JEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDA0 ARABIC LIGATURE TEH WITH JEEM WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FDA1 ARABIC LIGATURE TEH WITH KHAH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDA2 ARABIC LIGATURE TEH WITH KHAH WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FDA3 ARABIC LIGATURE TEH WITH MEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDA4 ARABIC LIGATURE TEH WITH MEEM WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FDA5 ARABIC LIGATURE JEEM WITH MEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDA6 ARABIC LIGATURE JEEM WITH HAH WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FDA7 ARABIC LIGATURE JEEM WITH MEEM WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FDA8 ARABIC LIGATURE SEEN WITH KHAH WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FDA9 ARABIC LIGATURE SAD WITH HAH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDAA ARABIC LIGATURE SHEEN WITH HAH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDAB ARABIC LIGATURE DAD WITH HAH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDAC ARABIC LIGATURE LAM WITH JEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDAD ARABIC LIGATURE LAM WITH MEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDAE ARABIC LIGATURE YEH WITH HAH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDAF ARABIC LIGATURE YEH WITH JEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDB0 ARABIC LIGATURE YEH WITH MEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDB1 ARABIC LIGATURE MEEM WITH MEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDB2 ARABIC LIGATURE QAF WITH MEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDB3 ARABIC LIGATURE NOON WITH HAH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDB4 ARABIC LIGATURE QAF WITH MEEM WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FDB5 ARABIC LIGATURE LAM WITH HAH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FDB6 ARABIC LIGATURE AIN WITH MEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDB7 ARABIC LIGATURE KAF WITH MEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDB8 ARABIC LIGATURE NOON WITH JEEM WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FDB9 ARABIC LIGATURE MEEM WITH KHAH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDBA ARABIC LIGATURE LAM WITH JEEM WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FDBB ARABIC LIGATURE KAF WITH MEEM WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FDBC ARABIC LIGATURE LAM WITH JEEM WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FDBD ARABIC LIGATURE NOON WITH JEEM WITH HAH FINAL FORM: not included in any glyphset definition\n * U+FDBE ARABIC LIGATURE JEEM WITH HAH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDBF ARABIC LIGATURE HAH WITH JEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDC0 ARABIC LIGATURE MEEM WITH JEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDC1 ARABIC LIGATURE FEH WITH MEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDC2 ARABIC LIGATURE BEH WITH HAH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDC3 ARABIC LIGATURE KAF WITH MEEM WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FDC4 ARABIC LIGATURE AIN WITH JEEM WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FDC5 ARABIC LIGATURE SAD WITH MEEM WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FDC6 ARABIC LIGATURE SEEN WITH KHAH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDC7 ARABIC LIGATURE NOON WITH JEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDF0 ARABIC LIGATURE SALLA USED AS KORANIC STOP SIGN ISOLATED FORM: not included in any glyphset definition\n * U+FDF1 ARABIC LIGATURE QALA USED AS KORANIC STOP SIGN ISOLATED FORM: not included in any glyphset definition\n * U+FDF3 ARABIC LIGATURE AKBAR ISOLATED FORM: not included in any glyphset definition\n * U+FDF4 ARABIC LIGATURE MOHAMMAD ISOLATED FORM: not included in any glyphset definition\n * U+FDF5 ARABIC LIGATURE SALAM ISOLATED FORM: not included in any glyphset definition\n * U+FDF6 ARABIC LIGATURE RASOUL ISOLATED FORM: not included in any glyphset definition\n * U+FDF7 ARABIC LIGATURE ALAYHE ISOLATED FORM: not included in any glyphset definition\n * U+FDF8 ARABIC LIGATURE WASALLAM ISOLATED FORM: not included in any glyphset definition\n * U+FDF9 ARABIC LIGATURE SALLA ISOLATED FORM: not included in any glyphset definition\n * U+FDFB ARABIC LIGATURE JALLAJALALOUHOU: not included in any glyphset definition\n * U+FE70 ARABIC FATHATAN ISOLATED FORM: not included in any glyphset definition\n * U+FE71 ARABIC TATWEEL WITH FATHATAN ABOVE: not included in any glyphset definition\n * U+FE72 ARABIC DAMMATAN ISOLATED FORM: not included in any glyphset definition\n * U+FE74 ARABIC KASRATAN ISOLATED FORM: not included in any glyphset definition\n * U+FE76 ARABIC FATHA ISOLATED FORM: not included in any glyphset definition\n * U+FE77 ARABIC FATHA MEDIAL FORM: not included in any glyphset definition\n * U+FE78 ARABIC DAMMA ISOLATED FORM: not included in any glyphset definition\n * U+FE79 ARABIC DAMMA MEDIAL FORM: not included in any glyphset definition\n * U+FE7A ARABIC KASRA ISOLATED FORM: not included in any glyphset definition\n * U+FE7B ARABIC KASRA MEDIAL FORM: not included in any glyphset definition\n * U+FE7C ARABIC SHADDA ISOLATED FORM: not included in any glyphset definition\n * U+FE7D ARABIC SHADDA MEDIAL FORM: not included in any glyphset definition\n * U+FE7E ARABIC SUKUN ISOLATED FORM: not included in any glyphset definition\n * U+FE7F ARABIC SUKUN MEDIAL FORM: not included in any glyphset definition\n * U+1EE00 ARABIC MATHEMATICAL ALEF: not included in any glyphset definition\n * U+1EE01 ARABIC MATHEMATICAL BEH: not included in any glyphset definition\n * U+1EE02 ARABIC MATHEMATICAL JEEM: not included in any glyphset definition\n * U+1EE03 ARABIC MATHEMATICAL DAL: not included in any glyphset definition\n * U+1EE05 ARABIC MATHEMATICAL WAW: not included in any glyphset definition\n * U+1EE06 ARABIC MATHEMATICAL ZAIN: not included in any glyphset definition\n * U+1EE07 ARABIC MATHEMATICAL HAH: not included in any glyphset definition\n * U+1EE08 ARABIC MATHEMATICAL TAH: not included in any glyphset definition\n * U+1EE09 ARABIC MATHEMATICAL YEH: not included in any glyphset definition\n * U+1EE0A ARABIC MATHEMATICAL KAF: not included in any glyphset definition\n * U+1EE0B ARABIC MATHEMATICAL LAM: not included in any glyphset definition\n * U+1EE0C ARABIC MATHEMATICAL MEEM: not included in any glyphset definition\n * U+1EE0D ARABIC MATHEMATICAL NOON: not included in any glyphset definition\n * U+1EE0E ARABIC MATHEMATICAL SEEN: not included in any glyphset definition\n * U+1EE0F ARABIC MATHEMATICAL AIN: not included in any glyphset definition\n * U+1EE10 ARABIC MATHEMATICAL FEH: not included in any glyphset definition\n * U+1EE11 ARABIC MATHEMATICAL SAD: not included in any glyphset definition\n * U+1EE12 ARABIC MATHEMATICAL QAF: not included in any glyphset definition\n * U+1EE13 ARABIC MATHEMATICAL REH: not included in any glyphset definition\n * U+1EE14 ARABIC MATHEMATICAL SHEEN: not included in any glyphset definition\n * U+1EE15 ARABIC MATHEMATICAL TEH: not included in any glyphset definition\n * U+1EE16 ARABIC MATHEMATICAL THEH: not included in any glyphset definition\n * U+1EE17 ARABIC MATHEMATICAL KHAH: not included in any glyphset definition\n * U+1EE18 ARABIC MATHEMATICAL THAL: not included in any glyphset definition\n * U+1EE19 ARABIC MATHEMATICAL DAD: not included in any glyphset definition\n * U+1EE1A ARABIC MATHEMATICAL ZAH: not included in any glyphset definition\n * U+1EE1B ARABIC MATHEMATICAL GHAIN: not included in any glyphset definition\n * U+1EE1C ARABIC MATHEMATICAL DOTLESS BEH: not included in any glyphset definition\n * U+1EE1D ARABIC MATHEMATICAL DOTLESS NOON: not included in any glyphset definition\n * U+1EE1E ARABIC MATHEMATICAL DOTLESS FEH: not included in any glyphset definition\n * U+1EE1F ARABIC MATHEMATICAL DOTLESS QAF: not included in any glyphset definition\n * U+1EE21 ARABIC MATHEMATICAL INITIAL BEH: not included in any glyphset definition\n * U+1EE22 ARABIC MATHEMATICAL INITIAL JEEM: not included in any glyphset definition\n * U+1EE24 ARABIC MATHEMATICAL INITIAL HEH: not included in any glyphset definition\n * U+1EE27 ARABIC MATHEMATICAL INITIAL HAH: not included in any glyphset definition\n * U+1EE29 ARABIC MATHEMATICAL INITIAL YEH: not included in any glyphset definition\n * U+1EE2A ARABIC MATHEMATICAL INITIAL KAF: not included in any glyphset definition\n * U+1EE2B ARABIC MATHEMATICAL INITIAL LAM: not included in any glyphset definition\n * U+1EE2C ARABIC MATHEMATICAL INITIAL MEEM: not included in any glyphset definition\n * U+1EE2D ARABIC MATHEMATICAL INITIAL NOON: not included in any glyphset definition\n * U+1EE2E ARABIC MATHEMATICAL INITIAL SEEN: not included in any glyphset definition\n * U+1EE2F ARABIC MATHEMATICAL INITIAL AIN: not included in any glyphset definition\n * U+1EE30 ARABIC MATHEMATICAL INITIAL FEH: not included in any glyphset definition\n * U+1EE31 ARABIC MATHEMATICAL INITIAL SAD: not included in any glyphset definition\n * U+1EE32 ARABIC MATHEMATICAL INITIAL QAF: not included in any glyphset definition\n * U+1EE34 ARABIC MATHEMATICAL INITIAL SHEEN: not included in any glyphset definition\n * U+1EE35 ARABIC MATHEMATICAL INITIAL TEH: not included in any glyphset definition\n * U+1EE36 ARABIC MATHEMATICAL INITIAL THEH: not included in any glyphset definition\n * U+1EE37 ARABIC MATHEMATICAL INITIAL KHAH: not included in any glyphset definition\n * U+1EE39 ARABIC MATHEMATICAL INITIAL DAD: not included in any glyphset definition\n * U+1EE3B ARABIC MATHEMATICAL INITIAL GHAIN: not included in any glyphset definition\n * U+1EE42 ARABIC MATHEMATICAL TAILED JEEM: not included in any glyphset definition\n * U+1EE47 ARABIC MATHEMATICAL TAILED HAH: not included in any glyphset definition\n * U+1EE49 ARABIC MATHEMATICAL TAILED YEH: not included in any glyphset definition\n * U+1EE4B ARABIC MATHEMATICAL TAILED LAM: not included in any glyphset definition\n * U+1EE4D ARABIC MATHEMATICAL TAILED NOON: not included in any glyphset definition\n * U+1EE4E ARABIC MATHEMATICAL TAILED SEEN: not included in any glyphset definition\n * U+1EE4F ARABIC MATHEMATICAL TAILED AIN: not included in any glyphset definition\n * U+1EE51 ARABIC MATHEMATICAL TAILED SAD: not included in any glyphset definition\n * U+1EE52 ARABIC MATHEMATICAL TAILED QAF: not included in any glyphset definition\n * U+1EE54 ARABIC MATHEMATICAL TAILED SHEEN: not included in any glyphset definition\n * U+1EE57 ARABIC MATHEMATICAL TAILED KHAH: not included in any glyphset definition\n * U+1EE59 ARABIC MATHEMATICAL TAILED DAD: not included in any glyphset definition\n * U+1EE5B ARABIC MATHEMATICAL TAILED GHAIN: not included in any glyphset definition\n * U+1EE5D ARABIC MATHEMATICAL TAILED DOTLESS NOON: not included in any glyphset definition\n * U+1EE5F ARABIC MATHEMATICAL TAILED DOTLESS QAF: not included in any glyphset definition\n * U+1EE61 ARABIC MATHEMATICAL STRETCHED BEH: not included in any glyphset definition\n * U+1EE62 ARABIC MATHEMATICAL STRETCHED JEEM: not included in any glyphset definition\n * U+1EE64 ARABIC MATHEMATICAL STRETCHED HEH: not included in any glyphset definition\n * U+1EE67 ARABIC MATHEMATICAL STRETCHED HAH: not included in any glyphset definition\n * U+1EE68 ARABIC MATHEMATICAL STRETCHED TAH: not included in any glyphset definition\n * U+1EE69 ARABIC MATHEMATICAL STRETCHED YEH: not included in any glyphset definition\n * U+1EE6A ARABIC MATHEMATICAL STRETCHED KAF: not included in any glyphset definition\n * U+1EE6C ARABIC MATHEMATICAL STRETCHED MEEM: not included in any glyphset definition\n * U+1EE6D ARABIC MATHEMATICAL STRETCHED NOON: not included in any glyphset definition\n * U+1EE6E ARABIC MATHEMATICAL STRETCHED SEEN: not included in any glyphset definition\n * U+1EE6F ARABIC MATHEMATICAL STRETCHED AIN: not included in any glyphset definition\n * U+1EE70 ARABIC MATHEMATICAL STRETCHED FEH: not included in any glyphset definition\n * U+1EE71 ARABIC MATHEMATICAL STRETCHED SAD: not included in any glyphset definition\n * U+1EE72 ARABIC MATHEMATICAL STRETCHED QAF: not included in any glyphset definition\n * U+1EE74 ARABIC MATHEMATICAL STRETCHED SHEEN: not included in any glyphset definition\n * U+1EE75 ARABIC MATHEMATICAL STRETCHED TEH: not included in any glyphset definition\n * U+1EE76 ARABIC MATHEMATICAL STRETCHED THEH: not included in any glyphset definition\n * U+1EE77 ARABIC MATHEMATICAL STRETCHED KHAH: not included in any glyphset definition\n * U+1EE79 ARABIC MATHEMATICAL STRETCHED DAD: not included in any glyphset definition\n * U+1EE7A ARABIC MATHEMATICAL STRETCHED ZAH: not included in any glyphset definition\n * U+1EE7B ARABIC MATHEMATICAL STRETCHED GHAIN: not included in any glyphset definition\n * U+1EE7C ARABIC MATHEMATICAL STRETCHED DOTLESS BEH: not included in any glyphset definition\n * U+1EE7E ARABIC MATHEMATICAL STRETCHED DOTLESS FEH: not included in any glyphset definition\n * U+1EE80 ARABIC MATHEMATICAL LOOPED ALEF: not included in any glyphset definition\n * U+1EE81 ARABIC MATHEMATICAL LOOPED BEH: not included in any glyphset definition\n * U+1EE82 ARABIC MATHEMATICAL LOOPED JEEM: not included in any glyphset definition\n * U+1EE83 ARABIC MATHEMATICAL LOOPED DAL: not included in any glyphset definition\n * U+1EE84 ARABIC MATHEMATICAL LOOPED HEH: not included in any glyphset definition\n * U+1EE85 ARABIC MATHEMATICAL LOOPED WAW: not included in any glyphset definition\n * U+1EE86 ARABIC MATHEMATICAL LOOPED ZAIN: not included in any glyphset definition\n * U+1EE87 ARABIC MATHEMATICAL LOOPED HAH: not included in any glyphset definition\n * U+1EE88 ARABIC MATHEMATICAL LOOPED TAH: not included in any glyphset definition\n * U+1EE89 ARABIC MATHEMATICAL LOOPED YEH: not included in any glyphset definition\n * U+1EE8B ARABIC MATHEMATICAL LOOPED LAM: not included in any glyphset definition\n * U+1EE8C ARABIC MATHEMATICAL LOOPED MEEM: not included in any glyphset definition\n * U+1EE8D ARABIC MATHEMATICAL LOOPED NOON: not included in any glyphset definition\n * U+1EE8E ARABIC MATHEMATICAL LOOPED SEEN: not included in any glyphset definition\n * U+1EE8F ARABIC MATHEMATICAL LOOPED AIN: not included in any glyphset definition\n * U+1EE90 ARABIC MATHEMATICAL LOOPED FEH: not included in any glyphset definition\n * U+1EE91 ARABIC MATHEMATICAL LOOPED SAD: not included in any glyphset definition\n * U+1EE92 ARABIC MATHEMATICAL LOOPED QAF: not included in any glyphset definition\n * U+1EE93 ARABIC MATHEMATICAL LOOPED REH: not included in any glyphset definition\n * U+1EE94 ARABIC MATHEMATICAL LOOPED SHEEN: not included in any glyphset definition\n * U+1EE95 ARABIC MATHEMATICAL LOOPED TEH: not included in any glyphset definition\n * U+1EE96 ARABIC MATHEMATICAL LOOPED THEH: not included in any glyphset definition\n * U+1EE97 ARABIC MATHEMATICAL LOOPED KHAH: not included in any glyphset definition\n * U+1EE98 ARABIC MATHEMATICAL LOOPED THAL: not included in any glyphset definition\n * U+1EE99 ARABIC MATHEMATICAL LOOPED DAD: not included in any glyphset definition\n * U+1EE9A ARABIC MATHEMATICAL LOOPED ZAH: not included in any glyphset definition\n * U+1EE9B ARABIC MATHEMATICAL LOOPED GHAIN: not included in any glyphset definition\n * U+1EEA1 ARABIC MATHEMATICAL DOUBLE-STRUCK BEH: not included in any glyphset definition\n * U+1EEA2 ARABIC MATHEMATICAL DOUBLE-STRUCK JEEM: not included in any glyphset definition\n * U+1EEA3 ARABIC MATHEMATICAL DOUBLE-STRUCK DAL: not included in any glyphset definition\n * U+1EEA5 ARABIC MATHEMATICAL DOUBLE-STRUCK WAW: not included in any glyphset definition\n * U+1EEA6 ARABIC MATHEMATICAL DOUBLE-STRUCK ZAIN: not included in any glyphset definition\n * U+1EEA7 ARABIC MATHEMATICAL DOUBLE-STRUCK HAH: not included in any glyphset definition\n * U+1EEA8 ARABIC MATHEMATICAL DOUBLE-STRUCK TAH: not included in any glyphset definition\n * U+1EEA9 ARABIC MATHEMATICAL DOUBLE-STRUCK YEH: not included in any glyphset definition\n * U+1EEAB ARABIC MATHEMATICAL DOUBLE-STRUCK LAM: not included in any glyphset definition\n * U+1EEAC ARABIC MATHEMATICAL DOUBLE-STRUCK MEEM: not included in any glyphset definition\n * U+1EEAD ARABIC MATHEMATICAL DOUBLE-STRUCK NOON: not included in any glyphset definition\n * U+1EEAE ARABIC MATHEMATICAL DOUBLE-STRUCK SEEN: not included in any glyphset definition\n * U+1EEAF ARABIC MATHEMATICAL DOUBLE-STRUCK AIN: not included in any glyphset definition\n * U+1EEB0 ARABIC MATHEMATICAL DOUBLE-STRUCK FEH: not included in any glyphset definition\n * U+1EEB1 ARABIC MATHEMATICAL DOUBLE-STRUCK SAD: not included in any glyphset definition\n * U+1EEB2 ARABIC MATHEMATICAL DOUBLE-STRUCK QAF: not included in any glyphset definition\n * U+1EEB3 ARABIC MATHEMATICAL DOUBLE-STRUCK REH: not included in any glyphset definition\n * U+1EEB4 ARABIC MATHEMATICAL DOUBLE-STRUCK SHEEN: not included in any glyphset definition\n * U+1EEB5 ARABIC MATHEMATICAL DOUBLE-STRUCK TEH: not included in any glyphset definition\n * U+1EEB6 ARABIC MATHEMATICAL DOUBLE-STRUCK THEH: not included in any glyphset definition\n * U+1EEB7 ARABIC MATHEMATICAL DOUBLE-STRUCK KHAH: not included in any glyphset definition\n * U+1EEB8 ARABIC MATHEMATICAL DOUBLE-STRUCK THAL: not included in any glyphset definition\n * U+1EEB9 ARABIC MATHEMATICAL DOUBLE-STRUCK DAD: not included in any glyphset definition\n * U+1EEBA ARABIC MATHEMATICAL DOUBLE-STRUCK ZAH: not included in any glyphset definition\n * U+1EEBB ARABIC MATHEMATICAL DOUBLE-STRUCK GHAIN: not included in any glyphset definition\n * U+1EEF0 ARABIC MATHEMATICAL OPERATOR MEEM WITH HAH WITH TATWEEL: not included in any glyphset definition\n * U+1EEF1 ARABIC MATHEMATICAL OPERATOR HAH WITH DAL: not included in any glyphset definition\n\nOr you can add the above codepoints to one of the subsets supported by the font: `arabic`, `latin`, `latin-ext`, `menu` [code: unreachable-subsetting]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This check ensures that all encoded glyphs in the font are covered by a\n        subset declared in the METADATA.pb. Google Fonts splits the font into\n        a set of subset fonts based on the contents of the `subsets` field and\n        the subset definitions in the `glyphsets` repository.\n\n        Any encoded glyphs which are not by any of these subset definitions\n        will not be served in the subsetted fonts, and so will be unreachable to\n        the end user.\n    ",
                    "result": "WARN",
                    "severity": 2
                },
                {
                    "description": "Substitute copyright, registered and trademark symbols in name table entries.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/unwanted_chars>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "No need to substitute copyright, registered and trademark symbols in name table entries of this font.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Check the OS/2 usWeightClass is appropriate for the font's best SubFamily name.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/usweightclass>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2 usWeightClass is good",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Google Fonts expects variable fonts, static ttfs and static otfs to have\n        differing OS/2 usWeightClass values.\n\n        - For Variable Fonts, Thin-Black must be 100-900\n\n        - For static ttfs, Thin-Black can be 100-900 or 250-900\n\n        - For static otfs, Thin-Black must be 250-900\n\n        If static otfs are set lower than 250, text may appear blurry in\n        legacy Windows applications.\n\n        Glyphsapp users can change the usWeightClass value of an instance by adding\n        a 'weightClass' customParameter.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check font has a license.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/family/has_license>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Found license at '/Users/simon/others-repos/fonts/ofl/amiri/OFL.txt'",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Check license file has good copyright string.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/license/OFL_copyright>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "looks good",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        An OFL.txt file's first line should be the font copyright e.g:\n        \"Copyright 2019 The Montserrat Project Authors\n        (https://github.com/julietaula/montserrat)\"\n    ",
                    "result": "PASS",
                    "severity": 10
                },
                {
                    "description": "Check OFL body text is correct.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/license/OFL_body_text>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OFL license body text is correct",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check OFL body text is correct.\n        Often users will accidently delete parts of the body text.\n    ",
                    "result": "PASS",
                    "severity": 10
                },
                {
                    "description": "Check copyright namerecords match license file.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/license>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Licensing entry on name table is correctly set.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        A known licensing description must be provided in the NameID 14\n        (LICENSE DESCRIPTION) entries of the name table.\n\n        The source of truth for this check (to determine which license is in use) is\n        a file placed side-by-side to your font project including the licensing terms.\n\n        Depending on the chosen license, one of the following string snippets is\n        expected to be found on the NameID 13 (LICENSE DESCRIPTION) entries of the\n        name table:\n\n        - \"This Font Software is licensed under the SIL Open Font License, Version 1.1.\n          This license is available with a FAQ at: https://scripts.sil.org/OFL\"\n\n        - \"Licensed under the Apache License, Version 2.0\"\n\n        - \"Licensed under the Ubuntu Font Licence 1.0.\"\n\n\n        Currently accepted licenses are Apache or Open Font License. For a small set\n        of legacy families the Ubuntu Font License may be acceptable as well.\n\n        When in doubt, please choose OFL for new font projects.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "License URL matches License text on name table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/license_url>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font has a valid license URL in NAME table.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        A known license URL must be provided in the NameID 14 (LICENSE INFO URL)\n        entry of the name table.\n\n        The source of truth for this check is the licensing text found on the NameID 13\n        entry (LICENSE DESCRIPTION).\n\n        The string snippets used for detecting licensing terms are:\n\n        - \"This Font Software is licensed under the SIL Open Font License, Version 1.1.\n          This license is available with a FAQ at: https://scripts.sil.org/OFL\"\n\n        - \"Licensed under the Apache License, Version 2.0\"\n\n        - \"Licensed under the Ubuntu Font Licence 1.0.\"\n\n\n        Currently accepted licenses are Apache or Open Font License. For a small set of\n        legacy families the Ubuntu Font License may be acceptable as well.\n\n        When in doubt, please choose OFL for new font projects.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Description strings in the name table must not exceed 200 characters.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/description_max_length>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "A few name table entries with ID=10 (NameID.DESCRIPTION) are longer than 200 characters. Please check whether those entries are copyright notices mistakenly stored in the description string entries by a bug in an old FontLab version. If that's the case, then such copyright notices must be removed from these entries. [code: too-long]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        An old FontLab version had a bug which caused it to store copyright notices\n        in nameID 10 entries.\n\n        In order to detect those and distinguish them from actual legitimate usage of\n        this name table entry, we expect that such strings do not exceed a reasonable\n        length of 200 chars.\n\n        Longer strings are likely instances of the FontLab bug.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Show hinting filesize impact.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/hinting_impact>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Hinting filesize impact:\n\n |               | /Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf          |\n |:------------- | ---------------:|\n | Dehinted Size | 440.2kb |\n | Hinted Size   | 440.3kb   |\n | Increase      | 24 bytes      |\n | Change        | 0.0 %  |\n [code: size-impact]",
                            "status": "INFO",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This check is merely informative, displaying and useful comparison of filesizes\n        of hinted versus unhinted font files.\n    ",
                    "result": "INFO"
                },
                {
                    "description": "Ensure files are not too large.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/file_size>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font had a reasonable file size",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Serving extremely large font files on Google Fonts causes usability issues.\n        This check ensures that file sizes are reasonable.\n    ",
                    "result": "PASS",
                    "severity": 10
                },
                {
                    "description": "Version format is correct in 'name' table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/version_format>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Version format in NAME table entries is correct.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Font has ttfautohint params?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/has_ttfautohint_params>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font appears to our heuristic as not hinted using ttfautohint. [code: not-hinted]",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "result": "SKIP"
                },
                {
                    "description": "Font has old ttfautohint applied?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/old_ttfautohint>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Could not detect which version of ttfautohint was used in this font. It is typically specified as a comment in the font version entries of the 'name' table. Such font version strings are currently: ['Version 1.000'] [code: version-not-detected]",
                            "status": "INFO",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check if font has been hinted with an outdated version of ttfautohint.\n    ",
                    "result": "INFO"
                },
                {
                    "description": "EPAR table present in font?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/epar>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "EPAR table not present in font. To learn more see https://github.com/fonttools/fontbakery/issues/818 [code: lacks-EPAR]",
                            "status": "INFO",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The EPAR table is/was a way of expressing common licensing permissions and\n        restrictions in metadata; while almost nothing supported it, Dave Crossland\n        wonders that adding it to everything in Google Fonts could help make it\n        more popular.\n\n        More info is available at:\n        https://davelab6.github.io/epar/\n    ",
                    "result": "INFO",
                    "severity": 1
                },
                {
                    "description": "Is the Grid-fitting and Scan-conversion Procedure ('gasp') table set to optimize rendering?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/gasp>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "These are the ppm ranges declared on the gasp table:\n\nPPM <= 65535:\n\tflag = 0x0F\n\t- Use grid-fitting\n\t- Use grayscale rendering\n\t- Use gridfitting with ClearType symmetric smoothing\n\t- Use smoothing along multiple axes with ClearType\u00ae\n [code: ranges]",
                            "status": "INFO",
                            "traceback": null
                        },
                        {
                            "message": "The 'gasp' table is correctly set, with one gaspRange:value of 0xFFFF:0x0F.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Traditionally version 0 'gasp' tables were set so that font sizes below 8 ppem\n        had no grid fitting but did have antialiasing. From 9-16 ppem, just grid\n        fitting.\n        And fonts above 17ppem had both antialiasing and grid fitting toggled on.\n        The use of accelerated graphics cards and higher resolution screens make this\n        approach obsolete. Microsoft's DirectWrite pushed this even further with much\n        improved rendering built into the OS and apps.\n\n        In this scenario it makes sense to simply toggle all 4 flags ON for all font\n        sizes.\n    ",
                    "result": "INFO"
                },
                {
                    "description": "Make sure family name does not begin with a digit.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/familyname_first_char>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font family name first character is not a digit.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Font family names which start with a numeral are often not discoverable\n        in Windows applications.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Are there non-ASCII characters in ASCII-only NAME table entries?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/ascii_only_entries>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "None of the ASCII-only NAME table entries contain non-ASCII characteres.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The OpenType spec requires ASCII for the POSTSCRIPT_NAME (nameID 6).\n\n        For COPYRIGHT_NOTICE (nameID 0) ASCII is required because that string should be\n        the same in CFF fonts which also have this requirement in the OpenType spec.\n\n        Note:\n        A common place where we find non-ASCII strings is on name table entries\n        with NameID > 18, which are expressly for localising the ASCII-only IDs\n        into Hindi / Arabic / etc.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: check if fonts field only has unique \"full_name\" values.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/unique_full_name_values>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb \"fonts\" field only has unique \"full_name\" values.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: check if fonts field only contains unique style:weight pairs.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/unique_weight_style_pairs>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb \"fonts\" field only has unique style:weight pairs.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb license is \"APACHE2\", \"UFL\" or \"OFL\"?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/license>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font license is declared in METADATA.pb as \"OFL\"",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb should contain at least \"menu\" and \"latin\" subsets.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/menu_and_latin>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb contains \"menu\" and \"latin\" subsets.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb subsets should be alphabetically ordered.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/subsets_order>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb subsets are sorted in alphabetical order.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Check METADATA.pb includes production subsets.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/includes_production_subsets>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "No missing subsets",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check METADATA.pb file includes the same subsets as the family in production.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Copyright notice is the same in all fonts?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/copyright>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Copyright is consistent across family",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Check that METADATA.pb family values are all the same.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/familyname>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb: Family name is the same in all metadata \"fonts\" items.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: According to Google Fonts standards, families should have a Regular style.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/has_regular>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Family has a Regular style.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Regular should be 400.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/regular_is_400>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Regular has weight = 400.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Checks METADATA.pb font.name field matches family name declared on the name table.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/nameid/family_name>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Family name \"Amiri\" is identical in METADATA.pb and on the TTF file.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Checks METADATA.pb font.post_script_name matches postscript name declared on the name table.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/nameid/post_script_name>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Postscript name \"Amiri-Italic\" is identical in METADATA.pb and on the TTF file.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb font.full_name value matches fullname declared on the name table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/nameid/full_name>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font fullname \"Amiri Italic\" is identical in METADATA.pb and on the TTF file.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb font.name value should be same as the family name declared on the name table.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/nameid/font_name>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK: Family name \"Amiri\" is identical in METADATA.pb and on the TTF file.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This check ensures consistency between the font name declared on the name table\n        and the contents of the METADATA.pb file.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb font.full_name and font.post_script_name fields have equivalent values ?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/match_fullname_postscript>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb font fields \"full_name\" and \"post_script_name\" have equivalent values.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb font.filename and font.post_script_name fields have equivalent values?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/match_filename_postscript>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb font fields \"filename\" and \"post_script_name\" have equivalent values.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb font.name field contains font name in right format?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/valid_name_values>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb font.name field contains font name in right format.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb font.full_name field contains font name in right format?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/valid_full_name_values>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb font.full_name field contains font name in right format. (\"Amiri\" in \"Amiri Italic\")",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb font.filename field contains font name in right format?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/valid_filename_values>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb filename field contains font name in right format.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb font.post_script_name field contains font name in right format?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/valid_post_script_name_values>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb postScriptName field contains font name in right format.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Check name ID 25 to end with \"Italic\" for Italic VFs.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/valid_nameid25>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Not an Italic VF.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Due to a bug in (at least) Adobe Indesign, name ID 25\n        needs to be different for Italic VFs than their Upright counterparts.\n        Google Fonts chooses to append \"Italic\" here.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Copyright notices match canonical pattern in METADATA.pb",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/valid_copyright>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb copyright string is good",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The expected pattern for the copyright string adheres to the following rules:\n\n        * It must say \"Copyright\" followed by a 4 digit year (optionally followed by\n          a hyphen and another 4 digit year)\n\n        * Then it must say \"The <familyname> Project Authors\"\n\n        * And within parentheses, a URL for a git repository must be provided\n\n        * The check is case insensitive and does not validate whether the familyname\n          is correct, even though we'd expect it is (and we may soon update the check\n          to validate that aspect as well!)\n\n\n        Here is an example of a valid copyright string:\n\n        \"Copyright 2017 The Archivo Black Project Authors\n         (https://github.com/Omnibus-Type/ArchivoBlack)\"\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Copyright notices match canonical pattern in fonts",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/font_copyright>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Name Table entry: Copyright field 'Copyright 2010-2022 The Amiri Project Authors (https://github.com/aliftype/amiri).' matches canonical pattern.",
                            "status": "PASS",
                            "traceback": null
                        },
                        {
                            "message": "Name table copyright entries are good",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Copyright notice on METADATA.pb should not contain 'Reserved Font Name'.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/reserved_font_name>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb copyright field does not contain \"Reserved Font Name\".",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Copyright notice shouldn't exceed 500 chars.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/copyright_max_length>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Copyright notice string is shorter than 500 chars.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Font filenames match font.filename entries?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/filenames>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Filenames in METADATA.pb look good.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Note:\n        This check only looks for files in the current directory.\n\n        Font files in subdirectories are checked by these other two checks:\n         - com.google.fonts/check/metadata/undeclared_fonts\n         - com.google.fonts/check/repo/vf_has_static_fonts\n\n        We may want to merge them all into a single check.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb font.style \"italic\" matches font internals?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/italic_style>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK: METADATA.pb font.style \"italic\" matches font internals.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb font.style \"normal\" matches font internals?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/normal_style>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "This check only applies to normal fonts.",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "result": "SKIP"
                },
                {
                    "description": "METADATA.pb font.name and font.full_name fields match the values declared on the name table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/nameid/family_and_full_names>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb familyname and fullName fields match corresponding name table entries.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Check font name is the same as family name.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/match_name_familyname>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font name is the same as family name.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Check that font weight has a canonical value.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/canonical_weight_value>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font weight has a canonical value.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Check METADATA.pb font weights are correct.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/os2_weightclass>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2 usWeightClass or wght axis value matches weight specified at METADATA.pb",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check METADATA.pb font weights are correct.\n\n        For static fonts, the metadata weight should be the same as the static font's\n        OS/2 usWeightClass.\n\n        For variable fonts, the weight value should be 400 if the font's wght axis range\n        includes 400, otherwise it should be the value closest to 400.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb weight matches postScriptName for static fonts.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/match_weight_postscript>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Weight value matches postScriptName.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Font styles are named canonically?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/canonical_style_names>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font styles are named canonically.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Check URL on copyright string is the same as in repository_url field.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/consistent_repo_urls>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Sometimes, perhaps due to copy-pasting, projects may declare different URLs\n        between the font.coyright and the family.sources.repository_url fields.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Check for primary_script",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/primary_script>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Try to guess font's primary script and see if that's set in METADATA.pb.\n        This is an educated guess based on the number of glyphs per script in the font\n        and should be taken with caution.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Stricter unitsPerEm criteria for Google Fonts.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/unitsperem_strict>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font em size is good (unitsPerEm = 1000).",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Even though the OpenType spec allows unitsPerEm to be any value between 16\n        and 16384, the Google Fonts project aims at a narrower set of reasonable values.\n\n        The spec suggests usage of powers of two in order to get some performance\n        improvements on legacy renderers, so those values are acceptable.\n\n        But values of 500 or 1000 are also acceptable, with the added benefit that it\n        makes upm math easier for designers, while the performance hit of not using a\n        power of two is most likely negligible nowadays.\n\n        Additionally, values above 2048 would likely result in unreasonable\n        filesize increases.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Glyphs are similiar to Google Fonts version?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/production_glyphs_similarity>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Following glyphs differ greatly from Google Fonts version:\n\t* glyph01239\n\t* glyph01240\n\t* glyph01241\n\t* glyph01242\n\t* glyph01243\n\t* glyph01244\n\t* glyph01246\n\t* glyph01247\n\t* glyph01248\n\t* glyph01249\n\t* glyph01250\n\t* glyph01251\n\t* glyph01252\n\t* glyph01253\n\t* glyph01254\n\t* glyph01255\n\t* glyph01257\n\t* glyph01258\n\t* glyph01259\n\t* glyph01260\n\t* glyph01261\n\t* glyph01262\n\t* glyph01263\n\t* glyph01264\n\t* glyph01265\n\t* glyph01267\n\t* glyph01268\n\t* glyph01271\n\t* glyph01272\n\t* glyph01273\n\t* glyph01274\n\t* glyph01276\n\t* glyph01277\n\t* glyph01279\n\t* glyph01280\n\t* glyph01281\n\t* glyph01282\n\t* glyph01283\n\t* glyph01284\n\t* glyph01285\n\t* glyph01286\n\t* glyph01287\n\t* glyph01288\n\t* glyph01289\n\t* glyph01290\n\t* glyph01291\n\t* glyph01292\n\t* glyph01294\n\t* glyph01295\n\t* glyph01296\n\t* glyph01297\n\t* glyph01299\n\t* glyph01300\n\t* glyph01301\n\t* glyph01302\n\t* glyph01303\n\t* glyph01304\n\t* glyph01305\n\t* glyph01306\n\t* glyph01308\n\t* glyph01309\n\t* glyph01311\n\t* glyph01312\n\t* glyph01313\n\t* glyph01314\n\t* glyph01315\n\t* glyph01316\n\t* glyph01317\n\t* glyph01318\n\t* glyph01319\n\t* glyph01320\n\t* glyph01323\n\t* glyph01324\n\t* glyph01325\n\t* glyph01327\n\t* glyph01328\n\t* glyph01329\n\t* glyph01330\n\t* glyph01332\n\t* glyph01334\n\t* glyph01336\n\t* glyph01337\n\t* glyph01338\n\t* glyph01339\n\t* glyph01340\n\t* glyph01341\n\t* glyph01342\n\t* glyph01343\n\t* glyph01344\n\t* glyph01345\n\t* glyph01347\n\t* glyph01349\n\t* glyph01350\n\t* glyph01353\n\t* glyph01355\n\t* glyph01356\n\t* glyph01357\n\t* glyph01358\n\t* glyph01359\n\t* glyph01360\n\t* glyph01364\n\t* glyph01366\n\t* glyph01368\n\t* glyph01369\n\t* glyph01370\n\t* glyph01371\n\t* glyph01372\n\t* glyph01373\n\t* glyph01374\n\t* glyph01375\n\t* glyph01376\n\t* glyph01377\n\t* glyph01379\n\t* glyph01380\n\t* glyph01382\n\t* glyph01383\n\t* glyph01384\n\t* glyph01385\n\t* glyph01386\n\t* glyph01387\n\t* glyph01388\n\t* glyph01389\n\t* glyph01390\n\t* glyph01391\n\t* glyph01392\n\t* glyph01393\n\t* glyph01394\n\t* glyph01395\n\t* glyph01396\n\t* glyph01397\n\t* glyph01398\n\t* glyph01399\n\t* glyph01400\n\t* glyph01401\n\t* glyph01402\n\t* glyph01403\n\t* glyph01404\n\t* glyph01405\n\t* glyph01406\n\t* glyph01407\n\t* glyph01408\n\t* glyph01409\n\t* glyph01410\n\t* glyph01411\n\t* glyph01412\n\t* glyph01413\n\t* glyph01414\n\t* glyph01415\n\t* glyph01416\n\t* glyph01417\n\t* glyph01419\n\t* glyph01421\n\t* glyph01422\n\t* glyph01423\n\t* glyph01424\n\t* glyph01425\n\t* glyph01426\n\t* glyph01427\n\t* glyph01428\n\t* glyph01429\n\t* glyph01430\n\t* glyph01431\n\t* glyph01432\n\t* glyph01433\n\t* glyph01434\n\t* glyph01435\n\t* glyph01436\n\t* glyph01437\n\t* glyph01438\n\t* glyph01439\n\t* glyph01440\n\t* glyph01441\n\t* glyph01442\n\t* glyph01443\n\t* glyph01444\n\t* glyph01445\n\t* glyph01446\n\t* glyph01447\n\t* glyph01448\n\t* glyph01449\n\t* glyph01450\n\t* glyph01451\n\t* glyph01453\n\t* glyph01454\n\t* glyph01455\n\t* glyph01457\n\t* glyph01458\n\t* glyph01459\n\t* glyph01461\n\t* glyph01462\n\t* glyph01463\n\t* glyph01464\n\t* glyph01465\n\t* glyph01466\n\t* glyph01467\n\t* glyph01469\n\t* glyph01470\n\t* glyph01471\n\t* glyph01473\n\t* glyph01474\n\t* glyph01475\n\t* glyph01477\n\t* glyph01478\n\t* glyph01480\n\t* glyph01481\n\t* glyph01482\n\t* glyph01483\n\t* glyph01484\n\t* glyph01486\n\t* glyph01487\n\t* glyph01488\n\t* glyph01489\n\t* glyph01490\n\t* glyph01491\n\t* glyph01492\n\t* glyph01493\n\t* glyph01494\n\t* glyph01495\n\t* glyph01496\n\t* glyph01497\n\t* glyph01498\n\t* glyph01499\n\t* glyph01500\n\t* glyph01501\n\t* glyph01503\n\t* glyph01504\n\t* glyph01505\n\t* glyph01506\n\t* glyph01507\n\t* glyph01508\n\t* glyph01509\n\t* glyph01511\n\t* glyph01512\n\t* glyph01513\n\t* glyph01514\n\t* glyph01515\n\t* glyph01516\n\t* glyph01517\n\t* glyph01518\n\t* glyph01519\n\t* glyph01520\n\t* glyph01521\n\t* glyph01522\n\t* glyph01523\n\t* glyph01524\n\t* glyph01525\n\t* glyph01526\n\t* glyph01527\n\t* glyph01530\n\t* glyph01531\n\t* glyph01532\n\t* glyph01533\n\t* glyph01534\n\t* glyph01535\n\t* glyph01536\n\t* glyph01537\n\t* glyph01538\n\t* glyph01541\n\t* glyph01542\n\t* glyph01544\n\t* glyph01545\n\t* glyph01546\n\t* glyph01547\n\t* glyph01548\n\t* glyph01549\n\t* glyph01550\n\t* glyph01551\n\t* glyph01552\n\t* glyph01553\n\t* glyph01554\n\t* glyph01555\n\t* glyph01556\n\t* glyph01557\n\t* glyph01558\n\t* glyph01559\n\t* glyph01560\n\t* glyph01561\n\t* glyph01562\n\t* glyph01563\n\t* glyph01564\n\t* glyph01565\n\t* glyph01566\n\t* glyph01567\n\t* glyph01568\n\t* glyph01569\n\t* glyph01570\n\t* glyph01571\n\t* glyph01572\n\t* glyph01573\n\t* glyph01574\n\t* glyph01575\n\t* glyph01576\n\t* glyph01577\n\t* glyph01578\n\t* glyph01579\n\t* glyph01580\n\t* glyph01581\n\t* glyph01582\n\t* glyph01583\n\t* glyph01584\n\t* glyph01585\n\t* glyph01586\n\t* glyph01587\n\t* glyph01588\n\t* glyph01589\n\t* glyph01590\n\t* glyph01591\n\t* glyph01593\n\t* glyph01596\n\t* glyph01597\n\t* glyph01598\n\t* glyph01601\n\t* glyph01602\n\t* glyph01603\n\t* glyph01604\n\t* glyph01605\n\t* glyph01606\n\t* glyph01607\n\t* glyph01608\n\t* glyph01612\n\t* glyph01614\n\t* glyph01616\n\t* glyph01617\n\t* glyph01618\n\t* glyph01619\n\t* glyph01620\n\t* glyph01621\n\t* glyph01622\n\t* glyph01623\n\t* glyph01624\n\t* glyph01625\n\t* glyph01626\n\t* glyph01627\n\t* glyph01628\n\t* glyph01629\n\t* glyph01630\n\t* glyph01631\n\t* glyph01632\n\t* glyph01633\n\t* glyph01634\n\t* glyph01635\n\t* glyph01636\n\t* glyph01637\n\t* glyph01638\n\t* glyph01639\n\t* glyph01640\n\t* glyph01641\n\t* glyph01642\n\t* glyph01643\n\t* glyph01644\n\t* glyph01645\n\t* glyph01646\n\t* glyph01647\n\t* glyph01648\n\t* glyph01649\n\t* glyph01650\n\t* glyph01651\n\t* glyph01652\n\t* glyph01653\n\t* glyph01654\n\t* glyph01655\n\t* glyph01656\n\t* glyph01657\n\t* glyph01658\n\t* glyph01659\n\t* glyph01660\n\t* glyph01661\n\t* glyph01662\n\t* glyph01663\n\t* glyph01664\n\t* glyph01665\n\t* glyph01666\n\t* glyph01667\n\t* glyph01668\n\t* glyph01669\n\t* glyph01670\n\t* glyph01671\n\t* glyph01672\n\t* glyph01673\n\t* glyph01674\n\t* glyph01675\n\t* glyph01676\n\t* glyph01677\n\t* glyph01678\n\t* glyph01679\n\t* glyph01680\n\t* glyph01681\n\t* glyph01682\n\t* glyph01683\n\t* glyph01684\n\t* glyph01685\n\t* glyph01686\n\t* glyph01687\n\t* glyph01688\n\t* glyph01689\n\t* glyph01690\n\t* glyph01691\n\t* glyph01692\n\t* glyph01693\n\t* glyph01694\n\t* glyph01695\n\t* glyph01696\n\t* glyph01697\n\t* glyph01698\n\t* glyph01699\n\t* glyph01700\n\t* glyph01701\n\t* glyph01702\n\t* glyph01703\n\t* glyph01704\n\t* glyph01705\n\t* glyph01706\n\t* glyph01707\n\t* glyph01708\n\t* glyph01709\n\t* glyph01710\n\t* glyph01711\n\t* glyph01712\n\t* glyph01713\n\t* glyph01714\n\t* glyph01715\n\t* glyph01716\n\t* glyph01717\n\t* glyph01718\n\t* glyph01719\n\t* glyph01721\n\t* glyph01722\n\t* glyph01723\n\t* glyph01724\n\t* glyph01725\n\t* glyph01726\n\t* glyph01727\n\t* glyph01728\n\t* glyph01729\n\t* glyph01730\n\t* glyph01731\n\t* glyph01732\n\t* glyph01733\n\t* glyph01734\n\t* glyph01735\n\t* glyph01737\n\t* glyph01738\n\t* glyph01739\n\t* glyph01740\n\t* glyph01742\n\t* glyph01743\n\t* glyph01744\n\t* glyph01746\n\t* glyph01747\n\t* glyph01748\n\t* glyph01749\n\t* glyph01751\n\t* glyph01752\n\t* glyph01753\n\t* glyph01755\n\t* glyph01756\n\t* glyph01757\n\t* glyph01759\n\t* glyph01760\n\t* glyph01761\n\t* glyph01762\n\t* glyph01763\n\t* glyph01764\n\t* glyph01765\n\t* glyph01766\n\t* glyph01767\n\t* glyph01768\n\t* glyph01769\n\t* glyph01770\n\t* glyph01771\n\t* glyph01772\n\t* glyph01773\n\t* glyph01774\n\t* glyph01775\n\t* glyph01776\n\t* glyph01777\n\t* glyph01778\n\t* glyph01779\n\t* glyph01780\n\t* glyph01781\n\t* glyph01782\n\t* glyph01783\n\t* glyph01784\n\t* glyph01785\n\t* glyph01786\n\t* glyph01787\n\t* glyph01788\n\t* glyph01789\n\t* glyph01790\n\t* glyph01791\n\t* glyph01792\n\t* glyph01793\n\t* glyph01794\n\t* glyph01795\n\t* glyph01796\n\t* glyph01797\n\t* glyph01798\n\t* glyph01799\n\t* glyph01800\n\t* glyph01801\n\t* glyph01802\n\t* glyph01803\n\t* glyph01804\n\t* glyph01805\n\t* glyph01806\n\t* glyph01807\n\t* glyph01808\n\t* glyph01809\n\t* glyph01810\n\t* glyph01811\n\t* glyph01813\n\t* glyph01814\n\t* glyph01815\n\t* glyph01816\n\t* glyph01817\n\t* glyph01818\n\t* glyph01819\n\t* glyph01820\n\t* glyph01821\n\t* glyph01822\n\t* glyph01823\n\t* glyph01824\n\t* glyph01825\n\t* glyph01826\n\t* glyph01827\n\t* glyph01828\n\t* glyph01829\n\t* glyph01830\n\t* glyph01831\n\t* glyph01832\n\t* glyph01833\n\t* glyph01834\n\t* glyph01835\n\t* glyph01836\n\t* glyph01837\n\t* glyph01838\n\t* glyph01840\n\t* glyph01841\n\t* glyph01842\n\t* glyph01843\n\t* glyph01844\n\t* glyph01845\n\t* glyph01846\n\t* glyph01847\n\t* glyph01848\n\t* glyph01849\n\t* glyph01850\n\t* glyph01851\n\t* glyph01852\n\t* glyph01853\n\t* glyph01854\n\t* glyph01855\n\t* glyph01856\n\t* glyph01857\n\t* glyph01858\n\t* glyph01859\n\t* glyph01860\n\t* glyph01861\n\t* glyph01862\n\t* glyph01863\n\t* glyph01866\n\t* glyph01867\n\t* glyph01868\n\t* glyph01869\n\t* glyph01871\n\t* glyph01872\n\t* glyph01873\n\t* glyph01875\n\t* glyph01876\n\t* glyph01877\n\t* glyph01878\n\t* glyph01879\n\t* glyph01880\n\t* glyph01881\n\t* glyph01882\n\t* glyph01883\n\t* glyph01884\n\t* glyph01885\n\t* glyph01886\n\t* glyph01887\n\t* glyph01888\n\t* glyph01889\n\t* glyph01890\n\t* glyph01891\n\t* glyph01892\n\t* glyph01893\n\t* glyph01894\n\t* glyph01895\n\t* glyph01896\n\t* glyph01897\n\t* glyph01898\n\t* glyph01899\n\t* glyph01900\n\t* glyph01901\n\t* glyph01902\n\t* glyph01903\n\t* glyph01904\n\t* glyph01906\n\t* glyph01907\n\t* glyph01908\n\t* glyph01909\n\t* glyph01910\n\t* glyph01911\n\t* glyph01912\n\t* glyph01913\n\t* glyph01914\n\t* glyph01915\n\t* glyph01916\n\t* glyph01917\n\t* glyph01919\n\t* glyph01920\n\t* glyph01921\n\t* glyph01922\n\t* glyph01923\n\t* glyph01924\n\t* glyph01925\n\t* glyph01926\n\t* glyph01927\n\t* glyph01928\n\t* glyph01929\n\t* glyph01930\n\t* glyph01931\n\t* glyph01932\n\t* glyph01933\n\t* glyph01934\n\t* glyph01935\n\t* glyph01936\n\t* glyph01937\n\t* glyph01938\n\t* glyph01939\n\t* glyph01940\n\t* glyph01941\n\t* glyph01942\n\t* glyph01943\n\t* glyph01944\n\t* glyph01945\n\t* glyph01946\n\t* glyph01947\n\t* glyph01948\n\t* glyph01949\n\t* glyph01950\n\t* glyph01951\n\t* glyph01952\n\t* glyph01953\n\t* glyph01954\n\t* glyph01955\n\t* glyph01956\n\t* glyph01957\n\t* glyph01958\n\t* glyph01959\n\t* glyph01960\n\t* glyph01961\n\t* glyph01962\n\t* glyph01963\n\t* glyph01964\n\t* glyph01965\n\t* glyph01966\n\t* glyph01967\n\t* glyph01968\n\t* glyph01969\n\t* glyph01970\n\t* glyph01971\n\t* glyph01972\n\t* glyph01973\n\t* glyph01974\n\t* glyph01975\n\t* glyph01976\n\t* glyph01977\n\t* glyph01978\n\t* glyph01979\n\t* glyph01980\n\t* glyph01982\n\t* glyph01983\n\t* glyph01985\n\t* glyph01986\n\t* glyph01987\n\t* glyph01988\n\t* glyph01989\n\t* glyph01990\n\t* glyph01991\n\t* glyph01992\n\t* glyph01993\n\t* glyph01994\n\t* glyph01995\n\t* glyph01996\n\t* glyph01997\n\t* glyph01998\n\t* glyph01999\n\t* glyph02000\n\t* glyph02002\n\t* glyph02003\n\t* glyph02004\n\t* glyph02005\n\t* glyph02006\n\t* glyph02008\n\t* glyph02009\n\t* glyph02010\n\t* glyph02011\n\t* glyph02012\n\t* glyph02013\n\t* glyph02014\n\t* glyph02015\n\t* glyph02016\n\t* glyph02017\n\t* glyph02018\n\t* glyph02019\n\t* glyph02020\n\t* glyph02021\n\t* glyph02022\n\t* glyph02023\n\t* glyph02024\n\t* glyph02025\n\t* glyph02026\n\t* glyph02027\n\t* glyph02028\n\t* glyph02029\n\t* glyph02030\n\t* glyph02031\n\t* glyph02032\n\t* glyph02033\n\t* glyph02034\n\t* glyph02036\n\t* glyph02037\n\t* glyph02039\n\t* glyph02040\n\t* glyph02041\n\t* glyph02042\n\t* glyph02043\n\t* glyph02044\n\t* glyph02045\n\t* glyph02046\n\t* glyph02048\n\t* glyph02049\n\t* glyph02050\n\t* glyph02051\n\t* glyph02053\n\t* glyph02054\n\t* glyph02055\n\t* glyph02056\n\t* glyph02057\n\t* glyph02058\n\t* glyph02059\n\t* glyph02060\n\t* glyph02061\n\t* glyph02062\n\t* glyph02063\n\t* glyph02066\n\t* glyph02067\n\t* glyph02068\n\t* glyph02069\n\t* glyph02070\n\t* glyph02072\n\t* glyph02073\n\t* glyph02074\n\t* glyph02075\n\t* glyph02076\n\t* glyph02077\n\t* glyph02078\n\t* glyph02079\n\t* glyph02080\n\t* glyph02081\n\t* glyph02082\n\t* glyph02083\n\t* glyph02084\n\t* glyph02085\n\t* glyph02086\n\t* glyph02087\n\t* glyph02089\n\t* glyph02090\n\t* glyph02091\n\t* glyph02092\n\t* glyph02093\n\t* glyph02095\n\t* glyph02096\n\t* glyph02097\n\t* glyph02098\n\t* glyph02100\n\t* glyph02101\n\t* glyph02102\n\t* glyph02105\n\t* glyph02106\n\t* glyph02107\n\t* glyph02108\n\t* glyph02110\n\t* glyph02111\n\t* glyph02112\n\t* glyph02113\n\t* glyph02114\n\t* glyph02115\n\t* glyph02116\n\t* glyph02117\n\t* glyph02118\n\t* glyph02119\n\t* glyph02120\n\t* glyph02121\n\t* glyph02123\n\t* glyph02124\n\t* glyph02125\n\t* glyph02126\n\t* glyph02127\n\t* glyph02128\n\t* glyph02129\n\t* glyph02130\n\t* glyph02132\n\t* glyph02133\n\t* glyph02135\n\t* glyph02136\n\t* glyph02137\n\t* glyph02138\n\t* glyph02139\n\t* glyph02144\n\t* glyph02146\n\t* glyph02147\n\t* glyph02148\n\t* glyph02149\n\t* glyph02150\n\t* glyph02151\n\t* glyph02152\n\t* glyph02153\n\t* glyph02155\n\t* glyph02156\n\t* glyph02157\n\t* glyph02158\n\t* glyph02159\n\t* glyph02161\n\t* glyph02162\n\t* glyph02163\n\t* glyph02164\n\t* glyph02165\n\t* glyph02166\n\t* glyph02167\n\t* glyph02168\n\t* glyph02169\n\t* glyph02170\n\t* glyph02171\n\t* glyph02172\n\t* glyph02174\n\t* glyph02176\n\t* glyph02177\n\t* glyph02179\n\t* glyph02180\n\t* glyph02181\n\t* glyph02184\n\t* glyph02185\n\t* glyph02186\n\t* glyph02187\n\t* glyph02189\n\t* glyph02190\n\t* glyph02191\n\t* glyph02193\n\t* glyph02194\n\t* glyph02195\n\t* glyph02196\n\t* glyph02197\n\t* glyph02198\n\t* glyph02199\n\t* glyph02200\n\t* glyph02201\n\t* glyph02202\n\t* glyph02203\n\t* glyph02204\n\t* glyph02205\n\t* glyph02206\n\t* glyph02207\n\t* glyph02208\n\t* glyph02209\n\t* glyph02210\n\t* glyph02211\n\t* glyph02212\n\t* glyph02213\n\t* glyph02214\n\t* glyph02215\n\t* glyph02217\n\t* glyph02218\n\t* glyph02219\n\t* glyph02220\n\t* glyph02223\n\t* glyph02226\n\t* glyph02227\n\t* glyph02229\n\t* glyph02231\n\t* glyph02232\n\t* glyph02234\n\t* glyph02235\n\t* glyph02236\n\t* glyph02238\n\t* glyph02240\n\t* glyph02241\n\t* glyph02245\n\t* glyph02246\n\t* glyph02247\n\t* glyph02248\n\t* glyph02250\n\t* glyph02252\n\t* glyph02253\n\t* glyph02254\n\t* glyph02255\n\t* glyph02257\n\t* glyph02258\n\t* glyph02260\n\t* glyph02261\n\t* glyph02262\n\t* glyph02263\n\t* glyph02264\n\t* glyph02266\n\t* glyph02268\n\t* glyph02269\n\t* glyph02270\n\t* glyph02271\n\t* glyph02272\n\t* glyph02274\n\t* glyph02275\n\t* glyph02276\n\t* glyph02277\n\t* glyph02278\n\t* glyph02279\n\t* glyph02280\n\t* glyph02282\n\t* glyph02283\n\t* glyph02284\n\t* glyph02285\n\t* glyph02287\n\t* glyph02288\n\t* glyph02289\n\t* glyph02290\n\t* glyph02291\n\t* glyph02292\n\t* glyph02293\n\t* glyph02294\n\t* glyph02296\n\t* glyph02297\n\t* glyph02298\n\t* glyph02299\n\t* glyph02300\n\t* glyph02301\n\t* glyph02302\n\t* glyph02304\n\t* glyph02305\n\t* glyph02306\n\t* glyph02307\n\t* glyph02309\n\t* glyph02310\n\t* glyph02311\n\t* glyph02312\n\t* glyph02314\n\t* glyph02315\n\t* glyph02316\n\t* glyph02317\n\t* glyph02318\n\t* glyph02319\n\t* glyph02320\n\t* glyph02321\n\t* glyph02322\n\t* glyph02323\n\t* glyph02324\n\t* glyph02325\n\t* glyph02326\n\t* glyph02327\n\t* glyph02328\n\t* glyph02329\n\t* glyph02330\n\t* glyph02332\n\t* glyph02333\n\t* glyph02334\n\t* glyph02336\n\t* glyph02337\n\t* glyph02338\n\t* glyph02339\n\t* glyph02340\n\t* glyph02341\n\t* glyph02342\n\t* glyph02343\n\t* glyph02344\n\t* glyph02345\n\t* glyph02346\n\t* glyph02347\n\t* glyph02348\n\t* glyph02349\n\t* glyph02350\n\t* glyph02351\n\t* glyph02352\n\t* glyph02353\n\t* glyph02354\n\t* glyph02355\n\t* glyph02356\n\t* glyph02357\n\t* glyph02358\n\t* glyph02359\n\t* glyph02360\n\t* glyph02361\n\t* glyph02362\n\t* glyph02363\n\t* glyph02364\n\t* glyph02365\n\t* glyph02366\n\t* glyph02367\n\t* glyph02368\n\t* glyph02369\n\t* glyph02370\n\t* glyph02371\n\t* glyph02372\n\t* glyph02373\n\t* glyph02374\n\t* glyph02375\n\t* glyph02376\n\t* glyph02377\n\t* glyph02378\n\t* glyph02379\n\t* glyph02380\n\t* glyph02381\n\t* glyph02382\n\t* glyph02383\n\t* glyph02384\n\t* glyph02385\n\t* glyph02386\n\t* glyph02387\n\t* glyph02388\n\t* glyph02389\n\t* glyph02390\n\t* glyph02391\n\t* glyph02392\n\t* glyph02393\n\t* glyph02394\n\t* glyph02395\n\t* glyph02396\n\t* glyph02397\n\t* glyph02398\n\t* glyph02399\n\t* glyph02400\n\t* glyph02401\n\t* glyph02402\n\t* glyph02403\n\t* glyph02404\n\t* glyph02405\n\t* glyph02406\n\t* glyph02407\n\t* glyph02409\n\t* glyph02410\n\t* glyph02411\n\t* glyph02412\n\t* glyph02413\n\t* glyph02414\n\t* glyph02415\n\t* glyph02416\n\t* glyph02417\n\t* glyph02418\n\t* glyph02419\n\t* glyph02420\n\t* glyph02421\n\t* glyph02422\n\t* glyph02423\n\t* glyph02424\n\t* glyph02425\n\t* glyph02426\n\t* glyph02427\n\t* glyph02428\n\t* glyph02429\n\t* glyph02431\n\t* glyph02432\n\t* glyph02433\n\t* glyph02434\n\t* glyph02435\n\t* glyph02436\n\t* glyph02437\n\t* glyph02438\n\t* glyph02439\n\t* glyph02440\n\t* glyph02441\n\t* glyph02442\n\t* glyph02443\n\t* glyph02444\n\t* glyph02445\n\t* glyph02446\n\t* glyph02447\n\t* glyph02448\n\t* glyph02449\n\t* glyph02450\n\t* glyph02451\n\t* glyph02452\n\t* glyph02453\n\t* glyph02454\n\t* glyph02455\n\t* glyph02456\n\t* glyph02457\n\t* glyph02458\n\t* glyph02459\n\t* glyph02460\n\t* glyph02461\n\t* glyph02462\n\t* glyph02463\n\t* glyph02464\n\t* glyph02465\n\t* glyph02466\n\t* glyph02467\n\t* glyph02468\n\t* glyph02469\n\t* glyph02470\n\t* glyph02472\n\t* glyph02473\n\t* glyph02474\n\t* glyph02475\n\t* glyph02476\n\t* glyph02477\n\t* glyph02478\n\t* glyph02480\n\t* glyph02481\n\t* glyph02482\n\t* glyph02483\n\t* glyph02484\n\t* glyph02485\n\t* glyph02486\n\t* glyph02487\n\t* glyph02488\n\t* glyph02489\n\t* glyph02490\n\t* glyph02491\n\t* glyph02492\n\t* glyph02493\n\t* glyph02494\n\t* glyph02496\n\t* glyph02497\n\t* glyph02500\n\t* glyph02501\n\t* glyph02502\n\t* glyph02503\n\t* glyph02504\n\t* glyph02505\n\t* glyph02506\n\t* glyph02509\n\t* glyph02510\n\t* glyph02511\n\t* glyph02512\n\t* glyph02515\n\t* glyph02516\n\t* glyph02517\n\t* glyph02518\n\t* glyph02519\n\t* glyph02520\n\t* glyph02521\n\t* glyph02522\n\t* glyph02523\n\t* glyph02524\n\t* glyph02525\n\t* glyph02526\n\t* glyph02528\n\t* glyph02529\n\t* glyph02530\n\t* glyph02531\n\t* glyph02532\n\t* glyph02533\n\t* glyph02534\n\t* glyph02536\n\t* glyph02537\n\t* glyph02539\n\t* glyph02541\n\t* glyph02542\n\t* glyph02543\n\t* glyph02544\n\t* glyph02546\n\t* glyph02548\n\t* glyph02549\n\t* glyph02550\n\t* glyph02552\n\t* glyph02554\n\t* glyph02555\n\t* glyph02557\n\t* glyph02558\n\t* glyph02559\n\t* glyph02560\n\t* glyph02561\n\t* glyph02562\n\t* glyph02563\n\t* glyph02564\n\t* glyph02565\n\t* glyph02566\n\t* glyph02567\n\t* glyph02568\n\t* glyph02569\n\t* glyph02570\n\t* glyph02571\n\t* glyph02572\n\t* glyph02573\n\t* glyph02574\n\t* glyph02575\n\t* glyph02576\n\t* glyph02577\n\t* glyph02578\n\t* glyph02579\n\t* glyph02580\n\t* glyph02581\n\t* glyph02582\n\t* glyph02583\n\t* glyph02584\n\t* glyph02585\n\t* glyph02586\n\t* glyph02587\n\t* glyph02588\n\t* glyph02589\n\t* glyph02591\n\t* glyph02592\n\t* glyph02593\n\t* glyph02594\n\t* glyph02596\n\t* glyph02597\n\t* glyph02598\n\t* glyph02599\n\t* glyph02600\n\t* glyph02601\n\t* glyph02602\n\t* glyph02603\n\t* glyph02604\n\t* glyph02605\n\t* glyph02606\n\t* glyph02607\n\t* glyph02608\n\t* glyph02609\n\t* glyph02610\n\t* glyph02611\n\t* glyph02613\n\t* glyph02614\n\t* glyph02615\n\t* glyph02616\n\t* glyph02617\n\t* glyph02618\n\t* glyph02619\n\t* glyph02620\n\t* glyph02621\n\t* glyph02622\n\t* glyph02623\n\t* glyph02624\n\t* glyph02625\n\t* glyph02626\n\t* glyph02627\n\t* glyph02628\n\t* glyph02629\n\t* glyph02630\n\t* glyph02631\n\t* glyph02632\n\t* glyph02633\n\t* glyph02634\n\t* glyph02635\n\t* glyph02636\n\t* glyph02637\n\t* glyph02638\n\t* glyph02639\n\t* glyph02640\n\t* glyph02641\n\t* glyph02642\n\t* glyph02643\n\t* glyph02644\n\t* glyph02645\n\t* glyph02646\n\t* glyph02648\n\t* glyph02649\n\t* glyph02650\n\t* glyph02651\n\t* glyph02652\n\t* glyph02653\n\t* glyph02654\n\t* glyph02655\n\t* glyph02656\n\t* glyph02657\n\t* glyph02658\n\t* glyph02659\n\t* glyph02660\n\t* glyph02661\n\t* glyph02662\n\t* glyph02663\n\t* glyph02664\n\t* glyph02665\n\t* glyph02667\n\t* glyph02669\n\t* glyph02670\n\t* glyph02671\n\t* glyph02674\n\t* glyph02675\n\t* glyph02676\n\t* glyph02677\n\t* glyph02678\n\t* glyph02679\n\t* glyph02680\n\t* glyph02681\n\t* glyph02682\n\t* glyph02683\n\t* glyph02684\n\t* glyph02685\n\t* glyph02686\n\t* glyph02687\n\t* glyph02688\n\t* glyph02689\n\t* glyph02690\n\t* glyph02691\n\t* glyph02692\n\t* glyph02695\n\t* glyph02696\n\t* glyph02697\n\t* glyph02698\n\t* glyph02700\n\t* glyph02701\n\t* glyph02702\n\t* glyph02703\n\t* glyph02704\n\t* glyph02706\n\t* glyph02708\n\t* glyph02711\n\t* glyph02712\n\t* glyph02715\n\t* glyph02716\n\t* glyph02718\n\t* glyph02719\n\t* glyph02721\n\t* glyph02722\n\t* glyph02723\n\t* glyph02724\n\t* glyph02726\n\t* glyph02727\n\t* glyph02729\n\t* glyph02730\n\t* glyph02731\n\t* glyph02732\n\t* glyph02733\n\t* glyph02734\n\t* glyph02735\n\t* glyph02736\n\t* glyph02737\n\t* glyph02738\n\t* glyph02739\n\t* glyph02740\n\t* glyph02741\n\t* glyph02742\n\t* glyph02743\n\t* glyph02744\n\t* glyph02745\n\t* glyph02746\n\t* glyph02747\n\t* glyph02748\n\t* glyph02749\n\t* glyph02750\n\t* glyph02751\n\t* glyph02752\n\t* glyph02754\n\t* glyph02755\n\t* glyph02756\n\t* glyph02757\n\t* glyph02758\n\t* glyph02760\n\t* glyph02762\n\t* glyph02765\n\t* glyph02768\n\t* glyph02769\n\t* glyph02770\n\t* glyph02772\n\t* glyph02773\n\t* glyph02774\n\t* glyph02776\n\t* glyph02777\n\t* glyph02778\n\t* glyph02780\n\t* glyph02782\n\t* glyph02783\n\t* glyph02785\n\t* glyph02787\n\t* glyph02788\n\t* glyph02789\n\t* glyph02791\n\t* glyph02792\n\t* glyph02793\n\t* glyph02794\n\t* glyph02795\n\t* glyph02796\n\t* glyph02798\n\t* glyph02799\n\t* glyph02800\n\t* glyph02801\n\t* glyph02802\n\t* glyph02803\n\t* glyph02804\n\t* glyph02805\n\t* glyph02806\n\t* glyph02807\n\t* glyph02808\n\t* glyph02809\n\t* glyph02810\n\t* glyph02811\n\t* glyph02812\n\t* glyph02813\n\t* glyph02814\n\t* glyph02815\n\t* glyph02816\n\t* glyph02817\n\t* glyph02818\n\t* glyph02819\n\t* glyph02821\n\t* glyph02823\n\t* glyph02824\n\t* glyph02826\n\t* glyph02827\n\t* glyph02830\n\t* glyph02831\n\t* glyph02832\n\t* glyph02833\n\t* glyph02834\n\t* glyph02836\n\t* glyph02839\n\t* glyph02840\n\t* glyph02841\n\t* glyph02842\n\t* glyph02843\n\t* glyph02844\n\t* glyph02845\n\t* glyph02847\n\t* glyph02848\n\t* glyph02849\n\t* glyph02850\n\t* glyph02851\n\t* glyph02852\n\t* glyph02853\n\t* glyph02854\n\t* glyph02855\n\t* glyph02856\n\t* glyph02857\n\t* glyph02859\n\t* glyph02860\n\t* glyph02861\n\t* glyph02862\n\t* glyph02863\n\t* glyph02864\n\t* glyph02865\n\t* glyph02866\n\t* glyph02867\n\t* glyph02868\n\t* glyph02869\n\t* glyph02870\n\t* glyph02871\n\t* glyph02872\n\t* glyph02873\n\t* glyph02874\n\t* glyph02875\n\t* glyph02876\n\t* glyph02877\n\t* glyph02878\n\t* glyph02879\n\t* glyph02882\n\t* glyph02884\n\t* glyph02885\n\t* glyph02886\n\t* glyph02887\n\t* glyph02888\n\t* glyph02889\n\t* glyph02890\n\t* glyph02891\n\t* glyph02892\n\t* glyph02893\n\t* glyph02895\n\t* glyph02896\n\t* glyph02898\n\t* glyph02899\n\t* glyph02900\n\t* glyph02901\n\t* glyph02902\n\t* glyph02903\n\t* glyph02904\n\t* glyph02905\n\t* glyph02906\n\t* glyph02907\n\t* glyph02908\n\t* glyph02909\n\t* glyph02910\n\t* glyph02912\n\t* glyph02913\n\t* glyph02915\n\t* glyph02916\n\t* glyph02917\n\t* glyph02918\n\t* glyph02919\n\t* glyph02920\n\t* glyph02921\n\t* glyph02922\n\t* glyph02923\n\t* glyph02924\n\t* glyph02925\n\t* glyph02926\n\t* glyph02927\n\t* glyph02928\n\t* glyph02929\n\t* glyph02930\n\t* glyph02931\n\t* glyph02932\n\t* glyph02933\n\t* glyph02934\n\t* glyph02937\n\t* glyph02938\n\t* glyph02940\n\t* glyph02941\n\t* glyph02942\n\t* glyph02944\n\t* glyph02945\n\t* glyph02946\n\t* glyph02948\n\t* glyph02949\n\t* glyph02951\n\t* glyph02952\n\t* glyph02953\n\t* glyph02954\n\t* glyph02955\n\t* glyph02956\n\t* glyph02957\n\t* glyph02958\n\t* glyph02959\n\t* glyph02960\n\t* glyph02961\n\t* glyph02962\n\t* glyph02963\n\t* glyph02964\n\t* glyph02965\n\t* glyph02966\n\t* glyph02967\n\t* glyph02968\n\t* glyph02969\n\t* glyph02970\n\t* glyph02971\n\t* glyph02972\n\t* glyph02973\n\t* glyph02975\n\t* glyph02976\n\t* glyph02977\n\t* glyph02978\n\t* glyph02980\n\t* glyph02981\n\t* glyph02982\n\t* glyph02983\n\t* glyph02984\n\t* glyph02985\n\t* glyph02986\n\t* glyph02987\n\t* glyph02988\n\t* glyph02989\n\t* glyph02990\n\t* glyph02991\n\t* glyph02992\n\t* glyph02993\n\t* glyph02994\n\t* glyph02995\n\t* glyph02996\n\t* glyph02997\n\t* glyph02998\n\t* glyph02999\n\t* glyph03000\n\t* glyph03001\n\t* glyph03002\n\t* glyph03003\n\t* glyph03004\n\t* glyph03005\n\t* glyph03006\n\t* glyph03007\n\t* glyph03008\n\t* glyph03009\n\t* glyph03010\n\t* glyph03011\n\t* glyph03012\n\t* glyph03013\n\t* glyph03014\n\t* glyph03015\n\t* glyph03016\n\t* glyph03017\n\t* glyph03018\n\t* glyph03019\n\t* glyph03020\n\t* glyph03021\n\t* glyph03022\n\t* glyph03023\n\t* glyph03024\n\t* glyph03025\n\t* glyph03026\n\t* glyph03027\n\t* glyph03028\n\t* glyph03029\n\t* glyph03030\n\t* glyph03031\n\t* glyph03032\n\t* glyph03033\n\t* glyph03034\n\t* glyph03035\n\t* glyph03036\n\t* glyph03037\n\t* glyph03038\n\t* glyph03039\n\t* glyph03040\n\t* glyph03041\n\t* glyph03042\n\t* glyph03043\n\t* glyph03044\n\t* glyph03045\n\t* glyph03046\n\t* glyph03047\n\t* glyph03048\n\t* glyph03049\n\t* glyph03050\n\t* glyph03051\n\t* glyph03054\n\t* glyph03056\n\t* glyph03057\n\t* glyph03058\n\t* glyph03059\n\t* glyph03060\n\t* glyph03061\n\t* glyph03062\n\t* glyph03063\n\t* glyph03064\n\t* glyph03065\n\t* glyph03066\n\t* glyph03067\n\t* glyph03068\n\t* glyph03069\n\t* glyph03070\n\t* glyph03071\n\t* glyph03072\n\t* glyph03073\n\t* glyph03074\n\t* glyph03075\n\t* glyph03076\n\t* glyph03077\n\t* glyph03078\n\t* glyph03080\n\t* glyph03081\n\t* glyph03083\n\t* glyph03084\n\t* glyph03085\n\t* glyph03086\n\t* glyph03089\n\t* glyph03091\n\t* glyph03093\n\t* glyph03095\n\t* glyph03096\n\t* glyph03097\n\t* glyph03100\n\t* glyph03101\n\t* glyph03102\n\t* glyph03103\n\t* glyph03104\n\t* glyph03105\n\t* glyph03106\n\t* glyph03107\n\t* glyph03108\n\t* glyph03109\n\t* glyph03110\n\t* glyph03111\n\t* glyph03112\n\t* glyph03113\n\t* glyph03114\n\t* glyph03116\n\t* glyph03117\n\t* glyph03118\n\t* glyph03119\n\t* glyph03120\n\t* glyph03121\n\t* glyph03122\n\t* glyph03123\n\t* glyph03124\n\t* glyph03125\n\t* glyph03126\n\t* glyph03127\n\t* glyph03128\n\t* glyph03129\n\t* glyph03130\n\t* glyph03131\n\t* glyph03132\n\t* glyph03133\n\t* glyph03134\n\t* glyph03135\n\t* glyph03136\n\t* glyph03137\n\t* glyph03139\n\t* glyph03140\n\t* glyph03143\n\t* glyph03144\n\t* glyph03145\n\t* glyph03146\n\t* glyph03147\n\t* glyph03148\n\t* glyph03149\n\t* glyph03150\n\t* glyph03151\n\t* glyph03153\n\t* glyph03155\n\t* glyph03156\n\t* glyph03157\n\t* glyph03159\n\t* glyph03160\n\t* glyph03162\n\t* glyph03165\n\t* glyph03166\n\t* glyph03167\n\t* glyph03168\n\t* glyph03170\n\t* glyph03171\n\t* glyph03172\n\t* glyph03173\n\t* glyph03176\n\t* glyph03178\n\t* glyph03179\n\t* glyph03180\n\t* glyph03181\n\t* glyph03182\n\t* glyph03183\n\t* glyph03184\n\t* glyph03185\n\t* glyph03186\n\t* glyph03187\n\t* glyph03188\n\t* glyph03189\n\t* glyph03190\n\t* glyph03191\n\t* glyph03192\n\t* glyph03193\n\t* glyph03194\n\t* glyph03195\n\t* glyph03196\n\t* glyph03197\n\t* glyph03199\n\t* glyph03200\n\t* glyph03201\n\t* glyph03202\n\t* glyph03203\n\t* glyph03205\n\t* glyph03206\n\t* glyph03209\n\t* glyph03210\n\t* glyph03212\n\t* glyph03213\n\t* glyph03214\n\t* glyph03217\n\t* glyph03218\n\t* glyph03219\n\t* glyph03220\n\t* glyph03221\n\t* glyph03222\n\t* glyph03223\n\t* glyph03224\n\t* glyph03225\n\t* glyph03226\n\t* glyph03227\n\t* glyph03228\n\t* glyph03229\n\t* glyph03230\n\t* glyph03231\n\t* glyph03232\n\t* glyph03233\n\t* glyph03234\n\t* glyph03235\n\t* glyph03236\n\t* glyph03237\n\t* glyph03238\n\t* glyph03239\n\t* glyph03240\n\t* glyph03241\n\t* glyph03242\n\t* glyph03243\n\t* glyph03244\n\t* glyph03245\n\t* glyph03246\n\t* glyph03247\n\t* glyph03248\n\t* glyph03249\n\t* glyph03250\n\t* glyph03251\n\t* glyph03252\n\t* glyph03253\n\t* glyph03254\n\t* glyph03255\n\t* glyph03256\n\t* glyph03257\n\t* glyph03258\n\t* glyph03259\n\t* glyph03260\n\t* glyph03261\n\t* glyph03262\n\t* glyph03263\n\t* glyph03264\n\t* glyph03265\n\t* glyph03266\n\t* glyph03267\n\t* glyph03268\n\t* glyph03269\n\t* glyph03270\n\t* glyph03271\n\t* glyph03272\n\t* glyph03273\n\t* glyph03274\n\t* glyph03275\n\t* glyph03276\n\t* glyph03277\n\t* glyph03278\n\t* glyph03279\n\t* glyph03280\n\t* glyph03281\n\t* glyph03282\n\t* glyph03283\n\t* glyph03284\n\t* glyph03285\n\t* glyph03286\n\t* glyph03287\n\t* glyph03288\n\t* glyph03289\n\t* glyph03290\n\t* glyph03291\n\t* glyph03292\n\t* glyph03293\n\t* glyph03294\n\t* glyph03295\n\t* glyph03296\n\t* glyph03297\n\t* glyph03298\n\t* glyph03299\n\t* glyph03301\n\t* glyph03302\n\t* glyph03304\n\t* glyph03305\n\t* glyph03306\n\t* glyph03307\n\t* glyph03308\n\t* glyph03310\n\t* glyph03312\n\t* glyph03314\n\t* glyph03315\n\t* glyph03316\n\t* glyph03317\n\t* glyph03318\n\t* glyph03319\n\t* glyph03320\n\t* glyph03321\n\t* glyph03322\n\t* glyph03323\n\t* glyph03324\n\t* glyph03325\n\t* glyph03326\n\t* glyph03327\n\t* glyph03328\n\t* glyph03329\n\t* glyph03330\n\t* glyph03331\n\t* glyph03332\n\t* glyph03333\n\t* glyph03334\n\t* glyph03335\n\t* glyph03337\n\t* glyph03339\n\t* glyph03341\n\t* glyph03342\n\t* glyph03345\n\t* glyph03346\n\t* glyph03347\n\t* glyph03348\n\t* glyph03351\n\t* glyph03352\n\t* glyph03353\n\t* glyph03355\n\t* glyph03356\n\t* glyph03358\n\t* glyph03359\n\t* glyph03360\n\t* glyph03361\n\t* glyph03362\n\t* glyph03363\n\t* glyph03364\n\t* glyph03365\n\t* glyph03366\n\t* glyph03368\n\t* glyph03369\n\t* glyph03370\n\t* glyph03372\n\t* glyph03373\n\t* glyph03374\n\t* glyph03377\n\t* glyph03378\n\t* glyph03379\n\t* glyph03380\n\t* glyph03381\n\t* glyph03382\n\t* glyph03383\n\t* glyph03384\n\t* glyph03385\n\t* glyph03386\n\t* glyph03387\n\t* glyph03388\n\t* glyph03389\n\t* glyph03390\n\t* glyph03391\n\t* glyph03392\n\t* glyph03393\n\t* glyph03394\n\t* glyph03395\n\t* glyph03397\n\t* glyph03400\n\t* glyph03401\n\t* glyph03403\n\t* glyph03407\n\t* glyph03409\n\t* glyph03410\n\t* glyph03412\n\t* glyph03413\n\t* glyph03415\n\t* glyph03416\n\t* glyph03417\n\t* glyph03418\n\t* glyph03419\n\t* glyph03420\n\t* glyph03421\n\t* glyph03422\n\t* glyph03423\n\t* glyph03424\n\t* glyph03425\n\t* glyph03426\n\t* glyph03427\n\t* glyph03428\n\t* glyph03429\n\t* glyph03430\n\t* glyph03431\n\t* glyph03432\n\t* glyph03433\n\t* glyph03434\n\t* glyph03435\n\t* glyph03436\n\t* glyph03437\n\t* glyph03438\n\t* glyph03439\n\t* glyph03440\n\t* glyph03441\n\t* glyph03443\n\t* glyph03444\n\t* glyph03445\n\t* glyph03446\n\t* glyph03447\n\t* glyph03448\n\t* glyph03449\n\t* glyph03450\n\t* glyph03451\n\t* glyph03453\n\t* glyph03454\n\t* glyph03455\n\t* glyph03456\n\t* glyph03457\n\t* glyph03458\n\t* glyph03459\n\t* glyph03460\n\t* glyph03461\n\t* glyph03463\n\t* glyph03466\n\t* glyph03468\n\t* glyph03469\n\t* glyph03472\n\t* glyph03473\n\t* glyph03474\n\t* glyph03475\n\t* glyph03476\n\t* glyph03477\n\t* glyph03478\n\t* glyph03479\n\t* glyph03480\n\t* glyph03481\n\t* glyph03482\n\t* glyph03483\n\t* glyph03485\n\t* glyph03486\n\t* glyph03487\n\t* glyph03488\n\t* glyph03490\n\t* glyph03491\n\t* glyph03493\n\t* glyph03494\n\t* glyph03496\n\t* glyph03498\n\t* glyph03499\n\t* glyph03501\n\t* glyph03502\n\t* glyph03503\n\t* glyph03505\n\t* glyph03506\n\t* glyph03508\n\t* glyph03509\n\t* glyph03511\n\t* glyph03512\n\t* glyph03513\n\t* glyph03514\n\t* glyph03517\n\t* glyph03518\n\t* glyph03520\n\t* glyph03521\n\t* glyph03522\n\t* glyph03523\n\t* glyph03524\n\t* glyph03525\n\t* glyph03526\n\t* glyph03527\n\t* glyph03528\n\t* glyph03529\n\t* glyph03531\n\t* glyph03533\n\t* glyph03534\n\t* glyph03535\n\t* glyph03536\n\t* glyph03537\n\t* glyph03538\n\t* glyph03539\n\t* glyph03541\n\t* glyph03542\n\t* glyph03543\n\t* glyph03544\n\t* glyph03545\n\t* glyph03546\n\t* glyph03547\n\t* glyph03548\n\t* glyph03549\n\t* glyph03552\n\t* glyph03553\n\t* glyph03555\n\t* glyph03557\n\t* glyph03558\n\t* glyph03559\n\t* glyph03560\n\t* glyph03561\n\t* glyph03562\n\t* glyph03563\n\t* glyph03567\n\t* glyph03569\n\t* glyph03570\n\t* glyph03571\n\t* glyph03572\n\t* glyph03574\n\t* glyph03575\n\t* glyph03576\n\t* glyph03577\n\t* glyph03579\n\t* glyph03581\n\t* glyph03582\n\t* glyph03583\n\t* glyph03584\n\t* glyph03587\n\t* glyph03588\n\t* glyph03591\n\t* glyph03592\n\t* glyph03593\n\t* glyph03594\n\t* glyph03596\n\t* glyph03597\n\t* glyph03598\n\t* glyph03600\n\t* glyph03601\n\t* glyph03602\n\t* glyph03603\n\t* glyph03604\n\t* glyph03605\n\t* glyph03606\n\t* glyph03607\n\t* glyph03608\n\t* glyph03609\n\t* glyph03610\n\t* glyph03611\n\t* glyph03612\n\t* glyph03613\n\t* glyph03614\n\t* glyph03615\n\t* glyph03616\n\t* glyph03617\n\t* glyph03618\n\t* glyph03619\n\t* glyph03622\n\t* glyph03623\n\t* glyph03624\n\t* glyph03625\n\t* glyph03626\n\t* glyph03627\n\t* glyph03628\n\t* glyph03629\n\t* glyph03630\n\t* glyph03631\n\t* glyph03632\n\t* glyph03633\n\t* glyph03634\n\t* glyph03635\n\t* glyph03636\n\t* glyph03637\n\t* glyph03638\n\t* glyph03639\n\t* glyph03640\n\t* glyph03641\n\t* glyph03642\n\t* glyph03643\n\t* glyph03644\n\t* glyph03647\n\t* glyph03649\n\t* glyph03650\n\t* glyph03652\n\t* glyph03653\n\t* glyph03654\n\t* glyph03655\n\t* glyph03657\n\t* glyph03660\n\t* glyph03662\n\t* glyph03664\n\t* glyph03665\n\t* glyph03666\n\t* glyph03667\n\t* glyph03669\n\t* glyph03670\n\t* glyph03671\n\t* glyph03672\n\t* glyph03673\n\t* glyph03674\n\t* glyph03675\n\t* glyph03676\n\t* glyph03677\n\t* glyph03678\n\t* glyph03679\n\t* glyph03680\n\t* glyph03681\n\t* glyph03682\n\t* glyph03683\n\t* glyph03684\n\t* glyph03686\n\t* glyph03687\n\t* glyph03688\n\t* glyph03689\n\t* glyph03690\n\t* glyph03691\n\t* glyph03692\n\t* glyph03693\n\t* glyph03694\n\t* glyph03695\n\t* glyph03696\n\t* glyph03697\n\t* glyph03698\n\t* glyph03699\n\t* glyph03700\n\t* glyph03701\n\t* glyph03703\n\t* glyph03704\n\t* glyph03705\n\t* glyph03706\n\t* glyph03707\n\t* glyph03709\n\t* glyph03713\n\t* glyph03714\n\t* glyph03716\n\t* glyph03718\n\t* glyph03720\n\t* glyph03721\n\t* glyph03722\n\t* glyph03723\n\t* glyph03724\n\t* glyph03725\n\t* glyph03728\n\t* glyph03729\n\t* glyph03732\n\t* glyph03733\n\t* glyph03736\n\t* glyph03737\n\t* glyph03739\n\t* glyph03740\n\t* glyph03741\n\t* glyph03744\n\t* glyph03745\n\t* glyph03746\n\t* glyph03747\n\t* glyph03748\n\t* glyph03750\n\t* glyph03754\n\t* glyph03757\n\t* glyph03759\n\t* glyph03761\n\t* glyph03762\n\t* glyph03763\n\t* glyph03764\n\t* glyph03766\n\t* glyph03767\n\t* glyph03768\n\t* glyph03769\n\t* glyph03770\n\t* glyph03771\n\t* glyph03772\n\t* glyph03773\n\t* glyph03774\n\t* glyph03775\n\t* glyph03776\n\t* glyph03777\n\t* glyph03778\n\t* glyph03779\n\t* glyph03780\n\t* glyph03781\n\t* glyph03782\n\t* glyph03783\n\t* glyph03784\n\t* glyph03785\n\t* glyph03786\n\t* glyph03787\n\t* glyph03788\n\t* glyph03789\n\t* glyph03790\n\t* glyph03791\n\t* glyph03792\n\t* glyph03793\n\t* glyph03794\n\t* glyph03795\n\t* glyph03796\n\t* glyph03797\n\t* glyph03798\n\t* glyph03799\n\t* glyph03800\n\t* glyph03801\n\t* glyph03803\n\t* glyph03805\n\t* glyph03807\n\t* glyph03809\n\t* glyph03810\n\t* glyph03812\n\t* glyph03813\n\t* glyph03814\n\t* glyph03815\n\t* glyph03816\n\t* glyph03817\n\t* glyph03818\n\t* glyph03819\n\t* glyph03820\n\t* glyph03821\n\t* glyph03822\n\t* glyph03823\n\t* glyph03824\n\t* glyph03825\n\t* glyph03826\n\t* glyph03827\n\t* glyph03829\n\t* glyph03830\n\t* glyph03831\n\t* glyph03832\n\t* glyph03833\n\t* glyph03835\n\t* glyph03836\n\t* glyph03837\n\t* glyph03838\n\t* glyph03839\n\t* glyph03840\n\t* glyph03841\n\t* glyph03842\n\t* glyph03844\n\t* glyph03845\n\t* glyph03846\n\t* glyph03847\n\t* glyph03848\n\t* glyph03849\n\t* glyph03850\n\t* glyph03851\n\t* glyph03852\n\t* glyph03853\n\t* glyph03854\n\t* glyph03855\n\t* glyph03856\n\t* glyph03857\n\t* glyph03858\n\t* glyph03861\n\t* glyph03862\n\t* glyph03863\n\t* glyph03864\n\t* glyph03865\n\t* glyph03867\n\t* glyph03868\n\t* glyph03869\n\t* glyph03871\n\t* glyph03872\n\t* glyph03873\n\t* glyph03874\n\t* glyph03875\n\t* glyph03876\n\t* glyph03877\n\t* glyph03878\n\t* glyph03879\n\t* glyph03880\n\t* glyph03881\n\t* glyph03882\n\t* glyph03883\n\t* glyph03884\n\t* glyph03885\n\t* glyph03886\n\t* glyph03887\n\t* glyph03888\n\t* glyph03889\n\t* glyph03890\n\t* glyph03891\n\t* glyph03892\n\t* glyph03893\n\t* glyph03894\n\t* glyph03895\n\t* glyph03896\n\t* glyph03897\n\t* glyph03898\n\t* glyph03899\n\t* glyph03900\n\t* glyph03901\n\t* glyph03902\n\t* glyph03903\n\t* glyph03904\n\t* glyph03905\n\t* glyph03906\n\t* glyph03907\n\t* glyph03909\n\t* glyph03910\n\t* glyph03911\n\t* glyph03912\n\t* glyph03913\n\t* glyph03914\n\t* glyph03915\n\t* glyph03916\n\t* glyph03917\n\t* glyph03918\n\t* glyph03919\n\t* glyph03920\n\t* glyph03921\n\t* glyph03922\n\t* glyph03923\n\t* glyph03924\n\t* glyph03927\n\t* glyph03928\n\t* glyph03929\n\t* glyph03930\n\t* glyph03931\n\t* glyph03932\n\t* glyph03933\n\t* glyph03934\n\t* glyph03935\n\t* glyph03936\n\t* glyph03937\n\t* glyph03938\n\t* glyph03939\n\t* glyph03941\n\t* glyph03943\n\t* glyph03944\n\t* glyph03946\n\t* glyph03947\n\t* glyph03948\n\t* glyph03949\n\t* glyph03950\n\t* glyph03952\n\t* glyph03953\n\t* glyph03954\n\t* glyph03955\n\t* glyph03956\n\t* glyph03957\n\t* glyph03958\n\t* glyph03959\n\t* glyph03960\n\t* glyph03961\n\t* glyph03962\n\t* glyph03963\n\t* glyph03964\n\t* glyph03965\n\t* glyph03966\n\t* glyph03967\n\t* glyph03968\n\t* glyph03969\n\t* glyph03970\n\t* glyph03971\n\t* glyph03972\n\t* glyph03973\n\t* glyph03974\n\t* glyph03975\n\t* glyph03976\n\t* glyph03977\n\t* glyph03978\n\t* glyph03979\n\t* glyph03980\n\t* glyph03981\n\t* glyph03982\n\t* glyph03983\n\t* glyph03985\n\t* glyph03987\n\t* glyph03990\n\t* glyph03991\n\t* glyph03993\n\t* glyph03994\n\t* glyph03995\n\t* glyph03997\n\t* glyph03998\n\t* glyph03999\n\t* glyph04001\n\t* glyph04003\n\t* glyph04004\n\t* glyph04005\n\t* glyph04006\n\t* glyph04008\n\t* glyph04009\n\t* glyph04010\n\t* glyph04011\n\t* glyph04012\n\t* glyph04013\n\t* glyph04014\n\t* glyph04015\n\t* glyph04016\n\t* glyph04017\n\t* glyph04018\n\t* glyph04019\n\t* glyph04020\n\t* glyph04021\n\t* glyph04022\n\t* glyph04023\n\t* glyph04024\n\t* glyph04025\n\t* glyph04026\n\t* glyph04027\n\t* glyph04028\n\t* glyph04029\n\t* glyph04030\n\t* glyph04031\n\t* glyph04032\n\t* glyph04033\n\t* glyph04034\n\t* glyph04035\n\t* glyph04036\n\t* glyph04037\n\t* glyph04038\n\t* glyph04039\n\t* glyph04040\n\t* glyph04041\n\t* glyph04042\n\t* glyph04043\n\t* glyph04044\n\t* glyph04045\n\t* glyph04046\n\t* glyph04047\n\t* glyph04048\n\t* glyph04049\n\t* glyph04050\n\t* glyph04051\n\t* glyph04052\n\t* glyph04053\n\t* glyph04054\n\t* glyph04055\n\t* glyph04056\n\t* glyph04057\n\t* glyph04058\n\t* glyph04059\n\t* glyph04060\n\t* glyph04061\n\t* glyph04062\n\t* glyph04063\n\t* glyph04064\n\t* glyph04065\n\t* glyph04066\n\t* glyph04067\n\t* glyph04068\n\t* glyph04069\n\t* glyph04070\n\t* glyph04071\n\t* glyph04072\n\t* glyph04073\n\t* glyph04074\n\t* glyph04075\n\t* glyph04076\n\t* glyph04077\n\t* glyph04078\n\t* glyph04079\n\t* glyph04080\n\t* glyph04081\n\t* glyph04082\n\t* glyph04083\n\t* glyph04084\n\t* glyph04085\n\t* glyph04086\n\t* glyph04087\n\t* glyph04088\n\t* glyph04089\n\t* glyph04090\n\t* glyph04091\n\t* glyph04092\n\t* glyph04093\n\t* glyph04094\n\t* glyph04096\n\t* glyph04097\n\t* glyph04098\n\t* glyph04099\n\t* glyph04100\n\t* glyph04101\n\t* glyph04102\n\t* glyph04103\n\t* glyph04105\n\t* glyph04106\n\t* glyph04107\n\t* glyph04108\n\t* glyph04109\n\t* glyph04110\n\t* glyph04111\n\t* glyph04112\n\t* glyph04114\n\t* glyph04115\n\t* glyph04116\n\t* glyph04117\n\t* glyph04119\n\t* glyph04120\n\t* glyph04121\n\t* glyph04122\n\t* glyph04123\n\t* glyph04124\n\t* glyph04125\n\t* glyph04126\n\t* glyph04127\n\t* glyph04128\n\t* glyph04129\n\t* glyph04130\n\t* glyph04131\n\t* glyph04132\n\t* glyph04133\n\t* glyph04134\n\t* glyph04135\n\t* glyph04136\n\t* glyph04137\n\t* glyph04138\n\t* glyph04139\n\t* glyph04140\n\t* glyph04141\n\t* glyph04142\n\t* glyph04143\n\t* glyph04144\n\t* glyph04145\n\t* glyph04146\n\t* glyph04147\n\t* glyph04148\n\t* glyph04149\n\t* glyph04150\n\t* glyph04151\n\t* glyph04152\n\t* glyph04153\n\t* glyph04154\n\t* glyph04155\n\t* glyph04156\n\t* glyph04157\n\t* glyph04158\n\t* glyph04159\n\t* glyph04160\n\t* glyph04161\n\t* glyph04162\n\t* glyph04163\n\t* glyph04164\n\t* glyph04166\n\t* glyph04167\n\t* glyph04168\n\t* glyph04169\n\t* glyph04171\n\t* glyph04172\n\t* glyph04173\n\t* glyph04174\n\t* glyph04175\n\t* glyph04176\n\t* glyph04177\n\t* glyph04178\n\t* glyph04179\n\t* glyph04180\n\t* glyph04181\n\t* glyph04182\n\t* glyph04183\n\t* glyph04184\n\t* glyph04185\n\t* glyph04186\n\t* glyph04187\n\t* glyph04188\n\t* glyph04189\n\t* glyph04190\n\t* glyph04191\n\t* glyph04192\n\t* glyph04193\n\t* glyph04194\n\t* glyph04195\n\t* glyph04196\n\t* glyph04197\n\t* glyph04198\n\t* glyph04199\n\t* glyph04200\n\t* glyph04201\n\t* glyph04202\n\t* glyph04203\n\t* glyph04204\n\t* glyph04205\n\t* glyph04207\n\t* glyph04208\n\t* glyph04209\n\t* glyph04210\n\t* glyph04211\n\t* glyph04212\n\t* glyph04213\n\t* glyph04214\n\t* glyph04215\n\t* glyph04216\n\t* glyph04217\n\t* glyph04218\n\t* glyph04219\n\t* glyph04220\n\t* glyph04221\n\t* glyph04222\n\t* glyph04223\n\t* glyph04224\n\t* glyph04226\n\t* glyph04229\n\t* glyph04231\n\t* glyph04232\n\t* glyph04233\n\t* glyph04234\n\t* glyph04235\n\t* glyph04236\n\t* glyph04237\n\t* glyph04238\n\t* glyph04239\n\t* glyph04240\n\t* glyph04241\n\t* glyph04242\n\t* glyph04243\n\t* glyph04244\n\t* glyph04245\n\t* glyph04246\n\t* glyph04247\n\t* glyph04248\n\t* glyph04250\n\t* glyph04251\n\t* glyph04252\n\t* glyph04254\n\t* glyph04255\n\t* glyph04256\n\t* glyph04257\n\t* glyph04258\n\t* glyph04260\n\t* glyph04262\n\t* glyph04263\n\t* glyph04265\n\t* glyph04266\n\t* glyph04267\n\t* glyph04268\n\t* glyph04269\n\t* glyph04271\n\t* glyph04272\n\t* glyph04273\n\t* glyph04274\n\t* glyph04275\n\t* glyph04276\n\t* glyph04277\n\t* glyph04278\n\t* glyph04279\n\t* glyph04280\n\t* glyph04281\n\t* glyph04282\n\t* glyph04283\n\t* glyph04284\n\t* glyph04285\n\t* glyph04286\n\t* glyph04287\n\t* glyph04289\n\t* glyph04290\n\t* glyph04291\n\t* glyph04292\n\t* glyph04293\n\t* glyph04294\n\t* glyph04295\n\t* glyph04296\n\t* glyph04297\n\t* glyph04298\n\t* glyph04299\n\t* glyph04300\n\t* glyph04301\n\t* glyph04302\n\t* glyph04303\n\t* glyph04304\n\t* glyph04305\n\t* glyph04306\n\t* glyph04307\n\t* glyph04308\n\t* glyph04311\n\t* glyph04312\n\t* glyph04313\n\t* glyph04314\n\t* glyph04315\n\t* glyph04316\n\t* glyph04317\n\t* glyph04318\n\t* glyph04319\n\t* glyph04321\n\t* glyph04323\n\t* glyph04325\n\t* glyph04326\n\t* glyph04327\n\t* glyph04328\n\t* glyph04329\n\t* glyph04330\n\t* glyph04331\n\t* glyph04332\n\t* glyph04333\n\t* glyph04334\n\t* glyph04335\n\t* glyph04336\n\t* glyph04337\n\t* glyph04338\n\t* glyph04339\n\t* glyph04340\n\t* glyph04341\n\t* glyph04342\n\t* glyph04343\n\t* glyph04344\n\t* glyph04345\n\t* glyph04346\n\t* glyph04347\n\t* glyph04348\n\t* glyph04349\n\t* glyph04350\n\t* glyph04351\n\t* glyph04353\n\t* glyph04354\n\t* glyph04356\n\t* glyph04357\n\t* glyph04358\n\t* glyph04361\n\t* glyph04362\n\t* glyph04363\n\t* glyph04364\n\t* glyph04365\n\t* glyph04366\n\t* glyph04367\n\t* glyph04368\n\t* glyph04369\n\t* glyph04370\n\t* glyph04371\n\t* glyph04372\n\t* glyph04373\n\t* glyph04375\n\t* glyph04376\n\t* glyph04377\n\t* glyph04378\n\t* glyph04379\n\t* glyph04380\n\t* glyph04381\n\t* glyph04382\n\t* glyph04383\n\t* glyph04384\n\t* glyph04385\n\t* glyph04386\n\t* glyph04387\n\t* glyph04389\n\t* glyph04390\n\t* glyph04391\n\t* glyph04392\n\t* glyph04393\n\t* glyph04394\n\t* glyph04396\n\t* glyph04397\n\t* glyph04398\n\t* glyph04399\n\t* glyph04401\n\t* glyph04402\n\t* glyph04404\n\t* glyph04405\n\t* glyph04407\n\t* glyph04408\n\t* glyph04409\n\t* glyph04410\n\t* glyph04411\n\t* glyph04412\n\t* glyph04413\n\t* glyph04414\n\t* glyph04415\n\t* glyph04416\n\t* glyph04417\n\t* glyph04418\n\t* glyph04419\n\t* glyph04420\n\t* glyph04421\n\t* glyph04422\n\t* glyph04423\n\t* glyph04424\n\t* glyph04425\n\t* glyph04426\n\t* glyph04427\n\t* glyph04428\n\t* glyph04429\n\t* glyph04430\n\t* glyph04431\n\t* glyph04432\n\t* glyph04433\n\t* glyph04434\n\t* glyph04435\n\t* glyph04436\n\t* glyph04437\n\t* glyph04438\n\t* glyph04439\n\t* glyph04441\n\t* glyph04442\n\t* glyph04444\n\t* glyph04445\n\t* glyph04446\n\t* glyph04447\n\t* glyph04448\n\t* glyph04449\n\t* glyph04450\n\t* glyph04451\n\t* glyph04452\n\t* glyph04453\n\t* glyph04454\n\t* glyph04455\n\t* glyph04456\n\t* glyph04457\n\t* glyph04458\n\t* glyph04459\n\t* glyph04460\n\t* glyph04461\n\t* glyph04462\n\t* glyph04463\n\t* glyph04464\n\t* glyph04465\n\t* glyph04466\n\t* glyph04467\n\t* glyph04468\n\t* glyph04469\n\t* glyph04470\n\t* glyph04471\n\t* glyph04472\n\t* glyph04473\n\t* glyph04474\n\t* glyph04475\n\t* glyph04476\n\t* glyph04477\n\t* glyph04478\n\t* glyph04479\n\t* glyph04480\n\t* glyph04481\n\t* glyph04482\n\t* glyph04483\n\t* glyph04484\n\t* glyph04485\n\t* glyph04488\n\t* glyph04489\n\t* glyph04490\n\t* glyph04491\n\t* glyph04492\n\t* glyph04493\n\t* glyph04494\n\t* glyph04495\n\t* glyph04496\n\t* glyph04497\n\t* glyph04498\n\t* glyph04499\n\t* glyph04500\n\t* glyph04501\n\t* glyph04502\n\t* glyph04503\n\t* glyph04504\n\t* glyph04505\n\t* glyph04506\n\t* glyph04507\n\t* glyph04508\n\t* glyph04509\n\t* glyph04510\n\t* glyph04511\n\t* glyph04512\n\t* glyph04513\n\t* glyph04514\n\t* glyph04515\n\t* glyph04516\n\t* glyph04517\n\t* glyph04518\n\t* glyph04519\n\t* glyph04520\n\t* glyph04521\n\t* glyph04522\n\t* glyph04523\n\t* glyph04524\n\t* glyph04525\n\t* glyph04526\n\t* glyph04527\n\t* glyph04528\n\t* glyph04529\n\t* glyph04530\n\t* glyph04531\n\t* glyph04533\n\t* glyph04534\n\t* glyph04535\n\t* glyph04536\n\t* glyph04537\n\t* glyph04538\n\t* glyph04539\n\t* glyph04540\n\t* glyph04541\n\t* glyph04542\n\t* glyph04543\n\t* glyph04544\n\t* glyph04548\n\t* glyph04549\n\t* glyph04551\n\t* glyph04552\n\t* glyph04553\n\t* glyph04554\n\t* glyph04555\n\t* glyph04556\n\t* glyph04557\n\t* glyph04558\n\t* glyph04559\n\t* glyph04560\n\t* glyph04561\n\t* glyph04562\n\t* glyph04563\n\t* glyph04564\n\t* glyph04565\n\t* glyph04566\n\t* glyph04567\n\t* glyph04568\n\t* glyph04569\n\t* glyph04570\n\t* glyph04571\n\t* glyph04572\n\t* glyph04573\n\t* glyph04574\n\t* glyph04575\n\t* glyph04576\n\t* glyph04577\n\t* glyph04578\n\t* glyph04579\n\t* glyph04580\n\t* glyph04581\n\t* glyph04582\n\t* glyph04583\n\t* glyph04584\n\t* glyph04585\n\t* glyph04586\n\t* glyph04587\n\t* glyph04588\n\t* glyph04590\n\t* glyph04591\n\t* glyph04592\n\t* glyph04595\n\t* glyph04596\n\t* glyph04597\n\t* glyph04598\n\t* glyph04599\n\t* glyph04600\n\t* glyph04601\n\t* glyph04602\n\t* glyph04603\n\t* glyph04604\n\t* glyph04606\n\t* glyph04607\n\t* glyph04608\n\t* glyph04609\n\t* glyph04610\n\t* glyph04611\n\t* glyph04612\n\t* glyph04613\n\t* glyph04614\n\t* glyph04615\n\t* glyph04616\n\t* glyph04617\n\t* glyph04618\n\t* glyph04619\n\t* glyph04620\n\t* glyph04621\n\t* glyph04622\n\t* glyph04623\n\t* glyph04624\n\t* glyph04625\n\t* glyph04626\n\t* glyph04627\n\t* glyph04628\n\t* glyph04629\n\t* glyph04630\n\t* glyph04631\n\t* glyph04632\n\t* glyph04633\n\t* glyph04634\n\t* glyph04635\n\t* glyph04636\n\t* glyph04637\n\t* glyph04638\n\t* glyph04639\n\t* glyph04640\n\t* glyph04641\n\t* glyph04642\n\t* glyph04643\n\t* glyph04644\n\t* glyph04645\n\t* glyph04646\n\t* glyph04647\n\t* glyph04648\n\t* glyph04649\n\t* glyph04650\n\t* glyph04653\n\t* glyph04654\n\t* glyph04655\n\t* glyph04656\n\t* glyph04657\n\t* glyph04658\n\t* glyph04659\n\t* glyph04660\n\t* glyph04661\n\t* glyph04663\n\t* glyph04667\n\t* glyph04668\n\t* glyph04672\n\t* glyph04674\n\t* glyph04675\n\t* glyph04676\n\t* glyph04677\n\t* glyph04681\n\t* glyph04682\n\t* glyph04683\n\t* glyph04684\n\t* glyph04685\n\t* glyph04686\n\t* glyph04688\n\t* glyph04690\n\t* glyph04691\n\t* glyph04694\n\t* glyph04695\n\t* glyph04696\n\t* glyph04697\n\t* glyph04698\n\t* glyph04699\n\t* glyph04702\n\t* glyph04703\n\t* glyph04705\n\t* glyph04706\n\t* glyph04708\n\t* glyph04709\n\t* glyph04710\n\t* glyph04711\n\t* glyph04712\n\t* glyph04714\n\t* glyph04715\n\t* glyph04717\n\t* glyph04718\n\t* glyph04719\n\t* glyph04721\n\t* glyph04722\n\t* glyph04723\n\t* glyph04724\n\t* glyph04727\n\t* glyph04729\n\t* glyph04731\n\t* glyph04732\n\t* glyph04733\n\t* glyph04735\n\t* glyph04737\n\t* glyph04738\n\t* glyph04739\n\t* glyph04740\n\t* glyph04741\n\t* glyph04742\n\t* glyph04743\n\t* glyph04744\n\t* glyph04745\n\t* glyph04747\n\t* glyph04748\n\t* glyph04749\n\t* glyph04750\n\t* glyph04751\n\t* glyph04753\n\t* glyph04757\n\t* glyph04758\n\t* glyph04759\n\t* glyph04760\n\t* glyph04762\n\t* glyph04763\n\t* glyph04764\n\t* glyph04766\n\t* glyph04768\n\t* glyph04769\n\t* glyph04770\n\t* glyph04771\n\t* glyph04772\n\t* glyph04774\n\t* glyph04775\n\t* glyph04776\n\t* glyph04777\n\t* glyph04778\n\t* glyph04779\n\t* glyph04780\n\t* glyph04783\n\t* glyph04784\n\t* glyph04785\n\t* glyph04786\n\t* glyph04787\n\t* glyph04789\n\t* glyph04790\n\t* glyph04791\n\t* glyph04792\n\t* glyph04793\n\t* glyph04794\n\t* glyph04795\n\t* glyph04796\n\t* glyph04797\n\t* glyph04798\n\t* glyph04799\n\t* glyph04800\n\t* glyph04801\n\t* glyph04802\n\t* glyph04803\n\t* glyph04804\n\t* glyph04805\n\t* glyph04806\n\t* glyph04807\n\t* glyph04808\n\t* glyph04809\n\t* glyph04810\n\t* glyph04811\n\t* glyph04812\n\t* glyph04813\n\t* glyph04814\n\t* glyph04815\n\t* glyph04816\n\t* glyph04817\n\t* glyph04818\n\t* glyph04819\n\t* glyph04820\n\t* glyph04822\n\t* glyph04823\n\t* glyph04824\n\t* glyph04825\n\t* glyph04826\n\t* glyph04827\n\t* glyph04828\n\t* glyph04829\n\t* glyph04830\n\t* glyph04837\n\t* glyph04838\n\t* glyph04839\n\t* glyph04840\n\t* glyph04841\n\t* glyph04842\n\t* glyph04843\n\t* glyph04844\n\t* glyph04845\n\t* glyph04846\n\t* glyph04847\n\t* glyph04848\n\t* glyph04849\n\t* glyph04850\n\t* glyph04851\n\t* glyph04852\n\t* glyph04853\n\t* glyph04854\n\t* glyph04855\n\t* glyph04856\n\t* glyph04857\n\t* glyph04858\n\t* glyph04859\n\t* glyph04860\n\t* glyph04861\n\t* glyph04862\n\t* glyph04863\n\t* glyph04864\n\t* glyph04865\n\t* glyph04866\n\t* glyph04867\n\t* glyph04868\n\t* glyph04869\n\t* glyph04870\n\t* glyph04871\n\t* glyph04872\n\t* glyph04873\n\t* glyph04874\n\t* glyph04875\n\t* glyph04876\n\t* glyph04877\n\t* glyph04878\n\t* glyph04885\n\t* glyph04886\n\t* glyph04887\n\t* glyph04888\n\t* glyph04889\n\t* glyph04890\n\t* glyph04897\n\t* glyph04898\n\t* glyph04899\n\t* glyph04900\n\t* glyph04901\n\t* glyph04902\n\t* glyph04903\n\t* glyph04904\n\t* glyph04905\n\t* glyph04906\n\t* glyph04907\n\t* glyph04908\n\t* glyph04909\n\t* glyph04910\n\t* glyph04911\n\t* glyph04912\n\t* glyph04913\n\t* glyph04914\n\t* glyph04915\n\t* glyph04916\n\t* glyph04918\n\t* glyph04919\n\t* glyph04920\n\t* glyph04921\n\t* glyph04923\n\t* glyph04925\n\t* glyph04926\n\t* glyph04927\n\t* glyph04928\n\t* glyph04929\n\t* glyph04930\n\t* glyph04931\n\t* glyph04932\n\t* glyph04933\n\t* glyph04934\n\t* glyph04935\n\t* glyph04936\n\t* glyph04937\n\t* glyph04938\n\t* glyph04939\n\t* glyph04940\n\t* glyph04941\n\t* glyph04942\n\t* glyph04943\n\t* glyph04944\n\t* glyph04945\n\t* glyph04946\n\t* glyph04947\n\t* glyph04948\n\t* glyph04949\n\t* glyph04950\n\t* glyph04952\n\t* glyph04953\n\t* glyph04954\n\t* glyph04955\n\t* glyph04956\n\t* glyph04957\n\t* glyph04959\n\t* glyph04960\n\t* glyph04961\n\t* glyph04962\n\t* glyph04963\n\t* glyph04964\n\t* glyph04965\n\t* glyph04966\n\t* glyph04967\n\t* glyph04968\n\t* glyph04969\n\t* glyph04970\n\t* glyph04971\n\t* glyph04972\n\t* glyph04973\n\t* glyph04974\n\t* glyph04975\n\t* glyph04976\n\t* glyph04977\n\t* glyph04978\n\t* glyph04979\n\t* glyph04980\n\t* glyph04981\n\t* glyph04982\n\t* glyph04983\n\t* glyph04984\n\t* glyph04985\n\t* glyph04986\n\t* glyph04987\n\t* glyph04988\n\t* glyph04989\n\t* glyph04990\n\t* glyph04991\n\t* glyph04992\n\t* glyph04993\n\t* glyph04994\n\t* glyph04997\n\t* glyph05000\n\t* glyph05001\n\t* glyph05002\n\t* glyph05003\n\t* glyph05007\n\t* glyph05008\n\t* glyph05009\n\t* glyph05010\n\t* glyph05013\n\t* glyph05014\n\t* glyph05015\n\t* glyph05016\n\t* glyph05017\n\t* glyph05020\n\t* glyph05021\n\t* glyph05022\n\t* glyph05026\n\t* glyph05027\n\t* glyph05028\n\t* glyph05031\n\t* glyph05033\n\t* glyph05034\n\t* glyph05037\n\t* glyph05038\n\t* glyph05039\n\t* glyph05040\n\t* glyph05041\n\t* glyph05042\n\t* glyph05043\n\t* glyph05044\n\t* glyph05045\n\t* glyph05048\n\t* glyph05049\n\t* glyph05050\n\t* glyph05053\n\t* glyph05054\n\t* glyph05055\n\t* glyph05056\n\t* glyph05059\n\t* glyph05061\n\t* glyph05062\n\t* glyph05063\n\t* glyph05064\n\t* glyph05065\n\t* glyph05067\n\t* glyph05069\n\t* glyph05070\n\t* glyph05071\n\t* glyph05072\n\t* glyph05073\n\t* glyph05075\n\t* glyph05076\n\t* glyph05077\n\t* glyph05078\n\t* glyph05081\n\t* glyph05083\n\t* glyph05084\n\t* glyph05086\n\t* glyph05087\n\t* glyph05088\n\t* glyph05089\n\t* glyph05090\n\t* glyph05091\n\t* glyph05095\n\t* glyph05096\n\t* glyph05098\n\t* glyph05101\n\t* glyph05102\n\t* glyph05103\n\t* glyph05104\n\t* glyph05105\n\t* glyph05108\n\t* glyph05109\n\t* glyph05110\n\t* glyph05114\n\t* glyph05115\n\t* glyph05116\n\t* glyph05118\n\t* glyph05119\n\t* glyph05121\n\t* glyph05122\n\t* glyph05125\n\t* glyph05126\n\t* glyph05127\n\t* glyph05128\n\t* glyph05129\n\t* glyph05130\n\t* glyph05131\n\t* glyph05133\n\t* glyph05136\n\t* glyph05137\n\t* glyph05138\n\t* glyph05140\n\t* glyph05141\n\t* glyph05143\n\t* glyph05144\n\t* glyph05147\n\t* glyph05148\n\t* glyph05149\n\t* glyph05150\n\t* glyph05151\n\t* glyph05154\n\t* glyph05155\n\t* glyph05156\n\t* glyph05158\n\t* glyph05159\n\t* glyph05160\n\t* glyph05162\n\t* glyph05163\n\t* glyph05165\n\t* glyph05166\n\t* glyph05167\n\t* glyph05168\n\t* glyph05170\n\t* glyph05171\n\t* glyph05172\n\t* glyph05173\n\t* glyph05176\n\t* glyph05177\n\t* glyph05178\n\t* glyph05179\n\t* glyph05180\n\t* glyph05182\n\t* glyph05183\n\t* glyph05184\n\t* glyph05186\n\t* glyph05187\n\t* glyph05188\n\t* glyph05189\n\t* glyph05190\n\t* glyph05191\n\t* glyph05192\n\t* glyph05193\n\t* glyph05196\n\t* glyph05197\n\t* glyph05198\n\t* glyph05200\n\t* glyph05201\n\t* glyph05203\n\t* glyph05205\n\t* glyph05206\n\t* glyph05207\n\t* glyph05208\n\t* glyph05211\n\t* glyph05212\n\t* glyph05213\n\t* glyph05214\n\t* glyph05215\n\t* glyph05216\n\t* glyph05217\n\t* glyph05218\n\t* glyph05219\n\t* glyph05220\n\t* glyph05221\n\t* glyph05222\n\t* glyph05223\n\t* glyph05224\n\t* glyph05226\n\t* glyph05227\n\t* glyph05228\n\t* glyph05230\n\t* glyph05231\n\t* glyph05232\n\t* glyph05233\n\t* glyph05234\n\t* glyph05235\n\t* glyph05236\n\t* glyph05237\n\t* glyph05238\n\t* glyph05239\n\t* glyph05242\n\t* glyph05243\n\t* glyph05244\n\t* glyph05245\n\t* glyph05246\n\t* glyph05247\n\t* glyph05248\n\t* glyph05249\n\t* glyph05250\n\t* glyph05251\n\t* glyph05253\n\t* glyph05254\n\t* glyph05255\n\t* glyph05256\n\t* glyph05258\n\t* glyph05259\n\t* glyph05260\n\t* glyph05261\n\t* glyph05262\n\t* glyph05263\n\t* glyph05265\n\t* glyph05268\n\t* glyph05269\n\t* glyph05270\n\t* glyph05273\n\t* glyph05274\n\t* glyph05275\n\t* glyph05276\n\t* glyph05279\n\t* glyph05281\n\t* glyph05282\n\t* glyph05283\n\t* glyph05286\n\t* glyph05287\n\t* glyph05290\n\t* glyph05291\n\t* glyph05292\n\t* glyph05295\n\t* glyph05296\n\t* glyph05297\n\t* glyph05298\n\t* glyph05301\n\t* glyph05303\n\t* glyph05306\n\t* glyph05307\n\t* glyph05308\n\t* glyph05310\n\t* glyph05311\n\t* glyph05314\n\t* glyph05315\n\t* glyph05316\n\t* glyph05318\n\t* glyph05320\n\t* glyph05321\n\t* glyph05322\n\t* glyph05323\n\t* glyph05324\n\t* glyph05325\n\t* glyph05327\n\t* glyph05330\n\t* glyph05331\n\t* glyph05334\n\t* glyph05335\n\t* glyph05336\n\t* glyph05339\n\t* glyph05340\n\t* glyph05341\n\t* glyph05342\n\t* glyph05345\n\t* glyph05347\n\t* glyph05348\n\t* glyph05349\n\t* glyph05352\n\t* glyph05353\n\t* glyph05354\n\t* glyph05355\n\t* glyph05356\n\t* glyph05357\n\t* glyph05358\n\t* glyph05360\n\t* glyph05361\n\t* glyph05362\n\t* glyph05363\n\t* glyph05364\n\t* glyph05366\n\t* glyph05367\n\t* glyph05368\n\t* glyph05370\n\t* glyph05371\n\t* glyph05372\n\t* glyph05373\n\t* glyph05375\n\t* glyph05376\n\t* glyph05378\n\t* glyph05379\n\t* glyph05380\n\t* glyph05381\n\t* glyph05382\n\t* glyph05383\n\t* glyph05384\n\t* glyph05385\n\t* glyph05386\n\t* glyph05387\n\t* glyph05388\n\t* glyph05389\n\t* glyph05390\n\t* glyph05391\n\t* glyph05392\n\t* glyph05393\n\t* glyph05394\n\t* glyph05395\n\t* glyph05397\n\t* glyph05398\n\t* glyph05399\n\t* glyph05400\n\t* glyph05401\n\t* glyph05402\n\t* glyph05403\n\t* glyph05404\n\t* glyph05405\n\t* glyph05406\n\t* glyph05407\n\t* glyph05409\n\t* glyph05410\n\t* glyph05412\n\t* glyph05414\n\t* glyph05415\n\t* glyph05416\n\t* glyph05417\n\t* glyph05418\n\t* glyph05419\n\t* glyph05420\n\t* glyph05421\n\t* glyph05422\n\t* glyph05423\n\t* glyph05424\n\t* glyph05425\n\t* glyph05426\n\t* glyph05427\n\t* glyph05428\n\t* glyph05429\n\t* glyph05430\n\t* glyph05431\n\t* glyph05432\n\t* glyph05433\n\t* glyph05434\n\t* glyph05435\n\t* glyph05436\n\t* glyph05437\n\t* glyph05438\n\t* glyph05439\n\t* glyph05440\n\t* glyph05441\n\t* glyph05442\n\t* glyph05443\n\t* glyph05444\n\t* glyph05445\n\t* glyph05446\n\t* glyph05447\n\t* glyph05448\n\t* glyph05449\n\t* glyph05450\n\t* glyph05451\n\t* glyph05452\n\t* glyph05453\n\t* glyph05454\n\t* glyph05455\n\t* glyph05456\n\t* glyph05457\n\t* glyph05458\n\t* glyph05459\n\t* glyph05460\n\t* glyph05461\n\t* glyph05462\n\t* glyph05463\n\t* glyph05464\n\t* glyph05465\n\t* glyph05467\n\t* glyph05468\n\t* glyph05469\n\t* glyph05470\n\t* glyph05471\n\t* glyph05472\n\t* glyph05473\n\t* glyph05474\n\t* glyph05475\n\t* glyph05476\n\t* glyph05477\n\t* glyph05478\n\t* glyph05479\n\t* glyph05480\n\t* glyph05481\n\t* glyph05482\n\t* glyph05483\n\t* glyph05484\n\t* glyph05485\n\t* glyph05486\n\t* glyph05487\n\t* glyph05488\n\t* glyph05489\n\t* glyph05490\n\t* glyph05491\n\t* glyph05492\n\t* glyph05493\n\t* glyph05494\n\t* glyph05495\n\t* glyph05496\n\t* glyph05497\n\t* glyph05498\n\t* glyph05499\n\t* glyph05500\n\t* glyph05501\n\t* glyph05502\n\t* glyph05503\n\t* glyph05504\n\t* glyph05505\n\t* glyph05506\n\t* glyph05507\n\t* glyph05508\n\t* glyph05509\n\t* glyph05510\n\t* glyph05511\n\t* glyph05512\n\t* glyph05513\n\t* glyph05514\n\t* glyph05515\n\t* glyph05516\n\t* glyph05518\n\t* glyph05519\n\t* glyph05520\n\t* glyph05521\n\t* glyph05522\n\t* glyph05523\n\t* glyph05524\n\t* glyph05525\n\t* glyph05526\n\t* glyph05529\n\t* glyph05530\n\t* glyph05531\n\t* glyph05533\n\t* glyph05534\n\t* glyph05535\n\t* glyph05536\n\t* glyph05537\n\t* glyph05538\n\t* glyph05539\n\t* glyph05540\n\t* glyph05541\n\t* glyph05542\n\t* glyph05543\n\t* glyph05544\n\t* glyph05545\n\t* glyph05546\n\t* glyph05547\n\t* glyph05548\n\t* glyph05549\n\t* glyph05550\n\t* glyph05552\n\t* glyph05553\n\t* glyph05554\n\t* glyph05555\n\t* glyph05556\n\t* glyph05557\n\t* glyph05558\n\t* glyph05561\n\t* glyph05562\n\t* glyph05563\n\t* glyph05564\n\t* glyph05565\n\t* glyph05566\n\t* glyph05567\n\t* glyph05568\n\t* glyph05569\n\t* glyph05570\n\t* glyph05571\n\t* glyph05572\n\t* glyph05573\n\t* glyph05574\n\t* glyph05575\n\t* glyph05576\n\t* glyph05577\n\t* glyph05578\n\t* glyph05579\n\t* glyph05580\n\t* glyph05581\n\t* glyph05582\n\t* glyph05583\n\t* glyph05584\n\t* glyph05585\n\t* glyph05586\n\t* glyph05587\n\t* glyph05588\n\t* glyph05589\n\t* glyph05590\n\t* glyph05591\n\t* glyph05593\n\t* glyph05594\n\t* glyph05595\n\t* glyph05596\n\t* glyph05597\n\t* glyph05598\n\t* glyph05599\n\t* glyph05600\n\t* glyph05601\n\t* glyph05604\n\t* glyph05605\n\t* glyph05606\n\t* glyph05607\n\t* glyph05608\n\t* glyph05609\n\t* glyph05610\n\t* glyph05611\n\t* glyph05612\n\t* glyph05613\n\t* glyph05614\n\t* glyph05615\n\t* glyph05616\n\t* glyph05617\n\t* glyph05618\n\t* glyph05619\n\t* glyph05620\n\t* glyph05621\n\t* glyph05622\n\t* glyph05623\n\t* glyph05624\n\t* glyph05625\n\t* glyph05626\n\t* glyph05627\n\t* glyph05628\n\t* glyph05629\n\t* glyph05630\n\t* glyph05631\n\t* glyph05633\n\t* glyph05634\n\t* glyph05635\n\t* glyph05636\n\t* glyph05637\n\t* glyph05638\n\t* glyph05639\n\t* glyph05640\n\t* glyph05641\n\t* glyph05642\n\t* glyph05643\n\t* glyph05644\n\t* glyph05645\n\t* glyph05646\n\t* glyph05647\n\t* glyph05648\n\t* glyph05649\n\t* glyph05650\n\t* glyph05651\n\t* glyph05652\n\t* glyph05653\n\t* glyph05654\n\t* glyph05655\n\t* glyph05656\n\t* glyph05657\n\t* glyph05658\n\t* glyph05659\n\t* glyph05660\n\t* glyph05661\n\t* glyph05662\n\t* glyph05663\n\t* glyph05664\n\t* glyph05665\n\t* glyph05666\n\t* glyph05667\n\t* glyph05668\n\t* glyph05669\n\t* glyph05670\n\t* glyph05671\n\t* glyph05672\n\t* glyph05673\n\t* glyph05674\n\t* glyph05675\n\t* glyph05677\n\t* glyph05678\n\t* glyph05680\n\t* glyph05681\n\t* glyph05682\n\t* glyph05683\n\t* glyph05684\n\t* glyph05687\n\t* glyph05688\n\t* glyph05689\n\t* glyph05690\n\t* glyph05691\n\t* glyph05692\n\t* glyph05693\n\t* glyph05694\n\t* glyph05695\n\t* glyph05696\n\t* glyph05699\n\t* glyph05700\n\t* glyph05701\n\t* glyph05702\n\t* glyph05704\n\t* glyph05705\n\t* glyph05706\n\t* glyph05707\n\t* glyph05708\n\t* glyph05709\n\t* glyph05710\n\t* glyph05711\n\t* glyph05712\n\t* glyph05713\n\t* glyph05714\n\t* glyph05715\n\t* glyph05716\n\t* glyph05717\n\t* glyph05719\n\t* glyph05720\n\t* glyph05721\n\t* glyph05722\n\t* glyph05723\n\t* glyph05724\n\t* glyph05725\n\t* glyph05727\n\t* glyph05728\n\t* glyph05729\n\t* glyph05730\n\t* glyph05731\n\t* glyph05733\n\t* glyph05734\n\t* glyph05736\n\t* glyph05737\n\t* glyph05738\n\t* glyph05739\n\t* glyph05740\n\t* glyph05741\n\t* glyph05742\n\t* glyph05744\n\t* glyph05746\n\t* glyph05748\n\t* glyph05750\n\t* glyph05751\n\t* glyph05752\n\t* glyph05754\n\t* glyph05755\n\t* glyph05758\n\t* glyph05762\n\t* glyph05763\n\t* glyph05764\n\t* glyph05765\n\t* glyph05766\n\t* glyph05767\n\t* glyph05768\n\t* glyph05769\n\t* glyph05770\n\t* glyph05771\n\t* glyph05772\n\t* glyph05773\n\t* glyph05774\n\t* glyph05777\n\t* glyph05778\n\t* glyph05779\n\t* glyph05781\n\t* glyph05782\n\t* glyph05783\n\t* glyph05784\n\t* glyph05785\n\t* glyph05786\n\t* glyph05787\n\t* glyph05788\n\t* glyph05789\n\t* glyph05790\n\t* glyph05791\n\t* glyph05792\n\t* glyph05793\n\t* glyph05794\n\t* glyph05795\n\t* glyph05796\n\t* glyph05797\n\t* glyph05798\n\t* glyph05799\n\t* glyph05800\n\t* glyph05801\n\t* glyph05802\n\t* glyph05803\n\t* glyph05804\n\t* glyph05805\n\t* glyph05806\n\t* glyph05807\n\t* glyph05808\n\t* glyph05809\n\t* glyph05810\n\t* glyph05811\n\t* glyph05812\n\t* glyph05814\n\t* glyph05815\n\t* glyph05816\n\t* glyph05817\n\t* glyph05822\n\t* glyph05823\n\t* glyph05824\n\t* glyph05825\n\t* glyph05826\n\t* glyph05827\n\t* glyph05828\n\t* glyph05829\n\t* glyph05831\n\t* glyph05832\n\t* glyph05833\n\t* glyph05834\n\t* glyph05835\n\t* glyph05836\n\t* glyph05837\n\t* glyph05839\n\t* glyph05840\n\t* glyph05841\n\t* glyph05843\n\t* glyph05845\n\t* glyph05847\n\t* glyph05848\n\t* glyph05851\n\t* glyph05852\n\t* glyph05853\n\t* glyph05855\n\t* glyph05856\n\t* glyph05857\n\t* glyph05858\n\t* glyph05859\n\t* glyph05860\n\t* glyph05861\n\t* glyph05862\n\t* glyph05863\n\t* glyph05864\n\t* glyph05865\n\t* glyph05866\n\t* glyph05867\n\t* glyph05868\n\t* glyph05869\n\t* glyph05870\n\t* glyph05871\n\t* glyph05872\n\t* glyph05873\n\t* glyph05874\n\t* glyph05875\n\t* glyph05876\n\t* glyph05877\n\t* glyph05878\n\t* glyph05879\n\t* glyph05880\n\t* glyph05881\n\t* glyph05882\n\t* glyph05883\n\t* glyph05884\n\t* glyph05885\n\t* glyph05887\n\t* glyph05888\n\t* glyph05889\n\t* glyph05891\n\t* glyph05892\n\t* glyph05893\n\t* glyph05894\n\t* glyph05896\n\t* glyph05897\n\t* glyph05898\n\t* glyph05899\n\t* glyph05900\n\t* glyph05901\n\t* glyph05902\n\t* glyph05903\n\t* glyph05904\n\t* glyph05905\n\t* glyph05906\n\t* glyph05908\n\t* glyph05910\n\t* glyph05911\n\t* glyph05912\n\t* glyph05913\n\t* glyph05915\n\t* glyph05918\n\t* glyph05919\n\t* glyph05921\n\t* glyph05922\n\t* glyph05923\n\t* glyph05924\n\t* glyph05925\n\t* glyph05926\n\t* glyph05927\n\t* glyph05928\n\t* glyph05929\n\t* glyph05930\n\t* glyph05931\n\t* glyph05933\n\t* glyph05934\n\t* glyph05935\n\t* glyph05936\n\t* glyph05937\n\t* glyph05939\n\t* glyph05940\n\t* glyph05941\n\t* glyph05942\n\t* glyph05943\n\t* glyph05944\n\t* glyph05945\n\t* glyph05947\n\t* glyph05948\n\t* glyph05949\n\t* glyph05950\n\t* glyph05951\n\t* glyph05952\n\t* glyph05953\n\t* glyph05954\n\t* glyph05956\n\t* glyph05957\n\t* glyph05958\n\t* glyph05959\n\t* glyph05960\n\t* glyph05961\n\t* glyph05962\n\t* glyph05963\n\t* glyph05964\n\t* glyph05965\n\t* glyph05966\n\t* glyph05967\n\t* glyph05968\n\t* glyph05969\n\t* glyph05970\n\t* glyph05971\n\t* glyph05972\n\t* glyph05973\n\t* glyph05974\n\t* glyph05975\n\t* glyph05976\n\t* glyph05977\n\t* glyph05978\n\t* glyph05979\n\t* glyph05980\n\t* glyph05981\n\t* glyph05982\n\t* glyph05984\n\t* glyph05985\n\t* glyph05986\n\t* glyph05987\n\t* glyph05988\n\t* glyph05989\n\t* glyph05990\n\t* glyph05991\n\t* glyph05992\n\t* glyph05993\n\t* glyph05994\n\t* glyph05995\n\t* glyph05996\n\t* glyph05997\n\t* glyph05998\n\t* glyph05999\n\t* glyph06000\n\t* glyph06001\n\t* glyph06003\n\t* glyph06004\n\t* glyph06006\n\t* glyph06008\n\t* glyph06009\n\t* glyph06011\n\t* glyph06012\n\t* glyph06013\n\t* glyph06014\n\t* glyph06015\n\t* glyph06016\n\t* glyph06017\n\t* glyph06018\n\t* glyph06019\n\t* glyph06021\n\t* glyph06023\n\t* glyph06024\n\t* glyph06025\n\t* glyph06026\n\t* glyph06028\n\t* glyph06029\n\t* glyph06031\n\t* glyph06034\n\t* glyph06035\n\t* glyph06036\n\t* glyph06038\n\t* glyph06039\n\t* glyph06042\n\t* glyph06044\n\t* glyph06045\n\t* glyph06046\n\t* glyph06047\n\t* glyph06048\n\t* glyph06049\n\t* glyph06050\n\t* glyph06051\n\t* glyph06052\n\t* glyph06053\n\t* glyph06054\n\t* glyph06055\n\t* glyph06056\n\t* glyph06057\n\t* glyph06058\n\t* glyph06059\n\t* glyph06060\n\t* glyph06061\n\t* glyph06062\n\t* glyph06063\n\t* glyph06064\n\t* glyph06065\n\t* glyph06066\n\t* glyph06067\n\t* glyph06068\n\t* glyph06069\n\t* glyph06070\n\t* glyph06071\n\t* glyph06072\n\t* glyph06073\n\t* glyph06074\n\t* glyph06075\n\t* glyph06076\n\t* glyph06077\n\t* glyph06078\n\t* glyph06079\n\t* glyph06080\n\t* glyph06081\n\t* glyph06082\n\t* glyph06083\n\t* glyph06084\n\t* glyph06085\n\t* glyph06086\n\t* glyph06087\n\t* glyph06088\n\t* glyph06089\n\t* glyph06090\n\t* glyph06091\n\t* glyph06092\n\t* glyph06093\n\t* glyph06094\n\t* glyph06095\n\t* glyph06096\n\t* glyph06097\n\t* glyph06098\n\t* glyph06099\n\t* glyph06100\n\t* glyph06101\n\t* glyph06102\n\t* glyph06103\n\t* glyph06104\n\t* glyph06105\n\t* glyph06106\n\t* glyph06107\n\t* glyph06108\n\t* glyph06109\n\t* glyph06110\n\t* glyph06111\n\t* glyph06112\n\t* glyph06113\n\t* glyph06114\n\t* glyph06115\n\t* glyph06116\n\t* glyph06599\n\t* glyph06613\n\t* glyph06614\n\t* glyph06615 and glyph06616",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "result": "WARN"
                },
                {
                    "description": "Checking direction of slnt axis angles",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/slant_direction>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The 'slnt' axis values are defined as negative values for a clockwise (right)\n        lean, and positive values for counter-clockwise lean. This is counter-intuitive\n        for many designers who are used to think of a positive slant as a lean to\n        the right.\n\n        This check ensures that the slant axis direction is consistent with the specs.\n\n        https://docs.microsoft.com/en-us/typography/opentype/spec/dvaraxistag_slnt\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check font names are correct",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/font_names>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font names are good:\n\n| nameID | current | expected |\n| :--- | :--- | :--- |\n| Family Name | Amiri | Amiri |\n| Subfamily Name | Italic | Italic |\n| Full Name | Amiri Italic | Amiri Italic |\n| Poscript Name | Amiri-Italic | Amiri-Italic |",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Google Fonts has several rules which need to be adhered to when\n        setting a font's name table. Please read:\n        https://googlefonts.github.io/gf-guide/statics.html#supported-styles\n        https://googlefonts.github.io/gf-guide/statics.html#style-linking\n        https://googlefonts.github.io/gf-guide/statics.html#unsupported-styles\n        https://googlefonts.github.io/gf-guide/statics.html#single-weight-families\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Copyright field for this font on METADATA.pb matches all copyright notice entries on the name table ?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/nameid/copyright>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Copyright field for this font on METADATA.pb matches copyright notice entries on the name table.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Font has all mandatory 'name' table entries?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/mandatory_entries>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font contains values for all mandatory name table entries.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Length of copyright notice must not exceed 500 characters.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/copyright_length>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "All copyright notice name entries on the 'name' table are shorter than 500 characters.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This is an arbitrary max length for the copyright notice field of the name\n        table. We simply don't want such notices to be too long. Typically such notices\n        are actually much shorter than this with a length of roughly 70 or 80\n        characters.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check for font-v versioning.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/fontv>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Version string is: \"Version 1.000\"\nThe version string must ideally include a git commit hash and either a \"dev\" or a \"release\" suffix such as in the example below:\n\"Version 1.3; git-0d08353-release\" [code: bad-format]",
                            "status": "INFO",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The git sha1 tagging and dev/release features of Source Foundry `font-v` tool\n        are awesome and we would love to consider upstreaming the approach into\n        fontmake someday. For now we only emit an INFO if a given font does not yet\n        follow the experimental versioning style, but at some point we may start\n        enforcing it.\n    ",
                    "result": "INFO"
                },
                {
                    "description": "Check glyphs do not have components which are themselves components.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/glyf_nested_components>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Glyphs do not contain nested components.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        There have been bugs rendering variable fonts with nested components.\n        Additionally, some static fonts with nested components have been reported\n        to have rendering and printing issues.\n\n        For more info, see:\n        * https://github.com/fonttools/fontbakery/issues/2961\n        * https://github.com/arrowtype/recursive/issues/412\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check a static ttf can be generated from a variable font.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/generate_static>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Google Fonts may serve static fonts which have been generated from variable\n        fonts. This test will attempt to generate a static ttf using fontTool's\n        varLib mutator.\n\n        The target font will be the mean of each axis e.g:\n\n        ## VF font axes\n\n        - min weight, max weight = 400, 800\n\n        - min width, max width = 50, 100\n\n        ## Target Instance\n\n        - weight = 600\n\n        - width = 75\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check that variable fonts have an HVAR table.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/has_HVAR>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Not having a HVAR table can lead to costly text-layout operations on some\n        platforms, which we want to avoid.\n\n        So, all variable fonts on the Google Fonts collection should have an HVAR\n        with valid values.\n\n        More info on the HVAR table can be found at:\n        https://docs.microsoft.com/en-us/typography/opentype/spec/otvaroverview#variation-data-tables-and-miscellaneous-requirements\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Font enables smart dropout control in \"prep\" table instructions?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/smart_dropout>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "'prep' table contains instructions enabling smart dropout control.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This setup is meant to ensure consistent rendering quality for fonts across\n        all devices (with different rendering/hinting capabilities).\n\n        Below is the snippet of instructions we expect to see in the fonts:\n        B8 01 FF    PUSHW 0x01FF\n        85          SCANCTRL (unconditinally turn on\n                              dropout control mode)\n        B0 04       PUSHB 0x04\n        8D          SCANTYPE (enable smart dropout control)\n\n        \"Smart dropout control\" means activating rules 1, 2 and 5:\n        Rule 1: If a pixel's center falls within the glyph outline,\n                that pixel is turned on.\n        Rule 2: If a contour falls exactly on a pixel's center,\n                that pixel is turned on.\n        Rule 5: If a scan line between two adjacent pixel centers\n                (either vertical or horizontal) is intersected\n                by both an on-Transition contour and an off-Transition\n                contour and neither of the pixels was already turned on\n                by rules 1 and 2, turn on the pixel which is closer to\n                the midpoint between the on-Transition contour and\n                off-Transition contour. This is \"Smart\" dropout control.\n\n        For more detailed info (such as other rules not enabled in this snippet),\n        please refer to the TrueType Instruction Set documentation.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "There must not be VTT Talk sources in the font.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/vttclean>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "There are no tables with VTT Talk sources embedded in the font.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The goal here is to reduce filesizes and improve pageloading when dealing\n        with webfonts.\n\n        The VTT Talk sources are not necessary at runtime and endup being just dead\n        weight when left embedded in the font binaries. The sources should be kept on\n        the project files but stripped out when building release binaries.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Are there unwanted Apple tables?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/aat>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "There are no unwanted AAT tables.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Apple's TrueType reference manual [1] describes SFNT tables not in the\n        Microsoft OpenType specification [2] and these can sometimes sneak into final\n        release files, but Google Fonts should only have OpenType tables.\n\n        [1] https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6.html\n        [2] https://docs.microsoft.com/en-us/typography/opentype/spec/\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check a font's STAT table contains compulsory Axis Values.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/STAT>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check a font's STAT table contains compulsory Axis Values which exist\n        in the Google Fonts Axis Registry.\n\n        We cannot determine what Axis Values the user will set for axes such as\n        opsz, GRAD since these axes are unique for each font so we'll skip them.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check variable font instances",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/fvar_instances>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check a font's fvar instance coordinates comply with our guidelines:\n        https://googlefonts.github.io/gf-guide/variable.html#fvar-instances\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "All name entries referenced by fvar instances exist on the name table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/fvar_name_entries>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The purpose of this check is to make sure that all name entries referenced\n        by variable font instances do exist in the name table.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "PPEM must be an integer on hinted fonts.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/integer_ppem_if_hinted>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_hinted",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Hinted fonts must have head table flag bit 3 set.\n\n        Per https://docs.microsoft.com/en-us/typography/opentype/spec/head,\n        bit 3 of Head::flags decides whether PPEM should be rounded. This bit should\n        always be set for hinted fonts.\n\n        Note:\n        Bit 3 = Force ppem to integer values for all internal scaler math;\n                May use fractional ppem sizes if this bit is clear;\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Are there caret positions declared for every ligature?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/ligature_carets>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Looks good!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        All ligatures in a font must have corresponding caret (text cursor) positions\n        defined in the GDEF table, otherwhise, users may experience issues with\n        caret rendering.\n\n        If using GlyphsApp or UFOs, ligature carets can be defined as anchors with\n        names starting with 'caret_'. These can be compiled with fontmake as of\n        version v2.4.0.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Is there kerning info for non-ligated sequences?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/kerning_for_non_ligated_sequences>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "GPOS table lacks kerning info for the following non-ligated sequences:\n\n\t- f + f\n\n\t- f + b\n\n\t- b + f\n\n\t- f + h\n\n\t- h + f\n\n\t- f + i\n\n\t- i + f\n\n\t- f + j\n\n\t- j + f\n\n\t- f + k\n\n\t- k + f\n\n\t- f + l\n\n\t- l + b\n\n\t- h + i\n\n\t- i + j\n\n\t- j + k\n\n\t- k + l [code: lacks-kern-info]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Fonts with ligatures should have kerning on the corresponding non-ligated\n        sequences for text where ligatures aren't used\n        (eg https://github.com/impallari/Raleway/issues/14).\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Combined length of family and style must not exceed 27 characters.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/family_and_style_max_length>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "All name entries are good.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to a GlyphsApp tutorial [1], in order to make sure all versions of\n        Windows recognize it as a valid font file, we must make sure that the\n        concatenated length of the familyname (NameID.FONT_FAMILY_NAME) and\n        style (NameID.FONT_SUBFAMILY_NAME) strings in the name table do not\n        exceed 20 characters.\n\n        After discussing the problem in more detail at FontBakery issue #2179 [2] we\n        decided that allowing up to 27 chars would still be on the safe side, though.\n\n        [1] https://glyphsapp.com/tutorials/multiple-masters-part-3-setting-up-instances\n        [2] https://github.com/fonttools/fontbakery/issues/2179\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Name table entries should not contain line-breaks.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/line_breaks>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Name table entries are all single-line (no line-breaks found).",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        There are some entries on the name table that may include more than one line\n        of text. The Google Fonts team, though, prefers to keep the name table entries\n        short and simple without line breaks.\n\n        For instance, some designers like to include the full text of a font license in\n        the \"copyright notice\" entry, but for the GFonts collection this entry should\n        only mention year, author and other basic info in a manner enforced by\n        com.google.fonts/check/font_copyright\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Name table strings must not contain the string 'Reserved Font Name'.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/rfn>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "None of the name table strings contain \"Reserved Font Name\".",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Some designers adopt the \"Reserved Font Name\" clause of the OFL license. This\n        means that the original author reserves the rights to the family name and other\n        people can only distribute modified versions using a different family name.\n\n        Google Fonts published updates to the fonts in the collection in order to fix\n        issues and/or implement further improvements to the fonts. It is important to\n        keep the family name so that users of the webfonts can benefit from the updates.\n        Since it would forbid such usage scenario, all families in the GFonts collection\n        are required to not adopt the RFN clause.\n\n        This check ensures \"Reserved Font Name\" is not mentioned in the name table.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check family name for GF Guide compliance.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/family_name_compliance>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font name looks good.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Checks the family name for compliance with the Google Fonts Guide.\n        https://googlefonts.github.io/gf-guide/onboarding.html#new-fonts\n\n        If you want to have your family name added to the CamelCase\n        exceptions list, please submit a pull request to the\n        camelcased_familyname_exceptions.txt file.\n\n        Similarly, abbreviations can be submitted to the\n        abbreviations_familyname_exceptions.txt file.\n\n        These are located in the Lib/fontbakery/data/googlefonts/ directory\n        of the FontBakery source code currently hosted at\n        https://github.com/fonttools/fontbakery/\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Directory name in GFonts repo structure must match NameID 1 of the regular.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/repo/dirname_matches_nameid_1>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "A static fonts directory with at least two fonts must accompany variable fonts",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/repo/vf_has_static_fonts>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Please consider adding a subdirectory called \"static/\" and including in it static font files. [code: missing]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Variable font family directories kept in the google/fonts git repo may include\n        a static/ subdir containing static fonts.\n\n        These files are meant to be served for users that still lack support for\n        variable fonts in their web browsers.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "A font repository should not include FontBakery report files",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/repo/fb_report>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        A FontBakery report is ephemeral and so should be used for posting issues on a\n        bug-tracker instead of being hosted in the font project repository.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check upstream.yaml file contains all required fields",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/repo/upstream_yaml_has_required_fields>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: upstream_yaml",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        If a family has been pushed using the gftools packager, we must check that all\n        the required fields in the upstream.yaml file have been populated.\n    ",
                    "result": "SKIP",
                    "severity": 10
                },
                {
                    "description": "A font repository should not include ZIP files",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/repo/zip_files>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Sometimes people check in ZIPs into their font project repositories. While we\n        accept the practice of checking in binaries, we believe that a ZIP is a step\n        too far ;)\n\n        Note: a source purist position is that only source files and build scripts\n        should be checked in.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check font follows the Google Fonts vertical metric schema",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/vertical_metrics>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: not remote_styles",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This check generally enforces Google Fonts\u2019 vertical metrics specifications.\n        In particular:\n        * lineGap must be 0\n        * Sum of hhea ascender + abs(descender) + linegap must be\n          between 120% and 200% of UPM\n        * Warning if sum is over 150% of UPM\n\n        The threshold levels 150% (WARN) and 200% (FAIL) are somewhat arbitrarily chosen\n        and may hint at a glaring mistake in the metrics calculations or UPM settings.\n\n        Our documentation includes further information:\n        https://github.com/googlefonts/gf-docs/tree/main/VerticalMetrics\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check if the vertical metrics of a family are similar to the same family hosted on Google Fonts.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/vertical_metrics_regressions>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Vertical metrics have not regressed.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        If the family already exists on Google Fonts, we need to ensure that the\n        checked family's vertical metrics are similar. This check will test the\n        following schema which was outlined in Font Bakery issue #1162 [1]:\n\n        - The family should visually have the same vertical metrics as the Regular\n          style hosted on Google Fonts.\n\n        - If the family on Google Fonts has differing hhea and typo metrics, the family\n          being checked should use the typo metrics for both the hhea and typo entries.\n\n        - If the family on Google Fonts has use typo metrics not enabled and the family\n          being checked has it enabled, the hhea and typo metrics should use the family\n          on Google Fonts winAscent and winDescent values.\n\n        - If the upms differ, the values must be scaled so the visual appearance is\n          the same.\n\n        [1] https://github.com/fonttools/fontbakery/issues/1162\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check font follows the Google Fonts CJK vertical metric schema",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/cjk_vertical_metrics>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_cjk_font, not remote_styles",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        CJK fonts have different vertical metrics when compared to Latin fonts.\n        We follow the schema developed by dr Ken Lunde for Source Han Sans and\n        the Noto CJK fonts.\n\n        Our documentation includes further information:\n        https://github.com/googlefonts/gf-docs/tree/main/Spec#cjk-vertical-metrics\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check if the vertical metrics of a CJK family are similar to the same family hosted on Google Fonts.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/cjk_vertical_metrics_regressions>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_cjk_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check CJK family has the same vertical metrics as the same family\n        hosted on Google Fonts.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Does the font contain less than 150 CJK characters?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/cjk_not_enough_glyphs>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_claiming_to_be_cjk_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Kana has 150 characters and it's the smallest CJK writing system.\n\n        If a font contains less CJK glyphs than this writing system, we inform the\n        user that some glyphs may be encoded incorrectly.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check variable font instances don't have duplicate names",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont_duplicate_instance_names>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This check's purpose is to detect duplicate named instances names in a\n        given variable font.\n        Repeating instance names may be the result of instances for several VF axes\n        defined in `fvar`, but since currently only weight+italic tokens are allowed\n        in instance names as per GF specs, they ended up repeating.\n        Instead, only a base set of fonts for the most default representation of the\n        family can be defined through instances in the `fvar` table, all other\n        instances will have to be left to access through the `STAT` table.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Ensure VFs do not contain the ital axis.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/unsupported_axes>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The 'ital' axis is not supported yet in Google Chrome.\n\n        For the time being, we need to ensure that VFs do not contain this axis.\n        Once browser support is better, we can deprecate this check.\n\n        For more info regarding browser support, see:\n        https://arrowtype.github.io/vf-slnt-test/\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Ensure VFs with duplexed axes do not vary horizontal advance.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/duplexed_axis_reflow>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Certain axes, such as grade (GRAD) or roundness (ROND), should not\n        change any advanceWidth or kerning data across the font's design space.\n        This is because altering the advance width of glyphs can cause text reflow.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validate METADATA.pb axes values are within gf_axisregistry bounds.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/gf_axisregistry_bounds>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Each axis range in a METADATA.pb file must be registered, and within the bounds\n        of the axis definition in the Google Fonts Axis Registry, available at\n        https://github.com/google/fonts/tree/main/axisregistry\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validate METADATA.pb axes tags are defined in gf_axisregistry.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/gf_axisregistry_valid_tags>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Ensure all axes in a METADATA.pb file are registered in the\n        Google Fonts Axis Registry, available at\n        https://github.com/google/fonts/tree/main/axisregistry\n\n        Why does Google Fonts have its own Axis Registry?\n\n        We support a superset of the OpenType axis registry axis set, and use\n        additional metadata for each axis. Axes present in a font file but not in this\n        registry will not function via our API. No variable font is expected to\n        support all of the axes here.\n\n        Any font foundry or distributor library that offers variable fonts has a\n        implicit, latent, de-facto axis registry, which can be extracted by scanning\n        the library for axes' tags, labels, and min/def/max values. While in 2016\n        Microsoft originally offered to include more axes in the OpenType 1.8\n        specification (github.com/microsoft/OpenTypeDesignVariationAxisTags), as of\n        August 2020, this effort has stalled. We hope more foundries and distributors\n        will publish documents like this that make their axes explicit, to encourage\n        of adoption of variable fonts throughout the industry, and provide source\n        material for a future update to the OpenType specification's axis registry.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validate defaults on fvar table match registered fallback names in GFAxisRegistry.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/gf_axisregistry/fvar_axis_defaults>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check that axis defaults have a corresponding fallback name registered at the\n        Google Fonts Axis Registry, available at\n        https://github.com/google/fonts/tree/main/axisregistry\n\n        This is necessary for the following reasons:\n\n        To get ZIP files downloads on Google Fonts to be accurate \u2014 otherwise the\n        chosen default font is not generated. The Newsreader family, for instance, has\n        a default value on the 'opsz' axis of 16pt. If 16pt was not a registered\n        fallback position, then the ZIP file would instead include another position\n        as default (such as 14pt).\n\n        For the Variable fonts to display the correct location on the specimen page.\n\n        For VF with no weight axis to be displayed at all. For instance, Ballet, which\n        has no weight axis, was not appearing in sandbox because default position on\n        'opsz' axis was 16pt, and it was not yet a registered fallback positon.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validate STAT particle names and values match the fallback names in GFAxisRegistry.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/STAT/gf_axisregistry>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check that particle names and values on STAT table match the fallback names\n        in each axis entry at the Google Fonts Axis Registry, available at\n        https://github.com/google/fonts/tree/main/axisregistry\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validate VF axes match the ones declared on METADATA.pb.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/consistent_axis_enumeration>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        All font variation axes present in the font files must be properly declared\n        on METADATA.pb so that they can be served by the GFonts API.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Ensure METADATA.pb does not use escaped strings.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/escaped_strings>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        In some cases we've seen designer names and other fields with escaped strings\n        in METADATA files. Nowadays the strings can be full unicode strings and\n        do not need escaping.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Designers are listed correctly on the Google Fonts catalog?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/designer_profiles>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Google Fonts has a catalog of designers.\n\n        This check ensures that the online entries of the catalog can be found based\n        on the designer names listed on the METADATA.pb file.\n\n        It also validates the URLs and file formats are all correctly set.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Ensure variable fonts include an avar table.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/mandatory_avar_table>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Most variable fonts should include an avar table to correctly define\n        axes progression rates.\n\n        For example, a weight axis from 0% to 100% doesn't map directly to 100 to 1000,\n        because a 10% progression from 0% may be too much to define the 200,\n        while 90% may be too little to define the 900.\n\n        If the progression rates of axes is linear, this check can be ignored.\n        Fontmake will also skip adding an avar table if the progression rates\n        are linear. However, we still recommend designers visually proof each\n        instance is at the expected weight, width etc.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "On a family update, the DESCRIPTION.en_us.html file should ideally also be updated.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/description/family_update>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The DESCRIPTION.en_us.html file in this family has not changed in comparison to the latest font release on the google/fonts github repo.\nPlease consider mentioning note-worthy improvements made to the family recently. [code: description-not-updated]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        We want to ensure that any significant changes to the font family are\n        properly mentioned in the DESCRIPTION file.\n\n        In general, it means that the contents of the DESCRIPTION.en_us.html file\n        will typically change if when font files are updated. Please treat this check\n        as a reminder to do so whenever appropriate!\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Check small caps glyphs are available.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/missing_small_caps_glyphs>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Ensure small caps glyphs are available if\n        a font declares smcp or c2sc OT features.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Ensure Stylistic Sets have description.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/stylisticset_description>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Stylistic sets should provide description text. Programs such as InDesign,\n        TextEdit and Inkscape use that info to display to the users so that they know\n        what a given stylistic set offers.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "OS/2.fsSelection bit 7 (USE_TYPO_METRICS) is set in all fonts.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/os2/use_typo_metrics>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        All fonts on the Google Fonts collection should have OS/2.fsSelection bit 7\n        (USE_TYPO_METRICS) set. This requirement is part of the vertical metrics scheme\n        established as a Google Fonts policy aiming at a common ground supported by\n        all major font rendering environments.\n\n        For more details, read:\n        https://github.com/googlefonts/gf-docs/blob/main/VerticalMetrics/README.md\n\n        Below is the portion of that document that is most relevant to this check:\n\n        Use_Typo_Metrics must be enabled. This will force MS Applications to use the\n        OS/2 Typo values instead of the Win values. By doing this, we can freely set\n        the Win values to avoid clipping and control the line height with the typo\n        values. It has the added benefit of future line height compatibility. When\n        a new script is added, we simply change the Win values to the new yMin\n        and yMax, without needing to worry if the line height have changed.\n    ",
                    "result": "PASS",
                    "severity": 10
                },
                {
                    "description": "Ensure fonts have ScriptLangTags declared on the 'meta' table.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/meta/script_lang_tags>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "This font file does not have a 'meta' table. [code: lacks-meta-table]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The OpenType 'meta' table originated at Apple. Microsoft added it to OT with\n        just two DataMap records:\n\n        - dlng: comma-separated ScriptLangTags that indicate which scripts,\n          or languages and scripts, with possible variants, the font is designed for.\n\n        - slng: comma-separated ScriptLangTags that indicate which scripts,\n          or languages and scripts, with possible variants, the font supports.\n\n\n        The slng structure is intended to describe which languages and scripts the\n        font overall supports. For example, a Traditional Chinese font that also\n        contains Latin characters, can indicate Hant,Latn, showing that it supports\n        Hant, the Traditional Chinese variant of the Hani script, and it also\n        supports the Latn script.\n\n        The dlng structure is far more interesting. A font may contain various glyphs,\n        but only a particular subset of the glyphs may be truly \"leading\" in the design,\n        while other glyphs may have been included for technical reasons. Such a\n        Traditional Chinese font could only list Hant there, showing that it\u2019s designed\n        for Traditional Chinese, but the font would omit Latn, because the developers\n        don\u2019t think the font is really recommended for purely Latin-script use.\n\n        The tags used in the structures can comprise just script, or also language\n        and script. For example, if a font has Bulgarian Cyrillic alternates in the\n        locl feature for the cyrl BGR OT languagesystem, it could also indicate in\n        dlng explicitly that it supports bul-Cyrl. (Note that the scripts and languages\n        in meta use the ISO language and script codes, not the OpenType ones).\n\n        This check ensures that the font has the meta table containing the\n        slng and dlng structures.\n\n        All families in the Google Fonts collection should contain the 'meta' table.\n        Windows 10 already uses it when deciding on which fonts to fall back to.\n        The Google Fonts API and also other environments could use the data for\n        smarter filtering. Most importantly, those entries should be added\n        to the Noto fonts.\n\n        In the font making process, some environments store this data in external\n        files already. But the meta table provides a convenient way to store this\n        inside the font file, so some tools may add the data, and unrelated tools\n        may read this data. This makes the solution much more portable and universal.\n    ",
                    "result": "WARN",
                    "severity": 3
                },
                {
                    "description": "Ensure fonts do not contain any pre-production tables.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/no_debugging_tables>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Tables such as `Debg` are useful in the pre-production stages of font\n        development, but add unnecessary bloat to a production font and should\n        be removed before release.\n    ",
                    "result": "PASS",
                    "severity": 6
                },
                {
                    "description": "Check font family directory name.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/family_directory_name>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Directory name is \"amiri\", as expected.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        We want the directory name of a font family to be predictable and directly\n        derived from the family name, all lowercased and removing spaces.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check font can render its own name.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/render_own_name>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font can successfully render its own name (Amiri)",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        A base expectation is that a font family's regular/default (400 roman) style\n        can render its 'menu name' (nameID 1) in itself.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check samples can be rendered.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/can_render_samples>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        In order to prevent tofu from being seen on fonts.google.com, this check\n        verifies that all samples specified by METADATA.pb can be properly\n        rendered by the font.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check if category on METADATA.pb matches what can be inferred from the family name.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/category_hints>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Sometimes the font familyname contains words that hint at which is the most\n        likely correct category to be declared on METADATA.pb\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check font has the expected color font tables.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/colorfont_tables>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Looks Good!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        COLR v0 fonts are widely supported in most browsers so they do not require\n        an SVG color table. However, some environments (e.g. Safari, Adobe apps)\n        do not currently support COLR v1 so we need to add an SVG table to these fonts,\n        except in the case of variable fonts, since SVG does not support\n        OpenType Variations.\n\n        To automatically generate compatible SVG/COLR tables,\n        run the maximum_color tool in nanoemoji:\n        https://github.com/googlefonts/nanoemoji\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Color layers should have a minimum brightness",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/color_cpal_brightness>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Looks good!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Layers of a COLRv0 font should not be too dark or too bright. When layer colors\n        are set explicitly, they can't be changed and they may turn out illegible\n        against dark or bright backgrounds.\n\n        While traditional color-less fonts can be colored in design apps or CSS, a\n        black color definition in a COLRv0 font actually means that that layer will be\n        rendered in black regardless of the background color. This leads to text\n        becoming invisible against a dark background, for instance when using a dark\n        theme in a web browser or operating system.\n\n        This check ensures that layer colors are at least 10% bright and at most 90%\n        bright, when not already set to the current color (0xFFFF).\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Put an empty glyph on GID 1 right after the .notdef glyph for COLRv0 fonts.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/empty_glyph_on_gid1_for_colrv0>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Looks good!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        A rendering bug in Windows 10 paints whichever glyph is on GID 1 on top of\n        some glyphs, colored or not. This only occurs for COLR version 0 fonts.\n\n        Having a glyph with no contours on GID 1 is a practical workaround for that.\n\n        See https://github.com/googlefonts/gftools/issues/609\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Noto fonts must have an ARTICLE.en_us.html file",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/description/noto_has_article>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_noto",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Noto fonts are displayed in a different way on the fonts.google.com\n         web site, and so must also contain an article about them.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Checking file is named canonically.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/canonical_filename>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font filename is correct, \"Amiri-Regular.ttf\".",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        A font's filename must be composed as \"<familyname>-<stylename>.ttf\":\n\n        - Nunito-Regular.ttf\n\n        - Oswald-BoldItalic.ttf\n\n\n        Variable fonts must list the axis tags in alphabetical order in\n        square brackets and separated by commas:\n\n        - Roboto[wdth,wght].ttf\n\n        - Familyname-Italic[wght].ttf\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Does DESCRIPTION file contain broken links?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/description/broken_links>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "All links in the DESCRIPTION file look good!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The snippet of HTML in the DESCRIPTION.en_us.html file is added to the font\n        family webpage on the Google Fonts website. For that reason, all hyperlinks\n        in it must be properly working.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "URLs on DESCRIPTION file must not display http(s) prefix.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/description/urls>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "All good!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The snippet of HTML in the DESCRIPTION.en_us.html file is added to the font\n        family webpage on the Google Fonts website.\n\n        Google Fonts has a content formatting policy for that snippet that expects the\n        text content of links not to include the http:// or https:// prefixes.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Does DESCRIPTION file contain a upstream Git repo URL?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/description/git_url>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Found a git repo URL: https://github.com/aliftype/amiri [code: url-found]",
                            "status": "INFO",
                            "traceback": null
                        },
                        {
                            "message": "Looks great!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The contents of the DESCRIPTION.en-us.html file are displayed on the\n        Google Fonts website in the about section of each font family specimen page.\n\n        Since all of the Google Fonts collection is composed of libre-licensed fonts,\n        this check enforces a policy that there must be a hypertext link in that page\n        directing users to the repository where the font project files are\n        made available.\n\n        Such hosting is typically done on sites like Github, Gitlab, GNU Savannah or\n        any other git-based version control service.\n    ",
                    "result": "INFO"
                },
                {
                    "description": "Is this a proper HTML snippet?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/description/valid_html>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "/Users/simon/others-repos/fonts/ofl/amiri/DESCRIPTION.en_us.html is a propper HTML file.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Sometimes people write malformed HTML markup. This check should ensure the\n        file is good.\n\n        Additionally, when packaging families for being pushed to the `google/fonts`\n        git repo, if there is no DESCRIPTION.en_us.html file, some older versions of\n        the `add_font.py` tool insert a placeholder description file which contains\n        invalid html. This file needs to either be replaced with an existing\n        description file or edited by hand.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "DESCRIPTION.en_us.html must have more than 200 bytes.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/description/min_length>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "DESCRIPTION.en_us.html is larger than 200 bytes.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "DESCRIPTION.en_us.html should end in a linebreak.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/description/eof_linebreak>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": ":-)",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Some older text-handling tools sometimes misbehave if the last line of data\n        in a text file is not terminated with a newline character (also known as '\\n').\n\n        We know that this is a very small detail, but for the sake of keeping all\n        DESCRIPTION.en_us.html files uniformly formatted throughout the GFonts\n        collection, we chose to adopt the practice of placing this final linebreak\n        character on them.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check METADATA.pb parse correctly.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/parses>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb parsed successfuly.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The purpose of this check is to ensure that the METADATA.pb file is not\n        malformed.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Font designer field in METADATA.pb must not be 'unknown'.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/unknown_designer>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font designer field is not 'unknown'.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Font designer field in METADATA.pb must not contain 'Multiple designers'.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/multiple_designers>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Looks good.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        For a while the string \"Multiple designers\" was used as a placeholder on\n        METADATA.pb files. We should replace all those instances with actual designer\n        names so that proper credits are displayed on the Google Fonts family\n        specimen pages.\n\n        If there's more than a single designer, the designer names must be\n        separated by commas.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Multiple values in font designer field in METADATA.pb must be separated by commas.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/designer_values>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Looks good.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        We must use commas instead of forward slashes because the server-side code\n        at the fonts.google.com directory will segment the string on the commas into\n        a list of names and display the first item in the list as the\n        \"principal designer\" while the remaining names are identified as \"contributors\".\n\n        See eg https://fonts.google.com/specimen/Rubik\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Does METADATA.pb copyright field contain broken links?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/broken_links>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "All links in the METADATA.pb file look good!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Ensure METADATA.pb lists all font binaries.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/undeclared_fonts>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The set of font binaries available, except the ones on a \"static\" subdir,\n        must match exactly those declared on the METADATA.pb file.\n\n        Also, to avoid confusion, we expect that font files (other than statics)\n        are not placed on subdirectories.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Ensure METADATA.pb category field is valid.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/category>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        There are only five acceptable values for the category field in a METADATA.pb\n        file:\n\n        - MONOSPACE\n\n        - SANS_SERIF\n\n        - SERIF\n\n        - DISPLAY\n\n        - HANDWRITING\n\n        This check is meant to avoid typos in this field.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Checking OS/2 fsType does not impose restrictions.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/fstype>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2 fsType is properly set to zero.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The fsType in the OS/2 table is a legacy DRM-related field. Fonts in the\n        Google Fonts collection must have it set to zero (also known as\n        \"Installable Embedding\"). This setting indicates that the fonts can be\n        embedded in documents and permanently installed by applications on\n        remote systems.\n\n        More detailed info is available at:\n        https://docs.microsoft.com/en-us/typography/opentype/spec/os2#fstype\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Checking OS/2 achVendID.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/vendor_id>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2 VendorID 'ALIF' looks good!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Microsoft keeps a list of font vendors and their respective contact info. This\n        list is updated regularly and is indexed by a 4-char \"Vendor ID\" which is\n        stored in the achVendID field of the OS/2 table.\n\n        Registering your ID is not mandatory, but it is a good practice since some\n        applications may display the type designer / type foundry contact info on some\n        dialog and also because that info will be visible on Microsoft's website:\n\n        https://docs.microsoft.com/en-us/typography/vendors/\n\n        This check verifies whether or not a given font's vendor ID is registered in\n        that list or if it has some of the default values used by the most common\n        font editors.\n\n        Each new FontBakery release includes a cached copy of that list of vendor IDs.\n        If you registered recently, you're safe to ignore warnings emitted by this\n        check, since your ID will soon be included in one of our upcoming releases.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check Google Fonts glyph coverage.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/glyph_coverage>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Missing required codepoints:\n\n\t- 0x030B (COMBINING DOUBLE ACUTE ACCENT)\n\n\n\t- 0x0218 (LATIN CAPITAL LETTER S WITH COMMA BELOW)\n\n\n\t- 0x1E9E (LATIN CAPITAL LETTER SHARP S)\n\n\n\t- 0x021A (LATIN CAPITAL LETTER T WITH COMMA BELOW)\n\n\n\t- 0x0219 (LATIN SMALL LETTER S WITH COMMA BELOW)\n\n\n\t- 0x021B (LATIN SMALL LETTER T WITH COMMA BELOW)\n\n\n\t- 0x2122 (TRADE MARK SIGN)\n [code: missing-codepoints]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Google Fonts expects that fonts in its collection support at least the minimal\n        set of characters defined in the `GF-latin-core` glyph-set.\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "Check for METADATA subsets with zero support.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/unsupported_subsets>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This check ensures that the subsets specified on a METADATA.pb file are\n        actually supported (even if only partially) by the font files.\n\n        Subsets for which none of the codepoints are supported will cause the\n        check to FAIL.\n    ",
                    "result": "PASS",
                    "severity": 10
                },
                {
                    "description": "Check for codepoints not covered by METADATA subsets.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/unreachable_subsetting>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The following codepoints supported by the font are not covered by\n    any subsets defined in the font's metadata file, and will never\n    be served. You can solve this by either manually adding additional\n    subset declarations to METADATA.pb, or by editing the glyphset\n    definitions.\n\n * U+02BE MODIFIER LETTER RIGHT HALF RING: not included in any glyphset definition\n * U+02BF MODIFIER LETTER LEFT HALF RING: not included in any glyphset definition\n * U+02C7 CARON: try adding one of: tifinagh, canadian-aboriginal\n * U+02D8 BREVE: try adding canadian-aboriginal\n * U+02D9 DOT ABOVE: try adding canadian-aboriginal\n * U+02DB OGONEK: try adding canadian-aboriginal\n * U+02DD DOUBLE ACUTE ACCENT: not included in any glyphset definition\n * U+0300 COMBINING GRAVE ACCENT: try adding one of: coptic, cherokee, tai-le\n * U+0301 COMBINING ACUTE ACCENT: try adding one of: coptic, cherokee, tifinagh, tai-le\n * U+0302 COMBINING CIRCUMFLEX ACCENT: try adding one of: coptic, cherokee, tifinagh\n * U+0303 COMBINING TILDE: not included in any glyphset definition\n * U+0304 COMBINING MACRON: try adding one of: coptic, gothic, cherokee, tifinagh\n * U+0305 COMBINING OVERLINE: try adding one of: coptic, gothic\n * U+0306 COMBINING BREVE: try adding tifinagh\n * U+0307 COMBINING DOT ABOVE: try adding one of: tai-le, tifinagh, canadian-aboriginal, coptic, malayalam\n * U+0308 COMBINING DIAERESIS: try adding one of: coptic, gothic, tai-le\n * U+030A COMBINING RING ABOVE: not included in any glyphset definition\n * U+030C COMBINING CARON: try adding one of: cherokee, tai-le\n * U+0312 COMBINING TURNED COMMA ABOVE: not included in any glyphset definition\n * U+0315 COMBINING COMMA ABOVE RIGHT: not included in any glyphset definition\n * U+0325 COMBINING RING BELOW: not included in any glyphset definition\n * U+0326 COMBINING COMMA BELOW: not included in any glyphset definition\n * U+0327 COMBINING CEDILLA: not included in any glyphset definition\n * U+0328 COMBINING OGONEK: not included in any glyphset definition\n * U+0604 ARABIC SIGN SAMVAT: not included in any glyphset definition\n * U+0606 ARABIC-INDIC CUBE ROOT: not included in any glyphset definition\n * U+0607 ARABIC-INDIC FOURTH ROOT: not included in any glyphset definition\n * U+0608 ARABIC RAY: not included in any glyphset definition\n * U+0609 ARABIC-INDIC PER MILLE SIGN: not included in any glyphset definition\n * U+060A ARABIC-INDIC PER TEN THOUSAND SIGN: not included in any glyphset definition\n * U+060E ARABIC POETIC VERSE SIGN: not included in any glyphset definition\n * U+060F ARABIC SIGN MISRA: not included in any glyphset definition\n * U+0610 ARABIC SIGN SALLALLAHOU ALAYHE WASSALLAM: not included in any glyphset definition\n * U+0611 ARABIC SIGN ALAYHE ASSALLAM: not included in any glyphset definition\n * U+0612 ARABIC SIGN RAHMATULLAH ALAYHE: not included in any glyphset definition\n * U+0613 ARABIC SIGN RADI ALLAHOU ANHU: not included in any glyphset definition\n * U+0614 ARABIC SIGN TAKHALLUS: not included in any glyphset definition\n * U+0615 ARABIC SMALL HIGH TAH: not included in any glyphset definition\n * U+0616 ARABIC SMALL HIGH LIGATURE ALEF WITH LAM WITH YEH: not included in any glyphset definition\n * U+0617 ARABIC SMALL HIGH ZAIN: not included in any glyphset definition\n * U+0618 ARABIC SMALL FATHA: not included in any glyphset definition\n * U+0619 ARABIC SMALL DAMMA: not included in any glyphset definition\n * U+061A ARABIC SMALL KASRA: not included in any glyphset definition\n * U+061C ARABIC LETTER MARK: not included in any glyphset definition\n * U+061D ARABIC END OF TEXT MARK: not included in any glyphset definition\n * U+0620 ARABIC LETTER KASHMIRI YEH: not included in any glyphset definition\n * U+063B ARABIC LETTER KEHEH WITH TWO DOTS ABOVE: not included in any glyphset definition\n * U+063C ARABIC LETTER KEHEH WITH THREE DOTS BELOW: not included in any glyphset definition\n * U+063D ARABIC LETTER FARSI YEH WITH INVERTED V: not included in any glyphset definition\n * U+063E ARABIC LETTER FARSI YEH WITH TWO DOTS ABOVE: not included in any glyphset definition\n * U+063F ARABIC LETTER FARSI YEH WITH THREE DOTS ABOVE: not included in any glyphset definition\n * U+065A ARABIC VOWEL SIGN SMALL V ABOVE: not included in any glyphset definition\n * U+065B ARABIC VOWEL SIGN INVERTED SMALL V ABOVE: not included in any glyphset definition\n * U+065C ARABIC VOWEL SIGN DOT BELOW: not included in any glyphset definition\n * U+065D ARABIC REVERSED DAMMA: not included in any glyphset definition\n * U+065E ARABIC FATHA WITH TWO DOTS: not included in any glyphset definition\n * U+065F ARABIC WAVY HAMZA BELOW: not included in any glyphset definition\n * U+066E ARABIC LETTER DOTLESS BEH: not included in any glyphset definition\n * U+066F ARABIC LETTER DOTLESS QAF: not included in any glyphset definition\n * U+0672 ARABIC LETTER ALEF WITH WAVY HAMZA ABOVE: not included in any glyphset definition\n * U+0673 ARABIC LETTER ALEF WITH WAVY HAMZA BELOW: not included in any glyphset definition\n * U+0674 ARABIC LETTER HIGH HAMZA: not included in any glyphset definition\n * U+0675 ARABIC LETTER HIGH HAMZA ALEF: not included in any glyphset definition\n * U+0676 ARABIC LETTER HIGH HAMZA WAW: not included in any glyphset definition\n * U+0677 ARABIC LETTER U WITH HAMZA ABOVE: not included in any glyphset definition\n * U+0678 ARABIC LETTER HIGH HAMZA YEH: not included in any glyphset definition\n * U+0682 ARABIC LETTER HAH WITH TWO DOTS VERTICAL ABOVE: not included in any glyphset definition\n * U+068B ARABIC LETTER DAL WITH DOT BELOW AND SMALL TAH: not included in any glyphset definition\n * U+068E ARABIC LETTER DUL: not included in any glyphset definition\n * U+0690 ARABIC LETTER DAL WITH FOUR DOTS ABOVE: not included in any glyphset definition\n * U+0692 ARABIC LETTER REH WITH SMALL V: not included in any glyphset definition\n * U+0694 ARABIC LETTER REH WITH DOT BELOW: not included in any glyphset definition\n * U+0695 ARABIC LETTER REH WITH SMALL V BELOW: not included in any glyphset definition\n * U+0697 ARABIC LETTER REH WITH TWO DOTS ABOVE: not included in any glyphset definition\n * U+069B ARABIC LETTER SEEN WITH THREE DOTS BELOW: not included in any glyphset definition\n * U+069D ARABIC LETTER SAD WITH TWO DOTS BELOW: not included in any glyphset definition\n * U+069E ARABIC LETTER SAD WITH THREE DOTS ABOVE: not included in any glyphset definition\n * U+069F ARABIC LETTER TAH WITH THREE DOTS ABOVE: not included in any glyphset definition\n * U+06A0 ARABIC LETTER AIN WITH THREE DOTS ABOVE: not included in any glyphset definition\n * U+06A1 ARABIC LETTER DOTLESS FEH: not included in any glyphset definition\n * U+06A3 ARABIC LETTER FEH WITH DOT BELOW: not included in any glyphset definition\n * U+06AC ARABIC LETTER KAF WITH DOT ABOVE: not included in any glyphset definition\n * U+06AD ARABIC LETTER NG: not included in any glyphset definition\n * U+06AE ARABIC LETTER KAF WITH THREE DOTS BELOW: not included in any glyphset definition\n * U+06B0 ARABIC LETTER GAF WITH RING: not included in any glyphset definition\n * U+06B2 ARABIC LETTER GAF WITH TWO DOTS BELOW: not included in any glyphset definition\n * U+06B4 ARABIC LETTER GAF WITH THREE DOTS ABOVE: not included in any glyphset definition\n * U+06B5 ARABIC LETTER LAM WITH SMALL V: not included in any glyphset definition\n * U+06B6 ARABIC LETTER LAM WITH DOT ABOVE: not included in any glyphset definition\n * U+06B7 ARABIC LETTER LAM WITH THREE DOTS ABOVE: not included in any glyphset definition\n * U+06B8 ARABIC LETTER LAM WITH THREE DOTS BELOW: not included in any glyphset definition\n * U+06B9 ARABIC LETTER NOON WITH DOT BELOW: not included in any glyphset definition\n * U+06BD ARABIC LETTER NOON WITH THREE DOTS ABOVE: not included in any glyphset definition\n * U+06BF ARABIC LETTER TCHEH WITH DOT ABOVE: not included in any glyphset definition\n * U+06C4 ARABIC LETTER WAW WITH RING: not included in any glyphset definition\n * U+06C5 ARABIC LETTER KIRGHIZ OE: not included in any glyphset definition\n * U+06C6 ARABIC LETTER OE: not included in any glyphset definition\n * U+06C7 ARABIC LETTER U: not included in any glyphset definition\n * U+06C8 ARABIC LETTER YU: not included in any glyphset definition\n * U+06C9 ARABIC LETTER KIRGHIZ YU: not included in any glyphset definition\n * U+06CA ARABIC LETTER WAW WITH TWO DOTS ABOVE: not included in any glyphset definition\n * U+06CB ARABIC LETTER VE: not included in any glyphset definition\n * U+06CE ARABIC LETTER YEH WITH SMALL V: not included in any glyphset definition\n * U+06CF ARABIC LETTER WAW WITH DOT ABOVE: not included in any glyphset definition\n * U+06D1 ARABIC LETTER YEH WITH THREE DOTS BELOW: not included in any glyphset definition\n * U+06D5 ARABIC LETTER AE: not included in any glyphset definition\n * U+06D6 ARABIC SMALL HIGH LIGATURE SAD WITH LAM WITH ALEF MAKSURA: not included in any glyphset definition\n * U+06D7 ARABIC SMALL HIGH LIGATURE QAF WITH LAM WITH ALEF MAKSURA: not included in any glyphset definition\n * U+06D8 ARABIC SMALL HIGH MEEM INITIAL FORM: not included in any glyphset definition\n * U+06D9 ARABIC SMALL HIGH LAM ALEF: not included in any glyphset definition\n * U+06DA ARABIC SMALL HIGH JEEM: not included in any glyphset definition\n * U+06DB ARABIC SMALL HIGH THREE DOTS: not included in any glyphset definition\n * U+06DC ARABIC SMALL HIGH SEEN: not included in any glyphset definition\n * U+06DF ARABIC SMALL HIGH ROUNDED ZERO: not included in any glyphset definition\n * U+06E0 ARABIC SMALL HIGH UPRIGHT RECTANGULAR ZERO: not included in any glyphset definition\n * U+06E1 ARABIC SMALL HIGH DOTLESS HEAD OF KHAH: not included in any glyphset definition\n * U+06E2 ARABIC SMALL HIGH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+06E3 ARABIC SMALL LOW SEEN: not included in any glyphset definition\n * U+06E4 ARABIC SMALL HIGH MADDA: not included in any glyphset definition\n * U+06E5 ARABIC SMALL WAW: not included in any glyphset definition\n * U+06E6 ARABIC SMALL YEH: not included in any glyphset definition\n * U+06E7 ARABIC SMALL HIGH YEH: not included in any glyphset definition\n * U+06E8 ARABIC SMALL HIGH NOON: not included in any glyphset definition\n * U+06EA ARABIC EMPTY CENTRE LOW STOP: not included in any glyphset definition\n * U+06EB ARABIC EMPTY CENTRE HIGH STOP: not included in any glyphset definition\n * U+06EC ARABIC ROUNDED HIGH STOP WITH FILLED CENTRE: not included in any glyphset definition\n * U+06ED ARABIC SMALL LOW MEEM: not included in any glyphset definition\n * U+06EE ARABIC LETTER DAL WITH INVERTED V: not included in any glyphset definition\n * U+06EF ARABIC LETTER REH WITH INVERTED V: not included in any glyphset definition\n * U+06FA ARABIC LETTER SHEEN WITH DOT BELOW: not included in any glyphset definition\n * U+06FB ARABIC LETTER DAD WITH DOT BELOW: not included in any glyphset definition\n * U+06FC ARABIC LETTER GHAIN WITH DOT BELOW: not included in any glyphset definition\n * U+06FF ARABIC LETTER HEH WITH INVERTED V: not included in any glyphset definition\n * U+0750 ARABIC LETTER BEH WITH THREE DOTS HORIZONTALLY BELOW: not included in any glyphset definition\n * U+0751 ARABIC LETTER BEH WITH DOT BELOW AND THREE DOTS ABOVE: not included in any glyphset definition\n * U+0752 ARABIC LETTER BEH WITH THREE DOTS POINTING UPWARDS BELOW: not included in any glyphset definition\n * U+0753 ARABIC LETTER BEH WITH THREE DOTS POINTING UPWARDS BELOW AND TWO DOTS ABOVE: not included in any glyphset definition\n * U+0754 ARABIC LETTER BEH WITH TWO DOTS BELOW AND DOT ABOVE: not included in any glyphset definition\n * U+0755 ARABIC LETTER BEH WITH INVERTED SMALL V BELOW: not included in any glyphset definition\n * U+0756 ARABIC LETTER BEH WITH SMALL V: not included in any glyphset definition\n * U+0757 ARABIC LETTER HAH WITH TWO DOTS ABOVE: not included in any glyphset definition\n * U+0758 ARABIC LETTER HAH WITH THREE DOTS POINTING UPWARDS BELOW: not included in any glyphset definition\n * U+0759 ARABIC LETTER DAL WITH TWO DOTS VERTICALLY BELOW AND SMALL TAH: not included in any glyphset definition\n * U+075A ARABIC LETTER DAL WITH INVERTED SMALL V BELOW: not included in any glyphset definition\n * U+075B ARABIC LETTER REH WITH STROKE: not included in any glyphset definition\n * U+075C ARABIC LETTER SEEN WITH FOUR DOTS ABOVE: not included in any glyphset definition\n * U+075D ARABIC LETTER AIN WITH TWO DOTS ABOVE: not included in any glyphset definition\n * U+075E ARABIC LETTER AIN WITH THREE DOTS POINTING DOWNWARDS ABOVE: not included in any glyphset definition\n * U+075F ARABIC LETTER AIN WITH TWO DOTS VERTICALLY ABOVE: not included in any glyphset definition\n * U+0760 ARABIC LETTER FEH WITH TWO DOTS BELOW: not included in any glyphset definition\n * U+0761 ARABIC LETTER FEH WITH THREE DOTS POINTING UPWARDS BELOW: not included in any glyphset definition\n * U+0762 ARABIC LETTER KEHEH WITH DOT ABOVE: not included in any glyphset definition\n * U+0763 ARABIC LETTER KEHEH WITH THREE DOTS ABOVE: not included in any glyphset definition\n * U+0764 ARABIC LETTER KEHEH WITH THREE DOTS POINTING UPWARDS BELOW: not included in any glyphset definition\n * U+0765 ARABIC LETTER MEEM WITH DOT ABOVE: not included in any glyphset definition\n * U+0766 ARABIC LETTER MEEM WITH DOT BELOW: not included in any glyphset definition\n * U+0767 ARABIC LETTER NOON WITH TWO DOTS BELOW: not included in any glyphset definition\n * U+0768 ARABIC LETTER NOON WITH SMALL TAH: not included in any glyphset definition\n * U+0769 ARABIC LETTER NOON WITH SMALL V: not included in any glyphset definition\n * U+076A ARABIC LETTER LAM WITH BAR: not included in any glyphset definition\n * U+076B ARABIC LETTER REH WITH TWO DOTS VERTICALLY ABOVE: not included in any glyphset definition\n * U+076C ARABIC LETTER REH WITH HAMZA ABOVE: not included in any glyphset definition\n * U+076D ARABIC LETTER SEEN WITH TWO DOTS VERTICALLY ABOVE: not included in any glyphset definition\n * U+076E ARABIC LETTER HAH WITH SMALL ARABIC LETTER TAH BELOW: not included in any glyphset definition\n * U+076F ARABIC LETTER HAH WITH SMALL ARABIC LETTER TAH AND TWO DOTS: not included in any glyphset definition\n * U+0770 ARABIC LETTER SEEN WITH SMALL ARABIC LETTER TAH AND TWO DOTS: not included in any glyphset definition\n * U+0771 ARABIC LETTER REH WITH SMALL ARABIC LETTER TAH AND TWO DOTS: not included in any glyphset definition\n * U+0772 ARABIC LETTER HAH WITH SMALL ARABIC LETTER TAH ABOVE: not included in any glyphset definition\n * U+0773 ARABIC LETTER ALEF WITH EXTENDED ARABIC-INDIC DIGIT TWO ABOVE: not included in any glyphset definition\n * U+0774 ARABIC LETTER ALEF WITH EXTENDED ARABIC-INDIC DIGIT THREE ABOVE: not included in any glyphset definition\n * U+0775 ARABIC LETTER FARSI YEH WITH EXTENDED ARABIC-INDIC DIGIT TWO ABOVE: not included in any glyphset definition\n * U+0776 ARABIC LETTER FARSI YEH WITH EXTENDED ARABIC-INDIC DIGIT THREE ABOVE: not included in any glyphset definition\n * U+0777 ARABIC LETTER FARSI YEH WITH EXTENDED ARABIC-INDIC DIGIT FOUR BELOW: not included in any glyphset definition\n * U+0778 ARABIC LETTER WAW WITH EXTENDED ARABIC-INDIC DIGIT TWO ABOVE: not included in any glyphset definition\n * U+0779 ARABIC LETTER WAW WITH EXTENDED ARABIC-INDIC DIGIT THREE ABOVE: not included in any glyphset definition\n * U+077A ARABIC LETTER YEH BARREE WITH EXTENDED ARABIC-INDIC DIGIT TWO ABOVE: not included in any glyphset definition\n * U+077B ARABIC LETTER YEH BARREE WITH EXTENDED ARABIC-INDIC DIGIT THREE ABOVE: not included in any glyphset definition\n * U+077C ARABIC LETTER HAH WITH EXTENDED ARABIC-INDIC DIGIT FOUR BELOW: not included in any glyphset definition\n * U+077D ARABIC LETTER SEEN WITH EXTENDED ARABIC-INDIC DIGIT FOUR ABOVE: not included in any glyphset definition\n * U+077E ARABIC LETTER SEEN WITH INVERTED V: not included in any glyphset definition\n * U+077F ARABIC LETTER KAF WITH TWO DOTS ABOVE: not included in any glyphset definition\n * U+0890 ARABIC POUND MARK ABOVE: not included in any glyphset definition\n * U+0891 ARABIC PIASTRE MARK ABOVE: not included in any glyphset definition\n * U+08A0 ARABIC LETTER BEH WITH SMALL V BELOW: not included in any glyphset definition\n * U+08AC ARABIC LETTER ROHINGYA YEH: not included in any glyphset definition\n * U+08B6 ARABIC LETTER BEH WITH SMALL MEEM ABOVE: not included in any glyphset definition\n * U+08B7 ARABIC LETTER PEH WITH SMALL MEEM ABOVE: not included in any glyphset definition\n * U+08B8 ARABIC LETTER TEH WITH SMALL TEH ABOVE: not included in any glyphset definition\n * U+08B9 ARABIC LETTER REH WITH SMALL NOON ABOVE: not included in any glyphset definition\n * U+08BA ARABIC LETTER YEH WITH TWO DOTS BELOW AND SMALL NOON ABOVE: not included in any glyphset definition\n * U+08BB ARABIC LETTER AFRICAN FEH: not included in any glyphset definition\n * U+08BC ARABIC LETTER AFRICAN QAF: not included in any glyphset definition\n * U+08BD ARABIC LETTER AFRICAN NOON: not included in any glyphset definition\n * U+08D1 ARABIC LARGE CIRCLE BELOW: not included in any glyphset definition\n * U+08E4 ARABIC CURLY FATHA: not included in any glyphset definition\n * U+08E5 ARABIC CURLY DAMMA: not included in any glyphset definition\n * U+08E6 ARABIC CURLY KASRA: not included in any glyphset definition\n * U+08E7 ARABIC CURLY FATHATAN: not included in any glyphset definition\n * U+08E8 ARABIC CURLY DAMMATAN: not included in any glyphset definition\n * U+08E9 ARABIC CURLY KASRATAN: not included in any glyphset definition\n * U+08EA ARABIC TONE ONE DOT ABOVE: not included in any glyphset definition\n * U+08EB ARABIC TONE TWO DOTS ABOVE: not included in any glyphset definition\n * U+08EC ARABIC TONE LOOP ABOVE: not included in any glyphset definition\n * U+08ED ARABIC TONE ONE DOT BELOW: not included in any glyphset definition\n * U+08EE ARABIC TONE TWO DOTS BELOW: not included in any glyphset definition\n * U+08EF ARABIC TONE LOOP BELOW: not included in any glyphset definition\n * U+08F0 ARABIC OPEN FATHATAN: not included in any glyphset definition\n * U+08F1 ARABIC OPEN DAMMATAN: not included in any glyphset definition\n * U+08F2 ARABIC OPEN KASRATAN: not included in any glyphset definition\n * U+08F3 ARABIC SMALL HIGH WAW: not included in any glyphset definition\n * U+08F4 ARABIC FATHA WITH RING: not included in any glyphset definition\n * U+08F5 ARABIC FATHA WITH DOT ABOVE: not included in any glyphset definition\n * U+08F6 ARABIC KASRA WITH DOT BELOW: not included in any glyphset definition\n * U+08F7 ARABIC LEFT ARROWHEAD ABOVE: not included in any glyphset definition\n * U+08F8 ARABIC RIGHT ARROWHEAD ABOVE: not included in any glyphset definition\n * U+08F9 ARABIC LEFT ARROWHEAD BELOW: not included in any glyphset definition\n * U+08FA ARABIC RIGHT ARROWHEAD BELOW: not included in any glyphset definition\n * U+08FB ARABIC DOUBLE RIGHT ARROWHEAD ABOVE: not included in any glyphset definition\n * U+08FC ARABIC DOUBLE RIGHT ARROWHEAD ABOVE WITH DOT: not included in any glyphset definition\n * U+08FD ARABIC RIGHT ARROWHEAD ABOVE WITH DOT: not included in any glyphset definition\n * U+08FE ARABIC DAMMA WITH DOT: not included in any glyphset definition\n * U+2000 EN QUAD: not included in any glyphset definition\n * U+2001 EM QUAD: not included in any glyphset definition\n * U+2003 EM SPACE: not included in any glyphset definition\n * U+2004 THREE-PER-EM SPACE: not included in any glyphset definition\n * U+2005 FOUR-PER-EM SPACE: not included in any glyphset definition\n * U+2006 SIX-PER-EM SPACE: not included in any glyphset definition\n * U+2007 FIGURE SPACE: not included in any glyphset definition\n * U+2008 PUNCTUATION SPACE: not included in any glyphset definition\n * U+200A HAIR SPACE: not included in any glyphset definition\n * U+200F RIGHT-TO-LEFT MARK: try adding one of: thaana, phags-pa\n * U+2012 FIGURE DASH: not included in any glyphset definition\n * U+2015 HORIZONTAL BAR: not included in any glyphset definition\n * U+201B SINGLE HIGH-REVERSED-9 QUOTATION MARK: not included in any glyphset definition\n * U+201F DOUBLE HIGH-REVERSED-9 QUOTATION MARK: not included in any glyphset definition\n * U+2021 DOUBLE DAGGER: not included in any glyphset definition\n * U+2024 ONE DOT LEADER: try adding armenian\n * U+2028 LINE SEPARATOR: not included in any glyphset definition\n * U+2029 PARAGRAPH SEPARATOR: not included in any glyphset definition\n * U+202A LEFT-TO-RIGHT EMBEDDING: not included in any glyphset definition\n * U+202B RIGHT-TO-LEFT EMBEDDING: not included in any glyphset definition\n * U+202C POP DIRECTIONAL FORMATTING: not included in any glyphset definition\n * U+202D LEFT-TO-RIGHT OVERRIDE: not included in any glyphset definition\n * U+202E RIGHT-TO-LEFT OVERRIDE: try adding tifinagh\n * U+202F NARROW NO-BREAK SPACE: try adding mongolian\n * U+2030 PER MILLE SIGN: not included in any glyphset definition\n * U+2038 CARET: not included in any glyphset definition\n * U+203E OVERLINE: not included in any glyphset definition\n * U+2042 ASTERISM: not included in any glyphset definition\n * U+2070 SUPERSCRIPT ZERO: not included in any glyphset definition\n * U+2075 SUPERSCRIPT FIVE: not included in any glyphset definition\n * U+2076 SUPERSCRIPT SIX: not included in any glyphset definition\n * U+2077 SUPERSCRIPT SEVEN: not included in any glyphset definition\n * U+2078 SUPERSCRIPT EIGHT: not included in any glyphset definition\n * U+2079 SUPERSCRIPT NINE: not included in any glyphset definition\n * U+2213 MINUS-OR-PLUS SIGN: not included in any glyphset definition\n * U+221A SQUARE ROOT: not included in any glyphset definition\n * U+25CC DOTTED CIRCLE: try adding one of: thaana, mongolian, new-tai-lue, sundanese, brahmi, lepcha, bengali, gurmukhi, lao, kharoshthi, syloti-nagri, khmer, oriya, tibetan, rejang, telugu, balinese, canadian-aboriginal, cham, gujarati, coptic, hanunoo, malayalam, limbu, hebrew, sinhala, buginese, tagalog, batak, tifinagh, mandaic, kannada, tagbanwa, tai-viet, chakma, tai-le, myanmar, devanagari, tamil, thai, kaithi, meetei-mayek, javanese, buhid, kayah-li, phags-pa\n * U+FB86 ARABIC LETTER DUL ISOLATED FORM: not included in any glyphset definition\n * U+FB87 ARABIC LETTER DUL FINAL FORM: not included in any glyphset definition\n * U+FBB2 ARABIC SYMBOL DOT ABOVE: not included in any glyphset definition\n * U+FBB3 ARABIC SYMBOL DOT BELOW: not included in any glyphset definition\n * U+FBB4 ARABIC SYMBOL TWO DOTS ABOVE: not included in any glyphset definition\n * U+FBB5 ARABIC SYMBOL TWO DOTS BELOW: not included in any glyphset definition\n * U+FBB6 ARABIC SYMBOL THREE DOTS ABOVE: not included in any glyphset definition\n * U+FBB7 ARABIC SYMBOL THREE DOTS BELOW: not included in any glyphset definition\n * U+FBB8 ARABIC SYMBOL THREE DOTS POINTING DOWNWARDS ABOVE: not included in any glyphset definition\n * U+FBB9 ARABIC SYMBOL THREE DOTS POINTING DOWNWARDS BELOW: not included in any glyphset definition\n * U+FBBA ARABIC SYMBOL FOUR DOTS ABOVE: not included in any glyphset definition\n * U+FBBB ARABIC SYMBOL FOUR DOTS BELOW: not included in any glyphset definition\n * U+FBBC ARABIC SYMBOL DOUBLE VERTICAL BAR BELOW: not included in any glyphset definition\n * U+FBBD ARABIC SYMBOL TWO DOTS VERTICALLY ABOVE: not included in any glyphset definition\n * U+FBBE ARABIC SYMBOL TWO DOTS VERTICALLY BELOW: not included in any glyphset definition\n * U+FBBF ARABIC SYMBOL RING: not included in any glyphset definition\n * U+FBC0 ARABIC SYMBOL SMALL TAH ABOVE: not included in any glyphset definition\n * U+FBC1 ARABIC SYMBOL SMALL TAH BELOW: not included in any glyphset definition\n * U+FBD3 ARABIC LETTER NG ISOLATED FORM: not included in any glyphset definition\n * U+FBD4 ARABIC LETTER NG FINAL FORM: not included in any glyphset definition\n * U+FBD5 ARABIC LETTER NG INITIAL FORM: not included in any glyphset definition\n * U+FBD6 ARABIC LETTER NG MEDIAL FORM: not included in any glyphset definition\n * U+FBD7 ARABIC LETTER U ISOLATED FORM: not included in any glyphset definition\n * U+FBD8 ARABIC LETTER U FINAL FORM: not included in any glyphset definition\n * U+FBD9 ARABIC LETTER OE ISOLATED FORM: not included in any glyphset definition\n * U+FBDA ARABIC LETTER OE FINAL FORM: not included in any glyphset definition\n * U+FBDB ARABIC LETTER YU ISOLATED FORM: not included in any glyphset definition\n * U+FBDC ARABIC LETTER YU FINAL FORM: not included in any glyphset definition\n * U+FBDD ARABIC LETTER U WITH HAMZA ABOVE ISOLATED FORM: not included in any glyphset definition\n * U+FBDE ARABIC LETTER VE ISOLATED FORM: not included in any glyphset definition\n * U+FBDF ARABIC LETTER VE FINAL FORM: not included in any glyphset definition\n * U+FBE0 ARABIC LETTER KIRGHIZ OE ISOLATED FORM: not included in any glyphset definition\n * U+FBE1 ARABIC LETTER KIRGHIZ OE FINAL FORM: not included in any glyphset definition\n * U+FBE2 ARABIC LETTER KIRGHIZ YU ISOLATED FORM: not included in any glyphset definition\n * U+FBE3 ARABIC LETTER KIRGHIZ YU FINAL FORM: not included in any glyphset definition\n * U+FBEA ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH ALEF ISOLATED FORM: not included in any glyphset definition\n * U+FBEB ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH ALEF FINAL FORM: not included in any glyphset definition\n * U+FBEC ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH AE ISOLATED FORM: not included in any glyphset definition\n * U+FBED ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH AE FINAL FORM: not included in any glyphset definition\n * U+FBEE ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH WAW ISOLATED FORM: not included in any glyphset definition\n * U+FBEF ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH WAW FINAL FORM: not included in any glyphset definition\n * U+FBF0 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH U ISOLATED FORM: not included in any glyphset definition\n * U+FBF1 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH U FINAL FORM: not included in any glyphset definition\n * U+FBF2 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH OE ISOLATED FORM: not included in any glyphset definition\n * U+FBF3 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH OE FINAL FORM: not included in any glyphset definition\n * U+FBF4 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH YU ISOLATED FORM: not included in any glyphset definition\n * U+FBF5 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH YU FINAL FORM: not included in any glyphset definition\n * U+FBF6 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH E ISOLATED FORM: not included in any glyphset definition\n * U+FBF7 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH E FINAL FORM: not included in any glyphset definition\n * U+FBF8 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH E INITIAL FORM: not included in any glyphset definition\n * U+FBF9 ARABIC LIGATURE UIGHUR KIRGHIZ YEH WITH HAMZA ABOVE WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FBFA ARABIC LIGATURE UIGHUR KIRGHIZ YEH WITH HAMZA ABOVE WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FBFB ARABIC LIGATURE UIGHUR KIRGHIZ YEH WITH HAMZA ABOVE WITH ALEF MAKSURA INITIAL FORM: not included in any glyphset definition\n * U+FC00 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC01 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FC02 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC03 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FC04 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FC05 ARABIC LIGATURE BEH WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC06 ARABIC LIGATURE BEH WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FC07 ARABIC LIGATURE BEH WITH KHAH ISOLATED FORM: not included in any glyphset definition\n * U+FC08 ARABIC LIGATURE BEH WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC09 ARABIC LIGATURE BEH WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FC0A ARABIC LIGATURE BEH WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FC0B ARABIC LIGATURE TEH WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC0C ARABIC LIGATURE TEH WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FC0D ARABIC LIGATURE TEH WITH KHAH ISOLATED FORM: not included in any glyphset definition\n * U+FC0E ARABIC LIGATURE TEH WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC0F ARABIC LIGATURE TEH WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FC10 ARABIC LIGATURE TEH WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FC11 ARABIC LIGATURE THEH WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC12 ARABIC LIGATURE THEH WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC13 ARABIC LIGATURE THEH WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FC14 ARABIC LIGATURE THEH WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FC15 ARABIC LIGATURE JEEM WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FC16 ARABIC LIGATURE JEEM WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC17 ARABIC LIGATURE HAH WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC18 ARABIC LIGATURE HAH WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC19 ARABIC LIGATURE KHAH WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC1A ARABIC LIGATURE KHAH WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FC1B ARABIC LIGATURE KHAH WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC1C ARABIC LIGATURE SEEN WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC1D ARABIC LIGATURE SEEN WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FC1E ARABIC LIGATURE SEEN WITH KHAH ISOLATED FORM: not included in any glyphset definition\n * U+FC1F ARABIC LIGATURE SEEN WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC20 ARABIC LIGATURE SAD WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FC21 ARABIC LIGATURE SAD WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC22 ARABIC LIGATURE DAD WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC23 ARABIC LIGATURE DAD WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FC24 ARABIC LIGATURE DAD WITH KHAH ISOLATED FORM: not included in any glyphset definition\n * U+FC25 ARABIC LIGATURE DAD WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC26 ARABIC LIGATURE TAH WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FC27 ARABIC LIGATURE TAH WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC28 ARABIC LIGATURE ZAH WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC29 ARABIC LIGATURE AIN WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC2A ARABIC LIGATURE AIN WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC2B ARABIC LIGATURE GHAIN WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC2C ARABIC LIGATURE GHAIN WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC2D ARABIC LIGATURE FEH WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC2E ARABIC LIGATURE FEH WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FC2F ARABIC LIGATURE FEH WITH KHAH ISOLATED FORM: not included in any glyphset definition\n * U+FC30 ARABIC LIGATURE FEH WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC31 ARABIC LIGATURE FEH WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FC32 ARABIC LIGATURE FEH WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FC33 ARABIC LIGATURE QAF WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FC34 ARABIC LIGATURE QAF WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC35 ARABIC LIGATURE QAF WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FC36 ARABIC LIGATURE QAF WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FC37 ARABIC LIGATURE KAF WITH ALEF ISOLATED FORM: not included in any glyphset definition\n * U+FC38 ARABIC LIGATURE KAF WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC39 ARABIC LIGATURE KAF WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FC3A ARABIC LIGATURE KAF WITH KHAH ISOLATED FORM: not included in any glyphset definition\n * U+FC3B ARABIC LIGATURE KAF WITH LAM ISOLATED FORM: not included in any glyphset definition\n * U+FC3C ARABIC LIGATURE KAF WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC3D ARABIC LIGATURE KAF WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FC3E ARABIC LIGATURE KAF WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FC3F ARABIC LIGATURE LAM WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC40 ARABIC LIGATURE LAM WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FC41 ARABIC LIGATURE LAM WITH KHAH ISOLATED FORM: not included in any glyphset definition\n * U+FC42 ARABIC LIGATURE LAM WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC43 ARABIC LIGATURE LAM WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FC44 ARABIC LIGATURE LAM WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FC45 ARABIC LIGATURE MEEM WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC46 ARABIC LIGATURE MEEM WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FC47 ARABIC LIGATURE MEEM WITH KHAH ISOLATED FORM: not included in any glyphset definition\n * U+FC48 ARABIC LIGATURE MEEM WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC49 ARABIC LIGATURE MEEM WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FC4A ARABIC LIGATURE MEEM WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FC4B ARABIC LIGATURE NOON WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC4C ARABIC LIGATURE NOON WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FC4D ARABIC LIGATURE NOON WITH KHAH ISOLATED FORM: not included in any glyphset definition\n * U+FC4E ARABIC LIGATURE NOON WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC4F ARABIC LIGATURE NOON WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FC50 ARABIC LIGATURE NOON WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FC51 ARABIC LIGATURE HEH WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC52 ARABIC LIGATURE HEH WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC53 ARABIC LIGATURE HEH WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FC54 ARABIC LIGATURE HEH WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FC55 ARABIC LIGATURE YEH WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC56 ARABIC LIGATURE YEH WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FC57 ARABIC LIGATURE YEH WITH KHAH ISOLATED FORM: not included in any glyphset definition\n * U+FC58 ARABIC LIGATURE YEH WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FC59 ARABIC LIGATURE YEH WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FC5A ARABIC LIGATURE YEH WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FC5B ARABIC LIGATURE THAL WITH SUPERSCRIPT ALEF ISOLATED FORM: not included in any glyphset definition\n * U+FC5C ARABIC LIGATURE REH WITH SUPERSCRIPT ALEF ISOLATED FORM: not included in any glyphset definition\n * U+FC5D ARABIC LIGATURE ALEF MAKSURA WITH SUPERSCRIPT ALEF ISOLATED FORM: not included in any glyphset definition\n * U+FC5E ARABIC LIGATURE SHADDA WITH DAMMATAN ISOLATED FORM: not included in any glyphset definition\n * U+FC5F ARABIC LIGATURE SHADDA WITH KASRATAN ISOLATED FORM: not included in any glyphset definition\n * U+FC60 ARABIC LIGATURE SHADDA WITH FATHA ISOLATED FORM: not included in any glyphset definition\n * U+FC61 ARABIC LIGATURE SHADDA WITH DAMMA ISOLATED FORM: not included in any glyphset definition\n * U+FC62 ARABIC LIGATURE SHADDA WITH KASRA ISOLATED FORM: not included in any glyphset definition\n * U+FC63 ARABIC LIGATURE SHADDA WITH SUPERSCRIPT ALEF ISOLATED FORM: not included in any glyphset definition\n * U+FC64 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH REH FINAL FORM: not included in any glyphset definition\n * U+FC65 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH ZAIN FINAL FORM: not included in any glyphset definition\n * U+FC66 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FC67 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH NOON FINAL FORM: not included in any glyphset definition\n * U+FC68 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FC69 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FC6A ARABIC LIGATURE BEH WITH REH FINAL FORM: not included in any glyphset definition\n * U+FC6B ARABIC LIGATURE BEH WITH ZAIN FINAL FORM: not included in any glyphset definition\n * U+FC6C ARABIC LIGATURE BEH WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FC6D ARABIC LIGATURE BEH WITH NOON FINAL FORM: not included in any glyphset definition\n * U+FC6E ARABIC LIGATURE BEH WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FC6F ARABIC LIGATURE BEH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FC70 ARABIC LIGATURE TEH WITH REH FINAL FORM: not included in any glyphset definition\n * U+FC71 ARABIC LIGATURE TEH WITH ZAIN FINAL FORM: not included in any glyphset definition\n * U+FC72 ARABIC LIGATURE TEH WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FC73 ARABIC LIGATURE TEH WITH NOON FINAL FORM: not included in any glyphset definition\n * U+FC74 ARABIC LIGATURE TEH WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FC75 ARABIC LIGATURE TEH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FC76 ARABIC LIGATURE THEH WITH REH FINAL FORM: not included in any glyphset definition\n * U+FC77 ARABIC LIGATURE THEH WITH ZAIN FINAL FORM: not included in any glyphset definition\n * U+FC78 ARABIC LIGATURE THEH WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FC79 ARABIC LIGATURE THEH WITH NOON FINAL FORM: not included in any glyphset definition\n * U+FC7A ARABIC LIGATURE THEH WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FC7B ARABIC LIGATURE THEH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FC7C ARABIC LIGATURE FEH WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FC7D ARABIC LIGATURE FEH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FC7E ARABIC LIGATURE QAF WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FC7F ARABIC LIGATURE QAF WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FC80 ARABIC LIGATURE KAF WITH ALEF FINAL FORM: not included in any glyphset definition\n * U+FC81 ARABIC LIGATURE KAF WITH LAM FINAL FORM: not included in any glyphset definition\n * U+FC82 ARABIC LIGATURE KAF WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FC83 ARABIC LIGATURE KAF WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FC84 ARABIC LIGATURE KAF WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FC85 ARABIC LIGATURE LAM WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FC86 ARABIC LIGATURE LAM WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FC87 ARABIC LIGATURE LAM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FC88 ARABIC LIGATURE MEEM WITH ALEF FINAL FORM: not included in any glyphset definition\n * U+FC89 ARABIC LIGATURE MEEM WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FC8A ARABIC LIGATURE NOON WITH REH FINAL FORM: not included in any glyphset definition\n * U+FC8B ARABIC LIGATURE NOON WITH ZAIN FINAL FORM: not included in any glyphset definition\n * U+FC8C ARABIC LIGATURE NOON WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FC8D ARABIC LIGATURE NOON WITH NOON FINAL FORM: not included in any glyphset definition\n * U+FC8E ARABIC LIGATURE NOON WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FC8F ARABIC LIGATURE NOON WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FC90 ARABIC LIGATURE ALEF MAKSURA WITH SUPERSCRIPT ALEF FINAL FORM: not included in any glyphset definition\n * U+FC91 ARABIC LIGATURE YEH WITH REH FINAL FORM: not included in any glyphset definition\n * U+FC92 ARABIC LIGATURE YEH WITH ZAIN FINAL FORM: not included in any glyphset definition\n * U+FC93 ARABIC LIGATURE YEH WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FC94 ARABIC LIGATURE YEH WITH NOON FINAL FORM: not included in any glyphset definition\n * U+FC95 ARABIC LIGATURE YEH WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FC96 ARABIC LIGATURE YEH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FC97 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FC98 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FC99 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH KHAH INITIAL FORM: not included in any glyphset definition\n * U+FC9A ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FC9B ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH HEH INITIAL FORM: not included in any glyphset definition\n * U+FC9C ARABIC LIGATURE BEH WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FC9D ARABIC LIGATURE BEH WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FC9E ARABIC LIGATURE BEH WITH KHAH INITIAL FORM: not included in any glyphset definition\n * U+FC9F ARABIC LIGATURE BEH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCA0 ARABIC LIGATURE BEH WITH HEH INITIAL FORM: not included in any glyphset definition\n * U+FCA1 ARABIC LIGATURE TEH WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FCA2 ARABIC LIGATURE TEH WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FCA3 ARABIC LIGATURE TEH WITH KHAH INITIAL FORM: not included in any glyphset definition\n * U+FCA4 ARABIC LIGATURE TEH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCA5 ARABIC LIGATURE TEH WITH HEH INITIAL FORM: not included in any glyphset definition\n * U+FCA6 ARABIC LIGATURE THEH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCA7 ARABIC LIGATURE JEEM WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FCA8 ARABIC LIGATURE JEEM WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCA9 ARABIC LIGATURE HAH WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FCAA ARABIC LIGATURE HAH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCAB ARABIC LIGATURE KHAH WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FCAC ARABIC LIGATURE KHAH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCAD ARABIC LIGATURE SEEN WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FCAE ARABIC LIGATURE SEEN WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FCAF ARABIC LIGATURE SEEN WITH KHAH INITIAL FORM: not included in any glyphset definition\n * U+FCB0 ARABIC LIGATURE SEEN WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCB1 ARABIC LIGATURE SAD WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FCB2 ARABIC LIGATURE SAD WITH KHAH INITIAL FORM: not included in any glyphset definition\n * U+FCB3 ARABIC LIGATURE SAD WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCB4 ARABIC LIGATURE DAD WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FCB5 ARABIC LIGATURE DAD WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FCB6 ARABIC LIGATURE DAD WITH KHAH INITIAL FORM: not included in any glyphset definition\n * U+FCB7 ARABIC LIGATURE DAD WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCB8 ARABIC LIGATURE TAH WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FCB9 ARABIC LIGATURE ZAH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCBA ARABIC LIGATURE AIN WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FCBB ARABIC LIGATURE AIN WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCBC ARABIC LIGATURE GHAIN WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FCBD ARABIC LIGATURE GHAIN WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCBE ARABIC LIGATURE FEH WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FCBF ARABIC LIGATURE FEH WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FCC0 ARABIC LIGATURE FEH WITH KHAH INITIAL FORM: not included in any glyphset definition\n * U+FCC1 ARABIC LIGATURE FEH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCC2 ARABIC LIGATURE QAF WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FCC3 ARABIC LIGATURE QAF WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCC4 ARABIC LIGATURE KAF WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FCC5 ARABIC LIGATURE KAF WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FCC6 ARABIC LIGATURE KAF WITH KHAH INITIAL FORM: not included in any glyphset definition\n * U+FCC7 ARABIC LIGATURE KAF WITH LAM INITIAL FORM: not included in any glyphset definition\n * U+FCC8 ARABIC LIGATURE KAF WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCC9 ARABIC LIGATURE LAM WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FCCA ARABIC LIGATURE LAM WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FCCB ARABIC LIGATURE LAM WITH KHAH INITIAL FORM: not included in any glyphset definition\n * U+FCCC ARABIC LIGATURE LAM WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCCD ARABIC LIGATURE LAM WITH HEH INITIAL FORM: not included in any glyphset definition\n * U+FCCE ARABIC LIGATURE MEEM WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FCCF ARABIC LIGATURE MEEM WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FCD0 ARABIC LIGATURE MEEM WITH KHAH INITIAL FORM: not included in any glyphset definition\n * U+FCD1 ARABIC LIGATURE MEEM WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCD2 ARABIC LIGATURE NOON WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FCD3 ARABIC LIGATURE NOON WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FCD4 ARABIC LIGATURE NOON WITH KHAH INITIAL FORM: not included in any glyphset definition\n * U+FCD5 ARABIC LIGATURE NOON WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCD6 ARABIC LIGATURE NOON WITH HEH INITIAL FORM: not included in any glyphset definition\n * U+FCD7 ARABIC LIGATURE HEH WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FCD8 ARABIC LIGATURE HEH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCD9 ARABIC LIGATURE HEH WITH SUPERSCRIPT ALEF INITIAL FORM: not included in any glyphset definition\n * U+FCDA ARABIC LIGATURE YEH WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FCDB ARABIC LIGATURE YEH WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FCDC ARABIC LIGATURE YEH WITH KHAH INITIAL FORM: not included in any glyphset definition\n * U+FCDD ARABIC LIGATURE YEH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FCDE ARABIC LIGATURE YEH WITH HEH INITIAL FORM: not included in any glyphset definition\n * U+FCDF ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH MEEM MEDIAL FORM: not included in any glyphset definition\n * U+FCE0 ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH HEH MEDIAL FORM: not included in any glyphset definition\n * U+FCE1 ARABIC LIGATURE BEH WITH MEEM MEDIAL FORM: not included in any glyphset definition\n * U+FCE2 ARABIC LIGATURE BEH WITH HEH MEDIAL FORM: not included in any glyphset definition\n * U+FCE3 ARABIC LIGATURE TEH WITH MEEM MEDIAL FORM: not included in any glyphset definition\n * U+FCE4 ARABIC LIGATURE TEH WITH HEH MEDIAL FORM: not included in any glyphset definition\n * U+FCE5 ARABIC LIGATURE THEH WITH MEEM MEDIAL FORM: not included in any glyphset definition\n * U+FCE6 ARABIC LIGATURE THEH WITH HEH MEDIAL FORM: not included in any glyphset definition\n * U+FCE7 ARABIC LIGATURE SEEN WITH MEEM MEDIAL FORM: not included in any glyphset definition\n * U+FCE8 ARABIC LIGATURE SEEN WITH HEH MEDIAL FORM: not included in any glyphset definition\n * U+FCE9 ARABIC LIGATURE SHEEN WITH MEEM MEDIAL FORM: not included in any glyphset definition\n * U+FCEA ARABIC LIGATURE SHEEN WITH HEH MEDIAL FORM: not included in any glyphset definition\n * U+FCEB ARABIC LIGATURE KAF WITH LAM MEDIAL FORM: not included in any glyphset definition\n * U+FCEC ARABIC LIGATURE KAF WITH MEEM MEDIAL FORM: not included in any glyphset definition\n * U+FCED ARABIC LIGATURE LAM WITH MEEM MEDIAL FORM: not included in any glyphset definition\n * U+FCEE ARABIC LIGATURE NOON WITH MEEM MEDIAL FORM: not included in any glyphset definition\n * U+FCEF ARABIC LIGATURE NOON WITH HEH MEDIAL FORM: not included in any glyphset definition\n * U+FCF0 ARABIC LIGATURE YEH WITH MEEM MEDIAL FORM: not included in any glyphset definition\n * U+FCF1 ARABIC LIGATURE YEH WITH HEH MEDIAL FORM: not included in any glyphset definition\n * U+FCF2 ARABIC LIGATURE SHADDA WITH FATHA MEDIAL FORM: not included in any glyphset definition\n * U+FCF3 ARABIC LIGATURE SHADDA WITH DAMMA MEDIAL FORM: not included in any glyphset definition\n * U+FCF4 ARABIC LIGATURE SHADDA WITH KASRA MEDIAL FORM: not included in any glyphset definition\n * U+FCF5 ARABIC LIGATURE TAH WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FCF6 ARABIC LIGATURE TAH WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FCF7 ARABIC LIGATURE AIN WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FCF8 ARABIC LIGATURE AIN WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FCF9 ARABIC LIGATURE GHAIN WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FCFA ARABIC LIGATURE GHAIN WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FCFB ARABIC LIGATURE SEEN WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FCFC ARABIC LIGATURE SEEN WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FCFD ARABIC LIGATURE SHEEN WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FCFE ARABIC LIGATURE SHEEN WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FCFF ARABIC LIGATURE HAH WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FD00 ARABIC LIGATURE HAH WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FD01 ARABIC LIGATURE JEEM WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FD02 ARABIC LIGATURE JEEM WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FD03 ARABIC LIGATURE KHAH WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FD04 ARABIC LIGATURE KHAH WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FD05 ARABIC LIGATURE SAD WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FD06 ARABIC LIGATURE SAD WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FD07 ARABIC LIGATURE DAD WITH ALEF MAKSURA ISOLATED FORM: not included in any glyphset definition\n * U+FD08 ARABIC LIGATURE DAD WITH YEH ISOLATED FORM: not included in any glyphset definition\n * U+FD09 ARABIC LIGATURE SHEEN WITH JEEM ISOLATED FORM: not included in any glyphset definition\n * U+FD0A ARABIC LIGATURE SHEEN WITH HAH ISOLATED FORM: not included in any glyphset definition\n * U+FD0B ARABIC LIGATURE SHEEN WITH KHAH ISOLATED FORM: not included in any glyphset definition\n * U+FD0C ARABIC LIGATURE SHEEN WITH MEEM ISOLATED FORM: not included in any glyphset definition\n * U+FD0D ARABIC LIGATURE SHEEN WITH REH ISOLATED FORM: not included in any glyphset definition\n * U+FD0E ARABIC LIGATURE SEEN WITH REH ISOLATED FORM: not included in any glyphset definition\n * U+FD0F ARABIC LIGATURE SAD WITH REH ISOLATED FORM: not included in any glyphset definition\n * U+FD10 ARABIC LIGATURE DAD WITH REH ISOLATED FORM: not included in any glyphset definition\n * U+FD11 ARABIC LIGATURE TAH WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD12 ARABIC LIGATURE TAH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD13 ARABIC LIGATURE AIN WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD14 ARABIC LIGATURE AIN WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD15 ARABIC LIGATURE GHAIN WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD16 ARABIC LIGATURE GHAIN WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD17 ARABIC LIGATURE SEEN WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD18 ARABIC LIGATURE SEEN WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD19 ARABIC LIGATURE SHEEN WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD1A ARABIC LIGATURE SHEEN WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD1B ARABIC LIGATURE HAH WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD1C ARABIC LIGATURE HAH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD1D ARABIC LIGATURE JEEM WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD1E ARABIC LIGATURE JEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD1F ARABIC LIGATURE KHAH WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD20 ARABIC LIGATURE KHAH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD21 ARABIC LIGATURE SAD WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD22 ARABIC LIGATURE SAD WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD23 ARABIC LIGATURE DAD WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD24 ARABIC LIGATURE DAD WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD25 ARABIC LIGATURE SHEEN WITH JEEM FINAL FORM: not included in any glyphset definition\n * U+FD26 ARABIC LIGATURE SHEEN WITH HAH FINAL FORM: not included in any glyphset definition\n * U+FD27 ARABIC LIGATURE SHEEN WITH KHAH FINAL FORM: not included in any glyphset definition\n * U+FD28 ARABIC LIGATURE SHEEN WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FD29 ARABIC LIGATURE SHEEN WITH REH FINAL FORM: not included in any glyphset definition\n * U+FD2A ARABIC LIGATURE SEEN WITH REH FINAL FORM: not included in any glyphset definition\n * U+FD2B ARABIC LIGATURE SAD WITH REH FINAL FORM: not included in any glyphset definition\n * U+FD2C ARABIC LIGATURE DAD WITH REH FINAL FORM: not included in any glyphset definition\n * U+FD2D ARABIC LIGATURE SHEEN WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FD2E ARABIC LIGATURE SHEEN WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FD2F ARABIC LIGATURE SHEEN WITH KHAH INITIAL FORM: not included in any glyphset definition\n * U+FD30 ARABIC LIGATURE SHEEN WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD31 ARABIC LIGATURE SEEN WITH HEH INITIAL FORM: not included in any glyphset definition\n * U+FD32 ARABIC LIGATURE SHEEN WITH HEH INITIAL FORM: not included in any glyphset definition\n * U+FD33 ARABIC LIGATURE TAH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD34 ARABIC LIGATURE SEEN WITH JEEM MEDIAL FORM: not included in any glyphset definition\n * U+FD35 ARABIC LIGATURE SEEN WITH HAH MEDIAL FORM: not included in any glyphset definition\n * U+FD36 ARABIC LIGATURE SEEN WITH KHAH MEDIAL FORM: not included in any glyphset definition\n * U+FD37 ARABIC LIGATURE SHEEN WITH JEEM MEDIAL FORM: not included in any glyphset definition\n * U+FD38 ARABIC LIGATURE SHEEN WITH HAH MEDIAL FORM: not included in any glyphset definition\n * U+FD39 ARABIC LIGATURE SHEEN WITH KHAH MEDIAL FORM: not included in any glyphset definition\n * U+FD3A ARABIC LIGATURE TAH WITH MEEM MEDIAL FORM: not included in any glyphset definition\n * U+FD3B ARABIC LIGATURE ZAH WITH MEEM MEDIAL FORM: not included in any glyphset definition\n * U+FD3C ARABIC LIGATURE ALEF WITH FATHATAN FINAL FORM: not included in any glyphset definition\n * U+FD3D ARABIC LIGATURE ALEF WITH FATHATAN ISOLATED FORM: not included in any glyphset definition\n * U+FD50 ARABIC LIGATURE TEH WITH JEEM WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD51 ARABIC LIGATURE TEH WITH HAH WITH JEEM FINAL FORM: not included in any glyphset definition\n * U+FD52 ARABIC LIGATURE TEH WITH HAH WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FD53 ARABIC LIGATURE TEH WITH HAH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD54 ARABIC LIGATURE TEH WITH KHAH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD55 ARABIC LIGATURE TEH WITH MEEM WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FD56 ARABIC LIGATURE TEH WITH MEEM WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FD57 ARABIC LIGATURE TEH WITH MEEM WITH KHAH INITIAL FORM: not included in any glyphset definition\n * U+FD58 ARABIC LIGATURE JEEM WITH MEEM WITH HAH FINAL FORM: not included in any glyphset definition\n * U+FD59 ARABIC LIGATURE JEEM WITH MEEM WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FD5A ARABIC LIGATURE HAH WITH MEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD5B ARABIC LIGATURE HAH WITH MEEM WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD5C ARABIC LIGATURE SEEN WITH HAH WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FD5D ARABIC LIGATURE SEEN WITH JEEM WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FD5E ARABIC LIGATURE SEEN WITH JEEM WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD5F ARABIC LIGATURE SEEN WITH MEEM WITH HAH FINAL FORM: not included in any glyphset definition\n * U+FD60 ARABIC LIGATURE SEEN WITH MEEM WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FD61 ARABIC LIGATURE SEEN WITH MEEM WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FD62 ARABIC LIGATURE SEEN WITH MEEM WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FD63 ARABIC LIGATURE SEEN WITH MEEM WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD64 ARABIC LIGATURE SAD WITH HAH WITH HAH FINAL FORM: not included in any glyphset definition\n * U+FD65 ARABIC LIGATURE SAD WITH HAH WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FD66 ARABIC LIGATURE SAD WITH MEEM WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FD67 ARABIC LIGATURE SHEEN WITH HAH WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FD68 ARABIC LIGATURE SHEEN WITH HAH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD69 ARABIC LIGATURE SHEEN WITH JEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD6A ARABIC LIGATURE SHEEN WITH MEEM WITH KHAH FINAL FORM: not included in any glyphset definition\n * U+FD6B ARABIC LIGATURE SHEEN WITH MEEM WITH KHAH INITIAL FORM: not included in any glyphset definition\n * U+FD6C ARABIC LIGATURE SHEEN WITH MEEM WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FD6D ARABIC LIGATURE SHEEN WITH MEEM WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD6E ARABIC LIGATURE DAD WITH HAH WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD6F ARABIC LIGATURE DAD WITH KHAH WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FD70 ARABIC LIGATURE DAD WITH KHAH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD71 ARABIC LIGATURE TAH WITH MEEM WITH HAH FINAL FORM: not included in any glyphset definition\n * U+FD72 ARABIC LIGATURE TAH WITH MEEM WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FD73 ARABIC LIGATURE TAH WITH MEEM WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD74 ARABIC LIGATURE TAH WITH MEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD75 ARABIC LIGATURE AIN WITH JEEM WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FD76 ARABIC LIGATURE AIN WITH MEEM WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FD77 ARABIC LIGATURE AIN WITH MEEM WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD78 ARABIC LIGATURE AIN WITH MEEM WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD79 ARABIC LIGATURE GHAIN WITH MEEM WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FD7A ARABIC LIGATURE GHAIN WITH MEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD7B ARABIC LIGATURE GHAIN WITH MEEM WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD7C ARABIC LIGATURE FEH WITH KHAH WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FD7D ARABIC LIGATURE FEH WITH KHAH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD7E ARABIC LIGATURE QAF WITH MEEM WITH HAH FINAL FORM: not included in any glyphset definition\n * U+FD7F ARABIC LIGATURE QAF WITH MEEM WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FD80 ARABIC LIGATURE LAM WITH HAH WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FD81 ARABIC LIGATURE LAM WITH HAH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD82 ARABIC LIGATURE LAM WITH HAH WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD83 ARABIC LIGATURE LAM WITH JEEM WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FD84 ARABIC LIGATURE LAM WITH JEEM WITH JEEM FINAL FORM: not included in any glyphset definition\n * U+FD85 ARABIC LIGATURE LAM WITH KHAH WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FD86 ARABIC LIGATURE LAM WITH KHAH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD87 ARABIC LIGATURE LAM WITH MEEM WITH HAH FINAL FORM: not included in any glyphset definition\n * U+FD88 ARABIC LIGATURE LAM WITH MEEM WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FD89 ARABIC LIGATURE MEEM WITH HAH WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FD8A ARABIC LIGATURE MEEM WITH HAH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD8B ARABIC LIGATURE MEEM WITH HAH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD8C ARABIC LIGATURE MEEM WITH JEEM WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FD8D ARABIC LIGATURE MEEM WITH JEEM WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD8E ARABIC LIGATURE MEEM WITH KHAH WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FD8F ARABIC LIGATURE MEEM WITH KHAH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD92 ARABIC LIGATURE MEEM WITH JEEM WITH KHAH INITIAL FORM: not included in any glyphset definition\n * U+FD93 ARABIC LIGATURE HEH WITH MEEM WITH JEEM INITIAL FORM: not included in any glyphset definition\n * U+FD94 ARABIC LIGATURE HEH WITH MEEM WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD95 ARABIC LIGATURE NOON WITH HAH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD96 ARABIC LIGATURE NOON WITH HAH WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD97 ARABIC LIGATURE NOON WITH JEEM WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FD98 ARABIC LIGATURE NOON WITH JEEM WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD99 ARABIC LIGATURE NOON WITH JEEM WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD9A ARABIC LIGATURE NOON WITH MEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD9B ARABIC LIGATURE NOON WITH MEEM WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FD9C ARABIC LIGATURE YEH WITH MEEM WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FD9D ARABIC LIGATURE YEH WITH MEEM WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FD9E ARABIC LIGATURE BEH WITH KHAH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FD9F ARABIC LIGATURE TEH WITH JEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDA0 ARABIC LIGATURE TEH WITH JEEM WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FDA1 ARABIC LIGATURE TEH WITH KHAH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDA2 ARABIC LIGATURE TEH WITH KHAH WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FDA3 ARABIC LIGATURE TEH WITH MEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDA4 ARABIC LIGATURE TEH WITH MEEM WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FDA5 ARABIC LIGATURE JEEM WITH MEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDA6 ARABIC LIGATURE JEEM WITH HAH WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FDA7 ARABIC LIGATURE JEEM WITH MEEM WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FDA8 ARABIC LIGATURE SEEN WITH KHAH WITH ALEF MAKSURA FINAL FORM: not included in any glyphset definition\n * U+FDA9 ARABIC LIGATURE SAD WITH HAH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDAA ARABIC LIGATURE SHEEN WITH HAH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDAB ARABIC LIGATURE DAD WITH HAH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDAC ARABIC LIGATURE LAM WITH JEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDAD ARABIC LIGATURE LAM WITH MEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDAE ARABIC LIGATURE YEH WITH HAH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDAF ARABIC LIGATURE YEH WITH JEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDB0 ARABIC LIGATURE YEH WITH MEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDB1 ARABIC LIGATURE MEEM WITH MEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDB2 ARABIC LIGATURE QAF WITH MEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDB3 ARABIC LIGATURE NOON WITH HAH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDB4 ARABIC LIGATURE QAF WITH MEEM WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FDB5 ARABIC LIGATURE LAM WITH HAH WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FDB6 ARABIC LIGATURE AIN WITH MEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDB7 ARABIC LIGATURE KAF WITH MEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDB8 ARABIC LIGATURE NOON WITH JEEM WITH HAH INITIAL FORM: not included in any glyphset definition\n * U+FDB9 ARABIC LIGATURE MEEM WITH KHAH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDBA ARABIC LIGATURE LAM WITH JEEM WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FDBB ARABIC LIGATURE KAF WITH MEEM WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FDBC ARABIC LIGATURE LAM WITH JEEM WITH MEEM FINAL FORM: not included in any glyphset definition\n * U+FDBD ARABIC LIGATURE NOON WITH JEEM WITH HAH FINAL FORM: not included in any glyphset definition\n * U+FDBE ARABIC LIGATURE JEEM WITH HAH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDBF ARABIC LIGATURE HAH WITH JEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDC0 ARABIC LIGATURE MEEM WITH JEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDC1 ARABIC LIGATURE FEH WITH MEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDC2 ARABIC LIGATURE BEH WITH HAH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDC3 ARABIC LIGATURE KAF WITH MEEM WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FDC4 ARABIC LIGATURE AIN WITH JEEM WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FDC5 ARABIC LIGATURE SAD WITH MEEM WITH MEEM INITIAL FORM: not included in any glyphset definition\n * U+FDC6 ARABIC LIGATURE SEEN WITH KHAH WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDC7 ARABIC LIGATURE NOON WITH JEEM WITH YEH FINAL FORM: not included in any glyphset definition\n * U+FDF0 ARABIC LIGATURE SALLA USED AS KORANIC STOP SIGN ISOLATED FORM: not included in any glyphset definition\n * U+FDF1 ARABIC LIGATURE QALA USED AS KORANIC STOP SIGN ISOLATED FORM: not included in any glyphset definition\n * U+FDF3 ARABIC LIGATURE AKBAR ISOLATED FORM: not included in any glyphset definition\n * U+FDF4 ARABIC LIGATURE MOHAMMAD ISOLATED FORM: not included in any glyphset definition\n * U+FDF5 ARABIC LIGATURE SALAM ISOLATED FORM: not included in any glyphset definition\n * U+FDF6 ARABIC LIGATURE RASOUL ISOLATED FORM: not included in any glyphset definition\n * U+FDF7 ARABIC LIGATURE ALAYHE ISOLATED FORM: not included in any glyphset definition\n * U+FDF8 ARABIC LIGATURE WASALLAM ISOLATED FORM: not included in any glyphset definition\n * U+FDF9 ARABIC LIGATURE SALLA ISOLATED FORM: not included in any glyphset definition\n * U+FDFB ARABIC LIGATURE JALLAJALALOUHOU: not included in any glyphset definition\n * U+FE70 ARABIC FATHATAN ISOLATED FORM: not included in any glyphset definition\n * U+FE71 ARABIC TATWEEL WITH FATHATAN ABOVE: not included in any glyphset definition\n * U+FE72 ARABIC DAMMATAN ISOLATED FORM: not included in any glyphset definition\n * U+FE74 ARABIC KASRATAN ISOLATED FORM: not included in any glyphset definition\n * U+FE76 ARABIC FATHA ISOLATED FORM: not included in any glyphset definition\n * U+FE77 ARABIC FATHA MEDIAL FORM: not included in any glyphset definition\n * U+FE78 ARABIC DAMMA ISOLATED FORM: not included in any glyphset definition\n * U+FE79 ARABIC DAMMA MEDIAL FORM: not included in any glyphset definition\n * U+FE7A ARABIC KASRA ISOLATED FORM: not included in any glyphset definition\n * U+FE7B ARABIC KASRA MEDIAL FORM: not included in any glyphset definition\n * U+FE7C ARABIC SHADDA ISOLATED FORM: not included in any glyphset definition\n * U+FE7D ARABIC SHADDA MEDIAL FORM: not included in any glyphset definition\n * U+FE7E ARABIC SUKUN ISOLATED FORM: not included in any glyphset definition\n * U+FE7F ARABIC SUKUN MEDIAL FORM: not included in any glyphset definition\n * U+1EE00 ARABIC MATHEMATICAL ALEF: not included in any glyphset definition\n * U+1EE01 ARABIC MATHEMATICAL BEH: not included in any glyphset definition\n * U+1EE02 ARABIC MATHEMATICAL JEEM: not included in any glyphset definition\n * U+1EE03 ARABIC MATHEMATICAL DAL: not included in any glyphset definition\n * U+1EE05 ARABIC MATHEMATICAL WAW: not included in any glyphset definition\n * U+1EE06 ARABIC MATHEMATICAL ZAIN: not included in any glyphset definition\n * U+1EE07 ARABIC MATHEMATICAL HAH: not included in any glyphset definition\n * U+1EE08 ARABIC MATHEMATICAL TAH: not included in any glyphset definition\n * U+1EE09 ARABIC MATHEMATICAL YEH: not included in any glyphset definition\n * U+1EE0A ARABIC MATHEMATICAL KAF: not included in any glyphset definition\n * U+1EE0B ARABIC MATHEMATICAL LAM: not included in any glyphset definition\n * U+1EE0C ARABIC MATHEMATICAL MEEM: not included in any glyphset definition\n * U+1EE0D ARABIC MATHEMATICAL NOON: not included in any glyphset definition\n * U+1EE0E ARABIC MATHEMATICAL SEEN: not included in any glyphset definition\n * U+1EE0F ARABIC MATHEMATICAL AIN: not included in any glyphset definition\n * U+1EE10 ARABIC MATHEMATICAL FEH: not included in any glyphset definition\n * U+1EE11 ARABIC MATHEMATICAL SAD: not included in any glyphset definition\n * U+1EE12 ARABIC MATHEMATICAL QAF: not included in any glyphset definition\n * U+1EE13 ARABIC MATHEMATICAL REH: not included in any glyphset definition\n * U+1EE14 ARABIC MATHEMATICAL SHEEN: not included in any glyphset definition\n * U+1EE15 ARABIC MATHEMATICAL TEH: not included in any glyphset definition\n * U+1EE16 ARABIC MATHEMATICAL THEH: not included in any glyphset definition\n * U+1EE17 ARABIC MATHEMATICAL KHAH: not included in any glyphset definition\n * U+1EE18 ARABIC MATHEMATICAL THAL: not included in any glyphset definition\n * U+1EE19 ARABIC MATHEMATICAL DAD: not included in any glyphset definition\n * U+1EE1A ARABIC MATHEMATICAL ZAH: not included in any glyphset definition\n * U+1EE1B ARABIC MATHEMATICAL GHAIN: not included in any glyphset definition\n * U+1EE1C ARABIC MATHEMATICAL DOTLESS BEH: not included in any glyphset definition\n * U+1EE1D ARABIC MATHEMATICAL DOTLESS NOON: not included in any glyphset definition\n * U+1EE1E ARABIC MATHEMATICAL DOTLESS FEH: not included in any glyphset definition\n * U+1EE1F ARABIC MATHEMATICAL DOTLESS QAF: not included in any glyphset definition\n * U+1EE21 ARABIC MATHEMATICAL INITIAL BEH: not included in any glyphset definition\n * U+1EE22 ARABIC MATHEMATICAL INITIAL JEEM: not included in any glyphset definition\n * U+1EE24 ARABIC MATHEMATICAL INITIAL HEH: not included in any glyphset definition\n * U+1EE27 ARABIC MATHEMATICAL INITIAL HAH: not included in any glyphset definition\n * U+1EE29 ARABIC MATHEMATICAL INITIAL YEH: not included in any glyphset definition\n * U+1EE2A ARABIC MATHEMATICAL INITIAL KAF: not included in any glyphset definition\n * U+1EE2B ARABIC MATHEMATICAL INITIAL LAM: not included in any glyphset definition\n * U+1EE2C ARABIC MATHEMATICAL INITIAL MEEM: not included in any glyphset definition\n * U+1EE2D ARABIC MATHEMATICAL INITIAL NOON: not included in any glyphset definition\n * U+1EE2E ARABIC MATHEMATICAL INITIAL SEEN: not included in any glyphset definition\n * U+1EE2F ARABIC MATHEMATICAL INITIAL AIN: not included in any glyphset definition\n * U+1EE30 ARABIC MATHEMATICAL INITIAL FEH: not included in any glyphset definition\n * U+1EE31 ARABIC MATHEMATICAL INITIAL SAD: not included in any glyphset definition\n * U+1EE32 ARABIC MATHEMATICAL INITIAL QAF: not included in any glyphset definition\n * U+1EE34 ARABIC MATHEMATICAL INITIAL SHEEN: not included in any glyphset definition\n * U+1EE35 ARABIC MATHEMATICAL INITIAL TEH: not included in any glyphset definition\n * U+1EE36 ARABIC MATHEMATICAL INITIAL THEH: not included in any glyphset definition\n * U+1EE37 ARABIC MATHEMATICAL INITIAL KHAH: not included in any glyphset definition\n * U+1EE39 ARABIC MATHEMATICAL INITIAL DAD: not included in any glyphset definition\n * U+1EE3B ARABIC MATHEMATICAL INITIAL GHAIN: not included in any glyphset definition\n * U+1EE42 ARABIC MATHEMATICAL TAILED JEEM: not included in any glyphset definition\n * U+1EE47 ARABIC MATHEMATICAL TAILED HAH: not included in any glyphset definition\n * U+1EE49 ARABIC MATHEMATICAL TAILED YEH: not included in any glyphset definition\n * U+1EE4B ARABIC MATHEMATICAL TAILED LAM: not included in any glyphset definition\n * U+1EE4D ARABIC MATHEMATICAL TAILED NOON: not included in any glyphset definition\n * U+1EE4E ARABIC MATHEMATICAL TAILED SEEN: not included in any glyphset definition\n * U+1EE4F ARABIC MATHEMATICAL TAILED AIN: not included in any glyphset definition\n * U+1EE51 ARABIC MATHEMATICAL TAILED SAD: not included in any glyphset definition\n * U+1EE52 ARABIC MATHEMATICAL TAILED QAF: not included in any glyphset definition\n * U+1EE54 ARABIC MATHEMATICAL TAILED SHEEN: not included in any glyphset definition\n * U+1EE57 ARABIC MATHEMATICAL TAILED KHAH: not included in any glyphset definition\n * U+1EE59 ARABIC MATHEMATICAL TAILED DAD: not included in any glyphset definition\n * U+1EE5B ARABIC MATHEMATICAL TAILED GHAIN: not included in any glyphset definition\n * U+1EE5D ARABIC MATHEMATICAL TAILED DOTLESS NOON: not included in any glyphset definition\n * U+1EE5F ARABIC MATHEMATICAL TAILED DOTLESS QAF: not included in any glyphset definition\n * U+1EE61 ARABIC MATHEMATICAL STRETCHED BEH: not included in any glyphset definition\n * U+1EE62 ARABIC MATHEMATICAL STRETCHED JEEM: not included in any glyphset definition\n * U+1EE64 ARABIC MATHEMATICAL STRETCHED HEH: not included in any glyphset definition\n * U+1EE67 ARABIC MATHEMATICAL STRETCHED HAH: not included in any glyphset definition\n * U+1EE68 ARABIC MATHEMATICAL STRETCHED TAH: not included in any glyphset definition\n * U+1EE69 ARABIC MATHEMATICAL STRETCHED YEH: not included in any glyphset definition\n * U+1EE6A ARABIC MATHEMATICAL STRETCHED KAF: not included in any glyphset definition\n * U+1EE6C ARABIC MATHEMATICAL STRETCHED MEEM: not included in any glyphset definition\n * U+1EE6D ARABIC MATHEMATICAL STRETCHED NOON: not included in any glyphset definition\n * U+1EE6E ARABIC MATHEMATICAL STRETCHED SEEN: not included in any glyphset definition\n * U+1EE6F ARABIC MATHEMATICAL STRETCHED AIN: not included in any glyphset definition\n * U+1EE70 ARABIC MATHEMATICAL STRETCHED FEH: not included in any glyphset definition\n * U+1EE71 ARABIC MATHEMATICAL STRETCHED SAD: not included in any glyphset definition\n * U+1EE72 ARABIC MATHEMATICAL STRETCHED QAF: not included in any glyphset definition\n * U+1EE74 ARABIC MATHEMATICAL STRETCHED SHEEN: not included in any glyphset definition\n * U+1EE75 ARABIC MATHEMATICAL STRETCHED TEH: not included in any glyphset definition\n * U+1EE76 ARABIC MATHEMATICAL STRETCHED THEH: not included in any glyphset definition\n * U+1EE77 ARABIC MATHEMATICAL STRETCHED KHAH: not included in any glyphset definition\n * U+1EE79 ARABIC MATHEMATICAL STRETCHED DAD: not included in any glyphset definition\n * U+1EE7A ARABIC MATHEMATICAL STRETCHED ZAH: not included in any glyphset definition\n * U+1EE7B ARABIC MATHEMATICAL STRETCHED GHAIN: not included in any glyphset definition\n * U+1EE7C ARABIC MATHEMATICAL STRETCHED DOTLESS BEH: not included in any glyphset definition\n * U+1EE7E ARABIC MATHEMATICAL STRETCHED DOTLESS FEH: not included in any glyphset definition\n * U+1EE80 ARABIC MATHEMATICAL LOOPED ALEF: not included in any glyphset definition\n * U+1EE81 ARABIC MATHEMATICAL LOOPED BEH: not included in any glyphset definition\n * U+1EE82 ARABIC MATHEMATICAL LOOPED JEEM: not included in any glyphset definition\n * U+1EE83 ARABIC MATHEMATICAL LOOPED DAL: not included in any glyphset definition\n * U+1EE84 ARABIC MATHEMATICAL LOOPED HEH: not included in any glyphset definition\n * U+1EE85 ARABIC MATHEMATICAL LOOPED WAW: not included in any glyphset definition\n * U+1EE86 ARABIC MATHEMATICAL LOOPED ZAIN: not included in any glyphset definition\n * U+1EE87 ARABIC MATHEMATICAL LOOPED HAH: not included in any glyphset definition\n * U+1EE88 ARABIC MATHEMATICAL LOOPED TAH: not included in any glyphset definition\n * U+1EE89 ARABIC MATHEMATICAL LOOPED YEH: not included in any glyphset definition\n * U+1EE8B ARABIC MATHEMATICAL LOOPED LAM: not included in any glyphset definition\n * U+1EE8C ARABIC MATHEMATICAL LOOPED MEEM: not included in any glyphset definition\n * U+1EE8D ARABIC MATHEMATICAL LOOPED NOON: not included in any glyphset definition\n * U+1EE8E ARABIC MATHEMATICAL LOOPED SEEN: not included in any glyphset definition\n * U+1EE8F ARABIC MATHEMATICAL LOOPED AIN: not included in any glyphset definition\n * U+1EE90 ARABIC MATHEMATICAL LOOPED FEH: not included in any glyphset definition\n * U+1EE91 ARABIC MATHEMATICAL LOOPED SAD: not included in any glyphset definition\n * U+1EE92 ARABIC MATHEMATICAL LOOPED QAF: not included in any glyphset definition\n * U+1EE93 ARABIC MATHEMATICAL LOOPED REH: not included in any glyphset definition\n * U+1EE94 ARABIC MATHEMATICAL LOOPED SHEEN: not included in any glyphset definition\n * U+1EE95 ARABIC MATHEMATICAL LOOPED TEH: not included in any glyphset definition\n * U+1EE96 ARABIC MATHEMATICAL LOOPED THEH: not included in any glyphset definition\n * U+1EE97 ARABIC MATHEMATICAL LOOPED KHAH: not included in any glyphset definition\n * U+1EE98 ARABIC MATHEMATICAL LOOPED THAL: not included in any glyphset definition\n * U+1EE99 ARABIC MATHEMATICAL LOOPED DAD: not included in any glyphset definition\n * U+1EE9A ARABIC MATHEMATICAL LOOPED ZAH: not included in any glyphset definition\n * U+1EE9B ARABIC MATHEMATICAL LOOPED GHAIN: not included in any glyphset definition\n * U+1EEA1 ARABIC MATHEMATICAL DOUBLE-STRUCK BEH: not included in any glyphset definition\n * U+1EEA2 ARABIC MATHEMATICAL DOUBLE-STRUCK JEEM: not included in any glyphset definition\n * U+1EEA3 ARABIC MATHEMATICAL DOUBLE-STRUCK DAL: not included in any glyphset definition\n * U+1EEA5 ARABIC MATHEMATICAL DOUBLE-STRUCK WAW: not included in any glyphset definition\n * U+1EEA6 ARABIC MATHEMATICAL DOUBLE-STRUCK ZAIN: not included in any glyphset definition\n * U+1EEA7 ARABIC MATHEMATICAL DOUBLE-STRUCK HAH: not included in any glyphset definition\n * U+1EEA8 ARABIC MATHEMATICAL DOUBLE-STRUCK TAH: not included in any glyphset definition\n * U+1EEA9 ARABIC MATHEMATICAL DOUBLE-STRUCK YEH: not included in any glyphset definition\n * U+1EEAB ARABIC MATHEMATICAL DOUBLE-STRUCK LAM: not included in any glyphset definition\n * U+1EEAC ARABIC MATHEMATICAL DOUBLE-STRUCK MEEM: not included in any glyphset definition\n * U+1EEAD ARABIC MATHEMATICAL DOUBLE-STRUCK NOON: not included in any glyphset definition\n * U+1EEAE ARABIC MATHEMATICAL DOUBLE-STRUCK SEEN: not included in any glyphset definition\n * U+1EEAF ARABIC MATHEMATICAL DOUBLE-STRUCK AIN: not included in any glyphset definition\n * U+1EEB0 ARABIC MATHEMATICAL DOUBLE-STRUCK FEH: not included in any glyphset definition\n * U+1EEB1 ARABIC MATHEMATICAL DOUBLE-STRUCK SAD: not included in any glyphset definition\n * U+1EEB2 ARABIC MATHEMATICAL DOUBLE-STRUCK QAF: not included in any glyphset definition\n * U+1EEB3 ARABIC MATHEMATICAL DOUBLE-STRUCK REH: not included in any glyphset definition\n * U+1EEB4 ARABIC MATHEMATICAL DOUBLE-STRUCK SHEEN: not included in any glyphset definition\n * U+1EEB5 ARABIC MATHEMATICAL DOUBLE-STRUCK TEH: not included in any glyphset definition\n * U+1EEB6 ARABIC MATHEMATICAL DOUBLE-STRUCK THEH: not included in any glyphset definition\n * U+1EEB7 ARABIC MATHEMATICAL DOUBLE-STRUCK KHAH: not included in any glyphset definition\n * U+1EEB8 ARABIC MATHEMATICAL DOUBLE-STRUCK THAL: not included in any glyphset definition\n * U+1EEB9 ARABIC MATHEMATICAL DOUBLE-STRUCK DAD: not included in any glyphset definition\n * U+1EEBA ARABIC MATHEMATICAL DOUBLE-STRUCK ZAH: not included in any glyphset definition\n * U+1EEBB ARABIC MATHEMATICAL DOUBLE-STRUCK GHAIN: not included in any glyphset definition\n * U+1EEF0 ARABIC MATHEMATICAL OPERATOR MEEM WITH HAH WITH TATWEEL: not included in any glyphset definition\n * U+1EEF1 ARABIC MATHEMATICAL OPERATOR HAH WITH DAL: not included in any glyphset definition\n\nOr you can add the above codepoints to one of the subsets supported by the font: `arabic`, `latin`, `latin-ext`, `menu` [code: unreachable-subsetting]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This check ensures that all encoded glyphs in the font are covered by a\n        subset declared in the METADATA.pb. Google Fonts splits the font into\n        a set of subset fonts based on the contents of the `subsets` field and\n        the subset definitions in the `glyphsets` repository.\n\n        Any encoded glyphs which are not by any of these subset definitions\n        will not be served in the subsetted fonts, and so will be unreachable to\n        the end user.\n    ",
                    "result": "WARN",
                    "severity": 2
                },
                {
                    "description": "Substitute copyright, registered and trademark symbols in name table entries.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/unwanted_chars>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "No need to substitute copyright, registered and trademark symbols in name table entries of this font.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Check the OS/2 usWeightClass is appropriate for the font's best SubFamily name.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/usweightclass>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2 usWeightClass is good",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Google Fonts expects variable fonts, static ttfs and static otfs to have\n        differing OS/2 usWeightClass values.\n\n        - For Variable Fonts, Thin-Black must be 100-900\n\n        - For static ttfs, Thin-Black can be 100-900 or 250-900\n\n        - For static otfs, Thin-Black must be 250-900\n\n        If static otfs are set lower than 250, text may appear blurry in\n        legacy Windows applications.\n\n        Glyphsapp users can change the usWeightClass value of an instance by adding\n        a 'weightClass' customParameter.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check font has a license.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/family/has_license>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Found license at '/Users/simon/others-repos/fonts/ofl/amiri/OFL.txt'",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Check license file has good copyright string.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/license/OFL_copyright>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "looks good",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        An OFL.txt file's first line should be the font copyright e.g:\n        \"Copyright 2019 The Montserrat Project Authors\n        (https://github.com/julietaula/montserrat)\"\n    ",
                    "result": "PASS",
                    "severity": 10
                },
                {
                    "description": "Check OFL body text is correct.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/license/OFL_body_text>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OFL license body text is correct",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check OFL body text is correct.\n        Often users will accidently delete parts of the body text.\n    ",
                    "result": "PASS",
                    "severity": 10
                },
                {
                    "description": "Check copyright namerecords match license file.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/license>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Licensing entry on name table is correctly set.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        A known licensing description must be provided in the NameID 14\n        (LICENSE DESCRIPTION) entries of the name table.\n\n        The source of truth for this check (to determine which license is in use) is\n        a file placed side-by-side to your font project including the licensing terms.\n\n        Depending on the chosen license, one of the following string snippets is\n        expected to be found on the NameID 13 (LICENSE DESCRIPTION) entries of the\n        name table:\n\n        - \"This Font Software is licensed under the SIL Open Font License, Version 1.1.\n          This license is available with a FAQ at: https://scripts.sil.org/OFL\"\n\n        - \"Licensed under the Apache License, Version 2.0\"\n\n        - \"Licensed under the Ubuntu Font Licence 1.0.\"\n\n\n        Currently accepted licenses are Apache or Open Font License. For a small set\n        of legacy families the Ubuntu Font License may be acceptable as well.\n\n        When in doubt, please choose OFL for new font projects.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "License URL matches License text on name table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/license_url>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font has a valid license URL in NAME table.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        A known license URL must be provided in the NameID 14 (LICENSE INFO URL)\n        entry of the name table.\n\n        The source of truth for this check is the licensing text found on the NameID 13\n        entry (LICENSE DESCRIPTION).\n\n        The string snippets used for detecting licensing terms are:\n\n        - \"This Font Software is licensed under the SIL Open Font License, Version 1.1.\n          This license is available with a FAQ at: https://scripts.sil.org/OFL\"\n\n        - \"Licensed under the Apache License, Version 2.0\"\n\n        - \"Licensed under the Ubuntu Font Licence 1.0.\"\n\n\n        Currently accepted licenses are Apache or Open Font License. For a small set of\n        legacy families the Ubuntu Font License may be acceptable as well.\n\n        When in doubt, please choose OFL for new font projects.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Description strings in the name table must not exceed 200 characters.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/description_max_length>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "A few name table entries with ID=10 (NameID.DESCRIPTION) are longer than 200 characters. Please check whether those entries are copyright notices mistakenly stored in the description string entries by a bug in an old FontLab version. If that's the case, then such copyright notices must be removed from these entries. [code: too-long]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        An old FontLab version had a bug which caused it to store copyright notices\n        in nameID 10 entries.\n\n        In order to detect those and distinguish them from actual legitimate usage of\n        this name table entry, we expect that such strings do not exceed a reasonable\n        length of 200 chars.\n\n        Longer strings are likely instances of the FontLab bug.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Show hinting filesize impact.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/hinting_impact>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Hinting filesize impact:\n\n |               | /Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf          |\n |:------------- | ---------------:|\n | Dehinted Size | 441.9kb |\n | Hinted Size   | 441.9kb   |\n | Increase      | 24 bytes      |\n | Change        | 0.0 %  |\n [code: size-impact]",
                            "status": "INFO",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This check is merely informative, displaying and useful comparison of filesizes\n        of hinted versus unhinted font files.\n    ",
                    "result": "INFO"
                },
                {
                    "description": "Ensure files are not too large.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/file_size>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font had a reasonable file size",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Serving extremely large font files on Google Fonts causes usability issues.\n        This check ensures that file sizes are reasonable.\n    ",
                    "result": "PASS",
                    "severity": 10
                },
                {
                    "description": "Version format is correct in 'name' table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/version_format>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Version format in NAME table entries is correct.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Font has ttfautohint params?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/has_ttfautohint_params>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font appears to our heuristic as not hinted using ttfautohint. [code: not-hinted]",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "result": "SKIP"
                },
                {
                    "description": "Font has old ttfautohint applied?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/old_ttfautohint>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Could not detect which version of ttfautohint was used in this font. It is typically specified as a comment in the font version entries of the 'name' table. Such font version strings are currently: ['Version 1.000'] [code: version-not-detected]",
                            "status": "INFO",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check if font has been hinted with an outdated version of ttfautohint.\n    ",
                    "result": "INFO"
                },
                {
                    "description": "EPAR table present in font?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/epar>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "EPAR table not present in font. To learn more see https://github.com/fonttools/fontbakery/issues/818 [code: lacks-EPAR]",
                            "status": "INFO",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The EPAR table is/was a way of expressing common licensing permissions and\n        restrictions in metadata; while almost nothing supported it, Dave Crossland\n        wonders that adding it to everything in Google Fonts could help make it\n        more popular.\n\n        More info is available at:\n        https://davelab6.github.io/epar/\n    ",
                    "result": "INFO",
                    "severity": 1
                },
                {
                    "description": "Is the Grid-fitting and Scan-conversion Procedure ('gasp') table set to optimize rendering?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/gasp>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "These are the ppm ranges declared on the gasp table:\n\nPPM <= 65535:\n\tflag = 0x0F\n\t- Use grid-fitting\n\t- Use grayscale rendering\n\t- Use gridfitting with ClearType symmetric smoothing\n\t- Use smoothing along multiple axes with ClearType\u00ae\n [code: ranges]",
                            "status": "INFO",
                            "traceback": null
                        },
                        {
                            "message": "The 'gasp' table is correctly set, with one gaspRange:value of 0xFFFF:0x0F.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Traditionally version 0 'gasp' tables were set so that font sizes below 8 ppem\n        had no grid fitting but did have antialiasing. From 9-16 ppem, just grid\n        fitting.\n        And fonts above 17ppem had both antialiasing and grid fitting toggled on.\n        The use of accelerated graphics cards and higher resolution screens make this\n        approach obsolete. Microsoft's DirectWrite pushed this even further with much\n        improved rendering built into the OS and apps.\n\n        In this scenario it makes sense to simply toggle all 4 flags ON for all font\n        sizes.\n    ",
                    "result": "INFO"
                },
                {
                    "description": "Make sure family name does not begin with a digit.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/familyname_first_char>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font family name first character is not a digit.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Font family names which start with a numeral are often not discoverable\n        in Windows applications.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Are there non-ASCII characters in ASCII-only NAME table entries?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/ascii_only_entries>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "None of the ASCII-only NAME table entries contain non-ASCII characteres.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The OpenType spec requires ASCII for the POSTSCRIPT_NAME (nameID 6).\n\n        For COPYRIGHT_NOTICE (nameID 0) ASCII is required because that string should be\n        the same in CFF fonts which also have this requirement in the OpenType spec.\n\n        Note:\n        A common place where we find non-ASCII strings is on name table entries\n        with NameID > 18, which are expressly for localising the ASCII-only IDs\n        into Hindi / Arabic / etc.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: check if fonts field only has unique \"full_name\" values.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/unique_full_name_values>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb \"fonts\" field only has unique \"full_name\" values.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: check if fonts field only contains unique style:weight pairs.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/unique_weight_style_pairs>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb \"fonts\" field only has unique style:weight pairs.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb license is \"APACHE2\", \"UFL\" or \"OFL\"?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/license>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font license is declared in METADATA.pb as \"OFL\"",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb should contain at least \"menu\" and \"latin\" subsets.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/menu_and_latin>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb contains \"menu\" and \"latin\" subsets.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb subsets should be alphabetically ordered.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/subsets_order>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb subsets are sorted in alphabetical order.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Check METADATA.pb includes production subsets.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/includes_production_subsets>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "No missing subsets",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check METADATA.pb file includes the same subsets as the family in production.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Copyright notice is the same in all fonts?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/copyright>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Copyright is consistent across family",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Check that METADATA.pb family values are all the same.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/familyname>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb: Family name is the same in all metadata \"fonts\" items.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: According to Google Fonts standards, families should have a Regular style.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/has_regular>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Family has a Regular style.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Regular should be 400.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/regular_is_400>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Regular has weight = 400.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Checks METADATA.pb font.name field matches family name declared on the name table.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/nameid/family_name>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Family name \"Amiri\" is identical in METADATA.pb and on the TTF file.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Checks METADATA.pb font.post_script_name matches postscript name declared on the name table.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/nameid/post_script_name>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Postscript name \"Amiri-Regular\" is identical in METADATA.pb and on the TTF file.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb font.full_name value matches fullname declared on the name table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/nameid/full_name>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font fullname \"Amiri Regular\" is identical in METADATA.pb and on the TTF file.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb font.name value should be same as the family name declared on the name table.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/nameid/font_name>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK: Family name \"Amiri\" is identical in METADATA.pb and on the TTF file.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This check ensures consistency between the font name declared on the name table\n        and the contents of the METADATA.pb file.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb font.full_name and font.post_script_name fields have equivalent values ?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/match_fullname_postscript>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb font fields \"full_name\" and \"post_script_name\" have equivalent values.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb font.filename and font.post_script_name fields have equivalent values?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/match_filename_postscript>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb font fields \"filename\" and \"post_script_name\" have equivalent values.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb font.name field contains font name in right format?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/valid_name_values>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb font.name field contains font name in right format.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb font.full_name field contains font name in right format?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/valid_full_name_values>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb font.full_name field contains font name in right format. (\"Amiri\" in \"Amiri Regular\")",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb font.filename field contains font name in right format?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/valid_filename_values>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb filename field contains font name in right format.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb font.post_script_name field contains font name in right format?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/valid_post_script_name_values>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb postScriptName field contains font name in right format.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Check name ID 25 to end with \"Italic\" for Italic VFs.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/valid_nameid25>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Not an Italic VF.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Due to a bug in (at least) Adobe Indesign, name ID 25\n        needs to be different for Italic VFs than their Upright counterparts.\n        Google Fonts chooses to append \"Italic\" here.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Copyright notices match canonical pattern in METADATA.pb",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/valid_copyright>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb copyright string is good",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The expected pattern for the copyright string adheres to the following rules:\n\n        * It must say \"Copyright\" followed by a 4 digit year (optionally followed by\n          a hyphen and another 4 digit year)\n\n        * Then it must say \"The <familyname> Project Authors\"\n\n        * And within parentheses, a URL for a git repository must be provided\n\n        * The check is case insensitive and does not validate whether the familyname\n          is correct, even though we'd expect it is (and we may soon update the check\n          to validate that aspect as well!)\n\n\n        Here is an example of a valid copyright string:\n\n        \"Copyright 2017 The Archivo Black Project Authors\n         (https://github.com/Omnibus-Type/ArchivoBlack)\"\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Copyright notices match canonical pattern in fonts",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/font_copyright>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Name Table entry: Copyright field 'Copyright 2010-2022 The Amiri Project Authors (https://github.com/aliftype/amiri).' matches canonical pattern.",
                            "status": "PASS",
                            "traceback": null
                        },
                        {
                            "message": "Name table copyright entries are good",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Copyright notice on METADATA.pb should not contain 'Reserved Font Name'.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/reserved_font_name>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb copyright field does not contain \"Reserved Font Name\".",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Copyright notice shouldn't exceed 500 chars.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/copyright_max_length>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Copyright notice string is shorter than 500 chars.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Font filenames match font.filename entries?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/filenames>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Filenames in METADATA.pb look good.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Note:\n        This check only looks for files in the current directory.\n\n        Font files in subdirectories are checked by these other two checks:\n         - com.google.fonts/check/metadata/undeclared_fonts\n         - com.google.fonts/check/repo/vf_has_static_fonts\n\n        We may want to merge them all into a single check.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb font.style \"italic\" matches font internals?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/italic_style>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "This check only applies to italic fonts.",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "result": "SKIP"
                },
                {
                    "description": "METADATA.pb font.style \"normal\" matches font internals?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/normal_style>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb font.style \"normal\" matches font internals.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb font.name and font.full_name fields match the values declared on the name table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/nameid/family_and_full_names>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "METADATA.pb familyname and fullName fields match corresponding name table entries.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Check font name is the same as family name.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/match_name_familyname>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font name is the same as family name.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Check that font weight has a canonical value.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/canonical_weight_value>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font weight has a canonical value.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Check METADATA.pb font weights are correct.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/os2_weightclass>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2 usWeightClass or wght axis value matches weight specified at METADATA.pb",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check METADATA.pb font weights are correct.\n\n        For static fonts, the metadata weight should be the same as the static font's\n        OS/2 usWeightClass.\n\n        For variable fonts, the weight value should be 400 if the font's wght axis range\n        includes 400, otherwise it should be the value closest to 400.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb weight matches postScriptName for static fonts.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/match_weight_postscript>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Weight value matches postScriptName.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Font styles are named canonically?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/canonical_style_names>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font styles are named canonically.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Check URL on copyright string is the same as in repository_url field.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/consistent_repo_urls>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Sometimes, perhaps due to copy-pasting, projects may declare different URLs\n        between the font.coyright and the family.sources.repository_url fields.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Check for primary_script",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/primary_script>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Try to guess font's primary script and see if that's set in METADATA.pb.\n        This is an educated guess based on the number of glyphs per script in the font\n        and should be taken with caution.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Stricter unitsPerEm criteria for Google Fonts.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/unitsperem_strict>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font em size is good (unitsPerEm = 1000).",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Even though the OpenType spec allows unitsPerEm to be any value between 16\n        and 16384, the Google Fonts project aims at a narrower set of reasonable values.\n\n        The spec suggests usage of powers of two in order to get some performance\n        improvements on legacy renderers, so those values are acceptable.\n\n        But values of 500 or 1000 are also acceptable, with the added benefit that it\n        makes upm math easier for designers, while the performance hit of not using a\n        power of two is most likely negligible nowadays.\n\n        Additionally, values above 2048 would likely result in unreasonable\n        filesize increases.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Glyphs are similiar to Google Fonts version?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/production_glyphs_similarity>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Following glyphs differ greatly from Google Fonts version:\n\t* glyph01239\n\t* glyph01240\n\t* glyph01241\n\t* glyph01242\n\t* glyph01243\n\t* glyph01244\n\t* glyph01246\n\t* glyph01247\n\t* glyph01248\n\t* glyph01249\n\t* glyph01250\n\t* glyph01251\n\t* glyph01252\n\t* glyph01253\n\t* glyph01254\n\t* glyph01255\n\t* glyph01257\n\t* glyph01258\n\t* glyph01259\n\t* glyph01260\n\t* glyph01261\n\t* glyph01262\n\t* glyph01263\n\t* glyph01264\n\t* glyph01265\n\t* glyph01267\n\t* glyph01268\n\t* glyph01271\n\t* glyph01272\n\t* glyph01273\n\t* glyph01274\n\t* glyph01276\n\t* glyph01277\n\t* glyph01279\n\t* glyph01280\n\t* glyph01281\n\t* glyph01282\n\t* glyph01283\n\t* glyph01284\n\t* glyph01285\n\t* glyph01286\n\t* glyph01287\n\t* glyph01288\n\t* glyph01289\n\t* glyph01290\n\t* glyph01291\n\t* glyph01292\n\t* glyph01294\n\t* glyph01295\n\t* glyph01296\n\t* glyph01297\n\t* glyph01299\n\t* glyph01300\n\t* glyph01301\n\t* glyph01302\n\t* glyph01303\n\t* glyph01304\n\t* glyph01305\n\t* glyph01306\n\t* glyph01308\n\t* glyph01309\n\t* glyph01311\n\t* glyph01312\n\t* glyph01313\n\t* glyph01314\n\t* glyph01315\n\t* glyph01316\n\t* glyph01317\n\t* glyph01318\n\t* glyph01319\n\t* glyph01320\n\t* glyph01323\n\t* glyph01324\n\t* glyph01325\n\t* glyph01327\n\t* glyph01328\n\t* glyph01329\n\t* glyph01330\n\t* glyph01332\n\t* glyph01334\n\t* glyph01336\n\t* glyph01337\n\t* glyph01338\n\t* glyph01339\n\t* glyph01340\n\t* glyph01341\n\t* glyph01342\n\t* glyph01343\n\t* glyph01344\n\t* glyph01345\n\t* glyph01347\n\t* glyph01349\n\t* glyph01350\n\t* glyph01353\n\t* glyph01355\n\t* glyph01356\n\t* glyph01357\n\t* glyph01358\n\t* glyph01359\n\t* glyph01360\n\t* glyph01364\n\t* glyph01366\n\t* glyph01368\n\t* glyph01369\n\t* glyph01370\n\t* glyph01371\n\t* glyph01372\n\t* glyph01373\n\t* glyph01374\n\t* glyph01375\n\t* glyph01376\n\t* glyph01377\n\t* glyph01379\n\t* glyph01380\n\t* glyph01382\n\t* glyph01383\n\t* glyph01384\n\t* glyph01385\n\t* glyph01386\n\t* glyph01387\n\t* glyph01388\n\t* glyph01389\n\t* glyph01390\n\t* glyph01391\n\t* glyph01392\n\t* glyph01393\n\t* glyph01394\n\t* glyph01395\n\t* glyph01396\n\t* glyph01397\n\t* glyph01398\n\t* glyph01399\n\t* glyph01400\n\t* glyph01401\n\t* glyph01402\n\t* glyph01403\n\t* glyph01404\n\t* glyph01405\n\t* glyph01406\n\t* glyph01407\n\t* glyph01408\n\t* glyph01409\n\t* glyph01410\n\t* glyph01411\n\t* glyph01412\n\t* glyph01413\n\t* glyph01414\n\t* glyph01415\n\t* glyph01416\n\t* glyph01417\n\t* glyph01419\n\t* glyph01421\n\t* glyph01422\n\t* glyph01423\n\t* glyph01424\n\t* glyph01425\n\t* glyph01426\n\t* glyph01427\n\t* glyph01428\n\t* glyph01429\n\t* glyph01430\n\t* glyph01431\n\t* glyph01432\n\t* glyph01433\n\t* glyph01434\n\t* glyph01435\n\t* glyph01436\n\t* glyph01437\n\t* glyph01438\n\t* glyph01439\n\t* glyph01440\n\t* glyph01441\n\t* glyph01442\n\t* glyph01443\n\t* glyph01444\n\t* glyph01445\n\t* glyph01446\n\t* glyph01447\n\t* glyph01448\n\t* glyph01449\n\t* glyph01450\n\t* glyph01451\n\t* glyph01453\n\t* glyph01454\n\t* glyph01455\n\t* glyph01457\n\t* glyph01458\n\t* glyph01459\n\t* glyph01461\n\t* glyph01462\n\t* glyph01463\n\t* glyph01464\n\t* glyph01465\n\t* glyph01466\n\t* glyph01467\n\t* glyph01469\n\t* glyph01470\n\t* glyph01471\n\t* glyph01473\n\t* glyph01474\n\t* glyph01475\n\t* glyph01477\n\t* glyph01478\n\t* glyph01480\n\t* glyph01481\n\t* glyph01482\n\t* glyph01483\n\t* glyph01484\n\t* glyph01486\n\t* glyph01487\n\t* glyph01488\n\t* glyph01489\n\t* glyph01490\n\t* glyph01491\n\t* glyph01492\n\t* glyph01493\n\t* glyph01494\n\t* glyph01495\n\t* glyph01496\n\t* glyph01497\n\t* glyph01498\n\t* glyph01499\n\t* glyph01500\n\t* glyph01501\n\t* glyph01503\n\t* glyph01504\n\t* glyph01505\n\t* glyph01506\n\t* glyph01507\n\t* glyph01508\n\t* glyph01509\n\t* glyph01511\n\t* glyph01512\n\t* glyph01513\n\t* glyph01514\n\t* glyph01515\n\t* glyph01516\n\t* glyph01517\n\t* glyph01518\n\t* glyph01519\n\t* glyph01520\n\t* glyph01521\n\t* glyph01522\n\t* glyph01523\n\t* glyph01524\n\t* glyph01525\n\t* glyph01526\n\t* glyph01527\n\t* glyph01530\n\t* glyph01531\n\t* glyph01532\n\t* glyph01533\n\t* glyph01534\n\t* glyph01535\n\t* glyph01536\n\t* glyph01537\n\t* glyph01538\n\t* glyph01541\n\t* glyph01542\n\t* glyph01544\n\t* glyph01545\n\t* glyph01546\n\t* glyph01547\n\t* glyph01548\n\t* glyph01549\n\t* glyph01550\n\t* glyph01551\n\t* glyph01552\n\t* glyph01553\n\t* glyph01554\n\t* glyph01555\n\t* glyph01556\n\t* glyph01557\n\t* glyph01558\n\t* glyph01559\n\t* glyph01560\n\t* glyph01561\n\t* glyph01562\n\t* glyph01563\n\t* glyph01564\n\t* glyph01565\n\t* glyph01566\n\t* glyph01567\n\t* glyph01568\n\t* glyph01569\n\t* glyph01570\n\t* glyph01571\n\t* glyph01572\n\t* glyph01573\n\t* glyph01574\n\t* glyph01575\n\t* glyph01576\n\t* glyph01577\n\t* glyph01578\n\t* glyph01579\n\t* glyph01580\n\t* glyph01581\n\t* glyph01582\n\t* glyph01583\n\t* glyph01584\n\t* glyph01585\n\t* glyph01586\n\t* glyph01587\n\t* glyph01588\n\t* glyph01589\n\t* glyph01590\n\t* glyph01591\n\t* glyph01593\n\t* glyph01596\n\t* glyph01597\n\t* glyph01598\n\t* glyph01601\n\t* glyph01602\n\t* glyph01603\n\t* glyph01604\n\t* glyph01605\n\t* glyph01606\n\t* glyph01607\n\t* glyph01608\n\t* glyph01614\n\t* glyph01616\n\t* glyph01617\n\t* glyph01618\n\t* glyph01619\n\t* glyph01620\n\t* glyph01621\n\t* glyph01622\n\t* glyph01623\n\t* glyph01624\n\t* glyph01625\n\t* glyph01626\n\t* glyph01627\n\t* glyph01628\n\t* glyph01629\n\t* glyph01630\n\t* glyph01631\n\t* glyph01632\n\t* glyph01633\n\t* glyph01634\n\t* glyph01635\n\t* glyph01636\n\t* glyph01637\n\t* glyph01638\n\t* glyph01639\n\t* glyph01640\n\t* glyph01641\n\t* glyph01642\n\t* glyph01643\n\t* glyph01644\n\t* glyph01645\n\t* glyph01646\n\t* glyph01647\n\t* glyph01648\n\t* glyph01649\n\t* glyph01650\n\t* glyph01651\n\t* glyph01652\n\t* glyph01653\n\t* glyph01654\n\t* glyph01655\n\t* glyph01656\n\t* glyph01657\n\t* glyph01658\n\t* glyph01659\n\t* glyph01660\n\t* glyph01661\n\t* glyph01662\n\t* glyph01663\n\t* glyph01664\n\t* glyph01665\n\t* glyph01666\n\t* glyph01667\n\t* glyph01668\n\t* glyph01669\n\t* glyph01670\n\t* glyph01671\n\t* glyph01672\n\t* glyph01673\n\t* glyph01674\n\t* glyph01675\n\t* glyph01676\n\t* glyph01677\n\t* glyph01678\n\t* glyph01679\n\t* glyph01680\n\t* glyph01681\n\t* glyph01682\n\t* glyph01683\n\t* glyph01684\n\t* glyph01685\n\t* glyph01686\n\t* glyph01687\n\t* glyph01688\n\t* glyph01689\n\t* glyph01690\n\t* glyph01691\n\t* glyph01692\n\t* glyph01693\n\t* glyph01694\n\t* glyph01695\n\t* glyph01696\n\t* glyph01697\n\t* glyph01698\n\t* glyph01699\n\t* glyph01700\n\t* glyph01701\n\t* glyph01702\n\t* glyph01703\n\t* glyph01704\n\t* glyph01705\n\t* glyph01706\n\t* glyph01707\n\t* glyph01708\n\t* glyph01709\n\t* glyph01710\n\t* glyph01711\n\t* glyph01712\n\t* glyph01713\n\t* glyph01714\n\t* glyph01715\n\t* glyph01716\n\t* glyph01717\n\t* glyph01718\n\t* glyph01719\n\t* glyph01721\n\t* glyph01722\n\t* glyph01723\n\t* glyph01724\n\t* glyph01725\n\t* glyph01726\n\t* glyph01727\n\t* glyph01728\n\t* glyph01729\n\t* glyph01730\n\t* glyph01731\n\t* glyph01732\n\t* glyph01733\n\t* glyph01734\n\t* glyph01735\n\t* glyph01737\n\t* glyph01738\n\t* glyph01739\n\t* glyph01740\n\t* glyph01742\n\t* glyph01743\n\t* glyph01744\n\t* glyph01746\n\t* glyph01747\n\t* glyph01748\n\t* glyph01749\n\t* glyph01751\n\t* glyph01752\n\t* glyph01753\n\t* glyph01755\n\t* glyph01756\n\t* glyph01757\n\t* glyph01759\n\t* glyph01760\n\t* glyph01761\n\t* glyph01762\n\t* glyph01763\n\t* glyph01764\n\t* glyph01765\n\t* glyph01766\n\t* glyph01767\n\t* glyph01768\n\t* glyph01769\n\t* glyph01770\n\t* glyph01771\n\t* glyph01772\n\t* glyph01773\n\t* glyph01774\n\t* glyph01775\n\t* glyph01776\n\t* glyph01777\n\t* glyph01778\n\t* glyph01779\n\t* glyph01780\n\t* glyph01781\n\t* glyph01782\n\t* glyph01783\n\t* glyph01784\n\t* glyph01785\n\t* glyph01786\n\t* glyph01787\n\t* glyph01788\n\t* glyph01789\n\t* glyph01790\n\t* glyph01791\n\t* glyph01792\n\t* glyph01793\n\t* glyph01794\n\t* glyph01795\n\t* glyph01796\n\t* glyph01797\n\t* glyph01798\n\t* glyph01799\n\t* glyph01800\n\t* glyph01801\n\t* glyph01802\n\t* glyph01803\n\t* glyph01804\n\t* glyph01805\n\t* glyph01806\n\t* glyph01807\n\t* glyph01808\n\t* glyph01809\n\t* glyph01810\n\t* glyph01811\n\t* glyph01813\n\t* glyph01814\n\t* glyph01815\n\t* glyph01816\n\t* glyph01817\n\t* glyph01818\n\t* glyph01819\n\t* glyph01820\n\t* glyph01821\n\t* glyph01822\n\t* glyph01823\n\t* glyph01824\n\t* glyph01825\n\t* glyph01826\n\t* glyph01827\n\t* glyph01828\n\t* glyph01829\n\t* glyph01830\n\t* glyph01831\n\t* glyph01832\n\t* glyph01833\n\t* glyph01834\n\t* glyph01835\n\t* glyph01836\n\t* glyph01837\n\t* glyph01838\n\t* glyph01840\n\t* glyph01841\n\t* glyph01842\n\t* glyph01843\n\t* glyph01844\n\t* glyph01845\n\t* glyph01846\n\t* glyph01847\n\t* glyph01848\n\t* glyph01849\n\t* glyph01850\n\t* glyph01851\n\t* glyph01852\n\t* glyph01853\n\t* glyph01854\n\t* glyph01855\n\t* glyph01856\n\t* glyph01857\n\t* glyph01858\n\t* glyph01859\n\t* glyph01860\n\t* glyph01861\n\t* glyph01862\n\t* glyph01863\n\t* glyph01866\n\t* glyph01867\n\t* glyph01868\n\t* glyph01869\n\t* glyph01871\n\t* glyph01872\n\t* glyph01873\n\t* glyph01875\n\t* glyph01876\n\t* glyph01877\n\t* glyph01878\n\t* glyph01879\n\t* glyph01880\n\t* glyph01881\n\t* glyph01882\n\t* glyph01883\n\t* glyph01884\n\t* glyph01885\n\t* glyph01886\n\t* glyph01887\n\t* glyph01888\n\t* glyph01889\n\t* glyph01890\n\t* glyph01891\n\t* glyph01892\n\t* glyph01893\n\t* glyph01894\n\t* glyph01895\n\t* glyph01896\n\t* glyph01897\n\t* glyph01898\n\t* glyph01899\n\t* glyph01900\n\t* glyph01901\n\t* glyph01902\n\t* glyph01903\n\t* glyph01904\n\t* glyph01906\n\t* glyph01907\n\t* glyph01908\n\t* glyph01909\n\t* glyph01910\n\t* glyph01911\n\t* glyph01912\n\t* glyph01913\n\t* glyph01914\n\t* glyph01915\n\t* glyph01916\n\t* glyph01917\n\t* glyph01919\n\t* glyph01920\n\t* glyph01921\n\t* glyph01922\n\t* glyph01923\n\t* glyph01924\n\t* glyph01925\n\t* glyph01926\n\t* glyph01927\n\t* glyph01928\n\t* glyph01929\n\t* glyph01930\n\t* glyph01931\n\t* glyph01932\n\t* glyph01933\n\t* glyph01934\n\t* glyph01935\n\t* glyph01936\n\t* glyph01937\n\t* glyph01938\n\t* glyph01939\n\t* glyph01940\n\t* glyph01941\n\t* glyph01942\n\t* glyph01943\n\t* glyph01944\n\t* glyph01945\n\t* glyph01946\n\t* glyph01947\n\t* glyph01948\n\t* glyph01949\n\t* glyph01950\n\t* glyph01951\n\t* glyph01952\n\t* glyph01953\n\t* glyph01954\n\t* glyph01955\n\t* glyph01956\n\t* glyph01957\n\t* glyph01958\n\t* glyph01959\n\t* glyph01960\n\t* glyph01961\n\t* glyph01962\n\t* glyph01963\n\t* glyph01964\n\t* glyph01965\n\t* glyph01966\n\t* glyph01967\n\t* glyph01968\n\t* glyph01969\n\t* glyph01970\n\t* glyph01971\n\t* glyph01972\n\t* glyph01973\n\t* glyph01974\n\t* glyph01975\n\t* glyph01976\n\t* glyph01977\n\t* glyph01978\n\t* glyph01979\n\t* glyph01980\n\t* glyph01982\n\t* glyph01983\n\t* glyph01985\n\t* glyph01986\n\t* glyph01987\n\t* glyph01988\n\t* glyph01989\n\t* glyph01990\n\t* glyph01991\n\t* glyph01992\n\t* glyph01993\n\t* glyph01994\n\t* glyph01995\n\t* glyph01996\n\t* glyph01997\n\t* glyph01998\n\t* glyph01999\n\t* glyph02000\n\t* glyph02002\n\t* glyph02003\n\t* glyph02004\n\t* glyph02005\n\t* glyph02006\n\t* glyph02008\n\t* glyph02009\n\t* glyph02010\n\t* glyph02011\n\t* glyph02012\n\t* glyph02013\n\t* glyph02014\n\t* glyph02015\n\t* glyph02016\n\t* glyph02017\n\t* glyph02018\n\t* glyph02019\n\t* glyph02020\n\t* glyph02021\n\t* glyph02022\n\t* glyph02023\n\t* glyph02024\n\t* glyph02025\n\t* glyph02026\n\t* glyph02027\n\t* glyph02028\n\t* glyph02029\n\t* glyph02030\n\t* glyph02031\n\t* glyph02032\n\t* glyph02033\n\t* glyph02034\n\t* glyph02036\n\t* glyph02037\n\t* glyph02039\n\t* glyph02040\n\t* glyph02041\n\t* glyph02042\n\t* glyph02043\n\t* glyph02044\n\t* glyph02046\n\t* glyph02048\n\t* glyph02049\n\t* glyph02050\n\t* glyph02051\n\t* glyph02053\n\t* glyph02054\n\t* glyph02055\n\t* glyph02056\n\t* glyph02057\n\t* glyph02058\n\t* glyph02059\n\t* glyph02060\n\t* glyph02061\n\t* glyph02062\n\t* glyph02063\n\t* glyph02066\n\t* glyph02067\n\t* glyph02068\n\t* glyph02069\n\t* glyph02070\n\t* glyph02072\n\t* glyph02073\n\t* glyph02074\n\t* glyph02075\n\t* glyph02076\n\t* glyph02077\n\t* glyph02078\n\t* glyph02079\n\t* glyph02080\n\t* glyph02081\n\t* glyph02082\n\t* glyph02083\n\t* glyph02084\n\t* glyph02085\n\t* glyph02086\n\t* glyph02087\n\t* glyph02089\n\t* glyph02090\n\t* glyph02091\n\t* glyph02092\n\t* glyph02093\n\t* glyph02095\n\t* glyph02096\n\t* glyph02097\n\t* glyph02098\n\t* glyph02100\n\t* glyph02101\n\t* glyph02102\n\t* glyph02105\n\t* glyph02106\n\t* glyph02107\n\t* glyph02108\n\t* glyph02110\n\t* glyph02111\n\t* glyph02112\n\t* glyph02113\n\t* glyph02114\n\t* glyph02115\n\t* glyph02116\n\t* glyph02117\n\t* glyph02118\n\t* glyph02119\n\t* glyph02120\n\t* glyph02121\n\t* glyph02123\n\t* glyph02124\n\t* glyph02125\n\t* glyph02126\n\t* glyph02127\n\t* glyph02128\n\t* glyph02129\n\t* glyph02130\n\t* glyph02132\n\t* glyph02133\n\t* glyph02135\n\t* glyph02136\n\t* glyph02137\n\t* glyph02138\n\t* glyph02139\n\t* glyph02144\n\t* glyph02146\n\t* glyph02147\n\t* glyph02148\n\t* glyph02149\n\t* glyph02150\n\t* glyph02151\n\t* glyph02152\n\t* glyph02153\n\t* glyph02155\n\t* glyph02156\n\t* glyph02157\n\t* glyph02158\n\t* glyph02159\n\t* glyph02161\n\t* glyph02162\n\t* glyph02163\n\t* glyph02164\n\t* glyph02165\n\t* glyph02166\n\t* glyph02167\n\t* glyph02168\n\t* glyph02169\n\t* glyph02170\n\t* glyph02171\n\t* glyph02172\n\t* glyph02174\n\t* glyph02176\n\t* glyph02177\n\t* glyph02179\n\t* glyph02180\n\t* glyph02181\n\t* glyph02184\n\t* glyph02185\n\t* glyph02186\n\t* glyph02187\n\t* glyph02189\n\t* glyph02190\n\t* glyph02191\n\t* glyph02193\n\t* glyph02194\n\t* glyph02195\n\t* glyph02196\n\t* glyph02197\n\t* glyph02198\n\t* glyph02199\n\t* glyph02200\n\t* glyph02201\n\t* glyph02202\n\t* glyph02203\n\t* glyph02204\n\t* glyph02205\n\t* glyph02206\n\t* glyph02207\n\t* glyph02208\n\t* glyph02209\n\t* glyph02210\n\t* glyph02211\n\t* glyph02212\n\t* glyph02213\n\t* glyph02214\n\t* glyph02215\n\t* glyph02217\n\t* glyph02218\n\t* glyph02219\n\t* glyph02220\n\t* glyph02223\n\t* glyph02226\n\t* glyph02227\n\t* glyph02229\n\t* glyph02231\n\t* glyph02232\n\t* glyph02234\n\t* glyph02235\n\t* glyph02236\n\t* glyph02238\n\t* glyph02240\n\t* glyph02241\n\t* glyph02245\n\t* glyph02246\n\t* glyph02247\n\t* glyph02248\n\t* glyph02250\n\t* glyph02252\n\t* glyph02253\n\t* glyph02254\n\t* glyph02255\n\t* glyph02257\n\t* glyph02258\n\t* glyph02260\n\t* glyph02261\n\t* glyph02262\n\t* glyph02263\n\t* glyph02264\n\t* glyph02266\n\t* glyph02268\n\t* glyph02269\n\t* glyph02270\n\t* glyph02271\n\t* glyph02272\n\t* glyph02274\n\t* glyph02275\n\t* glyph02276\n\t* glyph02277\n\t* glyph02278\n\t* glyph02279\n\t* glyph02280\n\t* glyph02282\n\t* glyph02283\n\t* glyph02284\n\t* glyph02285\n\t* glyph02287\n\t* glyph02288\n\t* glyph02289\n\t* glyph02290\n\t* glyph02291\n\t* glyph02292\n\t* glyph02293\n\t* glyph02294\n\t* glyph02296\n\t* glyph02297\n\t* glyph02298\n\t* glyph02299\n\t* glyph02300\n\t* glyph02301\n\t* glyph02302\n\t* glyph02304\n\t* glyph02305\n\t* glyph02306\n\t* glyph02307\n\t* glyph02309\n\t* glyph02310\n\t* glyph02311\n\t* glyph02312\n\t* glyph02314\n\t* glyph02315\n\t* glyph02316\n\t* glyph02317\n\t* glyph02318\n\t* glyph02319\n\t* glyph02320\n\t* glyph02321\n\t* glyph02322\n\t* glyph02323\n\t* glyph02324\n\t* glyph02325\n\t* glyph02326\n\t* glyph02327\n\t* glyph02328\n\t* glyph02329\n\t* glyph02330\n\t* glyph02332\n\t* glyph02333\n\t* glyph02334\n\t* glyph02336\n\t* glyph02337\n\t* glyph02338\n\t* glyph02339\n\t* glyph02340\n\t* glyph02341\n\t* glyph02342\n\t* glyph02343\n\t* glyph02344\n\t* glyph02345\n\t* glyph02346\n\t* glyph02347\n\t* glyph02348\n\t* glyph02349\n\t* glyph02350\n\t* glyph02351\n\t* glyph02352\n\t* glyph02353\n\t* glyph02354\n\t* glyph02355\n\t* glyph02356\n\t* glyph02357\n\t* glyph02358\n\t* glyph02359\n\t* glyph02360\n\t* glyph02361\n\t* glyph02362\n\t* glyph02363\n\t* glyph02364\n\t* glyph02365\n\t* glyph02366\n\t* glyph02367\n\t* glyph02368\n\t* glyph02369\n\t* glyph02370\n\t* glyph02371\n\t* glyph02372\n\t* glyph02373\n\t* glyph02374\n\t* glyph02375\n\t* glyph02376\n\t* glyph02377\n\t* glyph02378\n\t* glyph02379\n\t* glyph02380\n\t* glyph02381\n\t* glyph02382\n\t* glyph02383\n\t* glyph02384\n\t* glyph02385\n\t* glyph02386\n\t* glyph02387\n\t* glyph02388\n\t* glyph02389\n\t* glyph02390\n\t* glyph02391\n\t* glyph02392\n\t* glyph02393\n\t* glyph02394\n\t* glyph02395\n\t* glyph02396\n\t* glyph02397\n\t* glyph02398\n\t* glyph02399\n\t* glyph02400\n\t* glyph02401\n\t* glyph02402\n\t* glyph02403\n\t* glyph02404\n\t* glyph02405\n\t* glyph02406\n\t* glyph02407\n\t* glyph02409\n\t* glyph02410\n\t* glyph02411\n\t* glyph02412\n\t* glyph02413\n\t* glyph02414\n\t* glyph02415\n\t* glyph02416\n\t* glyph02417\n\t* glyph02418\n\t* glyph02419\n\t* glyph02420\n\t* glyph02421\n\t* glyph02422\n\t* glyph02423\n\t* glyph02424\n\t* glyph02425\n\t* glyph02426\n\t* glyph02427\n\t* glyph02428\n\t* glyph02429\n\t* glyph02431\n\t* glyph02432\n\t* glyph02433\n\t* glyph02434\n\t* glyph02435\n\t* glyph02436\n\t* glyph02437\n\t* glyph02438\n\t* glyph02439\n\t* glyph02440\n\t* glyph02441\n\t* glyph02442\n\t* glyph02443\n\t* glyph02444\n\t* glyph02445\n\t* glyph02446\n\t* glyph02447\n\t* glyph02448\n\t* glyph02449\n\t* glyph02450\n\t* glyph02451\n\t* glyph02452\n\t* glyph02453\n\t* glyph02454\n\t* glyph02455\n\t* glyph02456\n\t* glyph02457\n\t* glyph02458\n\t* glyph02459\n\t* glyph02460\n\t* glyph02461\n\t* glyph02462\n\t* glyph02463\n\t* glyph02464\n\t* glyph02465\n\t* glyph02466\n\t* glyph02467\n\t* glyph02468\n\t* glyph02469\n\t* glyph02470\n\t* glyph02472\n\t* glyph02473\n\t* glyph02474\n\t* glyph02475\n\t* glyph02476\n\t* glyph02477\n\t* glyph02478\n\t* glyph02480\n\t* glyph02481\n\t* glyph02482\n\t* glyph02483\n\t* glyph02484\n\t* glyph02485\n\t* glyph02486\n\t* glyph02487\n\t* glyph02488\n\t* glyph02489\n\t* glyph02490\n\t* glyph02491\n\t* glyph02492\n\t* glyph02493\n\t* glyph02494\n\t* glyph02496\n\t* glyph02497\n\t* glyph02500\n\t* glyph02501\n\t* glyph02502\n\t* glyph02503\n\t* glyph02504\n\t* glyph02505\n\t* glyph02506\n\t* glyph02509\n\t* glyph02510\n\t* glyph02511\n\t* glyph02512\n\t* glyph02515\n\t* glyph02516\n\t* glyph02517\n\t* glyph02518\n\t* glyph02519\n\t* glyph02520\n\t* glyph02521\n\t* glyph02522\n\t* glyph02523\n\t* glyph02524\n\t* glyph02525\n\t* glyph02526\n\t* glyph02528\n\t* glyph02529\n\t* glyph02530\n\t* glyph02531\n\t* glyph02532\n\t* glyph02533\n\t* glyph02534\n\t* glyph02536\n\t* glyph02537\n\t* glyph02539\n\t* glyph02541\n\t* glyph02542\n\t* glyph02543\n\t* glyph02544\n\t* glyph02546\n\t* glyph02548\n\t* glyph02549\n\t* glyph02550\n\t* glyph02552\n\t* glyph02554\n\t* glyph02555\n\t* glyph02557\n\t* glyph02558\n\t* glyph02559\n\t* glyph02560\n\t* glyph02561\n\t* glyph02562\n\t* glyph02563\n\t* glyph02564\n\t* glyph02565\n\t* glyph02566\n\t* glyph02567\n\t* glyph02568\n\t* glyph02569\n\t* glyph02570\n\t* glyph02571\n\t* glyph02572\n\t* glyph02573\n\t* glyph02574\n\t* glyph02575\n\t* glyph02576\n\t* glyph02577\n\t* glyph02578\n\t* glyph02579\n\t* glyph02580\n\t* glyph02581\n\t* glyph02582\n\t* glyph02583\n\t* glyph02584\n\t* glyph02585\n\t* glyph02586\n\t* glyph02587\n\t* glyph02588\n\t* glyph02589\n\t* glyph02591\n\t* glyph02592\n\t* glyph02593\n\t* glyph02594\n\t* glyph02596\n\t* glyph02597\n\t* glyph02598\n\t* glyph02599\n\t* glyph02600\n\t* glyph02601\n\t* glyph02602\n\t* glyph02603\n\t* glyph02604\n\t* glyph02605\n\t* glyph02606\n\t* glyph02607\n\t* glyph02608\n\t* glyph02609\n\t* glyph02610\n\t* glyph02611\n\t* glyph02613\n\t* glyph02614\n\t* glyph02615\n\t* glyph02616\n\t* glyph02617\n\t* glyph02618\n\t* glyph02619\n\t* glyph02620\n\t* glyph02621\n\t* glyph02622\n\t* glyph02623\n\t* glyph02624\n\t* glyph02625\n\t* glyph02626\n\t* glyph02627\n\t* glyph02628\n\t* glyph02629\n\t* glyph02630\n\t* glyph02631\n\t* glyph02632\n\t* glyph02633\n\t* glyph02634\n\t* glyph02635\n\t* glyph02636\n\t* glyph02637\n\t* glyph02638\n\t* glyph02639\n\t* glyph02640\n\t* glyph02641\n\t* glyph02642\n\t* glyph02643\n\t* glyph02644\n\t* glyph02645\n\t* glyph02646\n\t* glyph02648\n\t* glyph02649\n\t* glyph02650\n\t* glyph02651\n\t* glyph02652\n\t* glyph02653\n\t* glyph02654\n\t* glyph02655\n\t* glyph02656\n\t* glyph02657\n\t* glyph02658\n\t* glyph02659\n\t* glyph02660\n\t* glyph02661\n\t* glyph02662\n\t* glyph02663\n\t* glyph02664\n\t* glyph02665\n\t* glyph02667\n\t* glyph02669\n\t* glyph02670\n\t* glyph02671\n\t* glyph02674\n\t* glyph02675\n\t* glyph02676\n\t* glyph02677\n\t* glyph02678\n\t* glyph02679\n\t* glyph02680\n\t* glyph02681\n\t* glyph02682\n\t* glyph02683\n\t* glyph02684\n\t* glyph02685\n\t* glyph02686\n\t* glyph02687\n\t* glyph02688\n\t* glyph02689\n\t* glyph02690\n\t* glyph02691\n\t* glyph02692\n\t* glyph02695\n\t* glyph02696\n\t* glyph02697\n\t* glyph02698\n\t* glyph02700\n\t* glyph02701\n\t* glyph02702\n\t* glyph02703\n\t* glyph02704\n\t* glyph02706\n\t* glyph02708\n\t* glyph02711\n\t* glyph02712\n\t* glyph02715\n\t* glyph02716\n\t* glyph02718\n\t* glyph02719\n\t* glyph02721\n\t* glyph02722\n\t* glyph02723\n\t* glyph02724\n\t* glyph02726\n\t* glyph02727\n\t* glyph02729\n\t* glyph02730\n\t* glyph02731\n\t* glyph02732\n\t* glyph02733\n\t* glyph02734\n\t* glyph02735\n\t* glyph02736\n\t* glyph02737\n\t* glyph02738\n\t* glyph02739\n\t* glyph02740\n\t* glyph02741\n\t* glyph02742\n\t* glyph02743\n\t* glyph02744\n\t* glyph02745\n\t* glyph02746\n\t* glyph02747\n\t* glyph02748\n\t* glyph02749\n\t* glyph02750\n\t* glyph02751\n\t* glyph02752\n\t* glyph02754\n\t* glyph02755\n\t* glyph02756\n\t* glyph02757\n\t* glyph02758\n\t* glyph02760\n\t* glyph02762\n\t* glyph02765\n\t* glyph02768\n\t* glyph02769\n\t* glyph02770\n\t* glyph02772\n\t* glyph02773\n\t* glyph02774\n\t* glyph02776\n\t* glyph02777\n\t* glyph02778\n\t* glyph02780\n\t* glyph02782\n\t* glyph02783\n\t* glyph02785\n\t* glyph02787\n\t* glyph02788\n\t* glyph02789\n\t* glyph02791\n\t* glyph02792\n\t* glyph02793\n\t* glyph02794\n\t* glyph02795\n\t* glyph02796\n\t* glyph02798\n\t* glyph02799\n\t* glyph02800\n\t* glyph02801\n\t* glyph02802\n\t* glyph02803\n\t* glyph02804\n\t* glyph02805\n\t* glyph02806\n\t* glyph02807\n\t* glyph02808\n\t* glyph02809\n\t* glyph02810\n\t* glyph02811\n\t* glyph02812\n\t* glyph02813\n\t* glyph02814\n\t* glyph02815\n\t* glyph02816\n\t* glyph02817\n\t* glyph02818\n\t* glyph02819\n\t* glyph02821\n\t* glyph02823\n\t* glyph02824\n\t* glyph02826\n\t* glyph02827\n\t* glyph02830\n\t* glyph02831\n\t* glyph02832\n\t* glyph02833\n\t* glyph02834\n\t* glyph02836\n\t* glyph02839\n\t* glyph02840\n\t* glyph02841\n\t* glyph02842\n\t* glyph02843\n\t* glyph02844\n\t* glyph02845\n\t* glyph02847\n\t* glyph02848\n\t* glyph02849\n\t* glyph02850\n\t* glyph02851\n\t* glyph02852\n\t* glyph02853\n\t* glyph02854\n\t* glyph02855\n\t* glyph02856\n\t* glyph02857\n\t* glyph02859\n\t* glyph02860\n\t* glyph02861\n\t* glyph02862\n\t* glyph02863\n\t* glyph02864\n\t* glyph02865\n\t* glyph02866\n\t* glyph02867\n\t* glyph02868\n\t* glyph02869\n\t* glyph02870\n\t* glyph02871\n\t* glyph02872\n\t* glyph02873\n\t* glyph02874\n\t* glyph02875\n\t* glyph02876\n\t* glyph02877\n\t* glyph02878\n\t* glyph02879\n\t* glyph02882\n\t* glyph02884\n\t* glyph02885\n\t* glyph02886\n\t* glyph02887\n\t* glyph02888\n\t* glyph02889\n\t* glyph02890\n\t* glyph02891\n\t* glyph02892\n\t* glyph02893\n\t* glyph02895\n\t* glyph02896\n\t* glyph02898\n\t* glyph02899\n\t* glyph02900\n\t* glyph02901\n\t* glyph02902\n\t* glyph02903\n\t* glyph02904\n\t* glyph02905\n\t* glyph02906\n\t* glyph02907\n\t* glyph02908\n\t* glyph02909\n\t* glyph02910\n\t* glyph02912\n\t* glyph02913\n\t* glyph02915\n\t* glyph02916\n\t* glyph02917\n\t* glyph02918\n\t* glyph02919\n\t* glyph02920\n\t* glyph02921\n\t* glyph02922\n\t* glyph02923\n\t* glyph02924\n\t* glyph02925\n\t* glyph02926\n\t* glyph02927\n\t* glyph02928\n\t* glyph02929\n\t* glyph02930\n\t* glyph02931\n\t* glyph02932\n\t* glyph02933\n\t* glyph02934\n\t* glyph02937\n\t* glyph02938\n\t* glyph02940\n\t* glyph02941\n\t* glyph02942\n\t* glyph02944\n\t* glyph02945\n\t* glyph02946\n\t* glyph02948\n\t* glyph02949\n\t* glyph02951\n\t* glyph02952\n\t* glyph02953\n\t* glyph02954\n\t* glyph02955\n\t* glyph02956\n\t* glyph02957\n\t* glyph02958\n\t* glyph02959\n\t* glyph02960\n\t* glyph02961\n\t* glyph02962\n\t* glyph02963\n\t* glyph02964\n\t* glyph02965\n\t* glyph02966\n\t* glyph02967\n\t* glyph02968\n\t* glyph02969\n\t* glyph02970\n\t* glyph02971\n\t* glyph02972\n\t* glyph02973\n\t* glyph02975\n\t* glyph02976\n\t* glyph02977\n\t* glyph02978\n\t* glyph02980\n\t* glyph02981\n\t* glyph02982\n\t* glyph02983\n\t* glyph02984\n\t* glyph02985\n\t* glyph02986\n\t* glyph02987\n\t* glyph02988\n\t* glyph02989\n\t* glyph02990\n\t* glyph02991\n\t* glyph02992\n\t* glyph02993\n\t* glyph02994\n\t* glyph02995\n\t* glyph02996\n\t* glyph02997\n\t* glyph02998\n\t* glyph02999\n\t* glyph03000\n\t* glyph03001\n\t* glyph03002\n\t* glyph03003\n\t* glyph03004\n\t* glyph03005\n\t* glyph03006\n\t* glyph03007\n\t* glyph03008\n\t* glyph03009\n\t* glyph03010\n\t* glyph03011\n\t* glyph03012\n\t* glyph03013\n\t* glyph03014\n\t* glyph03015\n\t* glyph03016\n\t* glyph03017\n\t* glyph03018\n\t* glyph03019\n\t* glyph03020\n\t* glyph03021\n\t* glyph03022\n\t* glyph03023\n\t* glyph03024\n\t* glyph03025\n\t* glyph03026\n\t* glyph03027\n\t* glyph03028\n\t* glyph03029\n\t* glyph03030\n\t* glyph03031\n\t* glyph03032\n\t* glyph03033\n\t* glyph03034\n\t* glyph03035\n\t* glyph03036\n\t* glyph03037\n\t* glyph03038\n\t* glyph03039\n\t* glyph03040\n\t* glyph03041\n\t* glyph03042\n\t* glyph03043\n\t* glyph03044\n\t* glyph03045\n\t* glyph03046\n\t* glyph03047\n\t* glyph03048\n\t* glyph03049\n\t* glyph03050\n\t* glyph03051\n\t* glyph03054\n\t* glyph03056\n\t* glyph03057\n\t* glyph03058\n\t* glyph03059\n\t* glyph03060\n\t* glyph03061\n\t* glyph03062\n\t* glyph03063\n\t* glyph03064\n\t* glyph03065\n\t* glyph03066\n\t* glyph03067\n\t* glyph03068\n\t* glyph03069\n\t* glyph03070\n\t* glyph03071\n\t* glyph03072\n\t* glyph03073\n\t* glyph03074\n\t* glyph03075\n\t* glyph03076\n\t* glyph03077\n\t* glyph03078\n\t* glyph03080\n\t* glyph03081\n\t* glyph03083\n\t* glyph03084\n\t* glyph03085\n\t* glyph03086\n\t* glyph03089\n\t* glyph03091\n\t* glyph03093\n\t* glyph03095\n\t* glyph03096\n\t* glyph03097\n\t* glyph03100\n\t* glyph03101\n\t* glyph03102\n\t* glyph03103\n\t* glyph03104\n\t* glyph03105\n\t* glyph03106\n\t* glyph03107\n\t* glyph03108\n\t* glyph03109\n\t* glyph03110\n\t* glyph03111\n\t* glyph03112\n\t* glyph03113\n\t* glyph03114\n\t* glyph03116\n\t* glyph03117\n\t* glyph03118\n\t* glyph03119\n\t* glyph03120\n\t* glyph03121\n\t* glyph03122\n\t* glyph03123\n\t* glyph03124\n\t* glyph03125\n\t* glyph03126\n\t* glyph03127\n\t* glyph03128\n\t* glyph03129\n\t* glyph03130\n\t* glyph03131\n\t* glyph03132\n\t* glyph03133\n\t* glyph03134\n\t* glyph03135\n\t* glyph03136\n\t* glyph03137\n\t* glyph03139\n\t* glyph03140\n\t* glyph03143\n\t* glyph03144\n\t* glyph03145\n\t* glyph03146\n\t* glyph03147\n\t* glyph03148\n\t* glyph03149\n\t* glyph03150\n\t* glyph03151\n\t* glyph03153\n\t* glyph03155\n\t* glyph03156\n\t* glyph03157\n\t* glyph03159\n\t* glyph03160\n\t* glyph03162\n\t* glyph03165\n\t* glyph03166\n\t* glyph03167\n\t* glyph03168\n\t* glyph03170\n\t* glyph03171\n\t* glyph03172\n\t* glyph03173\n\t* glyph03176\n\t* glyph03178\n\t* glyph03179\n\t* glyph03180\n\t* glyph03181\n\t* glyph03182\n\t* glyph03183\n\t* glyph03184\n\t* glyph03185\n\t* glyph03186\n\t* glyph03187\n\t* glyph03188\n\t* glyph03189\n\t* glyph03190\n\t* glyph03191\n\t* glyph03192\n\t* glyph03193\n\t* glyph03194\n\t* glyph03195\n\t* glyph03196\n\t* glyph03197\n\t* glyph03199\n\t* glyph03200\n\t* glyph03201\n\t* glyph03202\n\t* glyph03203\n\t* glyph03205\n\t* glyph03206\n\t* glyph03209\n\t* glyph03210\n\t* glyph03212\n\t* glyph03213\n\t* glyph03214\n\t* glyph03217\n\t* glyph03218\n\t* glyph03219\n\t* glyph03220\n\t* glyph03221\n\t* glyph03222\n\t* glyph03223\n\t* glyph03224\n\t* glyph03225\n\t* glyph03226\n\t* glyph03227\n\t* glyph03228\n\t* glyph03229\n\t* glyph03230\n\t* glyph03231\n\t* glyph03232\n\t* glyph03233\n\t* glyph03234\n\t* glyph03235\n\t* glyph03236\n\t* glyph03237\n\t* glyph03238\n\t* glyph03239\n\t* glyph03240\n\t* glyph03241\n\t* glyph03242\n\t* glyph03243\n\t* glyph03244\n\t* glyph03245\n\t* glyph03246\n\t* glyph03247\n\t* glyph03248\n\t* glyph03249\n\t* glyph03250\n\t* glyph03251\n\t* glyph03252\n\t* glyph03253\n\t* glyph03254\n\t* glyph03255\n\t* glyph03256\n\t* glyph03257\n\t* glyph03258\n\t* glyph03259\n\t* glyph03260\n\t* glyph03261\n\t* glyph03262\n\t* glyph03263\n\t* glyph03264\n\t* glyph03265\n\t* glyph03266\n\t* glyph03267\n\t* glyph03268\n\t* glyph03269\n\t* glyph03270\n\t* glyph03271\n\t* glyph03272\n\t* glyph03273\n\t* glyph03274\n\t* glyph03275\n\t* glyph03276\n\t* glyph03277\n\t* glyph03278\n\t* glyph03279\n\t* glyph03280\n\t* glyph03281\n\t* glyph03282\n\t* glyph03283\n\t* glyph03284\n\t* glyph03285\n\t* glyph03286\n\t* glyph03287\n\t* glyph03288\n\t* glyph03289\n\t* glyph03290\n\t* glyph03291\n\t* glyph03292\n\t* glyph03293\n\t* glyph03294\n\t* glyph03295\n\t* glyph03296\n\t* glyph03297\n\t* glyph03298\n\t* glyph03299\n\t* glyph03301\n\t* glyph03302\n\t* glyph03304\n\t* glyph03305\n\t* glyph03306\n\t* glyph03307\n\t* glyph03308\n\t* glyph03310\n\t* glyph03312\n\t* glyph03314\n\t* glyph03315\n\t* glyph03316\n\t* glyph03317\n\t* glyph03318\n\t* glyph03319\n\t* glyph03320\n\t* glyph03321\n\t* glyph03322\n\t* glyph03323\n\t* glyph03324\n\t* glyph03325\n\t* glyph03326\n\t* glyph03327\n\t* glyph03328\n\t* glyph03329\n\t* glyph03330\n\t* glyph03331\n\t* glyph03332\n\t* glyph03333\n\t* glyph03334\n\t* glyph03335\n\t* glyph03337\n\t* glyph03339\n\t* glyph03341\n\t* glyph03342\n\t* glyph03345\n\t* glyph03346\n\t* glyph03347\n\t* glyph03348\n\t* glyph03351\n\t* glyph03352\n\t* glyph03353\n\t* glyph03355\n\t* glyph03356\n\t* glyph03358\n\t* glyph03359\n\t* glyph03360\n\t* glyph03361\n\t* glyph03362\n\t* glyph03363\n\t* glyph03364\n\t* glyph03365\n\t* glyph03366\n\t* glyph03368\n\t* glyph03369\n\t* glyph03370\n\t* glyph03372\n\t* glyph03373\n\t* glyph03374\n\t* glyph03377\n\t* glyph03378\n\t* glyph03379\n\t* glyph03380\n\t* glyph03381\n\t* glyph03382\n\t* glyph03383\n\t* glyph03384\n\t* glyph03385\n\t* glyph03386\n\t* glyph03387\n\t* glyph03388\n\t* glyph03389\n\t* glyph03390\n\t* glyph03391\n\t* glyph03392\n\t* glyph03393\n\t* glyph03394\n\t* glyph03395\n\t* glyph03397\n\t* glyph03400\n\t* glyph03401\n\t* glyph03403\n\t* glyph03407\n\t* glyph03409\n\t* glyph03410\n\t* glyph03412\n\t* glyph03413\n\t* glyph03415\n\t* glyph03416\n\t* glyph03417\n\t* glyph03418\n\t* glyph03419\n\t* glyph03420\n\t* glyph03421\n\t* glyph03422\n\t* glyph03423\n\t* glyph03424\n\t* glyph03425\n\t* glyph03426\n\t* glyph03427\n\t* glyph03428\n\t* glyph03429\n\t* glyph03430\n\t* glyph03431\n\t* glyph03432\n\t* glyph03433\n\t* glyph03434\n\t* glyph03435\n\t* glyph03436\n\t* glyph03437\n\t* glyph03438\n\t* glyph03439\n\t* glyph03440\n\t* glyph03441\n\t* glyph03443\n\t* glyph03444\n\t* glyph03445\n\t* glyph03446\n\t* glyph03447\n\t* glyph03448\n\t* glyph03449\n\t* glyph03450\n\t* glyph03451\n\t* glyph03453\n\t* glyph03454\n\t* glyph03455\n\t* glyph03456\n\t* glyph03457\n\t* glyph03458\n\t* glyph03459\n\t* glyph03460\n\t* glyph03461\n\t* glyph03463\n\t* glyph03466\n\t* glyph03468\n\t* glyph03469\n\t* glyph03472\n\t* glyph03473\n\t* glyph03474\n\t* glyph03475\n\t* glyph03476\n\t* glyph03477\n\t* glyph03478\n\t* glyph03479\n\t* glyph03480\n\t* glyph03481\n\t* glyph03482\n\t* glyph03483\n\t* glyph03485\n\t* glyph03486\n\t* glyph03487\n\t* glyph03488\n\t* glyph03490\n\t* glyph03491\n\t* glyph03493\n\t* glyph03494\n\t* glyph03496\n\t* glyph03498\n\t* glyph03499\n\t* glyph03501\n\t* glyph03502\n\t* glyph03503\n\t* glyph03505\n\t* glyph03506\n\t* glyph03508\n\t* glyph03509\n\t* glyph03511\n\t* glyph03512\n\t* glyph03513\n\t* glyph03514\n\t* glyph03517\n\t* glyph03518\n\t* glyph03520\n\t* glyph03521\n\t* glyph03522\n\t* glyph03523\n\t* glyph03524\n\t* glyph03525\n\t* glyph03526\n\t* glyph03527\n\t* glyph03528\n\t* glyph03529\n\t* glyph03531\n\t* glyph03533\n\t* glyph03534\n\t* glyph03535\n\t* glyph03536\n\t* glyph03537\n\t* glyph03538\n\t* glyph03539\n\t* glyph03541\n\t* glyph03542\n\t* glyph03543\n\t* glyph03544\n\t* glyph03545\n\t* glyph03546\n\t* glyph03547\n\t* glyph03548\n\t* glyph03549\n\t* glyph03552\n\t* glyph03553\n\t* glyph03555\n\t* glyph03557\n\t* glyph03558\n\t* glyph03559\n\t* glyph03560\n\t* glyph03561\n\t* glyph03562\n\t* glyph03563\n\t* glyph03567\n\t* glyph03569\n\t* glyph03570\n\t* glyph03571\n\t* glyph03572\n\t* glyph03574\n\t* glyph03575\n\t* glyph03576\n\t* glyph03577\n\t* glyph03579\n\t* glyph03581\n\t* glyph03582\n\t* glyph03583\n\t* glyph03584\n\t* glyph03587\n\t* glyph03588\n\t* glyph03592\n\t* glyph03593\n\t* glyph03594\n\t* glyph03596\n\t* glyph03597\n\t* glyph03598\n\t* glyph03600\n\t* glyph03601\n\t* glyph03602\n\t* glyph03603\n\t* glyph03604\n\t* glyph03605\n\t* glyph03606\n\t* glyph03607\n\t* glyph03608\n\t* glyph03609\n\t* glyph03610\n\t* glyph03611\n\t* glyph03612\n\t* glyph03613\n\t* glyph03614\n\t* glyph03615\n\t* glyph03616\n\t* glyph03617\n\t* glyph03618\n\t* glyph03619\n\t* glyph03622\n\t* glyph03623\n\t* glyph03624\n\t* glyph03625\n\t* glyph03626\n\t* glyph03627\n\t* glyph03628\n\t* glyph03629\n\t* glyph03630\n\t* glyph03631\n\t* glyph03632\n\t* glyph03633\n\t* glyph03634\n\t* glyph03635\n\t* glyph03636\n\t* glyph03637\n\t* glyph03638\n\t* glyph03639\n\t* glyph03640\n\t* glyph03641\n\t* glyph03642\n\t* glyph03643\n\t* glyph03644\n\t* glyph03647\n\t* glyph03649\n\t* glyph03650\n\t* glyph03652\n\t* glyph03653\n\t* glyph03654\n\t* glyph03655\n\t* glyph03657\n\t* glyph03660\n\t* glyph03662\n\t* glyph03664\n\t* glyph03665\n\t* glyph03666\n\t* glyph03667\n\t* glyph03669\n\t* glyph03670\n\t* glyph03671\n\t* glyph03672\n\t* glyph03673\n\t* glyph03674\n\t* glyph03675\n\t* glyph03676\n\t* glyph03677\n\t* glyph03678\n\t* glyph03679\n\t* glyph03680\n\t* glyph03681\n\t* glyph03682\n\t* glyph03683\n\t* glyph03684\n\t* glyph03686\n\t* glyph03687\n\t* glyph03688\n\t* glyph03689\n\t* glyph03690\n\t* glyph03691\n\t* glyph03692\n\t* glyph03693\n\t* glyph03694\n\t* glyph03695\n\t* glyph03696\n\t* glyph03697\n\t* glyph03698\n\t* glyph03699\n\t* glyph03700\n\t* glyph03701\n\t* glyph03703\n\t* glyph03704\n\t* glyph03705\n\t* glyph03706\n\t* glyph03707\n\t* glyph03709\n\t* glyph03713\n\t* glyph03714\n\t* glyph03716\n\t* glyph03718\n\t* glyph03720\n\t* glyph03721\n\t* glyph03722\n\t* glyph03723\n\t* glyph03724\n\t* glyph03725\n\t* glyph03728\n\t* glyph03729\n\t* glyph03732\n\t* glyph03733\n\t* glyph03736\n\t* glyph03737\n\t* glyph03739\n\t* glyph03740\n\t* glyph03741\n\t* glyph03744\n\t* glyph03745\n\t* glyph03746\n\t* glyph03747\n\t* glyph03748\n\t* glyph03750\n\t* glyph03754\n\t* glyph03757\n\t* glyph03759\n\t* glyph03761\n\t* glyph03762\n\t* glyph03763\n\t* glyph03764\n\t* glyph03766\n\t* glyph03767\n\t* glyph03768\n\t* glyph03769\n\t* glyph03770\n\t* glyph03771\n\t* glyph03772\n\t* glyph03773\n\t* glyph03774\n\t* glyph03775\n\t* glyph03776\n\t* glyph03777\n\t* glyph03778\n\t* glyph03779\n\t* glyph03780\n\t* glyph03781\n\t* glyph03782\n\t* glyph03783\n\t* glyph03784\n\t* glyph03785\n\t* glyph03786\n\t* glyph03787\n\t* glyph03788\n\t* glyph03789\n\t* glyph03790\n\t* glyph03791\n\t* glyph03792\n\t* glyph03793\n\t* glyph03794\n\t* glyph03795\n\t* glyph03796\n\t* glyph03797\n\t* glyph03798\n\t* glyph03799\n\t* glyph03800\n\t* glyph03801\n\t* glyph03803\n\t* glyph03805\n\t* glyph03807\n\t* glyph03809\n\t* glyph03810\n\t* glyph03812\n\t* glyph03813\n\t* glyph03814\n\t* glyph03815\n\t* glyph03816\n\t* glyph03817\n\t* glyph03818\n\t* glyph03819\n\t* glyph03820\n\t* glyph03821\n\t* glyph03822\n\t* glyph03823\n\t* glyph03824\n\t* glyph03825\n\t* glyph03826\n\t* glyph03827\n\t* glyph03829\n\t* glyph03830\n\t* glyph03831\n\t* glyph03832\n\t* glyph03833\n\t* glyph03835\n\t* glyph03836\n\t* glyph03837\n\t* glyph03838\n\t* glyph03839\n\t* glyph03840\n\t* glyph03841\n\t* glyph03842\n\t* glyph03844\n\t* glyph03845\n\t* glyph03846\n\t* glyph03847\n\t* glyph03848\n\t* glyph03849\n\t* glyph03850\n\t* glyph03851\n\t* glyph03852\n\t* glyph03853\n\t* glyph03854\n\t* glyph03855\n\t* glyph03856\n\t* glyph03857\n\t* glyph03858\n\t* glyph03861\n\t* glyph03862\n\t* glyph03863\n\t* glyph03864\n\t* glyph03865\n\t* glyph03867\n\t* glyph03868\n\t* glyph03869\n\t* glyph03871\n\t* glyph03872\n\t* glyph03873\n\t* glyph03874\n\t* glyph03875\n\t* glyph03876\n\t* glyph03877\n\t* glyph03878\n\t* glyph03879\n\t* glyph03880\n\t* glyph03881\n\t* glyph03882\n\t* glyph03883\n\t* glyph03884\n\t* glyph03885\n\t* glyph03886\n\t* glyph03887\n\t* glyph03888\n\t* glyph03889\n\t* glyph03890\n\t* glyph03891\n\t* glyph03892\n\t* glyph03893\n\t* glyph03894\n\t* glyph03895\n\t* glyph03896\n\t* glyph03897\n\t* glyph03898\n\t* glyph03899\n\t* glyph03900\n\t* glyph03901\n\t* glyph03902\n\t* glyph03903\n\t* glyph03904\n\t* glyph03905\n\t* glyph03906\n\t* glyph03907\n\t* glyph03909\n\t* glyph03910\n\t* glyph03911\n\t* glyph03912\n\t* glyph03913\n\t* glyph03914\n\t* glyph03915\n\t* glyph03916\n\t* glyph03917\n\t* glyph03918\n\t* glyph03919\n\t* glyph03920\n\t* glyph03921\n\t* glyph03922\n\t* glyph03923\n\t* glyph03924\n\t* glyph03927\n\t* glyph03928\n\t* glyph03929\n\t* glyph03930\n\t* glyph03931\n\t* glyph03932\n\t* glyph03933\n\t* glyph03934\n\t* glyph03935\n\t* glyph03936\n\t* glyph03937\n\t* glyph03938\n\t* glyph03939\n\t* glyph03941\n\t* glyph03943\n\t* glyph03944\n\t* glyph03946\n\t* glyph03947\n\t* glyph03948\n\t* glyph03949\n\t* glyph03950\n\t* glyph03952\n\t* glyph03953\n\t* glyph03954\n\t* glyph03955\n\t* glyph03956\n\t* glyph03957\n\t* glyph03958\n\t* glyph03959\n\t* glyph03960\n\t* glyph03961\n\t* glyph03962\n\t* glyph03963\n\t* glyph03964\n\t* glyph03965\n\t* glyph03966\n\t* glyph03967\n\t* glyph03968\n\t* glyph03969\n\t* glyph03970\n\t* glyph03971\n\t* glyph03972\n\t* glyph03973\n\t* glyph03974\n\t* glyph03975\n\t* glyph03976\n\t* glyph03977\n\t* glyph03978\n\t* glyph03979\n\t* glyph03980\n\t* glyph03981\n\t* glyph03982\n\t* glyph03983\n\t* glyph03985\n\t* glyph03987\n\t* glyph03990\n\t* glyph03991\n\t* glyph03993\n\t* glyph03994\n\t* glyph03995\n\t* glyph03997\n\t* glyph03998\n\t* glyph03999\n\t* glyph04001\n\t* glyph04003\n\t* glyph04004\n\t* glyph04005\n\t* glyph04006\n\t* glyph04008\n\t* glyph04009\n\t* glyph04010\n\t* glyph04011\n\t* glyph04012\n\t* glyph04013\n\t* glyph04014\n\t* glyph04015\n\t* glyph04016\n\t* glyph04017\n\t* glyph04018\n\t* glyph04019\n\t* glyph04020\n\t* glyph04021\n\t* glyph04022\n\t* glyph04023\n\t* glyph04024\n\t* glyph04025\n\t* glyph04026\n\t* glyph04027\n\t* glyph04028\n\t* glyph04029\n\t* glyph04030\n\t* glyph04031\n\t* glyph04032\n\t* glyph04033\n\t* glyph04034\n\t* glyph04035\n\t* glyph04036\n\t* glyph04037\n\t* glyph04038\n\t* glyph04039\n\t* glyph04040\n\t* glyph04041\n\t* glyph04042\n\t* glyph04043\n\t* glyph04044\n\t* glyph04045\n\t* glyph04046\n\t* glyph04047\n\t* glyph04048\n\t* glyph04049\n\t* glyph04050\n\t* glyph04051\n\t* glyph04052\n\t* glyph04053\n\t* glyph04054\n\t* glyph04055\n\t* glyph04056\n\t* glyph04057\n\t* glyph04058\n\t* glyph04059\n\t* glyph04060\n\t* glyph04061\n\t* glyph04062\n\t* glyph04063\n\t* glyph04064\n\t* glyph04065\n\t* glyph04066\n\t* glyph04067\n\t* glyph04068\n\t* glyph04069\n\t* glyph04070\n\t* glyph04071\n\t* glyph04072\n\t* glyph04073\n\t* glyph04074\n\t* glyph04075\n\t* glyph04076\n\t* glyph04077\n\t* glyph04078\n\t* glyph04079\n\t* glyph04080\n\t* glyph04081\n\t* glyph04082\n\t* glyph04083\n\t* glyph04084\n\t* glyph04085\n\t* glyph04086\n\t* glyph04087\n\t* glyph04088\n\t* glyph04089\n\t* glyph04090\n\t* glyph04091\n\t* glyph04092\n\t* glyph04093\n\t* glyph04094\n\t* glyph04096\n\t* glyph04097\n\t* glyph04098\n\t* glyph04099\n\t* glyph04100\n\t* glyph04101\n\t* glyph04102\n\t* glyph04103\n\t* glyph04105\n\t* glyph04106\n\t* glyph04107\n\t* glyph04108\n\t* glyph04109\n\t* glyph04110\n\t* glyph04111\n\t* glyph04112\n\t* glyph04114\n\t* glyph04115\n\t* glyph04116\n\t* glyph04117\n\t* glyph04119\n\t* glyph04120\n\t* glyph04121\n\t* glyph04122\n\t* glyph04123\n\t* glyph04124\n\t* glyph04125\n\t* glyph04126\n\t* glyph04127\n\t* glyph04128\n\t* glyph04129\n\t* glyph04130\n\t* glyph04131\n\t* glyph04132\n\t* glyph04133\n\t* glyph04134\n\t* glyph04135\n\t* glyph04136\n\t* glyph04137\n\t* glyph04138\n\t* glyph04139\n\t* glyph04140\n\t* glyph04141\n\t* glyph04142\n\t* glyph04143\n\t* glyph04144\n\t* glyph04145\n\t* glyph04146\n\t* glyph04147\n\t* glyph04148\n\t* glyph04149\n\t* glyph04150\n\t* glyph04151\n\t* glyph04152\n\t* glyph04153\n\t* glyph04154\n\t* glyph04155\n\t* glyph04156\n\t* glyph04157\n\t* glyph04158\n\t* glyph04159\n\t* glyph04160\n\t* glyph04161\n\t* glyph04162\n\t* glyph04163\n\t* glyph04164\n\t* glyph04166\n\t* glyph04167\n\t* glyph04168\n\t* glyph04169\n\t* glyph04171\n\t* glyph04172\n\t* glyph04173\n\t* glyph04174\n\t* glyph04175\n\t* glyph04176\n\t* glyph04177\n\t* glyph04178\n\t* glyph04179\n\t* glyph04180\n\t* glyph04181\n\t* glyph04182\n\t* glyph04183\n\t* glyph04184\n\t* glyph04185\n\t* glyph04186\n\t* glyph04187\n\t* glyph04188\n\t* glyph04189\n\t* glyph04190\n\t* glyph04191\n\t* glyph04192\n\t* glyph04193\n\t* glyph04194\n\t* glyph04195\n\t* glyph04196\n\t* glyph04197\n\t* glyph04198\n\t* glyph04199\n\t* glyph04200\n\t* glyph04201\n\t* glyph04202\n\t* glyph04203\n\t* glyph04204\n\t* glyph04205\n\t* glyph04207\n\t* glyph04208\n\t* glyph04209\n\t* glyph04210\n\t* glyph04211\n\t* glyph04212\n\t* glyph04213\n\t* glyph04214\n\t* glyph04215\n\t* glyph04216\n\t* glyph04217\n\t* glyph04218\n\t* glyph04219\n\t* glyph04220\n\t* glyph04221\n\t* glyph04222\n\t* glyph04223\n\t* glyph04224\n\t* glyph04226\n\t* glyph04229\n\t* glyph04231\n\t* glyph04232\n\t* glyph04233\n\t* glyph04234\n\t* glyph04235\n\t* glyph04236\n\t* glyph04237\n\t* glyph04238\n\t* glyph04239\n\t* glyph04240\n\t* glyph04241\n\t* glyph04242\n\t* glyph04243\n\t* glyph04244\n\t* glyph04245\n\t* glyph04246\n\t* glyph04247\n\t* glyph04248\n\t* glyph04250\n\t* glyph04251\n\t* glyph04252\n\t* glyph04254\n\t* glyph04255\n\t* glyph04256\n\t* glyph04257\n\t* glyph04258\n\t* glyph04260\n\t* glyph04262\n\t* glyph04263\n\t* glyph04265\n\t* glyph04266\n\t* glyph04267\n\t* glyph04268\n\t* glyph04269\n\t* glyph04271\n\t* glyph04272\n\t* glyph04273\n\t* glyph04274\n\t* glyph04275\n\t* glyph04276\n\t* glyph04277\n\t* glyph04278\n\t* glyph04279\n\t* glyph04280\n\t* glyph04281\n\t* glyph04282\n\t* glyph04283\n\t* glyph04284\n\t* glyph04285\n\t* glyph04286\n\t* glyph04287\n\t* glyph04289\n\t* glyph04290\n\t* glyph04291\n\t* glyph04292\n\t* glyph04293\n\t* glyph04294\n\t* glyph04295\n\t* glyph04296\n\t* glyph04297\n\t* glyph04298\n\t* glyph04299\n\t* glyph04300\n\t* glyph04301\n\t* glyph04302\n\t* glyph04303\n\t* glyph04304\n\t* glyph04305\n\t* glyph04306\n\t* glyph04307\n\t* glyph04308\n\t* glyph04311\n\t* glyph04312\n\t* glyph04313\n\t* glyph04314\n\t* glyph04315\n\t* glyph04316\n\t* glyph04317\n\t* glyph04318\n\t* glyph04319\n\t* glyph04321\n\t* glyph04323\n\t* glyph04325\n\t* glyph04326\n\t* glyph04327\n\t* glyph04328\n\t* glyph04329\n\t* glyph04330\n\t* glyph04331\n\t* glyph04332\n\t* glyph04333\n\t* glyph04334\n\t* glyph04335\n\t* glyph04336\n\t* glyph04337\n\t* glyph04338\n\t* glyph04339\n\t* glyph04340\n\t* glyph04341\n\t* glyph04342\n\t* glyph04343\n\t* glyph04344\n\t* glyph04345\n\t* glyph04346\n\t* glyph04347\n\t* glyph04348\n\t* glyph04349\n\t* glyph04350\n\t* glyph04351\n\t* glyph04353\n\t* glyph04354\n\t* glyph04356\n\t* glyph04357\n\t* glyph04358\n\t* glyph04361\n\t* glyph04362\n\t* glyph04363\n\t* glyph04364\n\t* glyph04365\n\t* glyph04366\n\t* glyph04367\n\t* glyph04368\n\t* glyph04369\n\t* glyph04370\n\t* glyph04371\n\t* glyph04372\n\t* glyph04373\n\t* glyph04375\n\t* glyph04376\n\t* glyph04377\n\t* glyph04378\n\t* glyph04379\n\t* glyph04380\n\t* glyph04381\n\t* glyph04382\n\t* glyph04383\n\t* glyph04384\n\t* glyph04385\n\t* glyph04386\n\t* glyph04387\n\t* glyph04389\n\t* glyph04390\n\t* glyph04391\n\t* glyph04392\n\t* glyph04393\n\t* glyph04394\n\t* glyph04396\n\t* glyph04397\n\t* glyph04398\n\t* glyph04399\n\t* glyph04401\n\t* glyph04402\n\t* glyph04404\n\t* glyph04405\n\t* glyph04407\n\t* glyph04408\n\t* glyph04409\n\t* glyph04410\n\t* glyph04411\n\t* glyph04412\n\t* glyph04413\n\t* glyph04414\n\t* glyph04415\n\t* glyph04416\n\t* glyph04417\n\t* glyph04418\n\t* glyph04419\n\t* glyph04420\n\t* glyph04421\n\t* glyph04422\n\t* glyph04423\n\t* glyph04424\n\t* glyph04425\n\t* glyph04426\n\t* glyph04427\n\t* glyph04428\n\t* glyph04429\n\t* glyph04430\n\t* glyph04431\n\t* glyph04432\n\t* glyph04433\n\t* glyph04434\n\t* glyph04435\n\t* glyph04436\n\t* glyph04437\n\t* glyph04438\n\t* glyph04439\n\t* glyph04441\n\t* glyph04442\n\t* glyph04444\n\t* glyph04445\n\t* glyph04446\n\t* glyph04447\n\t* glyph04448\n\t* glyph04449\n\t* glyph04450\n\t* glyph04451\n\t* glyph04452\n\t* glyph04453\n\t* glyph04454\n\t* glyph04455\n\t* glyph04456\n\t* glyph04457\n\t* glyph04458\n\t* glyph04459\n\t* glyph04460\n\t* glyph04461\n\t* glyph04462\n\t* glyph04463\n\t* glyph04464\n\t* glyph04465\n\t* glyph04466\n\t* glyph04467\n\t* glyph04468\n\t* glyph04469\n\t* glyph04470\n\t* glyph04471\n\t* glyph04472\n\t* glyph04473\n\t* glyph04474\n\t* glyph04475\n\t* glyph04476\n\t* glyph04477\n\t* glyph04478\n\t* glyph04479\n\t* glyph04480\n\t* glyph04481\n\t* glyph04482\n\t* glyph04483\n\t* glyph04484\n\t* glyph04485\n\t* glyph04488\n\t* glyph04489\n\t* glyph04490\n\t* glyph04492\n\t* glyph04493\n\t* glyph04494\n\t* glyph04495\n\t* glyph04496\n\t* glyph04497\n\t* glyph04498\n\t* glyph04499\n\t* glyph04500\n\t* glyph04501\n\t* glyph04502\n\t* glyph04503\n\t* glyph04504\n\t* glyph04505\n\t* glyph04506\n\t* glyph04507\n\t* glyph04508\n\t* glyph04509\n\t* glyph04510\n\t* glyph04511\n\t* glyph04512\n\t* glyph04513\n\t* glyph04514\n\t* glyph04515\n\t* glyph04516\n\t* glyph04517\n\t* glyph04518\n\t* glyph04519\n\t* glyph04520\n\t* glyph04521\n\t* glyph04522\n\t* glyph04523\n\t* glyph04524\n\t* glyph04525\n\t* glyph04526\n\t* glyph04527\n\t* glyph04528\n\t* glyph04529\n\t* glyph04530\n\t* glyph04531\n\t* glyph04533\n\t* glyph04534\n\t* glyph04535\n\t* glyph04536\n\t* glyph04537\n\t* glyph04538\n\t* glyph04539\n\t* glyph04540\n\t* glyph04541\n\t* glyph04542\n\t* glyph04543\n\t* glyph04544\n\t* glyph04548\n\t* glyph04549\n\t* glyph04551\n\t* glyph04552\n\t* glyph04553\n\t* glyph04554\n\t* glyph04555\n\t* glyph04556\n\t* glyph04557\n\t* glyph04558\n\t* glyph04559\n\t* glyph04560\n\t* glyph04561\n\t* glyph04562\n\t* glyph04563\n\t* glyph04564\n\t* glyph04565\n\t* glyph04566\n\t* glyph04567\n\t* glyph04568\n\t* glyph04569\n\t* glyph04570\n\t* glyph04571\n\t* glyph04572\n\t* glyph04573\n\t* glyph04574\n\t* glyph04575\n\t* glyph04576\n\t* glyph04577\n\t* glyph04578\n\t* glyph04579\n\t* glyph04580\n\t* glyph04581\n\t* glyph04582\n\t* glyph04583\n\t* glyph04584\n\t* glyph04585\n\t* glyph04586\n\t* glyph04587\n\t* glyph04588\n\t* glyph04590\n\t* glyph04591\n\t* glyph04592\n\t* glyph04595\n\t* glyph04596\n\t* glyph04597\n\t* glyph04598\n\t* glyph04599\n\t* glyph04600\n\t* glyph04601\n\t* glyph04602\n\t* glyph04603\n\t* glyph04604\n\t* glyph04606\n\t* glyph04607\n\t* glyph04608\n\t* glyph04609\n\t* glyph04610\n\t* glyph04611\n\t* glyph04612\n\t* glyph04613\n\t* glyph04614\n\t* glyph04615\n\t* glyph04616\n\t* glyph04617\n\t* glyph04618\n\t* glyph04619\n\t* glyph04620\n\t* glyph04621\n\t* glyph04622\n\t* glyph04623\n\t* glyph04624\n\t* glyph04625\n\t* glyph04626\n\t* glyph04627\n\t* glyph04628\n\t* glyph04629\n\t* glyph04630\n\t* glyph04631\n\t* glyph04632\n\t* glyph04633\n\t* glyph04634\n\t* glyph04635\n\t* glyph04636\n\t* glyph04637\n\t* glyph04638\n\t* glyph04639\n\t* glyph04640\n\t* glyph04641\n\t* glyph04642\n\t* glyph04643\n\t* glyph04644\n\t* glyph04645\n\t* glyph04646\n\t* glyph04647\n\t* glyph04648\n\t* glyph04649\n\t* glyph04650\n\t* glyph04653\n\t* glyph04654\n\t* glyph04655\n\t* glyph04656\n\t* glyph04657\n\t* glyph04658\n\t* glyph04659\n\t* glyph04660\n\t* glyph04661\n\t* glyph04663\n\t* glyph04667\n\t* glyph04668\n\t* glyph04672\n\t* glyph04674\n\t* glyph04675\n\t* glyph04676\n\t* glyph04677\n\t* glyph04681\n\t* glyph04682\n\t* glyph04683\n\t* glyph04684\n\t* glyph04685\n\t* glyph04686\n\t* glyph04688\n\t* glyph04690\n\t* glyph04691\n\t* glyph04694\n\t* glyph04695\n\t* glyph04696\n\t* glyph04697\n\t* glyph04698\n\t* glyph04699\n\t* glyph04702\n\t* glyph04703\n\t* glyph04705\n\t* glyph04706\n\t* glyph04708\n\t* glyph04709\n\t* glyph04710\n\t* glyph04711\n\t* glyph04712\n\t* glyph04714\n\t* glyph04715\n\t* glyph04717\n\t* glyph04718\n\t* glyph04719\n\t* glyph04721\n\t* glyph04722\n\t* glyph04723\n\t* glyph04724\n\t* glyph04727\n\t* glyph04729\n\t* glyph04731\n\t* glyph04732\n\t* glyph04733\n\t* glyph04735\n\t* glyph04737\n\t* glyph04738\n\t* glyph04739\n\t* glyph04740\n\t* glyph04741\n\t* glyph04742\n\t* glyph04743\n\t* glyph04744\n\t* glyph04745\n\t* glyph04747\n\t* glyph04748\n\t* glyph04749\n\t* glyph04750\n\t* glyph04751\n\t* glyph04753\n\t* glyph04757\n\t* glyph04758\n\t* glyph04759\n\t* glyph04760\n\t* glyph04762\n\t* glyph04763\n\t* glyph04764\n\t* glyph04766\n\t* glyph04768\n\t* glyph04769\n\t* glyph04770\n\t* glyph04771\n\t* glyph04772\n\t* glyph04774\n\t* glyph04775\n\t* glyph04776\n\t* glyph04777\n\t* glyph04778\n\t* glyph04779\n\t* glyph04780\n\t* glyph04783\n\t* glyph04784\n\t* glyph04785\n\t* glyph04786\n\t* glyph04787\n\t* glyph04789\n\t* glyph04790\n\t* glyph04791\n\t* glyph04792\n\t* glyph04793\n\t* glyph04794\n\t* glyph04795\n\t* glyph04796\n\t* glyph04797\n\t* glyph04798\n\t* glyph04799\n\t* glyph04800\n\t* glyph04801\n\t* glyph04802\n\t* glyph04803\n\t* glyph04804\n\t* glyph04805\n\t* glyph04806\n\t* glyph04807\n\t* glyph04808\n\t* glyph04809\n\t* glyph04810\n\t* glyph04811\n\t* glyph04812\n\t* glyph04813\n\t* glyph04814\n\t* glyph04815\n\t* glyph04816\n\t* glyph04817\n\t* glyph04818\n\t* glyph04819\n\t* glyph04820\n\t* glyph04822\n\t* glyph04823\n\t* glyph04824\n\t* glyph04825\n\t* glyph04826\n\t* glyph04827\n\t* glyph04828\n\t* glyph04829\n\t* glyph04830\n\t* glyph04837\n\t* glyph04838\n\t* glyph04839\n\t* glyph04840\n\t* glyph04841\n\t* glyph04842\n\t* glyph04843\n\t* glyph04844\n\t* glyph04845\n\t* glyph04846\n\t* glyph04847\n\t* glyph04848\n\t* glyph04849\n\t* glyph04850\n\t* glyph04851\n\t* glyph04852\n\t* glyph04853\n\t* glyph04854\n\t* glyph04855\n\t* glyph04856\n\t* glyph04857\n\t* glyph04858\n\t* glyph04859\n\t* glyph04860\n\t* glyph04861\n\t* glyph04862\n\t* glyph04863\n\t* glyph04864\n\t* glyph04865\n\t* glyph04866\n\t* glyph04867\n\t* glyph04868\n\t* glyph04869\n\t* glyph04870\n\t* glyph04871\n\t* glyph04872\n\t* glyph04873\n\t* glyph04874\n\t* glyph04875\n\t* glyph04876\n\t* glyph04877\n\t* glyph04878\n\t* glyph04885\n\t* glyph04886\n\t* glyph04887\n\t* glyph04888\n\t* glyph04889\n\t* glyph04890\n\t* glyph04897\n\t* glyph04898\n\t* glyph04899\n\t* glyph04900\n\t* glyph04901\n\t* glyph04902\n\t* glyph04903\n\t* glyph04904\n\t* glyph04905\n\t* glyph04906\n\t* glyph04907\n\t* glyph04908\n\t* glyph04909\n\t* glyph04910\n\t* glyph04911\n\t* glyph04912\n\t* glyph04913\n\t* glyph04914\n\t* glyph04915\n\t* glyph04916\n\t* glyph04918\n\t* glyph04919\n\t* glyph04920\n\t* glyph04921\n\t* glyph04923\n\t* glyph04925\n\t* glyph04926\n\t* glyph04927\n\t* glyph04928\n\t* glyph04929\n\t* glyph04930\n\t* glyph04931\n\t* glyph04932\n\t* glyph04933\n\t* glyph04934\n\t* glyph04935\n\t* glyph04936\n\t* glyph04937\n\t* glyph04938\n\t* glyph04939\n\t* glyph04940\n\t* glyph04941\n\t* glyph04942\n\t* glyph04943\n\t* glyph04944\n\t* glyph04945\n\t* glyph04946\n\t* glyph04947\n\t* glyph04948\n\t* glyph04949\n\t* glyph04950\n\t* glyph04952\n\t* glyph04953\n\t* glyph04954\n\t* glyph04955\n\t* glyph04956\n\t* glyph04957\n\t* glyph04959\n\t* glyph04960\n\t* glyph04961\n\t* glyph04962\n\t* glyph04963\n\t* glyph04964\n\t* glyph04965\n\t* glyph04966\n\t* glyph04967\n\t* glyph04968\n\t* glyph04969\n\t* glyph04970\n\t* glyph04971\n\t* glyph04972\n\t* glyph04973\n\t* glyph04974\n\t* glyph04975\n\t* glyph04976\n\t* glyph04977\n\t* glyph04978\n\t* glyph04979\n\t* glyph04980\n\t* glyph04981\n\t* glyph04982\n\t* glyph04983\n\t* glyph04984\n\t* glyph04985\n\t* glyph04986\n\t* glyph04987\n\t* glyph04988\n\t* glyph04989\n\t* glyph04990\n\t* glyph04991\n\t* glyph04992\n\t* glyph04993\n\t* glyph04994\n\t* glyph04997\n\t* glyph05000\n\t* glyph05001\n\t* glyph05002\n\t* glyph05003\n\t* glyph05007\n\t* glyph05008\n\t* glyph05009\n\t* glyph05010\n\t* glyph05013\n\t* glyph05014\n\t* glyph05015\n\t* glyph05016\n\t* glyph05017\n\t* glyph05020\n\t* glyph05021\n\t* glyph05022\n\t* glyph05026\n\t* glyph05027\n\t* glyph05028\n\t* glyph05031\n\t* glyph05033\n\t* glyph05034\n\t* glyph05037\n\t* glyph05038\n\t* glyph05039\n\t* glyph05040\n\t* glyph05041\n\t* glyph05042\n\t* glyph05043\n\t* glyph05044\n\t* glyph05045\n\t* glyph05048\n\t* glyph05049\n\t* glyph05050\n\t* glyph05053\n\t* glyph05054\n\t* glyph05055\n\t* glyph05056\n\t* glyph05059\n\t* glyph05061\n\t* glyph05062\n\t* glyph05063\n\t* glyph05064\n\t* glyph05065\n\t* glyph05067\n\t* glyph05069\n\t* glyph05070\n\t* glyph05071\n\t* glyph05072\n\t* glyph05073\n\t* glyph05075\n\t* glyph05076\n\t* glyph05077\n\t* glyph05078\n\t* glyph05081\n\t* glyph05083\n\t* glyph05084\n\t* glyph05086\n\t* glyph05087\n\t* glyph05088\n\t* glyph05089\n\t* glyph05090\n\t* glyph05091\n\t* glyph05095\n\t* glyph05096\n\t* glyph05098\n\t* glyph05101\n\t* glyph05102\n\t* glyph05103\n\t* glyph05104\n\t* glyph05105\n\t* glyph05108\n\t* glyph05109\n\t* glyph05110\n\t* glyph05114\n\t* glyph05115\n\t* glyph05116\n\t* glyph05118\n\t* glyph05119\n\t* glyph05121\n\t* glyph05122\n\t* glyph05125\n\t* glyph05126\n\t* glyph05127\n\t* glyph05128\n\t* glyph05129\n\t* glyph05130\n\t* glyph05131\n\t* glyph05133\n\t* glyph05136\n\t* glyph05137\n\t* glyph05138\n\t* glyph05140\n\t* glyph05141\n\t* glyph05143\n\t* glyph05144\n\t* glyph05147\n\t* glyph05148\n\t* glyph05149\n\t* glyph05150\n\t* glyph05151\n\t* glyph05154\n\t* glyph05155\n\t* glyph05156\n\t* glyph05158\n\t* glyph05159\n\t* glyph05160\n\t* glyph05162\n\t* glyph05163\n\t* glyph05165\n\t* glyph05166\n\t* glyph05167\n\t* glyph05168\n\t* glyph05170\n\t* glyph05171\n\t* glyph05172\n\t* glyph05173\n\t* glyph05176\n\t* glyph05177\n\t* glyph05178\n\t* glyph05179\n\t* glyph05180\n\t* glyph05182\n\t* glyph05183\n\t* glyph05184\n\t* glyph05186\n\t* glyph05187\n\t* glyph05188\n\t* glyph05189\n\t* glyph05190\n\t* glyph05191\n\t* glyph05192\n\t* glyph05193\n\t* glyph05196\n\t* glyph05197\n\t* glyph05198\n\t* glyph05200\n\t* glyph05201\n\t* glyph05203\n\t* glyph05205\n\t* glyph05206\n\t* glyph05207\n\t* glyph05208\n\t* glyph05211\n\t* glyph05212\n\t* glyph05213\n\t* glyph05214\n\t* glyph05215\n\t* glyph05216\n\t* glyph05217\n\t* glyph05218\n\t* glyph05219\n\t* glyph05220\n\t* glyph05221\n\t* glyph05222\n\t* glyph05223\n\t* glyph05224\n\t* glyph05226\n\t* glyph05227\n\t* glyph05228\n\t* glyph05230\n\t* glyph05231\n\t* glyph05232\n\t* glyph05233\n\t* glyph05234\n\t* glyph05235\n\t* glyph05236\n\t* glyph05237\n\t* glyph05238\n\t* glyph05239\n\t* glyph05242\n\t* glyph05243\n\t* glyph05244\n\t* glyph05245\n\t* glyph05246\n\t* glyph05247\n\t* glyph05248\n\t* glyph05249\n\t* glyph05250\n\t* glyph05251\n\t* glyph05253\n\t* glyph05254\n\t* glyph05255\n\t* glyph05256\n\t* glyph05258\n\t* glyph05259\n\t* glyph05260\n\t* glyph05261\n\t* glyph05262\n\t* glyph05263\n\t* glyph05265\n\t* glyph05268\n\t* glyph05269\n\t* glyph05270\n\t* glyph05273\n\t* glyph05274\n\t* glyph05275\n\t* glyph05276\n\t* glyph05279\n\t* glyph05281\n\t* glyph05282\n\t* glyph05283\n\t* glyph05286\n\t* glyph05287\n\t* glyph05290\n\t* glyph05291\n\t* glyph05292\n\t* glyph05295\n\t* glyph05296\n\t* glyph05297\n\t* glyph05298\n\t* glyph05301\n\t* glyph05303\n\t* glyph05306\n\t* glyph05307\n\t* glyph05308\n\t* glyph05310\n\t* glyph05311\n\t* glyph05314\n\t* glyph05315\n\t* glyph05316\n\t* glyph05318\n\t* glyph05320\n\t* glyph05321\n\t* glyph05322\n\t* glyph05323\n\t* glyph05324\n\t* glyph05325\n\t* glyph05327\n\t* glyph05330\n\t* glyph05331\n\t* glyph05334\n\t* glyph05335\n\t* glyph05336\n\t* glyph05339\n\t* glyph05340\n\t* glyph05341\n\t* glyph05342\n\t* glyph05345\n\t* glyph05347\n\t* glyph05348\n\t* glyph05349\n\t* glyph05352\n\t* glyph05353\n\t* glyph05354\n\t* glyph05355\n\t* glyph05356\n\t* glyph05357\n\t* glyph05358\n\t* glyph05360\n\t* glyph05361\n\t* glyph05362\n\t* glyph05363\n\t* glyph05364\n\t* glyph05366\n\t* glyph05367\n\t* glyph05368\n\t* glyph05370\n\t* glyph05371\n\t* glyph05372\n\t* glyph05373\n\t* glyph05375\n\t* glyph05376\n\t* glyph05378\n\t* glyph05379\n\t* glyph05380\n\t* glyph05381\n\t* glyph05382\n\t* glyph05383\n\t* glyph05384\n\t* glyph05385\n\t* glyph05386\n\t* glyph05387\n\t* glyph05388\n\t* glyph05389\n\t* glyph05390\n\t* glyph05391\n\t* glyph05392\n\t* glyph05393\n\t* glyph05394\n\t* glyph05395\n\t* glyph05397\n\t* glyph05398\n\t* glyph05399\n\t* glyph05400\n\t* glyph05401\n\t* glyph05402\n\t* glyph05403\n\t* glyph05404\n\t* glyph05405\n\t* glyph05406\n\t* glyph05407\n\t* glyph05409\n\t* glyph05410\n\t* glyph05412\n\t* glyph05414\n\t* glyph05415\n\t* glyph05416\n\t* glyph05417\n\t* glyph05418\n\t* glyph05419\n\t* glyph05420\n\t* glyph05421\n\t* glyph05422\n\t* glyph05423\n\t* glyph05424\n\t* glyph05425\n\t* glyph05426\n\t* glyph05427\n\t* glyph05428\n\t* glyph05429\n\t* glyph05430\n\t* glyph05431\n\t* glyph05432\n\t* glyph05433\n\t* glyph05434\n\t* glyph05435\n\t* glyph05436\n\t* glyph05437\n\t* glyph05438\n\t* glyph05439\n\t* glyph05440\n\t* glyph05441\n\t* glyph05442\n\t* glyph05443\n\t* glyph05444\n\t* glyph05445\n\t* glyph05446\n\t* glyph05447\n\t* glyph05448\n\t* glyph05449\n\t* glyph05450\n\t* glyph05451\n\t* glyph05452\n\t* glyph05453\n\t* glyph05454\n\t* glyph05455\n\t* glyph05456\n\t* glyph05457\n\t* glyph05458\n\t* glyph05459\n\t* glyph05460\n\t* glyph05461\n\t* glyph05462\n\t* glyph05463\n\t* glyph05464\n\t* glyph05465\n\t* glyph05467\n\t* glyph05468\n\t* glyph05469\n\t* glyph05470\n\t* glyph05471\n\t* glyph05472\n\t* glyph05473\n\t* glyph05474\n\t* glyph05475\n\t* glyph05476\n\t* glyph05477\n\t* glyph05478\n\t* glyph05479\n\t* glyph05480\n\t* glyph05481\n\t* glyph05482\n\t* glyph05483\n\t* glyph05484\n\t* glyph05485\n\t* glyph05486\n\t* glyph05487\n\t* glyph05488\n\t* glyph05489\n\t* glyph05490\n\t* glyph05491\n\t* glyph05492\n\t* glyph05493\n\t* glyph05494\n\t* glyph05495\n\t* glyph05496\n\t* glyph05497\n\t* glyph05498\n\t* glyph05499\n\t* glyph05500\n\t* glyph05501\n\t* glyph05502\n\t* glyph05503\n\t* glyph05504\n\t* glyph05505\n\t* glyph05506\n\t* glyph05507\n\t* glyph05508\n\t* glyph05509\n\t* glyph05510\n\t* glyph05511\n\t* glyph05512\n\t* glyph05513\n\t* glyph05514\n\t* glyph05515\n\t* glyph05516\n\t* glyph05518\n\t* glyph05519\n\t* glyph05520\n\t* glyph05521\n\t* glyph05522\n\t* glyph05523\n\t* glyph05524\n\t* glyph05525\n\t* glyph05526\n\t* glyph05529\n\t* glyph05530\n\t* glyph05531\n\t* glyph05533\n\t* glyph05534\n\t* glyph05535\n\t* glyph05536\n\t* glyph05537\n\t* glyph05538\n\t* glyph05539\n\t* glyph05540\n\t* glyph05541\n\t* glyph05542\n\t* glyph05543\n\t* glyph05544\n\t* glyph05545\n\t* glyph05546\n\t* glyph05547\n\t* glyph05548\n\t* glyph05549\n\t* glyph05550\n\t* glyph05552\n\t* glyph05553\n\t* glyph05554\n\t* glyph05555\n\t* glyph05556\n\t* glyph05557\n\t* glyph05558\n\t* glyph05561\n\t* glyph05562\n\t* glyph05563\n\t* glyph05564\n\t* glyph05565\n\t* glyph05566\n\t* glyph05567\n\t* glyph05568\n\t* glyph05569\n\t* glyph05570\n\t* glyph05571\n\t* glyph05572\n\t* glyph05573\n\t* glyph05574\n\t* glyph05575\n\t* glyph05576\n\t* glyph05577\n\t* glyph05578\n\t* glyph05579\n\t* glyph05580\n\t* glyph05581\n\t* glyph05582\n\t* glyph05583\n\t* glyph05584\n\t* glyph05585\n\t* glyph05586\n\t* glyph05587\n\t* glyph05588\n\t* glyph05589\n\t* glyph05590\n\t* glyph05591\n\t* glyph05593\n\t* glyph05594\n\t* glyph05595\n\t* glyph05596\n\t* glyph05597\n\t* glyph05598\n\t* glyph05599\n\t* glyph05600\n\t* glyph05601\n\t* glyph05604\n\t* glyph05605\n\t* glyph05606\n\t* glyph05607\n\t* glyph05608\n\t* glyph05609\n\t* glyph05610\n\t* glyph05611\n\t* glyph05612\n\t* glyph05613\n\t* glyph05614\n\t* glyph05615\n\t* glyph05616\n\t* glyph05617\n\t* glyph05618\n\t* glyph05619\n\t* glyph05620\n\t* glyph05621\n\t* glyph05622\n\t* glyph05623\n\t* glyph05624\n\t* glyph05625\n\t* glyph05626\n\t* glyph05627\n\t* glyph05628\n\t* glyph05629\n\t* glyph05630\n\t* glyph05631\n\t* glyph05633\n\t* glyph05634\n\t* glyph05635\n\t* glyph05636\n\t* glyph05637\n\t* glyph05638\n\t* glyph05639\n\t* glyph05640\n\t* glyph05641\n\t* glyph05642\n\t* glyph05643\n\t* glyph05644\n\t* glyph05645\n\t* glyph05646\n\t* glyph05647\n\t* glyph05648\n\t* glyph05649\n\t* glyph05650\n\t* glyph05651\n\t* glyph05653\n\t* glyph05654\n\t* glyph05655\n\t* glyph05656\n\t* glyph05657\n\t* glyph05658\n\t* glyph05659\n\t* glyph05660\n\t* glyph05661\n\t* glyph05662\n\t* glyph05663\n\t* glyph05664\n\t* glyph05665\n\t* glyph05666\n\t* glyph05667\n\t* glyph05668\n\t* glyph05669\n\t* glyph05670\n\t* glyph05671\n\t* glyph05672\n\t* glyph05673\n\t* glyph05674\n\t* glyph05675\n\t* glyph05677\n\t* glyph05678\n\t* glyph05680\n\t* glyph05681\n\t* glyph05682\n\t* glyph05683\n\t* glyph05684\n\t* glyph05687\n\t* glyph05688\n\t* glyph05689\n\t* glyph05690\n\t* glyph05691\n\t* glyph05692\n\t* glyph05693\n\t* glyph05694\n\t* glyph05695\n\t* glyph05696\n\t* glyph05699\n\t* glyph05700\n\t* glyph05701\n\t* glyph05702\n\t* glyph05704\n\t* glyph05705\n\t* glyph05706\n\t* glyph05707\n\t* glyph05708\n\t* glyph05709\n\t* glyph05710\n\t* glyph05711\n\t* glyph05712\n\t* glyph05713\n\t* glyph05714\n\t* glyph05715\n\t* glyph05716\n\t* glyph05717\n\t* glyph05719\n\t* glyph05720\n\t* glyph05721\n\t* glyph05722\n\t* glyph05723\n\t* glyph05724\n\t* glyph05725\n\t* glyph05727\n\t* glyph05728\n\t* glyph05729\n\t* glyph05730\n\t* glyph05731\n\t* glyph05733\n\t* glyph05734\n\t* glyph05736\n\t* glyph05737\n\t* glyph05738\n\t* glyph05739\n\t* glyph05740\n\t* glyph05741\n\t* glyph05742\n\t* glyph05744\n\t* glyph05746\n\t* glyph05748\n\t* glyph05750\n\t* glyph05751\n\t* glyph05752\n\t* glyph05754\n\t* glyph05755\n\t* glyph05758\n\t* glyph05762\n\t* glyph05763\n\t* glyph05764\n\t* glyph05765\n\t* glyph05766\n\t* glyph05767\n\t* glyph05768\n\t* glyph05769\n\t* glyph05770\n\t* glyph05771\n\t* glyph05772\n\t* glyph05773\n\t* glyph05774\n\t* glyph05777\n\t* glyph05778\n\t* glyph05779\n\t* glyph05781\n\t* glyph05782\n\t* glyph05783\n\t* glyph05784\n\t* glyph05785\n\t* glyph05786\n\t* glyph05787\n\t* glyph05788\n\t* glyph05789\n\t* glyph05790\n\t* glyph05791\n\t* glyph05792\n\t* glyph05793\n\t* glyph05794\n\t* glyph05795\n\t* glyph05796\n\t* glyph05797\n\t* glyph05798\n\t* glyph05799\n\t* glyph05800\n\t* glyph05801\n\t* glyph05802\n\t* glyph05803\n\t* glyph05804\n\t* glyph05805\n\t* glyph05806\n\t* glyph05807\n\t* glyph05808\n\t* glyph05809\n\t* glyph05810\n\t* glyph05811\n\t* glyph05812\n\t* glyph05814\n\t* glyph05815\n\t* glyph05816\n\t* glyph05817\n\t* glyph05822\n\t* glyph05823\n\t* glyph05824\n\t* glyph05825\n\t* glyph05826\n\t* glyph05827\n\t* glyph05828\n\t* glyph05829\n\t* glyph05831\n\t* glyph05832\n\t* glyph05833\n\t* glyph05834\n\t* glyph05835\n\t* glyph05836\n\t* glyph05837\n\t* glyph05839\n\t* glyph05840\n\t* glyph05841\n\t* glyph05843\n\t* glyph05845\n\t* glyph05847\n\t* glyph05848\n\t* glyph05851\n\t* glyph05852\n\t* glyph05853\n\t* glyph05855\n\t* glyph05856\n\t* glyph05857\n\t* glyph05858\n\t* glyph05859\n\t* glyph05860\n\t* glyph05861\n\t* glyph05862\n\t* glyph05863\n\t* glyph05864\n\t* glyph05865\n\t* glyph05866\n\t* glyph05867\n\t* glyph05868\n\t* glyph05869\n\t* glyph05870\n\t* glyph05871\n\t* glyph05872\n\t* glyph05873\n\t* glyph05874\n\t* glyph05875\n\t* glyph05876\n\t* glyph05877\n\t* glyph05878\n\t* glyph05879\n\t* glyph05880\n\t* glyph05881\n\t* glyph05882\n\t* glyph05883\n\t* glyph05884\n\t* glyph05885\n\t* glyph05887\n\t* glyph05888\n\t* glyph05889\n\t* glyph05891\n\t* glyph05892\n\t* glyph05893\n\t* glyph05894\n\t* glyph05896\n\t* glyph05897\n\t* glyph05898\n\t* glyph05899\n\t* glyph05900\n\t* glyph05901\n\t* glyph05902\n\t* glyph05903\n\t* glyph05904\n\t* glyph05905\n\t* glyph05906\n\t* glyph05908\n\t* glyph05910\n\t* glyph05911\n\t* glyph05912\n\t* glyph05913\n\t* glyph05915\n\t* glyph05918\n\t* glyph05919\n\t* glyph05921\n\t* glyph05922\n\t* glyph05923\n\t* glyph05924\n\t* glyph05925\n\t* glyph05926\n\t* glyph05927\n\t* glyph05928\n\t* glyph05929\n\t* glyph05930\n\t* glyph05931\n\t* glyph05933\n\t* glyph05934\n\t* glyph05935\n\t* glyph05936\n\t* glyph05937\n\t* glyph05940\n\t* glyph05941\n\t* glyph05942\n\t* glyph05943\n\t* glyph05944\n\t* glyph05945\n\t* glyph05947\n\t* glyph05948\n\t* glyph05949\n\t* glyph05950\n\t* glyph05951\n\t* glyph05952\n\t* glyph05953\n\t* glyph05954\n\t* glyph05956\n\t* glyph05957\n\t* glyph05958\n\t* glyph05959\n\t* glyph05960\n\t* glyph05961\n\t* glyph05962\n\t* glyph05963\n\t* glyph05964\n\t* glyph05965\n\t* glyph05966\n\t* glyph05967\n\t* glyph05968\n\t* glyph05969\n\t* glyph05970\n\t* glyph05971\n\t* glyph05972\n\t* glyph05973\n\t* glyph05974\n\t* glyph05975\n\t* glyph05976\n\t* glyph05977\n\t* glyph05978\n\t* glyph05979\n\t* glyph05980\n\t* glyph05981\n\t* glyph05982\n\t* glyph05984\n\t* glyph05985\n\t* glyph05986\n\t* glyph05987\n\t* glyph05988\n\t* glyph05989\n\t* glyph05990\n\t* glyph05991\n\t* glyph05992\n\t* glyph05993\n\t* glyph05994\n\t* glyph05995\n\t* glyph05996\n\t* glyph05997\n\t* glyph05998\n\t* glyph05999\n\t* glyph06000\n\t* glyph06001\n\t* glyph06003\n\t* glyph06004\n\t* glyph06006\n\t* glyph06008\n\t* glyph06009\n\t* glyph06011\n\t* glyph06012\n\t* glyph06013\n\t* glyph06014\n\t* glyph06015\n\t* glyph06016\n\t* glyph06017\n\t* glyph06018\n\t* glyph06019\n\t* glyph06021\n\t* glyph06023\n\t* glyph06024\n\t* glyph06025\n\t* glyph06026\n\t* glyph06028\n\t* glyph06029\n\t* glyph06031\n\t* glyph06034\n\t* glyph06035\n\t* glyph06036\n\t* glyph06038\n\t* glyph06039\n\t* glyph06042\n\t* glyph06044\n\t* glyph06045\n\t* glyph06046\n\t* glyph06047\n\t* glyph06048\n\t* glyph06049\n\t* glyph06050\n\t* glyph06051\n\t* glyph06052\n\t* glyph06053\n\t* glyph06054\n\t* glyph06055\n\t* glyph06056\n\t* glyph06057\n\t* glyph06058\n\t* glyph06059\n\t* glyph06060\n\t* glyph06061\n\t* glyph06062\n\t* glyph06063\n\t* glyph06064\n\t* glyph06065\n\t* glyph06066\n\t* glyph06067\n\t* glyph06068\n\t* glyph06069\n\t* glyph06070\n\t* glyph06071\n\t* glyph06072\n\t* glyph06073\n\t* glyph06074\n\t* glyph06075\n\t* glyph06076\n\t* glyph06077\n\t* glyph06078\n\t* glyph06079\n\t* glyph06080\n\t* glyph06081\n\t* glyph06082\n\t* glyph06083\n\t* glyph06084\n\t* glyph06085\n\t* glyph06086\n\t* glyph06087\n\t* glyph06088\n\t* glyph06089\n\t* glyph06090\n\t* glyph06091\n\t* glyph06092\n\t* glyph06093\n\t* glyph06094\n\t* glyph06095\n\t* glyph06096\n\t* glyph06097\n\t* glyph06098\n\t* glyph06099\n\t* glyph06100\n\t* glyph06101\n\t* glyph06102\n\t* glyph06103\n\t* glyph06104\n\t* glyph06105\n\t* glyph06106\n\t* glyph06107\n\t* glyph06108\n\t* glyph06109\n\t* glyph06110\n\t* glyph06111\n\t* glyph06112\n\t* glyph06113\n\t* glyph06114\n\t* glyph06115\n\t* glyph06116\n\t* glyph06599\n\t* glyph06619\n\t* glyph06620 and glyph06621",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "result": "WARN"
                },
                {
                    "description": "Checking direction of slnt axis angles",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/slant_direction>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The 'slnt' axis values are defined as negative values for a clockwise (right)\n        lean, and positive values for counter-clockwise lean. This is counter-intuitive\n        for many designers who are used to think of a positive slant as a lean to\n        the right.\n\n        This check ensures that the slant axis direction is consistent with the specs.\n\n        https://docs.microsoft.com/en-us/typography/opentype/spec/dvaraxistag_slnt\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check font names are correct",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/font_names>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font names are good:\n\n| nameID | current | expected |\n| :--- | :--- | :--- |\n| Family Name | Amiri | Amiri |\n| Subfamily Name | Regular | Regular |\n| Full Name | Amiri Regular | Amiri Regular |\n| Poscript Name | Amiri-Regular | Amiri-Regular |",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Google Fonts has several rules which need to be adhered to when\n        setting a font's name table. Please read:\n        https://googlefonts.github.io/gf-guide/statics.html#supported-styles\n        https://googlefonts.github.io/gf-guide/statics.html#style-linking\n        https://googlefonts.github.io/gf-guide/statics.html#unsupported-styles\n        https://googlefonts.github.io/gf-guide/statics.html#single-weight-families\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Copyright field for this font on METADATA.pb matches all copyright notice entries on the name table ?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/nameid/copyright>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Copyright field for this font on METADATA.pb matches copyright notice entries on the name table.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Font has all mandatory 'name' table entries?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/mandatory_entries>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font contains values for all mandatory name table entries.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Length of copyright notice must not exceed 500 characters.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/copyright_length>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "All copyright notice name entries on the 'name' table are shorter than 500 characters.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This is an arbitrary max length for the copyright notice field of the name\n        table. We simply don't want such notices to be too long. Typically such notices\n        are actually much shorter than this with a length of roughly 70 or 80\n        characters.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check for font-v versioning.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/fontv>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Version string is: \"Version 1.000\"\nThe version string must ideally include a git commit hash and either a \"dev\" or a \"release\" suffix such as in the example below:\n\"Version 1.3; git-0d08353-release\" [code: bad-format]",
                            "status": "INFO",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The git sha1 tagging and dev/release features of Source Foundry `font-v` tool\n        are awesome and we would love to consider upstreaming the approach into\n        fontmake someday. For now we only emit an INFO if a given font does not yet\n        follow the experimental versioning style, but at some point we may start\n        enforcing it.\n    ",
                    "result": "INFO"
                },
                {
                    "description": "Check glyphs do not have components which are themselves components.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/glyf_nested_components>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Glyphs do not contain nested components.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        There have been bugs rendering variable fonts with nested components.\n        Additionally, some static fonts with nested components have been reported\n        to have rendering and printing issues.\n\n        For more info, see:\n        * https://github.com/fonttools/fontbakery/issues/2961\n        * https://github.com/arrowtype/recursive/issues/412\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check a static ttf can be generated from a variable font.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/generate_static>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Google Fonts may serve static fonts which have been generated from variable\n        fonts. This test will attempt to generate a static ttf using fontTool's\n        varLib mutator.\n\n        The target font will be the mean of each axis e.g:\n\n        ## VF font axes\n\n        - min weight, max weight = 400, 800\n\n        - min width, max width = 50, 100\n\n        ## Target Instance\n\n        - weight = 600\n\n        - width = 75\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check that variable fonts have an HVAR table.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/has_HVAR>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Not having a HVAR table can lead to costly text-layout operations on some\n        platforms, which we want to avoid.\n\n        So, all variable fonts on the Google Fonts collection should have an HVAR\n        with valid values.\n\n        More info on the HVAR table can be found at:\n        https://docs.microsoft.com/en-us/typography/opentype/spec/otvaroverview#variation-data-tables-and-miscellaneous-requirements\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Font enables smart dropout control in \"prep\" table instructions?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/smart_dropout>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "'prep' table contains instructions enabling smart dropout control.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This setup is meant to ensure consistent rendering quality for fonts across\n        all devices (with different rendering/hinting capabilities).\n\n        Below is the snippet of instructions we expect to see in the fonts:\n        B8 01 FF    PUSHW 0x01FF\n        85          SCANCTRL (unconditinally turn on\n                              dropout control mode)\n        B0 04       PUSHB 0x04\n        8D          SCANTYPE (enable smart dropout control)\n\n        \"Smart dropout control\" means activating rules 1, 2 and 5:\n        Rule 1: If a pixel's center falls within the glyph outline,\n                that pixel is turned on.\n        Rule 2: If a contour falls exactly on a pixel's center,\n                that pixel is turned on.\n        Rule 5: If a scan line between two adjacent pixel centers\n                (either vertical or horizontal) is intersected\n                by both an on-Transition contour and an off-Transition\n                contour and neither of the pixels was already turned on\n                by rules 1 and 2, turn on the pixel which is closer to\n                the midpoint between the on-Transition contour and\n                off-Transition contour. This is \"Smart\" dropout control.\n\n        For more detailed info (such as other rules not enabled in this snippet),\n        please refer to the TrueType Instruction Set documentation.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "There must not be VTT Talk sources in the font.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/vttclean>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "There are no tables with VTT Talk sources embedded in the font.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The goal here is to reduce filesizes and improve pageloading when dealing\n        with webfonts.\n\n        The VTT Talk sources are not necessary at runtime and endup being just dead\n        weight when left embedded in the font binaries. The sources should be kept on\n        the project files but stripped out when building release binaries.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Are there unwanted Apple tables?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/aat>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "There are no unwanted AAT tables.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Apple's TrueType reference manual [1] describes SFNT tables not in the\n        Microsoft OpenType specification [2] and these can sometimes sneak into final\n        release files, but Google Fonts should only have OpenType tables.\n\n        [1] https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6.html\n        [2] https://docs.microsoft.com/en-us/typography/opentype/spec/\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check a font's STAT table contains compulsory Axis Values.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/STAT>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check a font's STAT table contains compulsory Axis Values which exist\n        in the Google Fonts Axis Registry.\n\n        We cannot determine what Axis Values the user will set for axes such as\n        opsz, GRAD since these axes are unique for each font so we'll skip them.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check variable font instances",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/fvar_instances>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check a font's fvar instance coordinates comply with our guidelines:\n        https://googlefonts.github.io/gf-guide/variable.html#fvar-instances\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "All name entries referenced by fvar instances exist on the name table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/fvar_name_entries>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The purpose of this check is to make sure that all name entries referenced\n        by variable font instances do exist in the name table.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "PPEM must be an integer on hinted fonts.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/integer_ppem_if_hinted>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_hinted",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Hinted fonts must have head table flag bit 3 set.\n\n        Per https://docs.microsoft.com/en-us/typography/opentype/spec/head,\n        bit 3 of Head::flags decides whether PPEM should be rounded. This bit should\n        always be set for hinted fonts.\n\n        Note:\n        Bit 3 = Force ppem to integer values for all internal scaler math;\n                May use fractional ppem sizes if this bit is clear;\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Are there caret positions declared for every ligature?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/ligature_carets>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Looks good!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        All ligatures in a font must have corresponding caret (text cursor) positions\n        defined in the GDEF table, otherwhise, users may experience issues with\n        caret rendering.\n\n        If using GlyphsApp or UFOs, ligature carets can be defined as anchors with\n        names starting with 'caret_'. These can be compiled with fontmake as of\n        version v2.4.0.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Is there kerning info for non-ligated sequences?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/kerning_for_non_ligated_sequences>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "GPOS table lacks kerning info for the following non-ligated sequences:\n\n\t- f + f\n\n\t- f + b\n\n\t- b + f\n\n\t- f + h\n\n\t- h + f\n\n\t- f + i\n\n\t- i + f\n\n\t- f + j\n\n\t- j + f\n\n\t- f + k\n\n\t- k + f\n\n\t- f + l\n\n\t- l + b\n\n\t- h + i\n\n\t- i + j\n\n\t- j + k\n\n\t- k + l [code: lacks-kern-info]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Fonts with ligatures should have kerning on the corresponding non-ligated\n        sequences for text where ligatures aren't used\n        (eg https://github.com/impallari/Raleway/issues/14).\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Combined length of family and style must not exceed 27 characters.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/family_and_style_max_length>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "All name entries are good.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to a GlyphsApp tutorial [1], in order to make sure all versions of\n        Windows recognize it as a valid font file, we must make sure that the\n        concatenated length of the familyname (NameID.FONT_FAMILY_NAME) and\n        style (NameID.FONT_SUBFAMILY_NAME) strings in the name table do not\n        exceed 20 characters.\n\n        After discussing the problem in more detail at FontBakery issue #2179 [2] we\n        decided that allowing up to 27 chars would still be on the safe side, though.\n\n        [1] https://glyphsapp.com/tutorials/multiple-masters-part-3-setting-up-instances\n        [2] https://github.com/fonttools/fontbakery/issues/2179\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Name table entries should not contain line-breaks.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/line_breaks>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Name table entries are all single-line (no line-breaks found).",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        There are some entries on the name table that may include more than one line\n        of text. The Google Fonts team, though, prefers to keep the name table entries\n        short and simple without line breaks.\n\n        For instance, some designers like to include the full text of a font license in\n        the \"copyright notice\" entry, but for the GFonts collection this entry should\n        only mention year, author and other basic info in a manner enforced by\n        com.google.fonts/check/font_copyright\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Name table strings must not contain the string 'Reserved Font Name'.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/rfn>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "None of the name table strings contain \"Reserved Font Name\".",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Some designers adopt the \"Reserved Font Name\" clause of the OFL license. This\n        means that the original author reserves the rights to the family name and other\n        people can only distribute modified versions using a different family name.\n\n        Google Fonts published updates to the fonts in the collection in order to fix\n        issues and/or implement further improvements to the fonts. It is important to\n        keep the family name so that users of the webfonts can benefit from the updates.\n        Since it would forbid such usage scenario, all families in the GFonts collection\n        are required to not adopt the RFN clause.\n\n        This check ensures \"Reserved Font Name\" is not mentioned in the name table.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check family name for GF Guide compliance.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/name/family_name_compliance>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font name looks good.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Checks the family name for compliance with the Google Fonts Guide.\n        https://googlefonts.github.io/gf-guide/onboarding.html#new-fonts\n\n        If you want to have your family name added to the CamelCase\n        exceptions list, please submit a pull request to the\n        camelcased_familyname_exceptions.txt file.\n\n        Similarly, abbreviations can be submitted to the\n        abbreviations_familyname_exceptions.txt file.\n\n        These are located in the Lib/fontbakery/data/googlefonts/ directory\n        of the FontBakery source code currently hosted at\n        https://github.com/fonttools/fontbakery/\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Directory name in GFonts repo structure must match NameID 1 of the regular.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/repo/dirname_matches_nameid_1>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "A static fonts directory with at least two fonts must accompany variable fonts",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/repo/vf_has_static_fonts>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Please consider adding a subdirectory called \"static/\" and including in it static font files. [code: missing]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Variable font family directories kept in the google/fonts git repo may include\n        a static/ subdir containing static fonts.\n\n        These files are meant to be served for users that still lack support for\n        variable fonts in their web browsers.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "A font repository should not include FontBakery report files",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/repo/fb_report>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        A FontBakery report is ephemeral and so should be used for posting issues on a\n        bug-tracker instead of being hosted in the font project repository.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check upstream.yaml file contains all required fields",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/repo/upstream_yaml_has_required_fields>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: upstream_yaml",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        If a family has been pushed using the gftools packager, we must check that all\n        the required fields in the upstream.yaml file have been populated.\n    ",
                    "result": "SKIP",
                    "severity": 10
                },
                {
                    "description": "A font repository should not include ZIP files",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/repo/zip_files>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Sometimes people check in ZIPs into their font project repositories. While we\n        accept the practice of checking in binaries, we believe that a ZIP is a step\n        too far ;)\n\n        Note: a source purist position is that only source files and build scripts\n        should be checked in.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check font follows the Google Fonts vertical metric schema",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/vertical_metrics>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: not remote_styles",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This check generally enforces Google Fonts\u2019 vertical metrics specifications.\n        In particular:\n        * lineGap must be 0\n        * Sum of hhea ascender + abs(descender) + linegap must be\n          between 120% and 200% of UPM\n        * Warning if sum is over 150% of UPM\n\n        The threshold levels 150% (WARN) and 200% (FAIL) are somewhat arbitrarily chosen\n        and may hint at a glaring mistake in the metrics calculations or UPM settings.\n\n        Our documentation includes further information:\n        https://github.com/googlefonts/gf-docs/tree/main/VerticalMetrics\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check if the vertical metrics of a family are similar to the same family hosted on Google Fonts.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/vertical_metrics_regressions>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Vertical metrics have not regressed.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        If the family already exists on Google Fonts, we need to ensure that the\n        checked family's vertical metrics are similar. This check will test the\n        following schema which was outlined in Font Bakery issue #1162 [1]:\n\n        - The family should visually have the same vertical metrics as the Regular\n          style hosted on Google Fonts.\n\n        - If the family on Google Fonts has differing hhea and typo metrics, the family\n          being checked should use the typo metrics for both the hhea and typo entries.\n\n        - If the family on Google Fonts has use typo metrics not enabled and the family\n          being checked has it enabled, the hhea and typo metrics should use the family\n          on Google Fonts winAscent and winDescent values.\n\n        - If the upms differ, the values must be scaled so the visual appearance is\n          the same.\n\n        [1] https://github.com/fonttools/fontbakery/issues/1162\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check font follows the Google Fonts CJK vertical metric schema",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/cjk_vertical_metrics>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_cjk_font, not remote_styles",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        CJK fonts have different vertical metrics when compared to Latin fonts.\n        We follow the schema developed by dr Ken Lunde for Source Han Sans and\n        the Noto CJK fonts.\n\n        Our documentation includes further information:\n        https://github.com/googlefonts/gf-docs/tree/main/Spec#cjk-vertical-metrics\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check if the vertical metrics of a CJK family are similar to the same family hosted on Google Fonts.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/cjk_vertical_metrics_regressions>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_cjk_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check CJK family has the same vertical metrics as the same family\n        hosted on Google Fonts.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Does the font contain less than 150 CJK characters?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/cjk_not_enough_glyphs>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_claiming_to_be_cjk_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Kana has 150 characters and it's the smallest CJK writing system.\n\n        If a font contains less CJK glyphs than this writing system, we inform the\n        user that some glyphs may be encoded incorrectly.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check variable font instances don't have duplicate names",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont_duplicate_instance_names>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This check's purpose is to detect duplicate named instances names in a\n        given variable font.\n        Repeating instance names may be the result of instances for several VF axes\n        defined in `fvar`, but since currently only weight+italic tokens are allowed\n        in instance names as per GF specs, they ended up repeating.\n        Instead, only a base set of fonts for the most default representation of the\n        family can be defined through instances in the `fvar` table, all other\n        instances will have to be left to access through the `STAT` table.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Ensure VFs do not contain the ital axis.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/unsupported_axes>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The 'ital' axis is not supported yet in Google Chrome.\n\n        For the time being, we need to ensure that VFs do not contain this axis.\n        Once browser support is better, we can deprecate this check.\n\n        For more info regarding browser support, see:\n        https://arrowtype.github.io/vf-slnt-test/\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Ensure VFs with duplexed axes do not vary horizontal advance.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/duplexed_axis_reflow>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Certain axes, such as grade (GRAD) or roundness (ROND), should not\n        change any advanceWidth or kerning data across the font's design space.\n        This is because altering the advance width of glyphs can cause text reflow.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validate METADATA.pb axes values are within gf_axisregistry bounds.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/gf_axisregistry_bounds>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Each axis range in a METADATA.pb file must be registered, and within the bounds\n        of the axis definition in the Google Fonts Axis Registry, available at\n        https://github.com/google/fonts/tree/main/axisregistry\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validate METADATA.pb axes tags are defined in gf_axisregistry.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/gf_axisregistry_valid_tags>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Ensure all axes in a METADATA.pb file are registered in the\n        Google Fonts Axis Registry, available at\n        https://github.com/google/fonts/tree/main/axisregistry\n\n        Why does Google Fonts have its own Axis Registry?\n\n        We support a superset of the OpenType axis registry axis set, and use\n        additional metadata for each axis. Axes present in a font file but not in this\n        registry will not function via our API. No variable font is expected to\n        support all of the axes here.\n\n        Any font foundry or distributor library that offers variable fonts has a\n        implicit, latent, de-facto axis registry, which can be extracted by scanning\n        the library for axes' tags, labels, and min/def/max values. While in 2016\n        Microsoft originally offered to include more axes in the OpenType 1.8\n        specification (github.com/microsoft/OpenTypeDesignVariationAxisTags), as of\n        August 2020, this effort has stalled. We hope more foundries and distributors\n        will publish documents like this that make their axes explicit, to encourage\n        of adoption of variable fonts throughout the industry, and provide source\n        material for a future update to the OpenType specification's axis registry.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validate defaults on fvar table match registered fallback names in GFAxisRegistry.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/gf_axisregistry/fvar_axis_defaults>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check that axis defaults have a corresponding fallback name registered at the\n        Google Fonts Axis Registry, available at\n        https://github.com/google/fonts/tree/main/axisregistry\n\n        This is necessary for the following reasons:\n\n        To get ZIP files downloads on Google Fonts to be accurate \u2014 otherwise the\n        chosen default font is not generated. The Newsreader family, for instance, has\n        a default value on the 'opsz' axis of 16pt. If 16pt was not a registered\n        fallback position, then the ZIP file would instead include another position\n        as default (such as 14pt).\n\n        For the Variable fonts to display the correct location on the specimen page.\n\n        For VF with no weight axis to be displayed at all. For instance, Ballet, which\n        has no weight axis, was not appearing in sandbox because default position on\n        'opsz' axis was 16pt, and it was not yet a registered fallback positon.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validate STAT particle names and values match the fallback names in GFAxisRegistry.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/STAT/gf_axisregistry>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check that particle names and values on STAT table match the fallback names\n        in each axis entry at the Google Fonts Axis Registry, available at\n        https://github.com/google/fonts/tree/main/axisregistry\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validate VF axes match the ones declared on METADATA.pb.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/consistent_axis_enumeration>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        All font variation axes present in the font files must be properly declared\n        on METADATA.pb so that they can be served by the GFonts API.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Ensure METADATA.pb does not use escaped strings.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/escaped_strings>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        In some cases we've seen designer names and other fields with escaped strings\n        in METADATA files. Nowadays the strings can be full unicode strings and\n        do not need escaping.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "METADATA.pb: Designers are listed correctly on the Google Fonts catalog?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/designer_profiles>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Google Fonts has a catalog of designers.\n\n        This check ensures that the online entries of the catalog can be found based\n        on the designer names listed on the METADATA.pb file.\n\n        It also validates the URLs and file formats are all correctly set.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Ensure variable fonts include an avar table.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/mandatory_avar_table>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Most variable fonts should include an avar table to correctly define\n        axes progression rates.\n\n        For example, a weight axis from 0% to 100% doesn't map directly to 100 to 1000,\n        because a 10% progression from 0% may be too much to define the 200,\n        while 90% may be too little to define the 900.\n\n        If the progression rates of axes is linear, this check can be ignored.\n        Fontmake will also skip adding an avar table if the progression rates\n        are linear. However, we still recommend designers visually proof each\n        instance is at the expected weight, width etc.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "On a family update, the DESCRIPTION.en_us.html file should ideally also be updated.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/description/family_update>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The DESCRIPTION.en_us.html file in this family has not changed in comparison to the latest font release on the google/fonts github repo.\nPlease consider mentioning note-worthy improvements made to the family recently. [code: description-not-updated]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        We want to ensure that any significant changes to the font family are\n        properly mentioned in the DESCRIPTION file.\n\n        In general, it means that the contents of the DESCRIPTION.en_us.html file\n        will typically change if when font files are updated. Please treat this check\n        as a reminder to do so whenever appropriate!\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Check small caps glyphs are available.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/missing_small_caps_glyphs>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Ensure small caps glyphs are available if\n        a font declares smcp or c2sc OT features.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Ensure Stylistic Sets have description.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/stylisticset_description>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Stylistic sets should provide description text. Programs such as InDesign,\n        TextEdit and Inkscape use that info to display to the users so that they know\n        what a given stylistic set offers.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "OS/2.fsSelection bit 7 (USE_TYPO_METRICS) is set in all fonts.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/os2/use_typo_metrics>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        All fonts on the Google Fonts collection should have OS/2.fsSelection bit 7\n        (USE_TYPO_METRICS) set. This requirement is part of the vertical metrics scheme\n        established as a Google Fonts policy aiming at a common ground supported by\n        all major font rendering environments.\n\n        For more details, read:\n        https://github.com/googlefonts/gf-docs/blob/main/VerticalMetrics/README.md\n\n        Below is the portion of that document that is most relevant to this check:\n\n        Use_Typo_Metrics must be enabled. This will force MS Applications to use the\n        OS/2 Typo values instead of the Win values. By doing this, we can freely set\n        the Win values to avoid clipping and control the line height with the typo\n        values. It has the added benefit of future line height compatibility. When\n        a new script is added, we simply change the Win values to the new yMin\n        and yMax, without needing to worry if the line height have changed.\n    ",
                    "result": "PASS",
                    "severity": 10
                },
                {
                    "description": "Ensure fonts have ScriptLangTags declared on the 'meta' table.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/meta/script_lang_tags>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "This font file does not have a 'meta' table. [code: lacks-meta-table]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The OpenType 'meta' table originated at Apple. Microsoft added it to OT with\n        just two DataMap records:\n\n        - dlng: comma-separated ScriptLangTags that indicate which scripts,\n          or languages and scripts, with possible variants, the font is designed for.\n\n        - slng: comma-separated ScriptLangTags that indicate which scripts,\n          or languages and scripts, with possible variants, the font supports.\n\n\n        The slng structure is intended to describe which languages and scripts the\n        font overall supports. For example, a Traditional Chinese font that also\n        contains Latin characters, can indicate Hant,Latn, showing that it supports\n        Hant, the Traditional Chinese variant of the Hani script, and it also\n        supports the Latn script.\n\n        The dlng structure is far more interesting. A font may contain various glyphs,\n        but only a particular subset of the glyphs may be truly \"leading\" in the design,\n        while other glyphs may have been included for technical reasons. Such a\n        Traditional Chinese font could only list Hant there, showing that it\u2019s designed\n        for Traditional Chinese, but the font would omit Latn, because the developers\n        don\u2019t think the font is really recommended for purely Latin-script use.\n\n        The tags used in the structures can comprise just script, or also language\n        and script. For example, if a font has Bulgarian Cyrillic alternates in the\n        locl feature for the cyrl BGR OT languagesystem, it could also indicate in\n        dlng explicitly that it supports bul-Cyrl. (Note that the scripts and languages\n        in meta use the ISO language and script codes, not the OpenType ones).\n\n        This check ensures that the font has the meta table containing the\n        slng and dlng structures.\n\n        All families in the Google Fonts collection should contain the 'meta' table.\n        Windows 10 already uses it when deciding on which fonts to fall back to.\n        The Google Fonts API and also other environments could use the data for\n        smarter filtering. Most importantly, those entries should be added\n        to the Noto fonts.\n\n        In the font making process, some environments store this data in external\n        files already. But the meta table provides a convenient way to store this\n        inside the font file, so some tools may add the data, and unrelated tools\n        may read this data. This makes the solution much more portable and universal.\n    ",
                    "result": "WARN",
                    "severity": 3
                },
                {
                    "description": "Ensure fonts do not contain any pre-production tables.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/no_debugging_tables>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Tables such as `Debg` are useful in the pre-production stages of font\n        development, but add unnecessary bloat to a production font and should\n        be removed before release.\n    ",
                    "result": "PASS",
                    "severity": 6
                },
                {
                    "description": "Check font family directory name.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/family_directory_name>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Directory name is \"amiri\", as expected.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        We want the directory name of a font family to be predictable and directly\n        derived from the family name, all lowercased and removing spaces.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check font can render its own name.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/render_own_name>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font can successfully render its own name (Amiri)",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        A base expectation is that a font family's regular/default (400 roman) style\n        can render its 'menu name' (nameID 1) in itself.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check samples can be rendered.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/can_render_samples>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        In order to prevent tofu from being seen on fonts.google.com, this check\n        verifies that all samples specified by METADATA.pb can be properly\n        rendered by the font.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check if category on METADATA.pb matches what can be inferred from the family name.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/metadata/category_hints>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Sometimes the font familyname contains words that hint at which is the most\n        likely correct category to be declared on METADATA.pb\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check font has the expected color font tables.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/colorfont_tables>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Looks Good!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        COLR v0 fonts are widely supported in most browsers so they do not require\n        an SVG color table. However, some environments (e.g. Safari, Adobe apps)\n        do not currently support COLR v1 so we need to add an SVG table to these fonts,\n        except in the case of variable fonts, since SVG does not support\n        OpenType Variations.\n\n        To automatically generate compatible SVG/COLR tables,\n        run the maximum_color tool in nanoemoji:\n        https://github.com/googlefonts/nanoemoji\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Color layers should have a minimum brightness",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/color_cpal_brightness>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Looks good!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Layers of a COLRv0 font should not be too dark or too bright. When layer colors\n        are set explicitly, they can't be changed and they may turn out illegible\n        against dark or bright backgrounds.\n\n        While traditional color-less fonts can be colored in design apps or CSS, a\n        black color definition in a COLRv0 font actually means that that layer will be\n        rendered in black regardless of the background color. This leads to text\n        becoming invisible against a dark background, for instance when using a dark\n        theme in a web browser or operating system.\n\n        This check ensures that layer colors are at least 10% bright and at most 90%\n        bright, when not already set to the current color (0xFFFF).\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Put an empty glyph on GID 1 right after the .notdef glyph for COLRv0 fonts.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/empty_glyph_on_gid1_for_colrv0>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Looks good!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        A rendering bug in Windows 10 paints whichever glyph is on GID 1 on top of\n        some glyphs, colored or not. This only occurs for COLR version 0 fonts.\n\n        Having a glyph with no contours on GID 1 is a practical workaround for that.\n\n        See https://github.com/googlefonts/gftools/issues/609\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Noto fonts must have an ARTICLE.en_us.html file",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Google Fonts>",
                        "<FontBakeryCheck:com.google.fonts/check/description/noto_has_article>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_noto",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Noto fonts are displayed in a different way on the fonts.google.com\n         web site, and so must also contain an article about them.\n    ",
                    "result": "SKIP"
                }
            ],
            "key": [
                "<Section: Google Fonts>",
                null,
                null
            ],
            "result": {
                "FAIL": 4,
                "INFO": 25,
                "PASS": 375,
                "SKIP": 98,
                "WARN": 28
            }
        },
        {
            "checks": [
                {
                    "description": "Checking all files are in the same directory.",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/family/single_directory>",
                        []
                    ],
                    "logs": [
                        {
                            "message": "All files are in the same directory.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        If the set of font files passed in the command line is not all in the\n        same directory, then we warn the user since the tool will interpret the\n        set of files as belonging to a single family (and it is unlikely that\n        the user would store the files from a single family spreaded\n        in several separate directories).\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Each font in a family must have the same set of vertical metrics values.",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/family/vertical_metrics>",
                        []
                    ],
                    "logs": [
                        {
                            "message": "Vertical metrics are the same across the family.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        We want all fonts within a family to have the same vertical metrics so\n        their line spacing is consistent across the family.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Name table records must not have trailing spaces.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/name/trailing_spaces>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "No trailing spaces on name table entries.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Checking OS/2 usWinAscent & usWinDescent.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/family/win_ascent_and_descent>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2 usWinAscent & usWinDescent values look good!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        A font's winAscent and winDescent values should be greater than or equal to\n        the head table's yMax, abs(yMin) values. If they are less than these values,\n        clipping can occur on Windows platforms\n        (https://github.com/RedHatBrand/Overpass/issues/33).\n\n        If the font includes tall/deep writing systems such as Arabic or Devanagari,\n        the winAscent and winDescent can be greater than the yMax and absolute yMin\n        values to accommodate vowel marks.\n\n        When the 'win' Metrics are significantly greater than the UPM, the linespacing\n        can appear too loose. To counteract this, enabling the OS/2 fsSelection\n        bit 7 (Use_Typo_Metrics), will force Windows to use the OS/2 'typo' values\n        instead. This means the font developer can control the linespacing with\n        the 'typo' values, whilst avoiding clipping by setting the 'win' values to\n        values greater than the yMax and absolute yMin.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Checking OS/2 Metrics match hhea Metrics.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/os2_metrics_match_hhea>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2.sTypoAscender/Descender values match hhea.ascent/descent.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        OS/2 and hhea vertical metric values should match. This will produce the\n        same linespacing on Mac, GNU+Linux and Windows.\n\n        - Mac OS X uses the hhea values.\n        - Windows uses OS/2 or Win, depending on the OS or fsSelection bit value.\n\n        When OS/2 and hhea vertical metrics match, the same linespacing results on\n        macOS, GNU+Linux and Windows. Note that fixing this issue in a previously\n        released font may cause reflow in user documents and unhappy users.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Checking with ots-sanitize.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/ots>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "ots-sanitize passed this file",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Do we have the latest version of FontBakery installed?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/fontbakery_version>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "FontBakery is up-to-date.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Running old versions of FontBakery can lead to a poor report which may\n        include false WARNs and FAILs due do bugs, as well as outdated\n        quality assurance criteria.\n\n        Older versions will also not report problems that are detected by new checks\n        added to the tool in more recent updates.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Font contains '.notdef' as its first glyph?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/mandatory_glyphs>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The OpenType specification v1.8.2 recommends that the first glyph is the\n        '.notdef' glyph without a codepoint assigned and with a drawing:\n\n        The .notdef glyph is very important for providing the user feedback\n        that a glyph is not found in the font. This glyph should not be left\n        without an outline as the user will only see what looks like a space\n        if a glyph is missing and not be aware of the active font\u2019s limitation.\n\n        https://docs.microsoft.com/en-us/typography/opentype/spec/recom#glyph-0-the-notdef-glyph\n\n        Pre-v1.8, it was recommended that fonts should also contain 'space', 'CR'\n        and '.null' glyphs. This might have been relevant for MacOS 9 applications.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Font contains glyphs for whitespace characters?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/whitespace_glyphs>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font contains glyphs for whitespace characters.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Font has **proper** whitespace glyph names?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/whitespace_glyphnames>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font has version 3 post table.",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This check enforces adherence to recommended whitespace\n        (codepoints 0020 and 00A0) glyph names according to the Adobe Glyph List.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Whitespace glyphs have ink?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/whitespace_ink>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "There is no whitespace glyph with ink.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Font contains all required tables?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/required_tables>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "This font contains the following optional tables:\n\n\t- loca\n\n\t- prep\n\n\t- GPOS\n\n\t- GSUB\n\n\t- gasp [code: optional-tables]",
                            "status": "INFO",
                            "traceback": null
                        },
                        {
                            "message": "Font contains all required tables.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the OpenType spec\n        https://docs.microsoft.com/en-us/typography/opentype/spec/otff#required-tables\n\n        Whether TrueType or CFF outlines are used in an OpenType font, the following\n        tables are required for the font to function correctly:\n\n        - cmap (Character to glyph mapping)\u23ce\n        - head (Font header)\u23ce\n        - hhea (Horizontal header)\u23ce\n        - hmtx (Horizontal metrics)\u23ce\n        - maxp (Maximum profile)\u23ce\n        - name (Naming table)\u23ce\n        - OS/2 (OS/2 and Windows specific metrics)\u23ce\n        - post (PostScript information)\n\n        The spec also documents that variable fonts require the following table:\n\n        - STAT (Style attributes)\n\n        Depending on the typeface and coverage of a font, certain tables are\n        recommended for optimum quality.\n\n        For example:\u23ce\n        - the performance of a non-linear font is improved if the VDMX, LTSH,\n          and hdmx tables are present.\u23ce\n        - Non-monospaced Latin fonts should have a kern table.\u23ce\n        - A gasp table is necessary if a designer wants to influence the sizes\n          at which grayscaling is used under Windows. Etc.\n    ",
                    "result": "INFO"
                },
                {
                    "description": "Are there unwanted tables?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/unwanted_tables>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "There are no unwanted tables.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Some font editors store source data in their own SFNT tables, and these\n        can sometimes sneak into final release files, which should only have\n        OpenType spec tables.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check correctness of STAT table strings",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/STAT_strings>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: has_STAT_table",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        On the STAT table, the \"Italic\" keyword must not be used on AxisValues\n        for variation axes other than 'ital'.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Glyph names are all valid?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/valid_glyphnames>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "TrueType fonts with a format 3 post table contain no glyph names.",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Microsoft's recommendations for OpenType Fonts states the following:\n\n        'NOTE: The PostScript glyph name must be no longer than 31 characters,\n        include only uppercase or lowercase English letters, European digits,\n        the period or the underscore, i.e. from the set [A-Za-z0-9_.] and\n        should start with a letter, except the special glyph name \".notdef\"\n        which starts with a period.'\n\n        https://docs.microsoft.com/en-us/typography/opentype/spec/recom#post-table\n\n\n        In practice, though, particularly in modern environments, glyph names\n        can be as long as 63 characters.\n\n        According to the \"Adobe Glyph List Specification\" available at:\n\n        https://github.com/adobe-type-tools/agl-specification\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Font contains unique glyph names?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/unique_glyphnames>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "TrueType fonts with a format 3 post table contain no glyph names.",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Duplicate glyph names prevent font installation on Mac OS X.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "List all superfamily filepaths",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/superfamily/list>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "/Users/simon/others-repos/fonts/ofl/amiri [code: family-path]",
                            "status": "INFO",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This is a merely informative check that lists all sibling families\n        detected by fontbakery.\n\n        Only the fontfiles in these directories will be considered in\n        superfamily-level checks.\n    ",
                    "result": "INFO"
                },
                {
                    "description": "Each font in set of sibling families must have the same set of vertical metrics values.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/superfamily/vertical_metrics>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Sibling families were not detected.",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        We may want all fonts within a super-family (all sibling families) to have\n        the same vertical metrics so their line spacing is consistent\n        across the super-family.\n\n        This is an experimental extended version of\n        com.google.fonts/check/family/vertical_metrics and for now it will only\n        result in WARNs.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Ensure indic fonts have the Indian Rupee Sign glyph.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/rupee>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_indic_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Per Bureau of Indian Standards every font supporting one of the\n        official Indian languages needs to include Unicode Character\n        \u201c\u20b9\u201d (U+20B9) Indian Rupee Sign.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check font contains no unreachable glyphs",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/unreachable_glyphs>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The following glyphs could not be reached by codepoint or substitution rules:\n\n\t- glyph01096\n\n\t- glyph01101\n\n\t- glyph01103\n\n\t- glyph01127\n\n\t- glyph01134\n\n\t- glyph01137\n\n\t- glyph01139\n\n\t- glyph01148\n\n\t- glyph01166\n\n\t- glyph01168\n\n\t- glyph01174\n\n\t- glyph01177\n\n\t- glyph01187\n\n\t- glyph01189\n\n\t- glyph01198\n\n\t- glyph01208\n\n\t- glyph01210\n\n\t- glyph01215\n\n\t- glyph01229\n\n\t- glyph01232\n\n\t- glyph01252\n\n\t- glyph01253\n\n\t- glyph01254\n\n\t- glyph01261\n\n\t- glyph01266\n\n\t- glyph01269\n\n\t- glyph01270\n\n\t- glyph01271\n\n\t- glyph01275\n\n\t- glyph01276\n\n\t- glyph01278\n\n\t- glyph01280\n\n\t- glyph01281\n\n\t- glyph01285\n\n\t- glyph01287\n\n\t- glyph01289\n\n\t- glyph01290\n\n\t- glyph01291\n\n\t- glyph01292\n\n\t- glyph01301\n\n\t- glyph01302\n\n\t- glyph01303\n\n\t- glyph01306\n\n\t- glyph01307\n\n\t- glyph01308\n\n\t- glyph01309\n\n\t- glyph01310\n\n\t- glyph01311\n\n\t- glyph01312\n\n\t- glyph01313\n\n\t- glyph01314\n\n\t- glyph01316\n\n\t- glyph01317\n\n\t- glyph01318\n\n\t- glyph01319\n\n\t- glyph01358\n\n\t- glyph01375\n\n\t- glyph01380\n\n\t- glyph02454\n\n\t- glyph02456\n\n\t- glyph05271\n\n\t- glyph05549\n\n\t- glyph05550\n\n\t- glyph05551\n\n\t- glyph05552\n\n\t- glyph05553\n\n\t- glyph05554\n\n\t- glyph05555\n\n\t- glyph05556\n\n\t- glyph05557\n\n\t- glyph05558\n\n\t- glyph05619\n\n\t- glyph05621\n\n\t- glyph05741\n\n\t- glyph05787\n\n\t- glyph05840\n\n\t- glyph06134\n\n\t- glyph06448\n [code: unreachable-glyphs]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Glyphs are either accessible directly through Unicode codepoints or through\n        substitution rules.\n\n        In Color Fonts, glyphs are also referenced by the COLR table.\n\n        Any glyphs not accessible by either of these means\n        are redundant and serve only to increase the font's file size.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Check if each glyph has the recommended amount of contours.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/contour_count>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "This check inspects the glyph outlines and detects the total number of contours in each of them. The expected values are infered from the typical ammounts of contours observed in a large collection of reference font families. The divergences listed below may simply indicate a significantly different design on some of your glyphs. On the other hand, some of these may flag actual bugs in the font such as glyphs mapped to an incorrect codepoint. Please consider reviewing the design and codepoint assignment of these to make sure they are correct.\n\nThe following glyphs do not have the recommended number of contours:\n\n\t- Glyph name: uni1E56\tContours detected: 2\tExpected: 3\n\n\t- Glyph name: uni1E56\tContours detected: 2\tExpected: 3\n [code: contour-count]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Does the font contain a soft hyphen?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/soft_hyphen>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "This font has a 'Soft Hyphen' character. [code: softhyphen]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The 'Soft Hyphen' character (codepoint 0x00AD) is used to mark\n        a hyphenation possibility within a word in the absence of or\n        overriding dictionary hyphenation.\n\n        It is sometimes designed empty with no width (such as a control character),\n        sometimes the same as the traditional hyphen, sometimes double encoded with\n        the hyphen.\n\n        That being said, it is recommended to not include it in the font at all,\n        because discretionary hyphenation should be handled at the level of the\n        shaping engine, not the font. Also, even if present, the software would\n        not display that character.\n\n        More discussion at:\n        https://typedrawers.com/discussion/2046/special-dash-things-softhyphen-horizontalbar\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Does the font contain chws and vchw features?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/cjk_chws_feature>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_cjk_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The W3C recommends the addition of chws and vchw features to CJK fonts\n        to enhance the spacing of glyphs in environments which do not fully support\n        JLREQ layout rules.\n\n        The chws_tool utility (https://github.com/googlefonts/chws_tool) can be used\n        to add these features automatically.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Ensure component transforms do not perform scaling or rotation.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/transformed_components>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "No glyphs had components with scaling or rotation",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Ensure no GPOS7 lookups are present.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/gpos7>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font has no GPOS7 lookups",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Versions of fonttools >=4.14.0 (19 August 2020) perform an optimisation on\n        chained contextual lookups, expressing GSUB6 as GSUB5 and GPOS8 and GPOS7\n        where possible (when there are no suffixes/prefixes for all rules in\n        the lookup).\n\n        However, makeotf has never generated these lookup types and they are rare\n        in practice. Perhaps before of this, Mac's CoreText shaper does not correctly\n        interpret GPOS7, meaning that these lookups will be ignored by the shaper,\n        and fonts containing these lookups will have unintended positioning errors.\n\n        To fix this warning, rebuild the font with a recent version of fonttools.\n    ",
                    "result": "PASS",
                    "severity": 9
                },
                {
                    "description": "Ensure that the font can be rasterized by FreeType.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.adobe.fonts/check/freetype_rasterizer>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font can be rasterized by FreeType.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Malformed fonts can cause FreeType to crash.\n    ",
                    "result": "PASS",
                    "severity": 10
                },
                {
                    "description": "Font has the proper sfntVersion value?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.adobe.fonts/check/sfnt_version>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font has the correct sfntVersion value.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        OpenType fonts that contain TrueType outlines should use the value of 0x00010000\n        for the sfntVersion. OpenType fonts containing CFF data (version 1 or 2) should\n        use 0x4F54544F ('OTTO', when re-interpreted as a Tag) for sfntVersion.\n\n        Fonts with the wrong sfntVersion value are rejected by FreeType.\n\n        https://docs.microsoft.com/en-us/typography/opentype/spec/otff#table-directory\n    ",
                    "result": "PASS",
                    "severity": 10
                },
                {
                    "description": "Space and non-breaking space have the same width?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/whitespace_widths>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Space and non-breaking space have the same width.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations in\n        documents; such as the space before punctuation in languages that do that. It\n        avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It's also used\n        by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Detect any interpolation issues in the font.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/interpolation_issues>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        When creating a variable font, the designer must make sure that corresponding\n        paths have the same start points across masters, as well as that corresponding\n        component shapes are placed in the same order within a glyph across masters.\n        If this is not done, the glyph will not interpolate correctly.\n\n        Here we check for the presence of potential interpolation errors using the\n        fontTools.varLib.interpolatable module.\n    ",
                    "result": "SKIP",
                    "severity": 4
                },
                {
                    "description": "Check math signs have the same width.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/math_signs_width>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The most common width is 483 among a set of 2 math glyphs.\nThe following math glyphs have a different width, though:\n\nWidth = 529:\nplus\n\nWidth = 545:\nequal\n\nWidth = 575:\nlogicalnot\n\nWidth = 568:\nplusminus\n\nWidth = 454:\nmultiply\n\nWidth = 578:\ndivide\n\nWidth = 595:\nminus\n\nWidth = 574:\nuni2213\n [code: width-outliers]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        It is a common practice to have math signs sharing the same width\n        (preferably the same width as tabular figures accross the entire font family).\n\n        This probably comes from the will to avoid additional tabular math signs\n        knowing that their design can easily share the same width.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Checking Vertical Metric Linegaps.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/linegaps>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2 sTypoLineGap and hhea lineGap are both 0.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The LineGap value is a space added to the line height created by the union\n        of the (typo/hhea)Ascender and (typo/hhea)Descender. It is handled differently\n        according to the environment.\n\n        This leading value will be added above the text line in most desktop apps.\n        It will be shared above and under in web browsers, and ignored in Windows\n        if Use_Typo_Metrics is disabled.\n\n        For better linespacing consistency across platforms,\n        (typo/hhea)LineGap values must be 0.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Checking STAT table entries in static fonts.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/STAT_in_statics>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: has_STAT_table",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Adobe feature syntax allows for the definition of a STAT table. Fonts built\n        with a hand-coded STAT table in feature syntax may be built either as static\n        or variable, but will end up with the same STAT table.\n\n        This is a problem, because a STAT table which works on variable fonts\n        will not be appropriate for static instances. The examples in the OpenType spec\n        of non-variable fonts with a STAT table show that the table entries must be\n        restricted to those entries which refer to the static font's position in\n        the designspace. i.e. a Regular weight static should only have the following\n        entry for the weight axis:\n\n        <AxisIndex value=\"0\"/>\n        <Flags value=\"2\"/>  <!-- ElidableAxisValueName -->\n        <ValueNameID value=\"265\"/>  <!-- Regular -->\n        <Value value=\"400.0\"/>\n\n        However, if the STAT table intended for a variable font is compiled into a\n        static, it will have many entries for this axis. In this case, Windows will\n        read the first entry only, causing all instances to report themselves\n        as \"Thin Condensed\".\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check accent of Lcaron, dcaron, lcaron, tcaron (derived from com.google.fonts/check/alt_caron)",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/alt_caron:googlefonts>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Looks good!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Lcaron, dcaron, lcaron, tcaron should NOT be composed with quoteright\n        or quotesingle or comma or caron(comb). It should be composed with a\n        distinctive glyph which doesn't look like an apostrophe.\n\n        Source:\n        https://ilovetypography.com/2009/01/24/on-diacritics/\n        http://diacritics.typo.cz/index.php?id=5\n        https://www.typotheque.com/articles/lcaron\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Name table records must not have trailing spaces.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/name/trailing_spaces>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "No trailing spaces on name table entries.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Checking OS/2 usWinAscent & usWinDescent.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/family/win_ascent_and_descent>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2 usWinAscent & usWinDescent values look good!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        A font's winAscent and winDescent values should be greater than or equal to\n        the head table's yMax, abs(yMin) values. If they are less than these values,\n        clipping can occur on Windows platforms\n        (https://github.com/RedHatBrand/Overpass/issues/33).\n\n        If the font includes tall/deep writing systems such as Arabic or Devanagari,\n        the winAscent and winDescent can be greater than the yMax and absolute yMin\n        values to accommodate vowel marks.\n\n        When the 'win' Metrics are significantly greater than the UPM, the linespacing\n        can appear too loose. To counteract this, enabling the OS/2 fsSelection\n        bit 7 (Use_Typo_Metrics), will force Windows to use the OS/2 'typo' values\n        instead. This means the font developer can control the linespacing with\n        the 'typo' values, whilst avoiding clipping by setting the 'win' values to\n        values greater than the yMax and absolute yMin.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Checking OS/2 Metrics match hhea Metrics.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/os2_metrics_match_hhea>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2.sTypoAscender/Descender values match hhea.ascent/descent.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        OS/2 and hhea vertical metric values should match. This will produce the\n        same linespacing on Mac, GNU+Linux and Windows.\n\n        - Mac OS X uses the hhea values.\n        - Windows uses OS/2 or Win, depending on the OS or fsSelection bit value.\n\n        When OS/2 and hhea vertical metrics match, the same linespacing results on\n        macOS, GNU+Linux and Windows. Note that fixing this issue in a previously\n        released font may cause reflow in user documents and unhappy users.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Checking with ots-sanitize.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/ots>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "ots-sanitize passed this file",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Do we have the latest version of FontBakery installed?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/fontbakery_version>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "FontBakery is up-to-date.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Running old versions of FontBakery can lead to a poor report which may\n        include false WARNs and FAILs due do bugs, as well as outdated\n        quality assurance criteria.\n\n        Older versions will also not report problems that are detected by new checks\n        added to the tool in more recent updates.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Font contains '.notdef' as its first glyph?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/mandatory_glyphs>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The OpenType specification v1.8.2 recommends that the first glyph is the\n        '.notdef' glyph without a codepoint assigned and with a drawing:\n\n        The .notdef glyph is very important for providing the user feedback\n        that a glyph is not found in the font. This glyph should not be left\n        without an outline as the user will only see what looks like a space\n        if a glyph is missing and not be aware of the active font\u2019s limitation.\n\n        https://docs.microsoft.com/en-us/typography/opentype/spec/recom#glyph-0-the-notdef-glyph\n\n        Pre-v1.8, it was recommended that fonts should also contain 'space', 'CR'\n        and '.null' glyphs. This might have been relevant for MacOS 9 applications.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Font contains glyphs for whitespace characters?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/whitespace_glyphs>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font contains glyphs for whitespace characters.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Font has **proper** whitespace glyph names?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/whitespace_glyphnames>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font has version 3 post table.",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This check enforces adherence to recommended whitespace\n        (codepoints 0020 and 00A0) glyph names according to the Adobe Glyph List.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Whitespace glyphs have ink?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/whitespace_ink>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "There is no whitespace glyph with ink.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Font contains all required tables?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/required_tables>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "This font contains the following optional tables:\n\n\t- loca\n\n\t- prep\n\n\t- GPOS\n\n\t- GSUB\n\n\t- gasp [code: optional-tables]",
                            "status": "INFO",
                            "traceback": null
                        },
                        {
                            "message": "Font contains all required tables.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the OpenType spec\n        https://docs.microsoft.com/en-us/typography/opentype/spec/otff#required-tables\n\n        Whether TrueType or CFF outlines are used in an OpenType font, the following\n        tables are required for the font to function correctly:\n\n        - cmap (Character to glyph mapping)\u23ce\n        - head (Font header)\u23ce\n        - hhea (Horizontal header)\u23ce\n        - hmtx (Horizontal metrics)\u23ce\n        - maxp (Maximum profile)\u23ce\n        - name (Naming table)\u23ce\n        - OS/2 (OS/2 and Windows specific metrics)\u23ce\n        - post (PostScript information)\n\n        The spec also documents that variable fonts require the following table:\n\n        - STAT (Style attributes)\n\n        Depending on the typeface and coverage of a font, certain tables are\n        recommended for optimum quality.\n\n        For example:\u23ce\n        - the performance of a non-linear font is improved if the VDMX, LTSH,\n          and hdmx tables are present.\u23ce\n        - Non-monospaced Latin fonts should have a kern table.\u23ce\n        - A gasp table is necessary if a designer wants to influence the sizes\n          at which grayscaling is used under Windows. Etc.\n    ",
                    "result": "INFO"
                },
                {
                    "description": "Are there unwanted tables?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/unwanted_tables>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "There are no unwanted tables.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Some font editors store source data in their own SFNT tables, and these\n        can sometimes sneak into final release files, which should only have\n        OpenType spec tables.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check correctness of STAT table strings",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/STAT_strings>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: has_STAT_table",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        On the STAT table, the \"Italic\" keyword must not be used on AxisValues\n        for variation axes other than 'ital'.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Glyph names are all valid?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/valid_glyphnames>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "TrueType fonts with a format 3 post table contain no glyph names.",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Microsoft's recommendations for OpenType Fonts states the following:\n\n        'NOTE: The PostScript glyph name must be no longer than 31 characters,\n        include only uppercase or lowercase English letters, European digits,\n        the period or the underscore, i.e. from the set [A-Za-z0-9_.] and\n        should start with a letter, except the special glyph name \".notdef\"\n        which starts with a period.'\n\n        https://docs.microsoft.com/en-us/typography/opentype/spec/recom#post-table\n\n\n        In practice, though, particularly in modern environments, glyph names\n        can be as long as 63 characters.\n\n        According to the \"Adobe Glyph List Specification\" available at:\n\n        https://github.com/adobe-type-tools/agl-specification\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Font contains unique glyph names?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/unique_glyphnames>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "TrueType fonts with a format 3 post table contain no glyph names.",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Duplicate glyph names prevent font installation on Mac OS X.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "List all superfamily filepaths",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/superfamily/list>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "/Users/simon/others-repos/fonts/ofl/amiri [code: family-path]",
                            "status": "INFO",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This is a merely informative check that lists all sibling families\n        detected by fontbakery.\n\n        Only the fontfiles in these directories will be considered in\n        superfamily-level checks.\n    ",
                    "result": "INFO"
                },
                {
                    "description": "Each font in set of sibling families must have the same set of vertical metrics values.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/superfamily/vertical_metrics>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Sibling families were not detected.",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        We may want all fonts within a super-family (all sibling families) to have\n        the same vertical metrics so their line spacing is consistent\n        across the super-family.\n\n        This is an experimental extended version of\n        com.google.fonts/check/family/vertical_metrics and for now it will only\n        result in WARNs.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Ensure indic fonts have the Indian Rupee Sign glyph.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/rupee>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_indic_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Per Bureau of Indian Standards every font supporting one of the\n        official Indian languages needs to include Unicode Character\n        \u201c\u20b9\u201d (U+20B9) Indian Rupee Sign.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check font contains no unreachable glyphs",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/unreachable_glyphs>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The following glyphs could not be reached by codepoint or substitution rules:\n\n\t- glyph01096\n\n\t- glyph01101\n\n\t- glyph01103\n\n\t- glyph01127\n\n\t- glyph01134\n\n\t- glyph01137\n\n\t- glyph01139\n\n\t- glyph01148\n\n\t- glyph01166\n\n\t- glyph01168\n\n\t- glyph01174\n\n\t- glyph01177\n\n\t- glyph01187\n\n\t- glyph01189\n\n\t- glyph01198\n\n\t- glyph01208\n\n\t- glyph01210\n\n\t- glyph01215\n\n\t- glyph01229\n\n\t- glyph01232\n\n\t- glyph01252\n\n\t- glyph01253\n\n\t- glyph01254\n\n\t- glyph01261\n\n\t- glyph01266\n\n\t- glyph01269\n\n\t- glyph01270\n\n\t- glyph01271\n\n\t- glyph01275\n\n\t- glyph01276\n\n\t- glyph01278\n\n\t- glyph01280\n\n\t- glyph01281\n\n\t- glyph01285\n\n\t- glyph01287\n\n\t- glyph01289\n\n\t- glyph01290\n\n\t- glyph01291\n\n\t- glyph01292\n\n\t- glyph01301\n\n\t- glyph01302\n\n\t- glyph01303\n\n\t- glyph01306\n\n\t- glyph01307\n\n\t- glyph01308\n\n\t- glyph01309\n\n\t- glyph01310\n\n\t- glyph01311\n\n\t- glyph01312\n\n\t- glyph01313\n\n\t- glyph01314\n\n\t- glyph01316\n\n\t- glyph01317\n\n\t- glyph01318\n\n\t- glyph01319\n\n\t- glyph01358\n\n\t- glyph01375\n\n\t- glyph01380\n\n\t- glyph02454\n\n\t- glyph02456\n\n\t- glyph05271\n\n\t- glyph05549\n\n\t- glyph05550\n\n\t- glyph05551\n\n\t- glyph05552\n\n\t- glyph05553\n\n\t- glyph05554\n\n\t- glyph05555\n\n\t- glyph05556\n\n\t- glyph05557\n\n\t- glyph05558\n\n\t- glyph05619\n\n\t- glyph05621\n\n\t- glyph05741\n\n\t- glyph05787\n\n\t- glyph05840\n\n\t- glyph06135\n\n\t- glyph06450\n [code: unreachable-glyphs]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Glyphs are either accessible directly through Unicode codepoints or through\n        substitution rules.\n\n        In Color Fonts, glyphs are also referenced by the COLR table.\n\n        Any glyphs not accessible by either of these means\n        are redundant and serve only to increase the font's file size.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Check if each glyph has the recommended amount of contours.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/contour_count>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "This check inspects the glyph outlines and detects the total number of contours in each of them. The expected values are infered from the typical ammounts of contours observed in a large collection of reference font families. The divergences listed below may simply indicate a significantly different design on some of your glyphs. On the other hand, some of these may flag actual bugs in the font such as glyphs mapped to an incorrect codepoint. Please consider reviewing the design and codepoint assignment of these to make sure they are correct.\n\nThe following glyphs do not have the recommended number of contours:\n\n\t- Glyph name: uni1E56\tContours detected: 2\tExpected: 3\n\n\t- Glyph name: uni1E56\tContours detected: 2\tExpected: 3\n [code: contour-count]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Does the font contain a soft hyphen?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/soft_hyphen>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "This font has a 'Soft Hyphen' character. [code: softhyphen]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The 'Soft Hyphen' character (codepoint 0x00AD) is used to mark\n        a hyphenation possibility within a word in the absence of or\n        overriding dictionary hyphenation.\n\n        It is sometimes designed empty with no width (such as a control character),\n        sometimes the same as the traditional hyphen, sometimes double encoded with\n        the hyphen.\n\n        That being said, it is recommended to not include it in the font at all,\n        because discretionary hyphenation should be handled at the level of the\n        shaping engine, not the font. Also, even if present, the software would\n        not display that character.\n\n        More discussion at:\n        https://typedrawers.com/discussion/2046/special-dash-things-softhyphen-horizontalbar\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Does the font contain chws and vchw features?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/cjk_chws_feature>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_cjk_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The W3C recommends the addition of chws and vchw features to CJK fonts\n        to enhance the spacing of glyphs in environments which do not fully support\n        JLREQ layout rules.\n\n        The chws_tool utility (https://github.com/googlefonts/chws_tool) can be used\n        to add these features automatically.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Ensure component transforms do not perform scaling or rotation.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/transformed_components>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "No glyphs had components with scaling or rotation",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Ensure no GPOS7 lookups are present.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/gpos7>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font has no GPOS7 lookups",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Versions of fonttools >=4.14.0 (19 August 2020) perform an optimisation on\n        chained contextual lookups, expressing GSUB6 as GSUB5 and GPOS8 and GPOS7\n        where possible (when there are no suffixes/prefixes for all rules in\n        the lookup).\n\n        However, makeotf has never generated these lookup types and they are rare\n        in practice. Perhaps before of this, Mac's CoreText shaper does not correctly\n        interpret GPOS7, meaning that these lookups will be ignored by the shaper,\n        and fonts containing these lookups will have unintended positioning errors.\n\n        To fix this warning, rebuild the font with a recent version of fonttools.\n    ",
                    "result": "PASS",
                    "severity": 9
                },
                {
                    "description": "Ensure that the font can be rasterized by FreeType.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.adobe.fonts/check/freetype_rasterizer>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font can be rasterized by FreeType.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Malformed fonts can cause FreeType to crash.\n    ",
                    "result": "PASS",
                    "severity": 10
                },
                {
                    "description": "Font has the proper sfntVersion value?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.adobe.fonts/check/sfnt_version>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font has the correct sfntVersion value.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        OpenType fonts that contain TrueType outlines should use the value of 0x00010000\n        for the sfntVersion. OpenType fonts containing CFF data (version 1 or 2) should\n        use 0x4F54544F ('OTTO', when re-interpreted as a Tag) for sfntVersion.\n\n        Fonts with the wrong sfntVersion value are rejected by FreeType.\n\n        https://docs.microsoft.com/en-us/typography/opentype/spec/otff#table-directory\n    ",
                    "result": "PASS",
                    "severity": 10
                },
                {
                    "description": "Space and non-breaking space have the same width?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/whitespace_widths>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Space and non-breaking space have the same width.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations in\n        documents; such as the space before punctuation in languages that do that. It\n        avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It's also used\n        by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Detect any interpolation issues in the font.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/interpolation_issues>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        When creating a variable font, the designer must make sure that corresponding\n        paths have the same start points across masters, as well as that corresponding\n        component shapes are placed in the same order within a glyph across masters.\n        If this is not done, the glyph will not interpolate correctly.\n\n        Here we check for the presence of potential interpolation errors using the\n        fontTools.varLib.interpolatable module.\n    ",
                    "result": "SKIP",
                    "severity": 4
                },
                {
                    "description": "Check math signs have the same width.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/math_signs_width>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The most common width is 483 among a set of 2 math glyphs.\nThe following math glyphs have a different width, though:\n\nWidth = 529:\nplus\n\nWidth = 545:\nequal\n\nWidth = 573:\nlogicalnot\n\nWidth = 568:\nplusminus\n\nWidth = 454:\nmultiply\n\nWidth = 578:\ndivide\n\nWidth = 595:\nminus\n\nWidth = 574:\nuni2213\n [code: width-outliers]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        It is a common practice to have math signs sharing the same width\n        (preferably the same width as tabular figures accross the entire font family).\n\n        This probably comes from the will to avoid additional tabular math signs\n        knowing that their design can easily share the same width.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Checking Vertical Metric Linegaps.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/linegaps>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2 sTypoLineGap and hhea lineGap are both 0.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The LineGap value is a space added to the line height created by the union\n        of the (typo/hhea)Ascender and (typo/hhea)Descender. It is handled differently\n        according to the environment.\n\n        This leading value will be added above the text line in most desktop apps.\n        It will be shared above and under in web browsers, and ignored in Windows\n        if Use_Typo_Metrics is disabled.\n\n        For better linespacing consistency across platforms,\n        (typo/hhea)LineGap values must be 0.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Checking STAT table entries in static fonts.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/STAT_in_statics>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: has_STAT_table",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Adobe feature syntax allows for the definition of a STAT table. Fonts built\n        with a hand-coded STAT table in feature syntax may be built either as static\n        or variable, but will end up with the same STAT table.\n\n        This is a problem, because a STAT table which works on variable fonts\n        will not be appropriate for static instances. The examples in the OpenType spec\n        of non-variable fonts with a STAT table show that the table entries must be\n        restricted to those entries which refer to the static font's position in\n        the designspace. i.e. a Regular weight static should only have the following\n        entry for the weight axis:\n\n        <AxisIndex value=\"0\"/>\n        <Flags value=\"2\"/>  <!-- ElidableAxisValueName -->\n        <ValueNameID value=\"265\"/>  <!-- Regular -->\n        <Value value=\"400.0\"/>\n\n        However, if the STAT table intended for a variable font is compiled into a\n        static, it will have many entries for this axis. In this case, Windows will\n        read the first entry only, causing all instances to report themselves\n        as \"Thin Condensed\".\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check accent of Lcaron, dcaron, lcaron, tcaron (derived from com.google.fonts/check/alt_caron)",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/alt_caron:googlefonts>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Looks good!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Lcaron, dcaron, lcaron, tcaron should NOT be composed with quoteright\n        or quotesingle or comma or caron(comb). It should be composed with a\n        distinctive glyph which doesn't look like an apostrophe.\n\n        Source:\n        https://ilovetypography.com/2009/01/24/on-diacritics/\n        http://diacritics.typo.cz/index.php?id=5\n        https://www.typotheque.com/articles/lcaron\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Name table records must not have trailing spaces.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/name/trailing_spaces>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "No trailing spaces on name table entries.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Checking OS/2 usWinAscent & usWinDescent.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/family/win_ascent_and_descent>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2 usWinAscent & usWinDescent values look good!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        A font's winAscent and winDescent values should be greater than or equal to\n        the head table's yMax, abs(yMin) values. If they are less than these values,\n        clipping can occur on Windows platforms\n        (https://github.com/RedHatBrand/Overpass/issues/33).\n\n        If the font includes tall/deep writing systems such as Arabic or Devanagari,\n        the winAscent and winDescent can be greater than the yMax and absolute yMin\n        values to accommodate vowel marks.\n\n        When the 'win' Metrics are significantly greater than the UPM, the linespacing\n        can appear too loose. To counteract this, enabling the OS/2 fsSelection\n        bit 7 (Use_Typo_Metrics), will force Windows to use the OS/2 'typo' values\n        instead. This means the font developer can control the linespacing with\n        the 'typo' values, whilst avoiding clipping by setting the 'win' values to\n        values greater than the yMax and absolute yMin.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Checking OS/2 Metrics match hhea Metrics.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/os2_metrics_match_hhea>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2.sTypoAscender/Descender values match hhea.ascent/descent.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        OS/2 and hhea vertical metric values should match. This will produce the\n        same linespacing on Mac, GNU+Linux and Windows.\n\n        - Mac OS X uses the hhea values.\n        - Windows uses OS/2 or Win, depending on the OS or fsSelection bit value.\n\n        When OS/2 and hhea vertical metrics match, the same linespacing results on\n        macOS, GNU+Linux and Windows. Note that fixing this issue in a previously\n        released font may cause reflow in user documents and unhappy users.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Checking with ots-sanitize.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/ots>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "ots-sanitize passed this file",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Do we have the latest version of FontBakery installed?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/fontbakery_version>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "FontBakery is up-to-date.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Running old versions of FontBakery can lead to a poor report which may\n        include false WARNs and FAILs due do bugs, as well as outdated\n        quality assurance criteria.\n\n        Older versions will also not report problems that are detected by new checks\n        added to the tool in more recent updates.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Font contains '.notdef' as its first glyph?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/mandatory_glyphs>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The OpenType specification v1.8.2 recommends that the first glyph is the\n        '.notdef' glyph without a codepoint assigned and with a drawing:\n\n        The .notdef glyph is very important for providing the user feedback\n        that a glyph is not found in the font. This glyph should not be left\n        without an outline as the user will only see what looks like a space\n        if a glyph is missing and not be aware of the active font\u2019s limitation.\n\n        https://docs.microsoft.com/en-us/typography/opentype/spec/recom#glyph-0-the-notdef-glyph\n\n        Pre-v1.8, it was recommended that fonts should also contain 'space', 'CR'\n        and '.null' glyphs. This might have been relevant for MacOS 9 applications.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Font contains glyphs for whitespace characters?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/whitespace_glyphs>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font contains glyphs for whitespace characters.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Font has **proper** whitespace glyph names?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/whitespace_glyphnames>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font has version 3 post table.",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This check enforces adherence to recommended whitespace\n        (codepoints 0020 and 00A0) glyph names according to the Adobe Glyph List.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Whitespace glyphs have ink?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/whitespace_ink>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "There is no whitespace glyph with ink.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Font contains all required tables?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/required_tables>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "This font contains the following optional tables:\n\n\t- loca\n\n\t- prep\n\n\t- GPOS\n\n\t- GSUB\n\n\t- gasp [code: optional-tables]",
                            "status": "INFO",
                            "traceback": null
                        },
                        {
                            "message": "Font contains all required tables.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the OpenType spec\n        https://docs.microsoft.com/en-us/typography/opentype/spec/otff#required-tables\n\n        Whether TrueType or CFF outlines are used in an OpenType font, the following\n        tables are required for the font to function correctly:\n\n        - cmap (Character to glyph mapping)\u23ce\n        - head (Font header)\u23ce\n        - hhea (Horizontal header)\u23ce\n        - hmtx (Horizontal metrics)\u23ce\n        - maxp (Maximum profile)\u23ce\n        - name (Naming table)\u23ce\n        - OS/2 (OS/2 and Windows specific metrics)\u23ce\n        - post (PostScript information)\n\n        The spec also documents that variable fonts require the following table:\n\n        - STAT (Style attributes)\n\n        Depending on the typeface and coverage of a font, certain tables are\n        recommended for optimum quality.\n\n        For example:\u23ce\n        - the performance of a non-linear font is improved if the VDMX, LTSH,\n          and hdmx tables are present.\u23ce\n        - Non-monospaced Latin fonts should have a kern table.\u23ce\n        - A gasp table is necessary if a designer wants to influence the sizes\n          at which grayscaling is used under Windows. Etc.\n    ",
                    "result": "INFO"
                },
                {
                    "description": "Are there unwanted tables?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/unwanted_tables>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "There are no unwanted tables.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Some font editors store source data in their own SFNT tables, and these\n        can sometimes sneak into final release files, which should only have\n        OpenType spec tables.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check correctness of STAT table strings",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/STAT_strings>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: has_STAT_table",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        On the STAT table, the \"Italic\" keyword must not be used on AxisValues\n        for variation axes other than 'ital'.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Glyph names are all valid?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/valid_glyphnames>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "TrueType fonts with a format 3 post table contain no glyph names.",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Microsoft's recommendations for OpenType Fonts states the following:\n\n        'NOTE: The PostScript glyph name must be no longer than 31 characters,\n        include only uppercase or lowercase English letters, European digits,\n        the period or the underscore, i.e. from the set [A-Za-z0-9_.] and\n        should start with a letter, except the special glyph name \".notdef\"\n        which starts with a period.'\n\n        https://docs.microsoft.com/en-us/typography/opentype/spec/recom#post-table\n\n\n        In practice, though, particularly in modern environments, glyph names\n        can be as long as 63 characters.\n\n        According to the \"Adobe Glyph List Specification\" available at:\n\n        https://github.com/adobe-type-tools/agl-specification\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Font contains unique glyph names?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/unique_glyphnames>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "TrueType fonts with a format 3 post table contain no glyph names.",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Duplicate glyph names prevent font installation on Mac OS X.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "List all superfamily filepaths",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/superfamily/list>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "/Users/simon/others-repos/fonts/ofl/amiri [code: family-path]",
                            "status": "INFO",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This is a merely informative check that lists all sibling families\n        detected by fontbakery.\n\n        Only the fontfiles in these directories will be considered in\n        superfamily-level checks.\n    ",
                    "result": "INFO"
                },
                {
                    "description": "Each font in set of sibling families must have the same set of vertical metrics values.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/superfamily/vertical_metrics>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Sibling families were not detected.",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        We may want all fonts within a super-family (all sibling families) to have\n        the same vertical metrics so their line spacing is consistent\n        across the super-family.\n\n        This is an experimental extended version of\n        com.google.fonts/check/family/vertical_metrics and for now it will only\n        result in WARNs.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Ensure indic fonts have the Indian Rupee Sign glyph.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/rupee>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_indic_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Per Bureau of Indian Standards every font supporting one of the\n        official Indian languages needs to include Unicode Character\n        \u201c\u20b9\u201d (U+20B9) Indian Rupee Sign.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check font contains no unreachable glyphs",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/unreachable_glyphs>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The following glyphs could not be reached by codepoint or substitution rules:\n\n\t- glyph01239\n\n\t- glyph01244\n\n\t- glyph01246\n\n\t- glyph01270\n\n\t- glyph01277\n\n\t- glyph01280\n\n\t- glyph01282\n\n\t- glyph01291\n\n\t- glyph01309\n\n\t- glyph01311\n\n\t- glyph01317\n\n\t- glyph01320\n\n\t- glyph01330\n\n\t- glyph01332\n\n\t- glyph01341\n\n\t- glyph01351\n\n\t- glyph01353\n\n\t- glyph01358\n\n\t- glyph01372\n\n\t- glyph01375\n\n\t- glyph01395\n\n\t- glyph01396\n\n\t- glyph01397\n\n\t- glyph01404\n\n\t- glyph01409\n\n\t- glyph01412\n\n\t- glyph01413\n\n\t- glyph01414\n\n\t- glyph01418\n\n\t- glyph01419\n\n\t- glyph01421\n\n\t- glyph01423\n\n\t- glyph01424\n\n\t- glyph01428\n\n\t- glyph01430\n\n\t- glyph01432\n\n\t- glyph01433\n\n\t- glyph01434\n\n\t- glyph01435\n\n\t- glyph01444\n\n\t- glyph01445\n\n\t- glyph01446\n\n\t- glyph01449\n\n\t- glyph01450\n\n\t- glyph01451\n\n\t- glyph01452\n\n\t- glyph01453\n\n\t- glyph01454\n\n\t- glyph01455\n\n\t- glyph01456\n\n\t- glyph01457\n\n\t- glyph01459\n\n\t- glyph01460\n\n\t- glyph01461\n\n\t- glyph01462\n\n\t- glyph01501\n\n\t- glyph01518\n\n\t- glyph01523\n\n\t- glyph02597\n\n\t- glyph02599\n\n\t- glyph05414\n\n\t- glyph05692\n\n\t- glyph05693\n\n\t- glyph05694\n\n\t- glyph05695\n\n\t- glyph05696\n\n\t- glyph05697\n\n\t- glyph05698\n\n\t- glyph05699\n\n\t- glyph05700\n\n\t- glyph05701\n\n\t- glyph05762\n\n\t- glyph05764\n\n\t- glyph05884\n\n\t- glyph05930\n\n\t- glyph05983\n\n\t- glyph06122\n\n\t- glyph06123\n\n\t- glyph06124\n\n\t- glyph06125\n\n\t- glyph06126\n\n\t- glyph06127\n\n\t- glyph06283\n\n\t- glyph06599\n [code: unreachable-glyphs]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Glyphs are either accessible directly through Unicode codepoints or through\n        substitution rules.\n\n        In Color Fonts, glyphs are also referenced by the COLR table.\n\n        Any glyphs not accessible by either of these means\n        are redundant and serve only to increase the font's file size.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Check if each glyph has the recommended amount of contours.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/contour_count>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "This check inspects the glyph outlines and detects the total number of contours in each of them. The expected values are infered from the typical ammounts of contours observed in a large collection of reference font families. The divergences listed below may simply indicate a significantly different design on some of your glyphs. On the other hand, some of these may flag actual bugs in the font such as glyphs mapped to an incorrect codepoint. Please consider reviewing the design and codepoint assignment of these to make sure they are correct.\n\nThe following glyphs do not have the recommended number of contours:\n\n\t- Glyph name: uni1E56\tContours detected: 2\tExpected: 3\n\n\t- Glyph name: uni1E56\tContours detected: 2\tExpected: 3\n [code: contour-count]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Does the font contain a soft hyphen?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/soft_hyphen>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "This font has a 'Soft Hyphen' character. [code: softhyphen]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The 'Soft Hyphen' character (codepoint 0x00AD) is used to mark\n        a hyphenation possibility within a word in the absence of or\n        overriding dictionary hyphenation.\n\n        It is sometimes designed empty with no width (such as a control character),\n        sometimes the same as the traditional hyphen, sometimes double encoded with\n        the hyphen.\n\n        That being said, it is recommended to not include it in the font at all,\n        because discretionary hyphenation should be handled at the level of the\n        shaping engine, not the font. Also, even if present, the software would\n        not display that character.\n\n        More discussion at:\n        https://typedrawers.com/discussion/2046/special-dash-things-softhyphen-horizontalbar\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Does the font contain chws and vchw features?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/cjk_chws_feature>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_cjk_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The W3C recommends the addition of chws and vchw features to CJK fonts\n        to enhance the spacing of glyphs in environments which do not fully support\n        JLREQ layout rules.\n\n        The chws_tool utility (https://github.com/googlefonts/chws_tool) can be used\n        to add these features automatically.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Ensure component transforms do not perform scaling or rotation.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/transformed_components>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "No glyphs had components with scaling or rotation",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Ensure no GPOS7 lookups are present.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/gpos7>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font has no GPOS7 lookups",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Versions of fonttools >=4.14.0 (19 August 2020) perform an optimisation on\n        chained contextual lookups, expressing GSUB6 as GSUB5 and GPOS8 and GPOS7\n        where possible (when there are no suffixes/prefixes for all rules in\n        the lookup).\n\n        However, makeotf has never generated these lookup types and they are rare\n        in practice. Perhaps before of this, Mac's CoreText shaper does not correctly\n        interpret GPOS7, meaning that these lookups will be ignored by the shaper,\n        and fonts containing these lookups will have unintended positioning errors.\n\n        To fix this warning, rebuild the font with a recent version of fonttools.\n    ",
                    "result": "PASS",
                    "severity": 9
                },
                {
                    "description": "Ensure that the font can be rasterized by FreeType.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.adobe.fonts/check/freetype_rasterizer>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font can be rasterized by FreeType.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Malformed fonts can cause FreeType to crash.\n    ",
                    "result": "PASS",
                    "severity": 10
                },
                {
                    "description": "Font has the proper sfntVersion value?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.adobe.fonts/check/sfnt_version>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font has the correct sfntVersion value.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        OpenType fonts that contain TrueType outlines should use the value of 0x00010000\n        for the sfntVersion. OpenType fonts containing CFF data (version 1 or 2) should\n        use 0x4F54544F ('OTTO', when re-interpreted as a Tag) for sfntVersion.\n\n        Fonts with the wrong sfntVersion value are rejected by FreeType.\n\n        https://docs.microsoft.com/en-us/typography/opentype/spec/otff#table-directory\n    ",
                    "result": "PASS",
                    "severity": 10
                },
                {
                    "description": "Space and non-breaking space have the same width?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/whitespace_widths>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Space and non-breaking space have the same width.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations in\n        documents; such as the space before punctuation in languages that do that. It\n        avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It's also used\n        by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Detect any interpolation issues in the font.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/interpolation_issues>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        When creating a variable font, the designer must make sure that corresponding\n        paths have the same start points across masters, as well as that corresponding\n        component shapes are placed in the same order within a glyph across masters.\n        If this is not done, the glyph will not interpolate correctly.\n\n        Here we check for the presence of potential interpolation errors using the\n        fontTools.varLib.interpolatable module.\n    ",
                    "result": "SKIP",
                    "severity": 4
                },
                {
                    "description": "Check math signs have the same width.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/math_signs_width>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The most common width is 529 among a set of 1 math glyphs.\nThe following math glyphs have a different width, though:\n\nWidth = 480:\nless\n\nWidth = 551:\nequal\n\nWidth = 481:\ngreater\n\nWidth = 573:\nlogicalnot\n\nWidth = 535:\nplusminus\n\nWidth = 453:\nmultiply\n\nWidth = 584:\ndivide\n\nWidth = 553:\nminus\n\nWidth = 583:\nuni2213\n [code: width-outliers]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        It is a common practice to have math signs sharing the same width\n        (preferably the same width as tabular figures accross the entire font family).\n\n        This probably comes from the will to avoid additional tabular math signs\n        knowing that their design can easily share the same width.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Checking Vertical Metric Linegaps.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/linegaps>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2 sTypoLineGap and hhea lineGap are both 0.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The LineGap value is a space added to the line height created by the union\n        of the (typo/hhea)Ascender and (typo/hhea)Descender. It is handled differently\n        according to the environment.\n\n        This leading value will be added above the text line in most desktop apps.\n        It will be shared above and under in web browsers, and ignored in Windows\n        if Use_Typo_Metrics is disabled.\n\n        For better linespacing consistency across platforms,\n        (typo/hhea)LineGap values must be 0.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Checking STAT table entries in static fonts.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/STAT_in_statics>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: has_STAT_table",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Adobe feature syntax allows for the definition of a STAT table. Fonts built\n        with a hand-coded STAT table in feature syntax may be built either as static\n        or variable, but will end up with the same STAT table.\n\n        This is a problem, because a STAT table which works on variable fonts\n        will not be appropriate for static instances. The examples in the OpenType spec\n        of non-variable fonts with a STAT table show that the table entries must be\n        restricted to those entries which refer to the static font's position in\n        the designspace. i.e. a Regular weight static should only have the following\n        entry for the weight axis:\n\n        <AxisIndex value=\"0\"/>\n        <Flags value=\"2\"/>  <!-- ElidableAxisValueName -->\n        <ValueNameID value=\"265\"/>  <!-- Regular -->\n        <Value value=\"400.0\"/>\n\n        However, if the STAT table intended for a variable font is compiled into a\n        static, it will have many entries for this axis. In this case, Windows will\n        read the first entry only, causing all instances to report themselves\n        as \"Thin Condensed\".\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check accent of Lcaron, dcaron, lcaron, tcaron (derived from com.google.fonts/check/alt_caron)",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/alt_caron:googlefonts>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Looks good!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Lcaron, dcaron, lcaron, tcaron should NOT be composed with quoteright\n        or quotesingle or comma or caron(comb). It should be composed with a\n        distinctive glyph which doesn't look like an apostrophe.\n\n        Source:\n        https://ilovetypography.com/2009/01/24/on-diacritics/\n        http://diacritics.typo.cz/index.php?id=5\n        https://www.typotheque.com/articles/lcaron\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Name table records must not have trailing spaces.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/name/trailing_spaces>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "No trailing spaces on name table entries.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Checking OS/2 usWinAscent & usWinDescent.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/family/win_ascent_and_descent>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2 usWinAscent & usWinDescent values look good!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        A font's winAscent and winDescent values should be greater than or equal to\n        the head table's yMax, abs(yMin) values. If they are less than these values,\n        clipping can occur on Windows platforms\n        (https://github.com/RedHatBrand/Overpass/issues/33).\n\n        If the font includes tall/deep writing systems such as Arabic or Devanagari,\n        the winAscent and winDescent can be greater than the yMax and absolute yMin\n        values to accommodate vowel marks.\n\n        When the 'win' Metrics are significantly greater than the UPM, the linespacing\n        can appear too loose. To counteract this, enabling the OS/2 fsSelection\n        bit 7 (Use_Typo_Metrics), will force Windows to use the OS/2 'typo' values\n        instead. This means the font developer can control the linespacing with\n        the 'typo' values, whilst avoiding clipping by setting the 'win' values to\n        values greater than the yMax and absolute yMin.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Checking OS/2 Metrics match hhea Metrics.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/os2_metrics_match_hhea>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2.sTypoAscender/Descender values match hhea.ascent/descent.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        OS/2 and hhea vertical metric values should match. This will produce the\n        same linespacing on Mac, GNU+Linux and Windows.\n\n        - Mac OS X uses the hhea values.\n        - Windows uses OS/2 or Win, depending on the OS or fsSelection bit value.\n\n        When OS/2 and hhea vertical metrics match, the same linespacing results on\n        macOS, GNU+Linux and Windows. Note that fixing this issue in a previously\n        released font may cause reflow in user documents and unhappy users.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Checking with ots-sanitize.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/ots>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "ots-sanitize passed this file",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Do we have the latest version of FontBakery installed?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/fontbakery_version>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "FontBakery is up-to-date.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Running old versions of FontBakery can lead to a poor report which may\n        include false WARNs and FAILs due do bugs, as well as outdated\n        quality assurance criteria.\n\n        Older versions will also not report problems that are detected by new checks\n        added to the tool in more recent updates.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Font contains '.notdef' as its first glyph?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/mandatory_glyphs>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The OpenType specification v1.8.2 recommends that the first glyph is the\n        '.notdef' glyph without a codepoint assigned and with a drawing:\n\n        The .notdef glyph is very important for providing the user feedback\n        that a glyph is not found in the font. This glyph should not be left\n        without an outline as the user will only see what looks like a space\n        if a glyph is missing and not be aware of the active font\u2019s limitation.\n\n        https://docs.microsoft.com/en-us/typography/opentype/spec/recom#glyph-0-the-notdef-glyph\n\n        Pre-v1.8, it was recommended that fonts should also contain 'space', 'CR'\n        and '.null' glyphs. This might have been relevant for MacOS 9 applications.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Font contains glyphs for whitespace characters?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/whitespace_glyphs>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font contains glyphs for whitespace characters.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Font has **proper** whitespace glyph names?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/whitespace_glyphnames>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font has version 3 post table.",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This check enforces adherence to recommended whitespace\n        (codepoints 0020 and 00A0) glyph names according to the Adobe Glyph List.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Whitespace glyphs have ink?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/whitespace_ink>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "There is no whitespace glyph with ink.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Font contains all required tables?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/required_tables>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "This font contains the following optional tables:\n\n\t- loca\n\n\t- prep\n\n\t- GPOS\n\n\t- GSUB\n\n\t- gasp [code: optional-tables]",
                            "status": "INFO",
                            "traceback": null
                        },
                        {
                            "message": "Font contains all required tables.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the OpenType spec\n        https://docs.microsoft.com/en-us/typography/opentype/spec/otff#required-tables\n\n        Whether TrueType or CFF outlines are used in an OpenType font, the following\n        tables are required for the font to function correctly:\n\n        - cmap (Character to glyph mapping)\u23ce\n        - head (Font header)\u23ce\n        - hhea (Horizontal header)\u23ce\n        - hmtx (Horizontal metrics)\u23ce\n        - maxp (Maximum profile)\u23ce\n        - name (Naming table)\u23ce\n        - OS/2 (OS/2 and Windows specific metrics)\u23ce\n        - post (PostScript information)\n\n        The spec also documents that variable fonts require the following table:\n\n        - STAT (Style attributes)\n\n        Depending on the typeface and coverage of a font, certain tables are\n        recommended for optimum quality.\n\n        For example:\u23ce\n        - the performance of a non-linear font is improved if the VDMX, LTSH,\n          and hdmx tables are present.\u23ce\n        - Non-monospaced Latin fonts should have a kern table.\u23ce\n        - A gasp table is necessary if a designer wants to influence the sizes\n          at which grayscaling is used under Windows. Etc.\n    ",
                    "result": "INFO"
                },
                {
                    "description": "Are there unwanted tables?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/unwanted_tables>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "There are no unwanted tables.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Some font editors store source data in their own SFNT tables, and these\n        can sometimes sneak into final release files, which should only have\n        OpenType spec tables.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check correctness of STAT table strings",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/STAT_strings>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: has_STAT_table",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        On the STAT table, the \"Italic\" keyword must not be used on AxisValues\n        for variation axes other than 'ital'.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Glyph names are all valid?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/valid_glyphnames>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "TrueType fonts with a format 3 post table contain no glyph names.",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Microsoft's recommendations for OpenType Fonts states the following:\n\n        'NOTE: The PostScript glyph name must be no longer than 31 characters,\n        include only uppercase or lowercase English letters, European digits,\n        the period or the underscore, i.e. from the set [A-Za-z0-9_.] and\n        should start with a letter, except the special glyph name \".notdef\"\n        which starts with a period.'\n\n        https://docs.microsoft.com/en-us/typography/opentype/spec/recom#post-table\n\n\n        In practice, though, particularly in modern environments, glyph names\n        can be as long as 63 characters.\n\n        According to the \"Adobe Glyph List Specification\" available at:\n\n        https://github.com/adobe-type-tools/agl-specification\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Font contains unique glyph names?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/unique_glyphnames>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "TrueType fonts with a format 3 post table contain no glyph names.",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Duplicate glyph names prevent font installation on Mac OS X.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "List all superfamily filepaths",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/superfamily/list>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "/Users/simon/others-repos/fonts/ofl/amiri [code: family-path]",
                            "status": "INFO",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This is a merely informative check that lists all sibling families\n        detected by fontbakery.\n\n        Only the fontfiles in these directories will be considered in\n        superfamily-level checks.\n    ",
                    "result": "INFO"
                },
                {
                    "description": "Each font in set of sibling families must have the same set of vertical metrics values.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/superfamily/vertical_metrics>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Sibling families were not detected.",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        We may want all fonts within a super-family (all sibling families) to have\n        the same vertical metrics so their line spacing is consistent\n        across the super-family.\n\n        This is an experimental extended version of\n        com.google.fonts/check/family/vertical_metrics and for now it will only\n        result in WARNs.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Ensure indic fonts have the Indian Rupee Sign glyph.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/rupee>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_indic_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Per Bureau of Indian Standards every font supporting one of the\n        official Indian languages needs to include Unicode Character\n        \u201c\u20b9\u201d (U+20B9) Indian Rupee Sign.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check font contains no unreachable glyphs",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/unreachable_glyphs>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The following glyphs could not be reached by codepoint or substitution rules:\n\n\t- glyph01239\n\n\t- glyph01244\n\n\t- glyph01246\n\n\t- glyph01270\n\n\t- glyph01277\n\n\t- glyph01280\n\n\t- glyph01282\n\n\t- glyph01291\n\n\t- glyph01309\n\n\t- glyph01311\n\n\t- glyph01317\n\n\t- glyph01320\n\n\t- glyph01330\n\n\t- glyph01332\n\n\t- glyph01341\n\n\t- glyph01351\n\n\t- glyph01353\n\n\t- glyph01358\n\n\t- glyph01372\n\n\t- glyph01375\n\n\t- glyph01395\n\n\t- glyph01396\n\n\t- glyph01397\n\n\t- glyph01404\n\n\t- glyph01409\n\n\t- glyph01412\n\n\t- glyph01413\n\n\t- glyph01414\n\n\t- glyph01418\n\n\t- glyph01419\n\n\t- glyph01421\n\n\t- glyph01423\n\n\t- glyph01424\n\n\t- glyph01428\n\n\t- glyph01430\n\n\t- glyph01432\n\n\t- glyph01433\n\n\t- glyph01434\n\n\t- glyph01435\n\n\t- glyph01444\n\n\t- glyph01445\n\n\t- glyph01446\n\n\t- glyph01449\n\n\t- glyph01450\n\n\t- glyph01451\n\n\t- glyph01452\n\n\t- glyph01453\n\n\t- glyph01454\n\n\t- glyph01455\n\n\t- glyph01456\n\n\t- glyph01457\n\n\t- glyph01459\n\n\t- glyph01460\n\n\t- glyph01461\n\n\t- glyph01462\n\n\t- glyph01501\n\n\t- glyph01518\n\n\t- glyph01523\n\n\t- glyph02597\n\n\t- glyph02599\n\n\t- glyph05414\n\n\t- glyph05692\n\n\t- glyph05693\n\n\t- glyph05694\n\n\t- glyph05695\n\n\t- glyph05696\n\n\t- glyph05697\n\n\t- glyph05698\n\n\t- glyph05699\n\n\t- glyph05700\n\n\t- glyph05701\n\n\t- glyph05762\n\n\t- glyph05764\n\n\t- glyph05884\n\n\t- glyph05930\n\n\t- glyph05983\n\n\t- glyph06122\n\n\t- glyph06123\n\n\t- glyph06124\n\n\t- glyph06125\n\n\t- glyph06126\n\n\t- glyph06127\n\n\t- glyph06283\n\n\t- glyph06599\n [code: unreachable-glyphs]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Glyphs are either accessible directly through Unicode codepoints or through\n        substitution rules.\n\n        In Color Fonts, glyphs are also referenced by the COLR table.\n\n        Any glyphs not accessible by either of these means\n        are redundant and serve only to increase the font's file size.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Check if each glyph has the recommended amount of contours.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/contour_count>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "This check inspects the glyph outlines and detects the total number of contours in each of them. The expected values are infered from the typical ammounts of contours observed in a large collection of reference font families. The divergences listed below may simply indicate a significantly different design on some of your glyphs. On the other hand, some of these may flag actual bugs in the font such as glyphs mapped to an incorrect codepoint. Please consider reviewing the design and codepoint assignment of these to make sure they are correct.\n\nThe following glyphs do not have the recommended number of contours:\n\n\t- Glyph name: uni1E56\tContours detected: 2\tExpected: 3\n\n\t- Glyph name: uni1E56\tContours detected: 2\tExpected: 3\n [code: contour-count]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Visually QAing thousands of glyphs by hand is tiring. Most glyphs can only\n        be constructured in a handful of ways. This means a glyph's contour count\n        will only differ slightly amongst different fonts, e.g a 'g' could either\n        be 2 or 3 contours, depending on whether its double story or single story.\n\n        However, a quotedbl should have 2 contours, unless the font belongs\n        to a display family.\n\n        This check currently does not cover variable fonts because there's plenty\n        of alternative ways of constructing glyphs with multiple outlines for each\n        feature in a VarFont. The expected contour count data for this check is\n        currently optimized for the typical construction of glyphs in static fonts.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Does the font contain a soft hyphen?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/soft_hyphen>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "This font has a 'Soft Hyphen' character. [code: softhyphen]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The 'Soft Hyphen' character (codepoint 0x00AD) is used to mark\n        a hyphenation possibility within a word in the absence of or\n        overriding dictionary hyphenation.\n\n        It is sometimes designed empty with no width (such as a control character),\n        sometimes the same as the traditional hyphen, sometimes double encoded with\n        the hyphen.\n\n        That being said, it is recommended to not include it in the font at all,\n        because discretionary hyphenation should be handled at the level of the\n        shaping engine, not the font. Also, even if present, the software would\n        not display that character.\n\n        More discussion at:\n        https://typedrawers.com/discussion/2046/special-dash-things-softhyphen-horizontalbar\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Does the font contain chws and vchw features?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/cjk_chws_feature>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_cjk_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The W3C recommends the addition of chws and vchw features to CJK fonts\n        to enhance the spacing of glyphs in environments which do not fully support\n        JLREQ layout rules.\n\n        The chws_tool utility (https://github.com/googlefonts/chws_tool) can be used\n        to add these features automatically.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Ensure component transforms do not perform scaling or rotation.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/transformed_components>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "No glyphs had components with scaling or rotation",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Some families have glyphs which have been constructed by using\n        transformed components e.g the 'u' being constructed from a flipped 'n'.\n\n        From a designers point of view, this sounds like a win (less work).\n        However, such approaches can lead to rasterization issues, such as\n        having the 'u' not sitting on the baseline at certain sizes after\n        running the font through ttfautohint.\n\n        Other issues are outlines that end up reversed when only one dimension\n        is flipped while the other isn't.\n\n        As of July 2019, Marc Foley observed that ttfautohint assigns cvt values\n        to transformed glyphs as if they are not transformed and the result is\n        they render very badly, and that vttLib does not support flipped components.\n\n        When building the font with fontmake, the problem can be fixed by adding\n        this to the command line:\n\n        --filter DecomposeTransformedComponentsFilter\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Ensure no GPOS7 lookups are present.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/gpos7>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font has no GPOS7 lookups",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Versions of fonttools >=4.14.0 (19 August 2020) perform an optimisation on\n        chained contextual lookups, expressing GSUB6 as GSUB5 and GPOS8 and GPOS7\n        where possible (when there are no suffixes/prefixes for all rules in\n        the lookup).\n\n        However, makeotf has never generated these lookup types and they are rare\n        in practice. Perhaps before of this, Mac's CoreText shaper does not correctly\n        interpret GPOS7, meaning that these lookups will be ignored by the shaper,\n        and fonts containing these lookups will have unintended positioning errors.\n\n        To fix this warning, rebuild the font with a recent version of fonttools.\n    ",
                    "result": "PASS",
                    "severity": 9
                },
                {
                    "description": "Ensure that the font can be rasterized by FreeType.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.adobe.fonts/check/freetype_rasterizer>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font can be rasterized by FreeType.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Malformed fonts can cause FreeType to crash.\n    ",
                    "result": "PASS",
                    "severity": 10
                },
                {
                    "description": "Font has the proper sfntVersion value?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.adobe.fonts/check/sfnt_version>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font has the correct sfntVersion value.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        OpenType fonts that contain TrueType outlines should use the value of 0x00010000\n        for the sfntVersion. OpenType fonts containing CFF data (version 1 or 2) should\n        use 0x4F54544F ('OTTO', when re-interpreted as a Tag) for sfntVersion.\n\n        Fonts with the wrong sfntVersion value are rejected by FreeType.\n\n        https://docs.microsoft.com/en-us/typography/opentype/spec/otff#table-directory\n    ",
                    "result": "PASS",
                    "severity": 10
                },
                {
                    "description": "Space and non-breaking space have the same width?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/whitespace_widths>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Space and non-breaking space have the same width.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        If the space and nbspace glyphs have different widths, then Google Workspace\n        has problems with the font.\n\n        The nbspace is used to replace the space character in multiple situations in\n        documents; such as the space before punctuation in languages that do that. It\n        avoids the punctuation to be separated from the last word and go to next line.\n\n        This is automatic substitution by the text editors, not by fonts. It's also used\n        by designers in text composition practice to create nicely shaped paragraphs.\n        If the space and the nbspace are not the same width, it breaks the text\n        composition of documents.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Detect any interpolation issues in the font.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/interpolation_issues>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        When creating a variable font, the designer must make sure that corresponding\n        paths have the same start points across masters, as well as that corresponding\n        component shapes are placed in the same order within a glyph across masters.\n        If this is not done, the glyph will not interpolate correctly.\n\n        Here we check for the presence of potential interpolation errors using the\n        fontTools.varLib.interpolatable module.\n    ",
                    "result": "SKIP",
                    "severity": 4
                },
                {
                    "description": "Check math signs have the same width.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/math_signs_width>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The most common width is 529 among a set of 1 math glyphs.\nThe following math glyphs have a different width, though:\n\nWidth = 480:\nless\n\nWidth = 551:\nequal\n\nWidth = 481:\ngreater\n\nWidth = 573:\nlogicalnot\n\nWidth = 535:\nplusminus\n\nWidth = 453:\nmultiply\n\nWidth = 584:\ndivide\n\nWidth = 596:\nminus\n\nWidth = 583:\nuni2213\n [code: width-outliers]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        It is a common practice to have math signs sharing the same width\n        (preferably the same width as tabular figures accross the entire font family).\n\n        This probably comes from the will to avoid additional tabular math signs\n        knowing that their design can easily share the same width.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Checking Vertical Metric Linegaps.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/linegaps>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2 sTypoLineGap and hhea lineGap are both 0.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The LineGap value is a space added to the line height created by the union\n        of the (typo/hhea)Ascender and (typo/hhea)Descender. It is handled differently\n        according to the environment.\n\n        This leading value will be added above the text line in most desktop apps.\n        It will be shared above and under in web browsers, and ignored in Windows\n        if Use_Typo_Metrics is disabled.\n\n        For better linespacing consistency across platforms,\n        (typo/hhea)LineGap values must be 0.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Checking STAT table entries in static fonts.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/STAT_in_statics>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: has_STAT_table",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Adobe feature syntax allows for the definition of a STAT table. Fonts built\n        with a hand-coded STAT table in feature syntax may be built either as static\n        or variable, but will end up with the same STAT table.\n\n        This is a problem, because a STAT table which works on variable fonts\n        will not be appropriate for static instances. The examples in the OpenType spec\n        of non-variable fonts with a STAT table show that the table entries must be\n        restricted to those entries which refer to the static font's position in\n        the designspace. i.e. a Regular weight static should only have the following\n        entry for the weight axis:\n\n        <AxisIndex value=\"0\"/>\n        <Flags value=\"2\"/>  <!-- ElidableAxisValueName -->\n        <ValueNameID value=\"265\"/>  <!-- Regular -->\n        <Value value=\"400.0\"/>\n\n        However, if the STAT table intended for a variable font is compiled into a\n        static, it will have many entries for this axis. In this case, Windows will\n        read the first entry only, causing all instances to report themselves\n        as \"Thin Condensed\".\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check accent of Lcaron, dcaron, lcaron, tcaron (derived from com.google.fonts/check/alt_caron)",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Universal>",
                        "<FontBakeryCheck:com.google.fonts/check/alt_caron:googlefonts>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Looks good!",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Lcaron, dcaron, lcaron, tcaron should NOT be composed with quoteright\n        or quotesingle or comma or caron(comb). It should be composed with a\n        distinctive glyph which doesn't look like an apostrophe.\n\n        Source:\n        https://ilovetypography.com/2009/01/24/on-diacritics/\n        http://diacritics.typo.cz/index.php?id=5\n        https://www.typotheque.com/articles/lcaron\n    ",
                    "result": "PASS"
                }
            ],
            "key": [
                "<Section: Universal>",
                null,
                null
            ],
            "result": {
                "INFO": 8,
                "PASS": 66,
                "SKIP": 36,
                "WARN": 16
            }
        },
        {
            "checks": [
                {
                    "description": "Is the CFF subr/gsubr call depth > 10?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.cff>",
                        "<FontBakeryCheck:com.adobe.fonts/check/cff_call_depth>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_cff",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Per \"The Type 2 Charstring Format, Technical Note #5177\",\n        the \"Subr nesting, stack limit\" is 10.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Is the CFF2 subr/gsubr call depth > 10?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.cff>",
                        "<FontBakeryCheck:com.adobe.fonts/check/cff2_call_depth>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_cff2",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Per \"The CFF2 CharString Format\", the \"Subr nesting, stack limit\" is 10.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Does the font use deprecated CFF operators or operations?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.cff>",
                        "<FontBakeryCheck:com.adobe.fonts/check/cff_deprecated_operators>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_cff",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The 'dotsection' operator and the use of 'endchar' to build accented characters\n        from the Adobe Standard Encoding Character Set (\"seac\") are deprecated in CFF.\n        Adobe recommends repairing any fonts that use these, especially endchar-as-seac,\n        because a rendering issue was discovered in Microsoft Word with a font that\n        makes use of this operation. The check treats that usage as a FAIL.\n        There are no known ill effects of using dotsection, so that check is a WARN.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Is the CFF subr/gsubr call depth > 10?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.cff>",
                        "<FontBakeryCheck:com.adobe.fonts/check/cff_call_depth>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_cff",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Per \"The Type 2 Charstring Format, Technical Note #5177\",\n        the \"Subr nesting, stack limit\" is 10.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Is the CFF2 subr/gsubr call depth > 10?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.cff>",
                        "<FontBakeryCheck:com.adobe.fonts/check/cff2_call_depth>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_cff2",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Per \"The CFF2 CharString Format\", the \"Subr nesting, stack limit\" is 10.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Does the font use deprecated CFF operators or operations?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.cff>",
                        "<FontBakeryCheck:com.adobe.fonts/check/cff_deprecated_operators>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_cff",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The 'dotsection' operator and the use of 'endchar' to build accented characters\n        from the Adobe Standard Encoding Character Set (\"seac\") are deprecated in CFF.\n        Adobe recommends repairing any fonts that use these, especially endchar-as-seac,\n        because a rendering issue was discovered in Microsoft Word with a font that\n        makes use of this operation. The check treats that usage as a FAIL.\n        There are no known ill effects of using dotsection, so that check is a WARN.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Is the CFF subr/gsubr call depth > 10?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.cff>",
                        "<FontBakeryCheck:com.adobe.fonts/check/cff_call_depth>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_cff",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Per \"The Type 2 Charstring Format, Technical Note #5177\",\n        the \"Subr nesting, stack limit\" is 10.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Is the CFF2 subr/gsubr call depth > 10?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.cff>",
                        "<FontBakeryCheck:com.adobe.fonts/check/cff2_call_depth>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_cff2",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Per \"The CFF2 CharString Format\", the \"Subr nesting, stack limit\" is 10.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Does the font use deprecated CFF operators or operations?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.cff>",
                        "<FontBakeryCheck:com.adobe.fonts/check/cff_deprecated_operators>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_cff",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The 'dotsection' operator and the use of 'endchar' to build accented characters\n        from the Adobe Standard Encoding Character Set (\"seac\") are deprecated in CFF.\n        Adobe recommends repairing any fonts that use these, especially endchar-as-seac,\n        because a rendering issue was discovered in Microsoft Word with a font that\n        makes use of this operation. The check treats that usage as a FAIL.\n        There are no known ill effects of using dotsection, so that check is a WARN.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Is the CFF subr/gsubr call depth > 10?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.cff>",
                        "<FontBakeryCheck:com.adobe.fonts/check/cff_call_depth>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_cff",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Per \"The Type 2 Charstring Format, Technical Note #5177\",\n        the \"Subr nesting, stack limit\" is 10.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Is the CFF2 subr/gsubr call depth > 10?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.cff>",
                        "<FontBakeryCheck:com.adobe.fonts/check/cff2_call_depth>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_cff2",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Per \"The CFF2 CharString Format\", the \"Subr nesting, stack limit\" is 10.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Does the font use deprecated CFF operators or operations?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.cff>",
                        "<FontBakeryCheck:com.adobe.fonts/check/cff_deprecated_operators>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_cff",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The 'dotsection' operator and the use of 'endchar' to build accented characters\n        from the Adobe Standard Encoding Character Set (\"seac\") are deprecated in CFF.\n        Adobe recommends repairing any fonts that use these, especially endchar-as-seac,\n        because a rendering issue was discovered in Microsoft Word with a font that\n        makes use of this operation. The check treats that usage as a FAIL.\n        There are no known ill effects of using dotsection, so that check is a WARN.\n    ",
                    "result": "SKIP"
                }
            ],
            "key": [
                "<Section: fontbakery.profiles.cff>",
                null,
                null
            ],
            "result": {
                "SKIP": 12
            }
        },
        {
            "checks": [
                {
                    "description": "Fonts have equal unicode encodings?",
                    "key": [
                        "<Section: fontbakery.profiles.cmap>",
                        "<FontBakeryCheck:com.google.fonts/check/family/equal_unicode_encodings>",
                        []
                    ],
                    "logs": [
                        {
                            "message": "Fonts have equal unicode encodings.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                }
            ],
            "key": [
                "<Section: fontbakery.profiles.cmap>",
                null,
                null
            ],
            "result": {
                "PASS": 1
            }
        },
        {
            "checks": [
                {
                    "description": "Make sure all font files have the same version value.",
                    "key": [
                        "<Section: fontbakery.profiles.head>",
                        "<FontBakeryCheck:com.google.fonts/check/family/equal_font_versions>",
                        []
                    ],
                    "logs": [
                        {
                            "message": "All font files have the same version.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Checking unitsPerEm value is reasonable.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.head>",
                        "<FontBakeryCheck:com.google.fonts/check/unitsperem>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Filtered: Google Fonts has a stricter policy which is enforced by com.google.fonts/check/unitsperem_strict",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the OpenType spec:\n\n        The value of unitsPerEm at the head table must be a value\n        between 16 and 16384. Any value in this range is valid.\n\n        In fonts that have TrueType outlines, a power of 2 is recommended\n        as this allows performance optimizations in some rasterizers.\n\n        But 1000 is a commonly used value. And 2000 may become\n        increasingly more common on Variable Fonts.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Checking font version fields (head and name table).",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.head>",
                        "<FontBakeryCheck:com.google.fonts/check/font_version>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "All font version fields match.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Checking head.macStyle value.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.head>",
                        "<FontBakeryCheck:com.google.fonts/check/mac_style>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "head macStyle ITALIC bit is properly set.",
                            "status": "PASS",
                            "traceback": null
                        },
                        {
                            "message": "head macStyle BOLD bit is properly set.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The values of the flags on the macStyle entry on the 'head' OpenType table\n        that describe whether a font is bold and/or italic must be coherent with the\n        actual style of the font as inferred by its filename.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Checking unitsPerEm value is reasonable.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.head>",
                        "<FontBakeryCheck:com.google.fonts/check/unitsperem>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Filtered: Google Fonts has a stricter policy which is enforced by com.google.fonts/check/unitsperem_strict",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the OpenType spec:\n\n        The value of unitsPerEm at the head table must be a value\n        between 16 and 16384. Any value in this range is valid.\n\n        In fonts that have TrueType outlines, a power of 2 is recommended\n        as this allows performance optimizations in some rasterizers.\n\n        But 1000 is a commonly used value. And 2000 may become\n        increasingly more common on Variable Fonts.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Checking font version fields (head and name table).",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.head>",
                        "<FontBakeryCheck:com.google.fonts/check/font_version>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "All font version fields match.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Checking head.macStyle value.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.head>",
                        "<FontBakeryCheck:com.google.fonts/check/mac_style>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "head macStyle ITALIC bit is properly set.",
                            "status": "PASS",
                            "traceback": null
                        },
                        {
                            "message": "head macStyle BOLD bit is properly set.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The values of the flags on the macStyle entry on the 'head' OpenType table\n        that describe whether a font is bold and/or italic must be coherent with the\n        actual style of the font as inferred by its filename.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Checking unitsPerEm value is reasonable.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.head>",
                        "<FontBakeryCheck:com.google.fonts/check/unitsperem>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Filtered: Google Fonts has a stricter policy which is enforced by com.google.fonts/check/unitsperem_strict",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the OpenType spec:\n\n        The value of unitsPerEm at the head table must be a value\n        between 16 and 16384. Any value in this range is valid.\n\n        In fonts that have TrueType outlines, a power of 2 is recommended\n        as this allows performance optimizations in some rasterizers.\n\n        But 1000 is a commonly used value. And 2000 may become\n        increasingly more common on Variable Fonts.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Checking font version fields (head and name table).",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.head>",
                        "<FontBakeryCheck:com.google.fonts/check/font_version>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "All font version fields match.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Checking head.macStyle value.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.head>",
                        "<FontBakeryCheck:com.google.fonts/check/mac_style>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "head macStyle ITALIC bit is properly set.",
                            "status": "PASS",
                            "traceback": null
                        },
                        {
                            "message": "head macStyle BOLD bit is properly set.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The values of the flags on the macStyle entry on the 'head' OpenType table\n        that describe whether a font is bold and/or italic must be coherent with the\n        actual style of the font as inferred by its filename.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Checking unitsPerEm value is reasonable.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.head>",
                        "<FontBakeryCheck:com.google.fonts/check/unitsperem>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Filtered: Google Fonts has a stricter policy which is enforced by com.google.fonts/check/unitsperem_strict",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the OpenType spec:\n\n        The value of unitsPerEm at the head table must be a value\n        between 16 and 16384. Any value in this range is valid.\n\n        In fonts that have TrueType outlines, a power of 2 is recommended\n        as this allows performance optimizations in some rasterizers.\n\n        But 1000 is a commonly used value. And 2000 may become\n        increasingly more common on Variable Fonts.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Checking font version fields (head and name table).",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.head>",
                        "<FontBakeryCheck:com.google.fonts/check/font_version>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "All font version fields match.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Checking head.macStyle value.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.head>",
                        "<FontBakeryCheck:com.google.fonts/check/mac_style>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "head macStyle ITALIC bit is properly set.",
                            "status": "PASS",
                            "traceback": null
                        },
                        {
                            "message": "head macStyle BOLD bit is properly set.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The values of the flags on the macStyle entry on the 'head' OpenType table\n        that describe whether a font is bold and/or italic must be coherent with the\n        actual style of the font as inferred by its filename.\n    ",
                    "result": "PASS"
                }
            ],
            "key": [
                "<Section: fontbakery.profiles.head>",
                null,
                null
            ],
            "result": {
                "PASS": 9,
                "SKIP": 4
            }
        },
        {
            "checks": [
                {
                    "description": "Fonts have consistent PANOSE proportion?",
                    "key": [
                        "<Section: fontbakery.profiles.os2>",
                        "<FontBakeryCheck:com.google.fonts/check/family/panose_proportion>",
                        []
                    ],
                    "logs": [
                        {
                            "message": "Fonts have consistent PANOSE proportion.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Fonts have consistent PANOSE family type?",
                    "key": [
                        "<Section: fontbakery.profiles.os2>",
                        "<FontBakeryCheck:com.google.fonts/check/family/panose_familytype>",
                        []
                    ],
                    "logs": [
                        {
                            "message": "Fonts have consistent PANOSE family type.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Check that OS/2.fsSelection bold & italic settings are unique for each NameID1",
                    "key": [
                        "<Section: fontbakery.profiles.os2>",
                        "<FontBakeryCheck:com.adobe.fonts/check/family/bold_italic_unique_for_nameid1>",
                        []
                    ],
                    "logs": [
                        {
                            "message": "The OS/2.fsSelection bold & italic settings were unique within each compatible family group.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Per the OpenType spec: name ID 1 'is used in combination with Font Subfamily\n        name (name ID 2), and should be shared among at most four fonts that differ\n        only in weight or style.\n\n        This four-way distinction should also be reflected in the OS/2.fsSelection\n        field, using bits 0 and 5.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check if OS/2 xAvgCharWidth is correct.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.os2>",
                        "<FontBakeryCheck:com.google.fonts/check/xavgcharwidth>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2 xAvgCharWidth value is correct.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Check if OS/2 fsSelection matches head macStyle bold and italic bits.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.os2>",
                        "<FontBakeryCheck:com.adobe.fonts/check/fsselection_matches_macstyle>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The OS/2.fsSelection and head.macStyle bold and italic settings match.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The bold and italic bits in OS/2.fsSelection must match the bold and italic\n        bits in head.macStyle per the OpenType spec.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check code page character ranges",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.os2>",
                        "<FontBakeryCheck:com.google.fonts/check/code_pages>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "At least one code page is defined.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        At least some programs (such as Word and Sublime Text) under Windows 7\n        do not recognize fonts unless code page bits are properly set on the\n        ulCodePageRange1 (and/or ulCodePageRange2) fields of the OS/2 table.\n\n        More specifically, the fonts are selectable in the font menu, but whichever\n        Windows API these applications use considers them unsuitable for any\n        character set, so anything set in these fonts is rendered with Arial as a\n        fallback font.\n\n        This check currently does not identify which code pages should be set.\n        Auto-detecting coverage is not trivial since the OpenType specification\n        leaves the interpretation of whether a given code page is \"functional\"\n        or not open to the font developer to decide.\n\n        So here we simply detect as a FAIL when a given font has no code page\n        declared at all.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Checking OS/2 achVendID against configuration.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.os2>",
                        "<FontBakeryCheck:com.thetypefounders/check/vendor_id>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Add the `vendor_id` key to a `fontbakery.yaml` file on your font project directory to enable this check.\nYou'll also need to use the `--configuration` flag when invoking fontbakery.",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        When a font project's Vendor ID is specified explicitly on FontBakery's\n        configuration file, all binaries must have a matching vendor identifier\n        value in the OS/2 table.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Checking OS/2 fsSelection value.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.os2>",
                        "<FontBakeryCheck:com.google.fonts/check/fsselection>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2 fsSelection REGULAR bit is properly set.",
                            "status": "PASS",
                            "traceback": null
                        },
                        {
                            "message": "OS/2 fsSelection ITALIC bit is properly set.",
                            "status": "PASS",
                            "traceback": null
                        },
                        {
                            "message": "OS/2 fsSelection BOLD bit is properly set.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Check if OS/2 xAvgCharWidth is correct.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.os2>",
                        "<FontBakeryCheck:com.google.fonts/check/xavgcharwidth>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2 xAvgCharWidth value is correct.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Check if OS/2 fsSelection matches head macStyle bold and italic bits.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.os2>",
                        "<FontBakeryCheck:com.adobe.fonts/check/fsselection_matches_macstyle>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The OS/2.fsSelection and head.macStyle bold and italic settings match.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The bold and italic bits in OS/2.fsSelection must match the bold and italic\n        bits in head.macStyle per the OpenType spec.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check code page character ranges",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.os2>",
                        "<FontBakeryCheck:com.google.fonts/check/code_pages>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "At least one code page is defined.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        At least some programs (such as Word and Sublime Text) under Windows 7\n        do not recognize fonts unless code page bits are properly set on the\n        ulCodePageRange1 (and/or ulCodePageRange2) fields of the OS/2 table.\n\n        More specifically, the fonts are selectable in the font menu, but whichever\n        Windows API these applications use considers them unsuitable for any\n        character set, so anything set in these fonts is rendered with Arial as a\n        fallback font.\n\n        This check currently does not identify which code pages should be set.\n        Auto-detecting coverage is not trivial since the OpenType specification\n        leaves the interpretation of whether a given code page is \"functional\"\n        or not open to the font developer to decide.\n\n        So here we simply detect as a FAIL when a given font has no code page\n        declared at all.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Checking OS/2 achVendID against configuration.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.os2>",
                        "<FontBakeryCheck:com.thetypefounders/check/vendor_id>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Add the `vendor_id` key to a `fontbakery.yaml` file on your font project directory to enable this check.\nYou'll also need to use the `--configuration` flag when invoking fontbakery.",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        When a font project's Vendor ID is specified explicitly on FontBakery's\n        configuration file, all binaries must have a matching vendor identifier\n        value in the OS/2 table.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Checking OS/2 fsSelection value.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.os2>",
                        "<FontBakeryCheck:com.google.fonts/check/fsselection>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2 fsSelection REGULAR bit is properly set.",
                            "status": "PASS",
                            "traceback": null
                        },
                        {
                            "message": "OS/2 fsSelection ITALIC bit is properly set.",
                            "status": "PASS",
                            "traceback": null
                        },
                        {
                            "message": "OS/2 fsSelection BOLD bit is properly set.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Check if OS/2 xAvgCharWidth is correct.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.os2>",
                        "<FontBakeryCheck:com.google.fonts/check/xavgcharwidth>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2 xAvgCharWidth value is correct.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Check if OS/2 fsSelection matches head macStyle bold and italic bits.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.os2>",
                        "<FontBakeryCheck:com.adobe.fonts/check/fsselection_matches_macstyle>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The OS/2.fsSelection and head.macStyle bold and italic settings match.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The bold and italic bits in OS/2.fsSelection must match the bold and italic\n        bits in head.macStyle per the OpenType spec.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check code page character ranges",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.os2>",
                        "<FontBakeryCheck:com.google.fonts/check/code_pages>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "At least one code page is defined.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        At least some programs (such as Word and Sublime Text) under Windows 7\n        do not recognize fonts unless code page bits are properly set on the\n        ulCodePageRange1 (and/or ulCodePageRange2) fields of the OS/2 table.\n\n        More specifically, the fonts are selectable in the font menu, but whichever\n        Windows API these applications use considers them unsuitable for any\n        character set, so anything set in these fonts is rendered with Arial as a\n        fallback font.\n\n        This check currently does not identify which code pages should be set.\n        Auto-detecting coverage is not trivial since the OpenType specification\n        leaves the interpretation of whether a given code page is \"functional\"\n        or not open to the font developer to decide.\n\n        So here we simply detect as a FAIL when a given font has no code page\n        declared at all.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Checking OS/2 achVendID against configuration.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.os2>",
                        "<FontBakeryCheck:com.thetypefounders/check/vendor_id>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Add the `vendor_id` key to a `fontbakery.yaml` file on your font project directory to enable this check.\nYou'll also need to use the `--configuration` flag when invoking fontbakery.",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        When a font project's Vendor ID is specified explicitly on FontBakery's\n        configuration file, all binaries must have a matching vendor identifier\n        value in the OS/2 table.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Checking OS/2 fsSelection value.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.os2>",
                        "<FontBakeryCheck:com.google.fonts/check/fsselection>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2 fsSelection REGULAR bit is properly set.",
                            "status": "PASS",
                            "traceback": null
                        },
                        {
                            "message": "OS/2 fsSelection ITALIC bit is properly set.",
                            "status": "PASS",
                            "traceback": null
                        },
                        {
                            "message": "OS/2 fsSelection BOLD bit is properly set.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Check if OS/2 xAvgCharWidth is correct.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.os2>",
                        "<FontBakeryCheck:com.google.fonts/check/xavgcharwidth>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2 xAvgCharWidth value is correct.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Check if OS/2 fsSelection matches head macStyle bold and italic bits.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.os2>",
                        "<FontBakeryCheck:com.adobe.fonts/check/fsselection_matches_macstyle>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The OS/2.fsSelection and head.macStyle bold and italic settings match.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The bold and italic bits in OS/2.fsSelection must match the bold and italic\n        bits in head.macStyle per the OpenType spec.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check code page character ranges",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.os2>",
                        "<FontBakeryCheck:com.google.fonts/check/code_pages>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "At least one code page is defined.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        At least some programs (such as Word and Sublime Text) under Windows 7\n        do not recognize fonts unless code page bits are properly set on the\n        ulCodePageRange1 (and/or ulCodePageRange2) fields of the OS/2 table.\n\n        More specifically, the fonts are selectable in the font menu, but whichever\n        Windows API these applications use considers them unsuitable for any\n        character set, so anything set in these fonts is rendered with Arial as a\n        fallback font.\n\n        This check currently does not identify which code pages should be set.\n        Auto-detecting coverage is not trivial since the OpenType specification\n        leaves the interpretation of whether a given code page is \"functional\"\n        or not open to the font developer to decide.\n\n        So here we simply detect as a FAIL when a given font has no code page\n        declared at all.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Checking OS/2 achVendID against configuration.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.os2>",
                        "<FontBakeryCheck:com.thetypefounders/check/vendor_id>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Add the `vendor_id` key to a `fontbakery.yaml` file on your font project directory to enable this check.\nYou'll also need to use the `--configuration` flag when invoking fontbakery.",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        When a font project's Vendor ID is specified explicitly on FontBakery's\n        configuration file, all binaries must have a matching vendor identifier\n        value in the OS/2 table.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Checking OS/2 fsSelection value.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.os2>",
                        "<FontBakeryCheck:com.google.fonts/check/fsselection>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "OS/2 fsSelection REGULAR bit is properly set.",
                            "status": "PASS",
                            "traceback": null
                        },
                        {
                            "message": "OS/2 fsSelection ITALIC bit is properly set.",
                            "status": "PASS",
                            "traceback": null
                        },
                        {
                            "message": "OS/2 fsSelection BOLD bit is properly set.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                }
            ],
            "key": [
                "<Section: fontbakery.profiles.os2>",
                null,
                null
            ],
            "result": {
                "PASS": 19,
                "SKIP": 4
            }
        },
        {
            "checks": [
                {
                    "description": "Fonts have consistent underline thickness?",
                    "key": [
                        "<Section: fontbakery.profiles.post>",
                        "<FontBakeryCheck:com.google.fonts/check/family/underline_thickness>",
                        []
                    ],
                    "logs": [
                        {
                            "message": "Fonts have consistent underline thickness.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Dave C Lemon (Adobe Type Team) recommends setting the underline thickness to be\n        consistent across the family.\n\n        If thicknesses are not family consistent, words set on the same line which have\n        different styles look strange.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Font has correct post table version?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.post>",
                        "<FontBakeryCheck:com.google.fonts/check/post_table_version>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Post table format 3 use has niche use case problems.Please review the check rationale for additional details. [code: post-table-version]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Format 2.5 of the 'post' table was deprecated in OpenType 1.3 and\n        should not be used.\n\n        According to Thomas Phinney, the possible problem with post format 3\n        is that under the right combination of circumstances, one can generate\n        PDF from a font with a post format 3 table, and not have accurate backing\n        store for any text that has non-default glyphs for a given codepoint.\n\n        It will look fine but not be searchable. This can affect Latin text with\n        high-end typography, and some complex script writing systems, especially\n        with higher-quality fonts. Those circumstances generally involve creating\n        a PDF by first printing a PostScript stream to disk, and then creating a\n        PDF from that stream without reference to the original source document.\n        There are some workflows where this applies,but these are not common\n        use cases.\n\n        Apple recommends against use of post format version 4 as \"no longer\n        necessary and should be avoided\". Please see the Apple TrueType reference\n        documentation for additional details.\n\n        https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6post.html\n\n        Acceptable post format versions are 2 and 3 for TTF and OTF CFF2 builds,\n        and post format 3 for CFF builds.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Checking post.italicAngle value. (derived from com.google.fonts/check/italic_angle)",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.post>",
                        "<FontBakeryCheck:com.google.fonts/check/italic_angle:googlefonts>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Value of post.italicAngle is 0.0 with style=\"Bold\".",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The 'post' table italicAngle property should be a reasonable amount, likely\n        not more than 30\u00b0. Note that in the OpenType specification, the value is\n        negative for a rightward lean.\n\n        https://docs.microsoft.com/en-us/typography/opentype/spec/post\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Font has correct post table version?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.post>",
                        "<FontBakeryCheck:com.google.fonts/check/post_table_version>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Post table format 3 use has niche use case problems.Please review the check rationale for additional details. [code: post-table-version]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Format 2.5 of the 'post' table was deprecated in OpenType 1.3 and\n        should not be used.\n\n        According to Thomas Phinney, the possible problem with post format 3\n        is that under the right combination of circumstances, one can generate\n        PDF from a font with a post format 3 table, and not have accurate backing\n        store for any text that has non-default glyphs for a given codepoint.\n\n        It will look fine but not be searchable. This can affect Latin text with\n        high-end typography, and some complex script writing systems, especially\n        with higher-quality fonts. Those circumstances generally involve creating\n        a PDF by first printing a PostScript stream to disk, and then creating a\n        PDF from that stream without reference to the original source document.\n        There are some workflows where this applies,but these are not common\n        use cases.\n\n        Apple recommends against use of post format version 4 as \"no longer\n        necessary and should be avoided\". Please see the Apple TrueType reference\n        documentation for additional details.\n\n        https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6post.html\n\n        Acceptable post format versions are 2 and 3 for TTF and OTF CFF2 builds,\n        and post format 3 for CFF builds.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Checking post.italicAngle value. (derived from com.google.fonts/check/italic_angle)",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.post>",
                        "<FontBakeryCheck:com.google.fonts/check/italic_angle:googlefonts>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Overridden check status, original: <Status WARN>",
                            "status": "DEBUG",
                            "traceback": null
                        },
                        {
                            "message": "The value of post.italicAngle is positive, which is likely a mistake and should become negative for right-leaning Italics.\npost.italicAngle: 10.0\nangle calculated from outlines: -0.0) [code: positive]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The 'post' table italicAngle property should be a reasonable amount, likely\n        not more than 30\u00b0. Note that in the OpenType specification, the value is\n        negative for a rightward lean.\n\n        https://docs.microsoft.com/en-us/typography/opentype/spec/post\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "Font has correct post table version?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.post>",
                        "<FontBakeryCheck:com.google.fonts/check/post_table_version>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Post table format 3 use has niche use case problems.Please review the check rationale for additional details. [code: post-table-version]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Format 2.5 of the 'post' table was deprecated in OpenType 1.3 and\n        should not be used.\n\n        According to Thomas Phinney, the possible problem with post format 3\n        is that under the right combination of circumstances, one can generate\n        PDF from a font with a post format 3 table, and not have accurate backing\n        store for any text that has non-default glyphs for a given codepoint.\n\n        It will look fine but not be searchable. This can affect Latin text with\n        high-end typography, and some complex script writing systems, especially\n        with higher-quality fonts. Those circumstances generally involve creating\n        a PDF by first printing a PostScript stream to disk, and then creating a\n        PDF from that stream without reference to the original source document.\n        There are some workflows where this applies,but these are not common\n        use cases.\n\n        Apple recommends against use of post format version 4 as \"no longer\n        necessary and should be avoided\". Please see the Apple TrueType reference\n        documentation for additional details.\n\n        https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6post.html\n\n        Acceptable post format versions are 2 and 3 for TTF and OTF CFF2 builds,\n        and post format 3 for CFF builds.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Checking post.italicAngle value. (derived from com.google.fonts/check/italic_angle)",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.post>",
                        "<FontBakeryCheck:com.google.fonts/check/italic_angle:googlefonts>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Overridden check status, original: <Status WARN>",
                            "status": "DEBUG",
                            "traceback": null
                        },
                        {
                            "message": "The value of post.italicAngle is positive, which is likely a mistake and should become negative for right-leaning Italics.\npost.italicAngle: 10.0\nangle calculated from outlines: -0.0) [code: positive]",
                            "status": "FAIL",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The 'post' table italicAngle property should be a reasonable amount, likely\n        not more than 30\u00b0. Note that in the OpenType specification, the value is\n        negative for a rightward lean.\n\n        https://docs.microsoft.com/en-us/typography/opentype/spec/post\n    ",
                    "result": "FAIL"
                },
                {
                    "description": "Font has correct post table version?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.post>",
                        "<FontBakeryCheck:com.google.fonts/check/post_table_version>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Post table format 3 use has niche use case problems.Please review the check rationale for additional details. [code: post-table-version]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Format 2.5 of the 'post' table was deprecated in OpenType 1.3 and\n        should not be used.\n\n        According to Thomas Phinney, the possible problem with post format 3\n        is that under the right combination of circumstances, one can generate\n        PDF from a font with a post format 3 table, and not have accurate backing\n        store for any text that has non-default glyphs for a given codepoint.\n\n        It will look fine but not be searchable. This can affect Latin text with\n        high-end typography, and some complex script writing systems, especially\n        with higher-quality fonts. Those circumstances generally involve creating\n        a PDF by first printing a PostScript stream to disk, and then creating a\n        PDF from that stream without reference to the original source document.\n        There are some workflows where this applies,but these are not common\n        use cases.\n\n        Apple recommends against use of post format version 4 as \"no longer\n        necessary and should be avoided\". Please see the Apple TrueType reference\n        documentation for additional details.\n\n        https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6post.html\n\n        Acceptable post format versions are 2 and 3 for TTF and OTF CFF2 builds,\n        and post format 3 for CFF builds.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Checking post.italicAngle value. (derived from com.google.fonts/check/italic_angle)",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.post>",
                        "<FontBakeryCheck:com.google.fonts/check/italic_angle:googlefonts>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Value of post.italicAngle is 0.0 with style=\"Regular\".",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The 'post' table italicAngle property should be a reasonable amount, likely\n        not more than 30\u00b0. Note that in the OpenType specification, the value is\n        negative for a rightward lean.\n\n        https://docs.microsoft.com/en-us/typography/opentype/spec/post\n    ",
                    "result": "PASS"
                }
            ],
            "key": [
                "<Section: fontbakery.profiles.post>",
                null,
                null
            ],
            "result": {
                "FAIL": 2,
                "PASS": 3,
                "WARN": 4
            }
        },
        {
            "checks": [
                {
                    "description": "Verify that each group of fonts with the same nameID 1 has maximum of 4 fonts.",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.adobe.fonts/check/family/max_4_fonts_per_family_name>",
                        []
                    ],
                    "logs": [
                        {
                            "message": "There were no more than 4 fonts per family name.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Per the OpenType spec:\n\n        'The Font Family name [...] should be shared among at most four fonts that\n        differ only in weight or style [...]'\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Verify that family names in the name table are consistent across all fonts in the family. Checks Typographic Family name (nameID 16) if present, otherwise uses Font Family name (nameID 1)",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.adobe.fonts/check/family/consistent_family_name>",
                        []
                    ],
                    "logs": [
                        {
                            "message": "Font family names are consistent across the family.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Per the OpenType spec:\n            * \"...many existing applications that use this pair of names assume that a\n              Font Family name is shared by at most four fonts that form a font\n              style-linking group\"\n            * \"For extended typographic families that includes fonts other than the\n              four basic styles(regular, italic, bold, bold italic), it is strongly\n              recommended that name IDs 16 and 17 be used in fonts to create an\n              extended, typographic grouping.\"\n            * \"If name ID 16 is absent, then name ID 1 is considered to be the\n              typographic family name.\"\n\n        https://learn.microsoft.com/en-us/typography/opentype/spec/name\n\n        Fonts within a font family all must have consistent names\n        in the Typographic Family name (nameID 16)\n        or Font Family name (nameID 1), depending on which it uses.\n\n        Inconsistent font/typographic family names across fonts in a family\n        can result in unexpected behaviors, such as broken style linking.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check name table for empty records.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.adobe.fonts/check/name/empty_records>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "No empty name table records found.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check the name table for empty records,\n        as this can cause problems in Adobe apps.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Description strings in the name table must not contain copyright info.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.google.fonts/check/name/no_copyright_on_description>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Description strings in the name table do not contain any copyright string.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Checking correctness of monospaced metadata.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.google.fonts/check/monospace>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font is not monospaced and all related metadata look good. [code: good]",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        There are various metadata in the OpenType spec to specify if a font is\n        monospaced or not. If the font is not truly monospaced, then no monospaced\n        metadata should be set (as sometimes they mistakenly are...)\n\n        Requirements for monospace fonts:\n\n        * post.isFixedPitch - \"Set to 0 if the font is proportionally spaced,\n          non-zero if the font is not proportionally spaced (monospaced)\"\n          (https://www.microsoft.com/typography/otspec/post.htm)\n\n        * hhea.advanceWidthMax must be correct, meaning no glyph's width value\n          is greater. (https://www.microsoft.com/typography/otspec/hhea.htm)\n\n        * OS/2.panose.bProportion must be set to 9 (monospace) on latin text fonts.\n\n        * OS/2.panose.bSpacing must be set to 3 (monospace) on latin hand written\n          or latin symbol fonts.\n\n        * Spec says: \"The PANOSE definition contains ten digits each of which currently\n          describes up to sixteen variations. Windows uses bFamilyType, bSerifStyle\n          and bProportion in the font mapper to determine family type. It also uses\n          bProportion to determine if the font is monospaced.\"\n          (https://www.microsoft.com/typography/otspec/os2.htm#pan\n           https://monotypecom-test.monotype.de/services/pan2)\n\n        * OS/2.xAvgCharWidth must be set accurately.\n          \"OS/2.xAvgCharWidth is used when rendering monospaced fonts,\n          at least by Windows GDI\"\n          (http://typedrawers.com/discussion/comment/15397/#Comment_15397)\n\n        Also we should report an error for glyphs not of average width.\n\n\n        Please also note:\n\n        Thomas Phinney told us that a few years ago (as of December 2019), if you gave\n        a font a monospace flag in Panose, Microsoft Word would ignore the actual\n        advance widths and treat it as monospaced.\n\n        Source: https://typedrawers.com/discussion/comment/45140/#Comment_45140\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Does full font name begin with the font family name?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.google.fonts/check/name/match_familyname_fullfont>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Full font name begins with the font family name.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The FULL_FONT_NAME entry in the \u2018name\u2019 table should start with the same string\n        as the Family Name (FONT_FAMILY_NAME, TYPOGRAPHIC_FAMILY_NAME or\n        WWS_FAMILY_NAME).\n\n        If the Family Name is not included as the first part of the Full Font Name, and\n        the user embeds the font in a document using a Microsoft Office app, the app\n        will fail to render the font when it opens the document again.\n\n        NOTE: Up until version 1.5, the OpenType spec included the following exception\n        in the definition of Full Font Name:\n\n            \"An exception to the [above] definition of Full font name is for Microsoft\n            platform strings for CFF OpenType fonts: in this case, the Full font name\n            string must be identical to the PostScript FontName in the CFF Name INDEX.\"\n\n        https://docs.microsoft.com/en-us/typography/opentype/otspec150/name#name-ids\n    ",
                    "result": "PASS"
                },
                {
                    "description": "PostScript name follows OpenType specification requirements?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.adobe.fonts/check/postscript_name>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "PostScript name follows requirements. [code: psname-ok]",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Font follows the family naming recommendations?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.google.fonts/check/family_naming_recommendations>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font follows the family naming recommendations.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "CFF table FontName must match name table ID 6 (PostScript name).",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.adobe.fonts/check/name/postscript_vs_cff>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_cff",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The PostScript name entries in the font's 'name' table should match\n        the FontName string in the 'CFF ' table.\n\n        The 'CFF ' table has a lot of information that is duplicated in other tables.\n        This information should be consistent across tables, because there's\n        no guarantee which table an app will get the data from.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Name table ID 6 (PostScript name) must be consistent across platforms.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.adobe.fonts/check/name/postscript_name_consistency>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Entries in the \"name\" table for ID 6 (PostScript name) are consistent.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The PostScript name entries in the font's 'name' table should be\n        consistent across platforms.\n\n        This is the TTF/CFF2 equivalent of the CFF 'name/postscript_vs_cff' check.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check name table IDs 1, 2, 16, 17 to conform to Italic style.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.google.fonts/check/name/italic_names>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font is not Italic.",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This check ensures that several entries in the name table\n        conform to the font's Upright or Italic style,\n        namely IDs 1 & 2 as well as 16 & 17 if they're present.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check name table for empty records.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.adobe.fonts/check/name/empty_records>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "No empty name table records found.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check the name table for empty records,\n        as this can cause problems in Adobe apps.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Description strings in the name table must not contain copyright info.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.google.fonts/check/name/no_copyright_on_description>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Description strings in the name table do not contain any copyright string.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Checking correctness of monospaced metadata.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.google.fonts/check/monospace>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font is not monospaced and all related metadata look good. [code: good]",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        There are various metadata in the OpenType spec to specify if a font is\n        monospaced or not. If the font is not truly monospaced, then no monospaced\n        metadata should be set (as sometimes they mistakenly are...)\n\n        Requirements for monospace fonts:\n\n        * post.isFixedPitch - \"Set to 0 if the font is proportionally spaced,\n          non-zero if the font is not proportionally spaced (monospaced)\"\n          (https://www.microsoft.com/typography/otspec/post.htm)\n\n        * hhea.advanceWidthMax must be correct, meaning no glyph's width value\n          is greater. (https://www.microsoft.com/typography/otspec/hhea.htm)\n\n        * OS/2.panose.bProportion must be set to 9 (monospace) on latin text fonts.\n\n        * OS/2.panose.bSpacing must be set to 3 (monospace) on latin hand written\n          or latin symbol fonts.\n\n        * Spec says: \"The PANOSE definition contains ten digits each of which currently\n          describes up to sixteen variations. Windows uses bFamilyType, bSerifStyle\n          and bProportion in the font mapper to determine family type. It also uses\n          bProportion to determine if the font is monospaced.\"\n          (https://www.microsoft.com/typography/otspec/os2.htm#pan\n           https://monotypecom-test.monotype.de/services/pan2)\n\n        * OS/2.xAvgCharWidth must be set accurately.\n          \"OS/2.xAvgCharWidth is used when rendering monospaced fonts,\n          at least by Windows GDI\"\n          (http://typedrawers.com/discussion/comment/15397/#Comment_15397)\n\n        Also we should report an error for glyphs not of average width.\n\n\n        Please also note:\n\n        Thomas Phinney told us that a few years ago (as of December 2019), if you gave\n        a font a monospace flag in Panose, Microsoft Word would ignore the actual\n        advance widths and treat it as monospaced.\n\n        Source: https://typedrawers.com/discussion/comment/45140/#Comment_45140\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Does full font name begin with the font family name?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.google.fonts/check/name/match_familyname_fullfont>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Full font name begins with the font family name.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The FULL_FONT_NAME entry in the \u2018name\u2019 table should start with the same string\n        as the Family Name (FONT_FAMILY_NAME, TYPOGRAPHIC_FAMILY_NAME or\n        WWS_FAMILY_NAME).\n\n        If the Family Name is not included as the first part of the Full Font Name, and\n        the user embeds the font in a document using a Microsoft Office app, the app\n        will fail to render the font when it opens the document again.\n\n        NOTE: Up until version 1.5, the OpenType spec included the following exception\n        in the definition of Full Font Name:\n\n            \"An exception to the [above] definition of Full font name is for Microsoft\n            platform strings for CFF OpenType fonts: in this case, the Full font name\n            string must be identical to the PostScript FontName in the CFF Name INDEX.\"\n\n        https://docs.microsoft.com/en-us/typography/opentype/otspec150/name#name-ids\n    ",
                    "result": "PASS"
                },
                {
                    "description": "PostScript name follows OpenType specification requirements?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.adobe.fonts/check/postscript_name>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "PostScript name follows requirements. [code: psname-ok]",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Font follows the family naming recommendations?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.google.fonts/check/family_naming_recommendations>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font follows the family naming recommendations.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "CFF table FontName must match name table ID 6 (PostScript name).",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.adobe.fonts/check/name/postscript_vs_cff>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_cff",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The PostScript name entries in the font's 'name' table should match\n        the FontName string in the 'CFF ' table.\n\n        The 'CFF ' table has a lot of information that is duplicated in other tables.\n        This information should be consistent across tables, because there's\n        no guarantee which table an app will get the data from.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Name table ID 6 (PostScript name) must be consistent across platforms.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.adobe.fonts/check/name/postscript_name_consistency>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Entries in the \"name\" table for ID 6 (PostScript name) are consistent.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The PostScript name entries in the font's 'name' table should be\n        consistent across platforms.\n\n        This is the TTF/CFF2 equivalent of the CFF 'name/postscript_vs_cff' check.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check name table IDs 1, 2, 16, 17 to conform to Italic style.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.google.fonts/check/name/italic_names>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "All font names are good for Italic fonts.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This check ensures that several entries in the name table\n        conform to the font's Upright or Italic style,\n        namely IDs 1 & 2 as well as 16 & 17 if they're present.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check name table for empty records.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.adobe.fonts/check/name/empty_records>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "No empty name table records found.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check the name table for empty records,\n        as this can cause problems in Adobe apps.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Description strings in the name table must not contain copyright info.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.google.fonts/check/name/no_copyright_on_description>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Description strings in the name table do not contain any copyright string.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Checking correctness of monospaced metadata.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.google.fonts/check/monospace>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font is not monospaced and all related metadata look good. [code: good]",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        There are various metadata in the OpenType spec to specify if a font is\n        monospaced or not. If the font is not truly monospaced, then no monospaced\n        metadata should be set (as sometimes they mistakenly are...)\n\n        Requirements for monospace fonts:\n\n        * post.isFixedPitch - \"Set to 0 if the font is proportionally spaced,\n          non-zero if the font is not proportionally spaced (monospaced)\"\n          (https://www.microsoft.com/typography/otspec/post.htm)\n\n        * hhea.advanceWidthMax must be correct, meaning no glyph's width value\n          is greater. (https://www.microsoft.com/typography/otspec/hhea.htm)\n\n        * OS/2.panose.bProportion must be set to 9 (monospace) on latin text fonts.\n\n        * OS/2.panose.bSpacing must be set to 3 (monospace) on latin hand written\n          or latin symbol fonts.\n\n        * Spec says: \"The PANOSE definition contains ten digits each of which currently\n          describes up to sixteen variations. Windows uses bFamilyType, bSerifStyle\n          and bProportion in the font mapper to determine family type. It also uses\n          bProportion to determine if the font is monospaced.\"\n          (https://www.microsoft.com/typography/otspec/os2.htm#pan\n           https://monotypecom-test.monotype.de/services/pan2)\n\n        * OS/2.xAvgCharWidth must be set accurately.\n          \"OS/2.xAvgCharWidth is used when rendering monospaced fonts,\n          at least by Windows GDI\"\n          (http://typedrawers.com/discussion/comment/15397/#Comment_15397)\n\n        Also we should report an error for glyphs not of average width.\n\n\n        Please also note:\n\n        Thomas Phinney told us that a few years ago (as of December 2019), if you gave\n        a font a monospace flag in Panose, Microsoft Word would ignore the actual\n        advance widths and treat it as monospaced.\n\n        Source: https://typedrawers.com/discussion/comment/45140/#Comment_45140\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Does full font name begin with the font family name?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.google.fonts/check/name/match_familyname_fullfont>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Full font name begins with the font family name.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The FULL_FONT_NAME entry in the \u2018name\u2019 table should start with the same string\n        as the Family Name (FONT_FAMILY_NAME, TYPOGRAPHIC_FAMILY_NAME or\n        WWS_FAMILY_NAME).\n\n        If the Family Name is not included as the first part of the Full Font Name, and\n        the user embeds the font in a document using a Microsoft Office app, the app\n        will fail to render the font when it opens the document again.\n\n        NOTE: Up until version 1.5, the OpenType spec included the following exception\n        in the definition of Full Font Name:\n\n            \"An exception to the [above] definition of Full font name is for Microsoft\n            platform strings for CFF OpenType fonts: in this case, the Full font name\n            string must be identical to the PostScript FontName in the CFF Name INDEX.\"\n\n        https://docs.microsoft.com/en-us/typography/opentype/otspec150/name#name-ids\n    ",
                    "result": "PASS"
                },
                {
                    "description": "PostScript name follows OpenType specification requirements?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.adobe.fonts/check/postscript_name>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "PostScript name follows requirements. [code: psname-ok]",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Font follows the family naming recommendations?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.google.fonts/check/family_naming_recommendations>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font follows the family naming recommendations.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "CFF table FontName must match name table ID 6 (PostScript name).",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.adobe.fonts/check/name/postscript_vs_cff>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_cff",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The PostScript name entries in the font's 'name' table should match\n        the FontName string in the 'CFF ' table.\n\n        The 'CFF ' table has a lot of information that is duplicated in other tables.\n        This information should be consistent across tables, because there's\n        no guarantee which table an app will get the data from.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Name table ID 6 (PostScript name) must be consistent across platforms.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.adobe.fonts/check/name/postscript_name_consistency>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Entries in the \"name\" table for ID 6 (PostScript name) are consistent.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The PostScript name entries in the font's 'name' table should be\n        consistent across platforms.\n\n        This is the TTF/CFF2 equivalent of the CFF 'name/postscript_vs_cff' check.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check name table IDs 1, 2, 16, 17 to conform to Italic style.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.google.fonts/check/name/italic_names>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "All font names are good for Italic fonts.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This check ensures that several entries in the name table\n        conform to the font's Upright or Italic style,\n        namely IDs 1 & 2 as well as 16 & 17 if they're present.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check name table for empty records.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.adobe.fonts/check/name/empty_records>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "No empty name table records found.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check the name table for empty records,\n        as this can cause problems in Adobe apps.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Description strings in the name table must not contain copyright info.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.google.fonts/check/name/no_copyright_on_description>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Description strings in the name table do not contain any copyright string.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Checking correctness of monospaced metadata.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.google.fonts/check/monospace>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font is not monospaced and all related metadata look good. [code: good]",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        There are various metadata in the OpenType spec to specify if a font is\n        monospaced or not. If the font is not truly monospaced, then no monospaced\n        metadata should be set (as sometimes they mistakenly are...)\n\n        Requirements for monospace fonts:\n\n        * post.isFixedPitch - \"Set to 0 if the font is proportionally spaced,\n          non-zero if the font is not proportionally spaced (monospaced)\"\n          (https://www.microsoft.com/typography/otspec/post.htm)\n\n        * hhea.advanceWidthMax must be correct, meaning no glyph's width value\n          is greater. (https://www.microsoft.com/typography/otspec/hhea.htm)\n\n        * OS/2.panose.bProportion must be set to 9 (monospace) on latin text fonts.\n\n        * OS/2.panose.bSpacing must be set to 3 (monospace) on latin hand written\n          or latin symbol fonts.\n\n        * Spec says: \"The PANOSE definition contains ten digits each of which currently\n          describes up to sixteen variations. Windows uses bFamilyType, bSerifStyle\n          and bProportion in the font mapper to determine family type. It also uses\n          bProportion to determine if the font is monospaced.\"\n          (https://www.microsoft.com/typography/otspec/os2.htm#pan\n           https://monotypecom-test.monotype.de/services/pan2)\n\n        * OS/2.xAvgCharWidth must be set accurately.\n          \"OS/2.xAvgCharWidth is used when rendering monospaced fonts,\n          at least by Windows GDI\"\n          (http://typedrawers.com/discussion/comment/15397/#Comment_15397)\n\n        Also we should report an error for glyphs not of average width.\n\n\n        Please also note:\n\n        Thomas Phinney told us that a few years ago (as of December 2019), if you gave\n        a font a monospace flag in Panose, Microsoft Word would ignore the actual\n        advance widths and treat it as monospaced.\n\n        Source: https://typedrawers.com/discussion/comment/45140/#Comment_45140\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Does full font name begin with the font family name?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.google.fonts/check/name/match_familyname_fullfont>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Full font name begins with the font family name.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The FULL_FONT_NAME entry in the \u2018name\u2019 table should start with the same string\n        as the Family Name (FONT_FAMILY_NAME, TYPOGRAPHIC_FAMILY_NAME or\n        WWS_FAMILY_NAME).\n\n        If the Family Name is not included as the first part of the Full Font Name, and\n        the user embeds the font in a document using a Microsoft Office app, the app\n        will fail to render the font when it opens the document again.\n\n        NOTE: Up until version 1.5, the OpenType spec included the following exception\n        in the definition of Full Font Name:\n\n            \"An exception to the [above] definition of Full font name is for Microsoft\n            platform strings for CFF OpenType fonts: in this case, the Full font name\n            string must be identical to the PostScript FontName in the CFF Name INDEX.\"\n\n        https://docs.microsoft.com/en-us/typography/opentype/otspec150/name#name-ids\n    ",
                    "result": "PASS"
                },
                {
                    "description": "PostScript name follows OpenType specification requirements?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.adobe.fonts/check/postscript_name>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "PostScript name follows requirements. [code: psname-ok]",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Font follows the family naming recommendations?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.google.fonts/check/family_naming_recommendations>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font follows the family naming recommendations.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "CFF table FontName must match name table ID 6 (PostScript name).",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.adobe.fonts/check/name/postscript_vs_cff>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_cff",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The PostScript name entries in the font's 'name' table should match\n        the FontName string in the 'CFF ' table.\n\n        The 'CFF ' table has a lot of information that is duplicated in other tables.\n        This information should be consistent across tables, because there's\n        no guarantee which table an app will get the data from.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Name table ID 6 (PostScript name) must be consistent across platforms.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.adobe.fonts/check/name/postscript_name_consistency>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Entries in the \"name\" table for ID 6 (PostScript name) are consistent.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The PostScript name entries in the font's 'name' table should be\n        consistent across platforms.\n\n        This is the TTF/CFF2 equivalent of the CFF 'name/postscript_vs_cff' check.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check name table IDs 1, 2, 16, 17 to conform to Italic style.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.name>",
                        "<FontBakeryCheck:com.google.fonts/check/name/italic_names>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font is not Italic.",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        This check ensures that several entries in the name table\n        conform to the font's Upright or Italic style,\n        namely IDs 1 & 2 as well as 16 & 17 if they're present.\n    ",
                    "result": "SKIP"
                }
            ],
            "key": [
                "<Section: fontbakery.profiles.name>",
                null,
                null
            ],
            "result": {
                "PASS": 32,
                "SKIP": 6
            }
        },
        {
            "checks": [
                {
                    "description": "Does the number of glyphs in the loca table match the maxp table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.loca>",
                        "<FontBakeryCheck:com.google.fonts/check/loca/maxp_num_glyphs>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "'loca' table matches numGlyphs in 'maxp' table.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Does the number of glyphs in the loca table match the maxp table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.loca>",
                        "<FontBakeryCheck:com.google.fonts/check/loca/maxp_num_glyphs>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "'loca' table matches numGlyphs in 'maxp' table.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Does the number of glyphs in the loca table match the maxp table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.loca>",
                        "<FontBakeryCheck:com.google.fonts/check/loca/maxp_num_glyphs>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "'loca' table matches numGlyphs in 'maxp' table.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Does the number of glyphs in the loca table match the maxp table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.loca>",
                        "<FontBakeryCheck:com.google.fonts/check/loca/maxp_num_glyphs>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "'loca' table matches numGlyphs in 'maxp' table.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                }
            ],
            "key": [
                "<Section: fontbakery.profiles.loca>",
                null,
                null
            ],
            "result": {
                "PASS": 4
            }
        },
        {
            "checks": [
                {
                    "description": "MaxAdvanceWidth is consistent with values in the Hmtx and Hhea tables?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.hhea>",
                        "<FontBakeryCheck:com.google.fonts/check/maxadvancewidth>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "MaxAdvanceWidth is consistent with values in the Hmtx and Hhea tables.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Check hhea.caretSlopeRise and hhea.caretSlopeRun",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.hhea>",
                        "<FontBakeryCheck:com.google.fonts/check/caret_slope>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "hhea.caretSlopeRise and hhea.caretSlopeRun match with post.italicAngle.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Checks whether hhea.caretSlopeRise and hhea.caretSlopeRun\n        match with post.italicAngle.\n\n        For Upright fonts, you can set hhea.caretSlopeRise to 1\n        and hhea.caretSlopeRun to 0.\n\n        For Italic fonts, you can set hhea.caretSlopeRise to head.unitsPerEm\n        and calculate hhea.caretSlopeRun like this:\n        round(math.tan(\n          math.radians(-1 * font[\"post\"].italicAngle)) * font[\"head\"].unitsPerEm)\n\n        This check allows for a 0.1\u00b0 rounding difference between the Italic angle\n        as calculated by the caret slope and post.italicAngle\n    ",
                    "result": "PASS"
                },
                {
                    "description": "MaxAdvanceWidth is consistent with values in the Hmtx and Hhea tables?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.hhea>",
                        "<FontBakeryCheck:com.google.fonts/check/maxadvancewidth>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "MaxAdvanceWidth is consistent with values in the Hmtx and Hhea tables.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Check hhea.caretSlopeRise and hhea.caretSlopeRun",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.hhea>",
                        "<FontBakeryCheck:com.google.fonts/check/caret_slope>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "hhea.caretSlopeRise and hhea.caretSlopeRun match with post.italicAngle.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Checks whether hhea.caretSlopeRise and hhea.caretSlopeRun\n        match with post.italicAngle.\n\n        For Upright fonts, you can set hhea.caretSlopeRise to 1\n        and hhea.caretSlopeRun to 0.\n\n        For Italic fonts, you can set hhea.caretSlopeRise to head.unitsPerEm\n        and calculate hhea.caretSlopeRun like this:\n        round(math.tan(\n          math.radians(-1 * font[\"post\"].italicAngle)) * font[\"head\"].unitsPerEm)\n\n        This check allows for a 0.1\u00b0 rounding difference between the Italic angle\n        as calculated by the caret slope and post.italicAngle\n    ",
                    "result": "PASS"
                },
                {
                    "description": "MaxAdvanceWidth is consistent with values in the Hmtx and Hhea tables?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.hhea>",
                        "<FontBakeryCheck:com.google.fonts/check/maxadvancewidth>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "MaxAdvanceWidth is consistent with values in the Hmtx and Hhea tables.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Check hhea.caretSlopeRise and hhea.caretSlopeRun",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.hhea>",
                        "<FontBakeryCheck:com.google.fonts/check/caret_slope>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "hhea.caretSlopeRise and hhea.caretSlopeRun match with post.italicAngle.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Checks whether hhea.caretSlopeRise and hhea.caretSlopeRun\n        match with post.italicAngle.\n\n        For Upright fonts, you can set hhea.caretSlopeRise to 1\n        and hhea.caretSlopeRun to 0.\n\n        For Italic fonts, you can set hhea.caretSlopeRise to head.unitsPerEm\n        and calculate hhea.caretSlopeRun like this:\n        round(math.tan(\n          math.radians(-1 * font[\"post\"].italicAngle)) * font[\"head\"].unitsPerEm)\n\n        This check allows for a 0.1\u00b0 rounding difference between the Italic angle\n        as calculated by the caret slope and post.italicAngle\n    ",
                    "result": "PASS"
                },
                {
                    "description": "MaxAdvanceWidth is consistent with values in the Hmtx and Hhea tables?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.hhea>",
                        "<FontBakeryCheck:com.google.fonts/check/maxadvancewidth>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "MaxAdvanceWidth is consistent with values in the Hmtx and Hhea tables.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Check hhea.caretSlopeRise and hhea.caretSlopeRun",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.hhea>",
                        "<FontBakeryCheck:com.google.fonts/check/caret_slope>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "hhea.caretSlopeRise and hhea.caretSlopeRun match with post.italicAngle.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Checks whether hhea.caretSlopeRise and hhea.caretSlopeRun\n        match with post.italicAngle.\n\n        For Upright fonts, you can set hhea.caretSlopeRise to 1\n        and hhea.caretSlopeRun to 0.\n\n        For Italic fonts, you can set hhea.caretSlopeRise to head.unitsPerEm\n        and calculate hhea.caretSlopeRun like this:\n        round(math.tan(\n          math.radians(-1 * font[\"post\"].italicAngle)) * font[\"head\"].unitsPerEm)\n\n        This check allows for a 0.1\u00b0 rounding difference between the Italic angle\n        as calculated by the caret slope and post.italicAngle\n    ",
                    "result": "PASS"
                }
            ],
            "key": [
                "<Section: fontbakery.profiles.hhea>",
                null,
                null
            ],
            "result": {
                "PASS": 8
            }
        },
        {
            "checks": [
                {
                    "description": "Does the font have a DSIG table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.dsig>",
                        "<FontBakeryCheck:com.google.fonts/check/dsig>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "ok",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Microsoft Office 2013 and below products expect fonts to have a digital\n        signature declared in a DSIG table in order to implement OpenType features.\n        The EOL date for Microsoft Office 2013 products is 4/11/2023.\n        This issue does not impact Microsoft Office 2016 and above products.\n\n        As we approach the EOL date, it is now considered better to\n        completely remove the table.\n\n        But if you still want your font to support OpenType features on Office 2013,\n        then you may find it handy to add a fake signature on a placeholder DSIG table\n        by running one of the helper scripts provided at\n        https://github.com/googlefonts/gftools\n\n        Reference: https://github.com/fonttools/fontbakery/issues/1845\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Does the font have a DSIG table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.dsig>",
                        "<FontBakeryCheck:com.google.fonts/check/dsig>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "ok",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Microsoft Office 2013 and below products expect fonts to have a digital\n        signature declared in a DSIG table in order to implement OpenType features.\n        The EOL date for Microsoft Office 2013 products is 4/11/2023.\n        This issue does not impact Microsoft Office 2016 and above products.\n\n        As we approach the EOL date, it is now considered better to\n        completely remove the table.\n\n        But if you still want your font to support OpenType features on Office 2013,\n        then you may find it handy to add a fake signature on a placeholder DSIG table\n        by running one of the helper scripts provided at\n        https://github.com/googlefonts/gftools\n\n        Reference: https://github.com/fonttools/fontbakery/issues/1845\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Does the font have a DSIG table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.dsig>",
                        "<FontBakeryCheck:com.google.fonts/check/dsig>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "ok",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Microsoft Office 2013 and below products expect fonts to have a digital\n        signature declared in a DSIG table in order to implement OpenType features.\n        The EOL date for Microsoft Office 2013 products is 4/11/2023.\n        This issue does not impact Microsoft Office 2016 and above products.\n\n        As we approach the EOL date, it is now considered better to\n        completely remove the table.\n\n        But if you still want your font to support OpenType features on Office 2013,\n        then you may find it handy to add a fake signature on a placeholder DSIG table\n        by running one of the helper scripts provided at\n        https://github.com/googlefonts/gftools\n\n        Reference: https://github.com/fonttools/fontbakery/issues/1845\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Does the font have a DSIG table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.dsig>",
                        "<FontBakeryCheck:com.google.fonts/check/dsig>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "ok",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Microsoft Office 2013 and below products expect fonts to have a digital\n        signature declared in a DSIG table in order to implement OpenType features.\n        The EOL date for Microsoft Office 2013 products is 4/11/2023.\n        This issue does not impact Microsoft Office 2016 and above products.\n\n        As we approach the EOL date, it is now considered better to\n        completely remove the table.\n\n        But if you still want your font to support OpenType features on Office 2013,\n        then you may find it handy to add a fake signature on a placeholder DSIG table\n        by running one of the helper scripts provided at\n        https://github.com/googlefonts/gftools\n\n        Reference: https://github.com/fonttools/fontbakery/issues/1845\n    ",
                    "result": "PASS"
                }
            ],
            "key": [
                "<Section: fontbakery.profiles.dsig>",
                null,
                null
            ],
            "result": {
                "PASS": 4
            }
        },
        {
            "checks": [
                {
                    "description": "Check glyphs in mark glyph class are non-spacing.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.gdef>",
                        "<FontBakeryCheck:com.google.fonts/check/gdef_spacing_marks>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The following spacing glyphs may be in the GDEF mark glyph class by mistake:\n\t glyph06482 (unencoded), glyph06483 (unencoded), glyph06484 (unencoded) and glyph06485 (unencoded) [code: spacing-mark-glyphs]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Glyphs in the GDEF mark glyph class should be non-spacing.\n\n        Spacing glyphs in the GDEF mark glyph class may have incorrect anchor\n        positioning that was only intended for building composite glyphs during design.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Check mark characters are in GDEF mark glyph class.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.gdef>",
                        "<FontBakeryCheck:com.google.fonts/check/gdef_mark_chars>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The following mark characters could be in the GDEF mark glyph class:\n\t uni030A (U+030A) [code: mark-chars]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Mark characters should be in the GDEF mark glyph class.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Check GDEF mark glyph class doesn't have characters that are not marks.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.gdef>",
                        "<FontBakeryCheck:com.google.fonts/check/gdef_non_mark_chars>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font does not have non-mark characters in the GDEF mark glyph class.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Glyphs in the GDEF mark glyph class become non-spacing and may be repositioned\n        if they have mark anchors.\n\n        Only combining mark glyphs should be in that class. Any non-mark glyph\n        must not be in that class, in particular spacing glyphs.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check glyphs in mark glyph class are non-spacing.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.gdef>",
                        "<FontBakeryCheck:com.google.fonts/check/gdef_spacing_marks>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The following spacing glyphs may be in the GDEF mark glyph class by mistake:\n\t glyph06476 (unencoded), glyph06477 (unencoded), glyph06478 (unencoded), glyph06479 (unencoded), glyph06480 (unencoded), glyph06481 (unencoded), glyph06482 (unencoded), glyph06483 (unencoded), glyph06484 (unencoded), glyph06485 (unencoded), glyph06486 (unencoded), glyph06487 (unencoded), glyph06488 (unencoded), glyph06489 (unencoded), uni0312 (U+0312) and uni0315 (U+0315) [code: spacing-mark-glyphs]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Glyphs in the GDEF mark glyph class should be non-spacing.\n\n        Spacing glyphs in the GDEF mark glyph class may have incorrect anchor\n        positioning that was only intended for building composite glyphs during design.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Check mark characters are in GDEF mark glyph class.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.gdef>",
                        "<FontBakeryCheck:com.google.fonts/check/gdef_mark_chars>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font does not have mark characters not in the GDEF mark glyph class.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Mark characters should be in the GDEF mark glyph class.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check GDEF mark glyph class doesn't have characters that are not marks.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.gdef>",
                        "<FontBakeryCheck:com.google.fonts/check/gdef_non_mark_chars>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font does not have non-mark characters in the GDEF mark glyph class.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Glyphs in the GDEF mark glyph class become non-spacing and may be repositioned\n        if they have mark anchors.\n\n        Only combining mark glyphs should be in that class. Any non-mark glyph\n        must not be in that class, in particular spacing glyphs.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check glyphs in mark glyph class are non-spacing.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.gdef>",
                        "<FontBakeryCheck:com.google.fonts/check/gdef_spacing_marks>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The following spacing glyphs may be in the GDEF mark glyph class by mistake:\n\t glyph06639 (unencoded), glyph06640 (unencoded), glyph06641 (unencoded), glyph06642 (unencoded), glyph06643 (unencoded), glyph06644 (unencoded), glyph06645 (unencoded), glyph06646 (unencoded), glyph06647 (unencoded), glyph06648 (unencoded), glyph06649 (unencoded), glyph06650 (unencoded) and glyph06651 (unencoded) [code: spacing-mark-glyphs]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Glyphs in the GDEF mark glyph class should be non-spacing.\n\n        Spacing glyphs in the GDEF mark glyph class may have incorrect anchor\n        positioning that was only intended for building composite glyphs during design.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Check mark characters are in GDEF mark glyph class.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.gdef>",
                        "<FontBakeryCheck:com.google.fonts/check/gdef_mark_chars>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font does not have mark characters not in the GDEF mark glyph class.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Mark characters should be in the GDEF mark glyph class.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check GDEF mark glyph class doesn't have characters that are not marks.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.gdef>",
                        "<FontBakeryCheck:com.google.fonts/check/gdef_non_mark_chars>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font does not have non-mark characters in the GDEF mark glyph class.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Glyphs in the GDEF mark glyph class become non-spacing and may be repositioned\n        if they have mark anchors.\n\n        Only combining mark glyphs should be in that class. Any non-mark glyph\n        must not be in that class, in particular spacing glyphs.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check glyphs in mark glyph class are non-spacing.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.gdef>",
                        "<FontBakeryCheck:com.google.fonts/check/gdef_spacing_marks>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The following spacing glyphs may be in the GDEF mark glyph class by mistake:\n\t glyph06652 (unencoded), glyph06653 (unencoded), glyph06654 (unencoded) and glyph06655 (unencoded) [code: spacing-mark-glyphs]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Glyphs in the GDEF mark glyph class should be non-spacing.\n\n        Spacing glyphs in the GDEF mark glyph class may have incorrect anchor\n        positioning that was only intended for building composite glyphs during design.\n    ",
                    "result": "WARN"
                },
                {
                    "description": "Check mark characters are in GDEF mark glyph class.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.gdef>",
                        "<FontBakeryCheck:com.google.fonts/check/gdef_mark_chars>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font does not have mark characters not in the GDEF mark glyph class.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Mark characters should be in the GDEF mark glyph class.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Check GDEF mark glyph class doesn't have characters that are not marks.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.gdef>",
                        "<FontBakeryCheck:com.google.fonts/check/gdef_non_mark_chars>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font does not have non-mark characters in the GDEF mark glyph class.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Glyphs in the GDEF mark glyph class become non-spacing and may be repositioned\n        if they have mark anchors.\n\n        Only combining mark glyphs should be in that class. Any non-mark glyph\n        must not be in that class, in particular spacing glyphs.\n    ",
                    "result": "PASS"
                }
            ],
            "key": [
                "<Section: fontbakery.profiles.gdef>",
                null,
                null
            ],
            "result": {
                "PASS": 7,
                "WARN": 5
            }
        },
        {
            "checks": [
                {
                    "description": "Does GPOS table have kerning information? This check skips monospaced fonts as defined by post.isFixedPitch value",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.gpos>",
                        "<FontBakeryCheck:com.google.fonts/check/gpos_kerning_info>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "GPOS table check for kerning information passed.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Does GPOS table have kerning information? This check skips monospaced fonts as defined by post.isFixedPitch value",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.gpos>",
                        "<FontBakeryCheck:com.google.fonts/check/gpos_kerning_info>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "GPOS table check for kerning information passed.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Does GPOS table have kerning information? This check skips monospaced fonts as defined by post.isFixedPitch value",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.gpos>",
                        "<FontBakeryCheck:com.google.fonts/check/gpos_kerning_info>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "GPOS table check for kerning information passed.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Does GPOS table have kerning information? This check skips monospaced fonts as defined by post.isFixedPitch value",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.gpos>",
                        "<FontBakeryCheck:com.google.fonts/check/gpos_kerning_info>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "GPOS table check for kerning information passed.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                }
            ],
            "key": [
                "<Section: fontbakery.profiles.gpos>",
                null,
                null
            ],
            "result": {
                "PASS": 4
            }
        },
        {
            "checks": [
                {
                    "description": "Is there a usable \"kern\" table declared in the font?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.kern>",
                        "<FontBakeryCheck:com.google.fonts/check/kern_table>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font does not declare an optional \"kern\" table.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Even though all fonts should have their kerning implemented in the GPOS table,\n        there may be kerning info at the kern table as well.\n\n        Some applications such as MS PowerPoint require kerning info on the kern table.\n        More specifically, they require a format 0 kern subtable from a kern table\n        version 0 with only glyphs defined in the cmap table, which is the only one\n        that Windows understands (and which is also the simplest and more limited\n        of all the kern subtables).\n\n        Google Fonts ingests fonts made for download and use on desktops, and does\n        all web font optimizations in the serving pipeline (using libre libraries\n        that anyone can replicate.)\n\n        Ideally, TTFs intended for desktop users (and thus the ones intended for\n        Google Fonts) should have both KERN and GPOS tables.\n\n        Given all of the above, we currently treat kerning on a v0 kern table\n        as a good-to-have (but optional) feature.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Is there a usable \"kern\" table declared in the font?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.kern>",
                        "<FontBakeryCheck:com.google.fonts/check/kern_table>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font does not declare an optional \"kern\" table.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Even though all fonts should have their kerning implemented in the GPOS table,\n        there may be kerning info at the kern table as well.\n\n        Some applications such as MS PowerPoint require kerning info on the kern table.\n        More specifically, they require a format 0 kern subtable from a kern table\n        version 0 with only glyphs defined in the cmap table, which is the only one\n        that Windows understands (and which is also the simplest and more limited\n        of all the kern subtables).\n\n        Google Fonts ingests fonts made for download and use on desktops, and does\n        all web font optimizations in the serving pipeline (using libre libraries\n        that anyone can replicate.)\n\n        Ideally, TTFs intended for desktop users (and thus the ones intended for\n        Google Fonts) should have both KERN and GPOS tables.\n\n        Given all of the above, we currently treat kerning on a v0 kern table\n        as a good-to-have (but optional) feature.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Is there a usable \"kern\" table declared in the font?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.kern>",
                        "<FontBakeryCheck:com.google.fonts/check/kern_table>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font does not declare an optional \"kern\" table.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Even though all fonts should have their kerning implemented in the GPOS table,\n        there may be kerning info at the kern table as well.\n\n        Some applications such as MS PowerPoint require kerning info on the kern table.\n        More specifically, they require a format 0 kern subtable from a kern table\n        version 0 with only glyphs defined in the cmap table, which is the only one\n        that Windows understands (and which is also the simplest and more limited\n        of all the kern subtables).\n\n        Google Fonts ingests fonts made for download and use on desktops, and does\n        all web font optimizations in the serving pipeline (using libre libraries\n        that anyone can replicate.)\n\n        Ideally, TTFs intended for desktop users (and thus the ones intended for\n        Google Fonts) should have both KERN and GPOS tables.\n\n        Given all of the above, we currently treat kerning on a v0 kern table\n        as a good-to-have (but optional) feature.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Is there a usable \"kern\" table declared in the font?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.kern>",
                        "<FontBakeryCheck:com.google.fonts/check/kern_table>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Font does not declare an optional \"kern\" table.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Even though all fonts should have their kerning implemented in the GPOS table,\n        there may be kerning info at the kern table as well.\n\n        Some applications such as MS PowerPoint require kerning info on the kern table.\n        More specifically, they require a format 0 kern subtable from a kern table\n        version 0 with only glyphs defined in the cmap table, which is the only one\n        that Windows understands (and which is also the simplest and more limited\n        of all the kern subtables).\n\n        Google Fonts ingests fonts made for download and use on desktops, and does\n        all web font optimizations in the serving pipeline (using libre libraries\n        that anyone can replicate.)\n\n        Ideally, TTFs intended for desktop users (and thus the ones intended for\n        Google Fonts) should have both KERN and GPOS tables.\n\n        Given all of the above, we currently treat kerning on a v0 kern table\n        as a good-to-have (but optional) feature.\n    ",
                    "result": "PASS"
                }
            ],
            "key": [
                "<Section: fontbakery.profiles.kern>",
                null,
                null
            ],
            "result": {
                "PASS": 4
            }
        },
        {
            "checks": [
                {
                    "description": "Is there any unused data at the end of the glyf table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.glyf>",
                        "<FontBakeryCheck:com.google.fonts/check/glyf_unused_data>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "There is no unused data at the end of the glyf table.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Check for points out of bounds.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.glyf>",
                        "<FontBakeryCheck:com.google.fonts/check/points_out_of_bounds>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The following glyphs have coordinates which are out of bounds:\n\t* ('uni0613', 299.5, 790.5)\n\t* ('glyph01448', 73, -451.5)\n\t* ('glyph01448', 64, -451.5)\n\t* ('glyph01448', 53, -451.5)\n\t* ('glyph01489', 117, -451.5)\n\t* ('glyph01489', 108, -451.5)\n\t* ('glyph01489', 97, -451.5)\n\t* ('glyph01625', 283, -373.5)\n\t* ('glyph01625', 274, -373.5)\n\t* ('glyph01625', 263, -373.5)\n\t* ('glyph01818', 356, -767.5)\n\t* ('glyph01818', 347, -767.5)\n\t* ('glyph01818', 336, -767.5)\n\t* ('glyph01840', 85, -377.5)\n\t* ('glyph01840', 76, -377.5)\n\t* ('glyph01840', 65, -377.5)\n\t* ('glyph01975', 274, -373.5)\n\t* ('glyph01975', 265, -373.5)\n\t* ('glyph01975', 254, -373.5)\n\t* ('glyph01979', 208, -563.5)\n\t* ('glyph01979', 199, -563.5)\n\t* ('glyph01979', 188, -563.5)\n\t* ('glyph02031', 120, -451.5)\n\t* ('glyph02031', 111, -451.5)\n\t* ('glyph02031', 100, -451.5)\n\t* ('glyph02072', 29, -451.5)\n\t* ('glyph02072', 20, -451.5)\n\t* ('glyph02072', 9, -451.5)\n\t* ('glyph02267', 361, -715.5)\n\t* ('glyph02267', 352, -715.5)\n\t* ('glyph02267', 341, -715.5)\n\t* ('glyph02321', 88, -451.5)\n\t* ('glyph02321', 79, -451.5)\n\t* ('glyph02321', 68, -451.5)\n\t* ('glyph02402', 352, -275.5)\n\t* ('glyph02402', 343, -275.5)\n\t* ('glyph02402', 332, -275.5)\n\t* ('glyph02499', 244, -407.5)\n\t* ('glyph02499', 235, -407.5)\n\t* ('glyph02499', 224, -407.5)\n\t* ('glyph02516', 531, -401.5)\n\t* ('glyph02516', 522, -401.5)\n\t* ('glyph02516', 511, -401.5)\n\t* ('glyph02542', 94, -441.5)\n\t* ('glyph02542', 85, -441.5)\n\t* ('glyph02542', 74, -441.5)\n\t* ('glyph02663', 83, -465.5)\n\t* ('glyph02663', 74, -465.5)\n\t* ('glyph02663', 63, -465.5)\n\t* ('glyph02775', 253, -279.5)\n\t* ('glyph02775', 244, -279.5)\n\t* ('glyph02775', 233, -279.5)\n\t* ('glyph02779', 133, -451.5)\n\t* ('glyph02779', 124, -451.5)\n\t* ('glyph02779', 113, -451.5)\n\t* ('glyph02926', 299, -377.5)\n\t* ('glyph02926', 290, -377.5)\n\t* ('glyph02926', 279, -377.5)\n\t* ('glyph02954', 36, -329.5)\n\t* ('glyph02954', 27, -329.5)\n\t* ('glyph02954', 16, -329.5)\n\t* ('glyph03048', 159, -377.5)\n\t* ('glyph03048', 150, -377.5)\n\t* ('glyph03048', 139, -377.5)\n\t* ('glyph03052', 223, -387.5)\n\t* ('glyph03052', 214, -387.5)\n\t* ('glyph03052', 203, -387.5)\n\t* ('glyph03153', 76, -319.5)\n\t* ('glyph03153', 67, -319.5)\n\t* ('glyph03153', 56, -319.5)\n\t* ('glyph03253', 93, -451.5)\n\t* ('glyph03253', 84, -451.5)\n\t* ('glyph03253', 73, -451.5)\n\t* ('glyph03293', 68, -465.5)\n\t* ('glyph03293', 59, -465.5)\n\t* ('glyph03293', 48, -465.5)\n\t* ('glyph03355', 278, -377.5)\n\t* ('glyph03355', 269, -377.5)\n\t* ('glyph03355', 258, -377.5)\n\t* ('glyph03417', 224, -407.5)\n\t* ('glyph03417', 215, -407.5)\n\t* ('glyph03417', 204, -407.5)\n\t* ('glyph03476', 135, -469.5)\n\t* ('glyph03476', 126, -469.5)\n\t* ('glyph03476', 115, -469.5)\n\t* ('glyph03559', 451, -271.5)\n\t* ('glyph03559', 442, -271.5)\n\t* ('glyph03559', 431, -271.5)\n\t* ('glyph03600', 449, -475.5)\n\t* ('glyph03600', 440, -475.5)\n\t* ('glyph03600', 429, -475.5)\n\t* ('glyph03641', 204, -395.5)\n\t* ('glyph03641', 195, -395.5)\n\t* ('glyph03641', 184, -395.5)\n\t* ('glyph03695', 139, -361.5)\n\t* ('glyph03695', 130, -361.5)\n\t* ('glyph03695', 119, -361.5)\n\t* ('glyph03795', 97, -451.5)\n\t* ('glyph03795', 88, -451.5)\n\t* ('glyph03795', 77, -451.5)\n\t* ('glyph03836', 125, -451.5)\n\t* ('glyph03836', 116, -451.5)\n\t* ('glyph03836', 105, -451.5)\n\t* ('glyph03888', 119, -451.5)\n\t* ('glyph03888', 110, -451.5)\n\t* ('glyph03888', 99, -451.5)\n\t* ('glyph03942', 191, -417.5)\n\t* ('glyph03942', 182, -417.5)\n\t* ('glyph03942', 171, -417.5)\n\t* ('glyph03959', 205, -407.5)\n\t* ('glyph03959', 196, -407.5)\n\t* ('glyph03959', 185, -407.5)\n\t* ('glyph04470', 345, -641.5)\n\t* ('glyph04470', 336, -641.5)\n\t* ('glyph04470', 325, -641.5)\n\t* ('glyph04509', 284, -449.5)\n\t* ('glyph04509', 275, -449.5)\n\t* ('glyph04509', 264, -449.5)\n\t* ('glyph04552', 132, -573.5)\n\t* ('glyph04552', 123, -573.5)\n\t* ('glyph04552', 112, -573.5)\n\t* ('glyph04603', 240, -475.5)\n\t* ('glyph04603', 231, -475.5)\n\t* ('glyph04603', 220, -475.5)\n\t* ('glyph04644', 178, -467.5)\n\t* ('glyph04644', 169, -467.5)\n\t* ('glyph04644', 158, -467.5)\n\t* ('glyph04827', 484, -417.5)\n\t* ('glyph04827', 475, -417.5)\n\t* ('glyph04827', 464, -417.5)\n\t* ('glyph04844', 158, -417.5)\n\t* ('glyph04844', 149, -417.5)\n\t* ('glyph04844', 138, -417.5)\n\t* ('glyph05058', 102, -631.5)\n\t* ('glyph05058', 93, -631.5)\n\t* ('glyph05058', 82, -631.5)\n\t* ('glyph05743', 63, -709.5)\n\t* ('glyph05743', 54, -709.5)\n\t* ('glyph05743', 43, -709.5)\n\t* ('glyph05837', 293, -661.5)\n\t* ('glyph05837', 284, -661.5) and ('glyph05837', 273, -661.5)\n\nThis happens a lot when points are not extremes, which is usually bad. However, fixing this alert by adding points on extremes may do more harm than good, especially with italics, calligraphic-script, handwriting, rounded and other fonts. So it is common to ignore this message. [code: points-out-of-bounds]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "result": "WARN"
                },
                {
                    "description": "Check glyphs do not have duplicate components which have the same x,y coordinates.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.glyf>",
                        "<FontBakeryCheck:com.google.fonts/check/glyf_non_transformed_duplicate_components>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Glyphs do not contain duplicate components which have the same x,y coordinates.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        There have been cases in which fonts had faulty double quote marks, with each\n        of them containing two single quote marks as components with the same\n        x, y coordinates which makes them visually look like single quote marks.\n\n        This check ensures that glyphs do not contain duplicate components\n        which have the same x,y coordinates.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Is there any unused data at the end of the glyf table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.glyf>",
                        "<FontBakeryCheck:com.google.fonts/check/glyf_unused_data>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "There is no unused data at the end of the glyf table.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Check for points out of bounds.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.glyf>",
                        "<FontBakeryCheck:com.google.fonts/check/points_out_of_bounds>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The following glyphs have coordinates which are out of bounds:\n\t* ('uni0613', 160.5, 790.5)\n\t* ('glyph01448', 152.5, -451.5)\n\t* ('glyph01448', 144, -451.5)\n\t* ('glyph01448', 133, -451.5)\n\t* ('glyph01489', 196.5, -451.5)\n\t* ('glyph01489', 188, -451.5)\n\t* ('glyph01489', 177, -451.5)\n\t* ('glyph01625', 348.5, -373.5)\n\t* ('glyph01625', 340, -373.5)\n\t* ('glyph01625', 329, -373.5)\n\t* ('glyph01818', 490.5, -767.5)\n\t* ('glyph01818', 482, -767.5)\n\t* ('glyph01818', 471, -767.5)\n\t* ('glyph01840', 151.5, -377.5)\n\t* ('glyph01840', 143, -377.5)\n\t* ('glyph01840', 132, -377.5)\n\t* ('glyph01975', 339.5, -373.5)\n\t* ('glyph01975', 331, -373.5)\n\t* ('glyph01975', 320, -373.5)\n\t* ('glyph01979', 306.5, -563.5)\n\t* ('glyph01979', 298, -563.5)\n\t* ('glyph01979', 287, -563.5)\n\t* ('glyph02031', 199.5, -451.5)\n\t* ('glyph02031', 191, -451.5)\n\t* ('glyph02031', 180, -451.5)\n\t* ('glyph02072', 108.5, -451.5)\n\t* ('glyph02072', 100, -451.5)\n\t* ('glyph02072', 89, -451.5)\n\t* ('glyph02267', 486.5, -715.5)\n\t* ('glyph02267', 478, -715.5)\n\t* ('glyph02267', 467, -715.5)\n\t* ('glyph02321', 167.5, -451.5)\n\t* ('glyph02321', 159, -451.5)\n\t* ('glyph02321', 148, -451.5)\n\t* ('glyph02402', 400.5, -275.5)\n\t* ('glyph02402', 392, -275.5)\n\t* ('glyph02402', 381, -275.5)\n\t* ('glyph02499', 315.5, -407.5)\n\t* ('glyph02499', 307, -407.5)\n\t* ('glyph02499', 296, -407.5)\n\t* ('glyph02516', 601.5, -401.5)\n\t* ('glyph02516', 593, -401.5)\n\t* ('glyph02516', 582, -401.5)\n\t* ('glyph02542', 171.5, -441.5)\n\t* ('glyph02542', 163, -441.5)\n\t* ('glyph02542', 152, -441.5)\n\t* ('glyph02663', 164.5, -465.5)\n\t* ('glyph02663', 156, -465.5)\n\t* ('glyph02663', 145, -465.5)\n\t* ('glyph02775', 301.5, -279.5)\n\t* ('glyph02775', 293, -279.5)\n\t* ('glyph02775', 282, -279.5)\n\t* ('glyph02779', 212.5, -451.5)\n\t* ('glyph02779', 204, -451.5)\n\t* ('glyph02779', 193, -451.5)\n\t* ('glyph02926', 365.5, -377.5)\n\t* ('glyph02926', 357, -377.5)\n\t* ('glyph02926', 346, -377.5)\n\t* ('glyph02954', 93.5, -329.5)\n\t* ('glyph02954', 85, -329.5)\n\t* ('glyph02954', 74, -329.5)\n\t* ('glyph03048', 225.5, -377.5)\n\t* ('glyph03048', 217, -377.5)\n\t* ('glyph03048', 206, -377.5)\n\t* ('glyph03052', 290.5, -387.5)\n\t* ('glyph03052', 282, -387.5)\n\t* ('glyph03052', 271, -387.5)\n\t* ('glyph03153', 131.5, -319.5)\n\t* ('glyph03153', 123, -319.5)\n\t* ('glyph03153', 112, -319.5)\n\t* ('glyph03253', 172.5, -451.5)\n\t* ('glyph03253', 164, -451.5)\n\t* ('glyph03253', 153, -451.5)\n\t* ('glyph03293', 149.5, -465.5)\n\t* ('glyph03293', 141, -465.5)\n\t* ('glyph03293', 130, -465.5)\n\t* ('glyph03355', 344.5, -377.5)\n\t* ('glyph03355', 336, -377.5)\n\t* ('glyph03355', 325, -377.5)\n\t* ('glyph03417', 295.5, -407.5)\n\t* ('glyph03417', 287, -407.5)\n\t* ('glyph03417', 276, -407.5)\n\t* ('glyph03476', 217.5, -469.5)\n\t* ('glyph03476', 209, -469.5)\n\t* ('glyph03476', 198, -469.5)\n\t* ('glyph03559', 498.5, -271.5)\n\t* ('glyph03559', 490, -271.5)\n\t* ('glyph03559', 479, -271.5)\n\t* ('glyph03600', 532.5, -475.5)\n\t* ('glyph03600', 524, -475.5)\n\t* ('glyph03600', 513, -475.5)\n\t* ('glyph03641', 273.5, -395.5)\n\t* ('glyph03641', 265, -395.5)\n\t* ('glyph03641', 254, -395.5)\n\t* ('glyph03695', 202.5, -361.5)\n\t* ('glyph03695', 194, -361.5)\n\t* ('glyph03695', 183, -361.5)\n\t* ('glyph03795', 176.5, -451.5)\n\t* ('glyph03795', 168, -451.5)\n\t* ('glyph03795', 157, -451.5)\n\t* ('glyph03836', 204.5, -451.5)\n\t* ('glyph03836', 196, -451.5)\n\t* ('glyph03836', 185, -451.5)\n\t* ('glyph03888', 198.5, -451.5)\n\t* ('glyph03888', 190, -451.5)\n\t* ('glyph03888', 179, -451.5)\n\t* ('glyph03942', 264.5, -417.5)\n\t* ('glyph03942', 256, -417.5)\n\t* ('glyph03942', 245, -417.5)\n\t* ('glyph03959', 276.5, -407.5)\n\t* ('glyph03959', 268, -407.5)\n\t* ('glyph03959', 257, -407.5)\n\t* ('glyph04470', 457.5, -641.5)\n\t* ('glyph04470', 449, -641.5)\n\t* ('glyph04470', 438, -641.5)\n\t* ('glyph04509', 362.5, -449.5)\n\t* ('glyph04509', 354, -449.5)\n\t* ('glyph04509', 343, -449.5)\n\t* ('glyph04552', 232.5, -573.5)\n\t* ('glyph04552', 224, -573.5)\n\t* ('glyph04552', 213, -573.5)\n\t* ('glyph04603', 323.5, -475.5)\n\t* ('glyph04603', 315, -475.5)\n\t* ('glyph04603', 304, -475.5)\n\t* ('glyph04644', 260.5, -467.5)\n\t* ('glyph04644', 252, -467.5)\n\t* ('glyph04644', 241, -467.5)\n\t* ('glyph04827', 557.5, -417.5)\n\t* ('glyph04827', 549, -417.5)\n\t* ('glyph04827', 538, -417.5)\n\t* ('glyph04844', 231.5, -417.5)\n\t* ('glyph04844', 223, -417.5)\n\t* ('glyph04844', 212, -417.5)\n\t* ('glyph05058', 212.5, -631.5)\n\t* ('glyph05058', 204, -631.5)\n\t* ('glyph05058', 193, -631.5)\n\t* ('glyph05743', 187.5, -709.5)\n\t* ('glyph05743', 179, -709.5)\n\t* ('glyph05743', 168, -709.5)\n\t* ('glyph05837', 409.5, -661.5)\n\t* ('glyph05837', 401, -661.5) and ('glyph05837', 390, -661.5)\n\nThis happens a lot when points are not extremes, which is usually bad. However, fixing this alert by adding points on extremes may do more harm than good, especially with italics, calligraphic-script, handwriting, rounded and other fonts. So it is common to ignore this message. [code: points-out-of-bounds]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "result": "WARN"
                },
                {
                    "description": "Check glyphs do not have duplicate components which have the same x,y coordinates.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.glyf>",
                        "<FontBakeryCheck:com.google.fonts/check/glyf_non_transformed_duplicate_components>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Glyphs do not contain duplicate components which have the same x,y coordinates.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        There have been cases in which fonts had faulty double quote marks, with each\n        of them containing two single quote marks as components with the same\n        x, y coordinates which makes them visually look like single quote marks.\n\n        This check ensures that glyphs do not contain duplicate components\n        which have the same x,y coordinates.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Is there any unused data at the end of the glyf table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.glyf>",
                        "<FontBakeryCheck:com.google.fonts/check/glyf_unused_data>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "There is no unused data at the end of the glyf table.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Check for points out of bounds.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.glyf>",
                        "<FontBakeryCheck:com.google.fonts/check/points_out_of_bounds>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The following glyphs have coordinates which are out of bounds:\n\t* ('uni0613', 161.5, 798.5)\n\t* ('uni0774', -169.5, 766)\n\t* ('glyph01460', -151.5, 312)\n\t* ('glyph01544', -149.5, 820)\n\t* ('glyph01593', -113.5, 581)\n\t* ('glyph01599', -91.5, 578)\n\t* ('glyph01640', -51.5, 563)\n\t* ('glyph01985', -83.5, 605)\n\t* ('glyph01991', -61.5, 602)\n\t* ('glyph02176', -219.5, 742)\n\t* ('glyph02217', -133.5, 642)\n\t* ('glyph02272', -225.5, 984)\n\t* ('glyph02278', -203.5, 981)\n\t* ('glyph02331', -167.5, 759)\n\t* ('glyph02372', -157.5, 714)\n\t* ('glyph02472', -191.5, 802)\n\t* ('glyph02520', -147.5, 773)\n\t* ('glyph02924', -161.5, 732)\n\t* ('glyph03082', -135.5, 700)\n\t* ('glyph03197', -279.5, 751)\n\t* ('glyph03203', -257.5, 748)\n\t* ('glyph03304', -117.5, 763)\n\t* ('glyph03339', -249.5, 692)\n\t* ('glyph03404', -191.5, 802)\n\t* ('glyph03444', -91.5, 570)\n\t* ('glyph03572', -69.5, 529)\n\t* ('glyph03910', -73.5, 545)\n\t* ('glyph04039', -71.5, 639)\n\t* ('glyph04261', -143.5, 785)\n\t* ('glyph04262', -121.5, 782)\n\t* ('glyph04319', -153.5, 843)\n\t* ('glyph04526', -173.5, 776)\n\t* ('glyph04621', 44.5, 498)\n\t* ('glyph04703', -69.5, 529)\n\t* ('glyph05005', -127.5, 639)\n\t* ('glyph05026', -83.5, 605)\n\t* ('glyph05027', -61.5, 602)\n\t* ('glyph05048', -133.5, 642)\n\t* ('glyph05070', -225.5, 984)\n\t* ('glyph05071', -203.5, 981)\n\t* ('glyph05092', -167.5, 759)\n\t* ('glyph05158', -161.5, 732)\n\t* ('glyph05225', -117.5, 763)\n\t* ('glyph05247', -135.5, 747)\n\t* ('glyph05335', -71.5, 639)\n\t* ('glyph05356', -173.5, 776)\n\t* ('glyph05504', 28.5, 678)\n\t* ('glyph05506', 50.5, 675)\n\t* ('glyph05552', -397.5, 885)\n\t* ('glyph05591', -121.5, 519)\n\t* ('glyph05592', -99.5, 516)\n\t* ('glyph05617', -121.5, 519)\n\t* ('glyph05618', -99.5, 516)\n\t* ('glyph05700', -149.5, 820)\n\t* ('glyph05799', -99.5, 529)\n\t* ('glyph05841', -99.5, 529)\n\t* ('glyph05888', -157.5, 566)\n\t* ('glyph05933', -73.5, 532)\n\t* ('glyph06125', 782.0537719726562, -31.5)\n\t* ('glyph06125', 486.55377197265625, -31.5) and ('glyph06125', 1176.5537719726562, -31.5)\n\nThis happens a lot when points are not extremes, which is usually bad. However, fixing this alert by adding points on extremes may do more harm than good, especially with italics, calligraphic-script, handwriting, rounded and other fonts. So it is common to ignore this message. [code: points-out-of-bounds]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "result": "WARN"
                },
                {
                    "description": "Check glyphs do not have duplicate components which have the same x,y coordinates.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.glyf>",
                        "<FontBakeryCheck:com.google.fonts/check/glyf_non_transformed_duplicate_components>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Glyphs do not contain duplicate components which have the same x,y coordinates.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        There have been cases in which fonts had faulty double quote marks, with each\n        of them containing two single quote marks as components with the same\n        x, y coordinates which makes them visually look like single quote marks.\n\n        This check ensures that glyphs do not contain duplicate components\n        which have the same x,y coordinates.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "Is there any unused data at the end of the glyf table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.glyf>",
                        "<FontBakeryCheck:com.google.fonts/check/glyf_unused_data>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "There is no unused data at the end of the glyf table.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "result": "PASS"
                },
                {
                    "description": "Check for points out of bounds.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.glyf>",
                        "<FontBakeryCheck:com.google.fonts/check/points_out_of_bounds>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The following glyphs have coordinates which are out of bounds:\n\t* ('uni0613', 302, 798.5)\n\t* ('glyph01544', -5.5, 820)\n\t* ('glyph02519', -33.5, 776)\n\t* ('glyph02756', -37.5, 825)\n\t* ('glyph03197', -147.5, 751)\n\t* ('glyph03339', -127.5, 692)\n\t* ('glyph03621', -37.5, 757)\n\t* ('glyph04261', -5.5, 785)\n\t* ('glyph04319', -5.5, 843)\n\t* ('glyph04739', -5.5, 800)\n\t* ('glyph05136', -37.5, 825)\n\t* ('glyph05552', -241.5, 885)\n\t* ('glyph05700', -5.5, 820)\n\t* ('glyph05888', -57.5, 566)\n\t* ('glyph06125', 776.5, -31.5)\n\t* ('glyph06125', 481, -31.5)\n\t* ('glyph06125', 86.5, 139.5) and ('glyph06125', 1171, -31.5)\n\nThis happens a lot when points are not extremes, which is usually bad. However, fixing this alert by adding points on extremes may do more harm than good, especially with italics, calligraphic-script, handwriting, rounded and other fonts. So it is common to ignore this message. [code: points-out-of-bounds]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "result": "WARN"
                },
                {
                    "description": "Check glyphs do not have duplicate components which have the same x,y coordinates.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.glyf>",
                        "<FontBakeryCheck:com.google.fonts/check/glyf_non_transformed_duplicate_components>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Glyphs do not contain duplicate components which have the same x,y coordinates.",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        There have been cases in which fonts had faulty double quote marks, with each\n        of them containing two single quote marks as components with the same\n        x, y coordinates which makes them visually look like single quote marks.\n\n        This check ensures that glyphs do not contain duplicate components\n        which have the same x,y coordinates.\n    ",
                    "result": "PASS"
                }
            ],
            "key": [
                "<Section: fontbakery.profiles.glyf>",
                null,
                null
            ],
            "result": {
                "PASS": 8,
                "WARN": 4
            }
        },
        {
            "checks": [
                {
                    "description": "The variable font 'wght' (Weight) axis coordinate must be 400 on the 'Regular' instance.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/regular_wght_coord>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_wght_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the Open-Type spec's\n        registered design-variation tag 'wght' available at\n        https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_wght\n\n        If a variable font has a 'wght' (Weight) axis, then the coordinate of\n        its 'Regular' instance is required to be 400.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'wdth' (Width) axis coordinate must be 100 on the 'Regular' instance.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/regular_wdth_coord>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_wdth_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the Open-Type spec's\n        registered design-variation tag 'wdth' available at\n        https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_wdth\n\n        If a variable font has a 'wdth' (Width) axis, then the coordinate of\n        its 'Regular' instance is required to be 100.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'slnt' (Slant) axis coordinate must be zero on the 'Regular' instance.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/regular_slnt_coord>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_slnt_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the Open-Type spec's\n        registered design-variation tag 'slnt' available at\n        https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_slnt\n\n        If a variable font has a 'slnt' (Slant) axis, then the coordinate of\n        its 'Regular' instance is required to be zero.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'ital' (Italic) axis coordinate must be zero on the 'Regular' instance.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/regular_ital_coord>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_ital_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the Open-Type spec's\n        registered design-variation tag 'ital' available at\n        https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_ital\n\n        If a variable font has a 'ital' (Italic) axis, then the coordinate of\n        its 'Regular' instance is required to be zero.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'opsz' (Optical Size) axis coordinate should be between 10 and 16 on the 'Regular' instance.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/regular_opsz_coord>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_opsz_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the Open-Type spec's\n        registered design-variation tag 'opsz' available at\n        https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_opsz\n\n        If a variable font has an 'opsz' (Optical Size) axis, then\n        the coordinate of its 'Regular' instance is recommended to be\n        a value in the range 10 to 16.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'wght' (Weight) axis coordinate must be 700 on the 'Bold' instance.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/bold_wght_coord>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_wght_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The Open-Type spec's registered\n        design-variation tag 'wght' available at\n        https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_wght\n        does not specify a required value for the 'Bold' instance of a variable font.\n\n        But Dave Crossland suggested that we should enforce\n        a required value of 700 in this case (NOTE: a distinction\n        is made between \"no bold instance present\" vs \"bold instance is present\n        but its wght coordinate is not == 700\").\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'wght' (Weight) axis coordinate must be within spec range of 1 to 1000 on all instances.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/wght_valid_range>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_wght_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the Open-Type spec's\n        registered design-variation tag 'wght' available at\n        https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_wght\n\n        On the 'wght' (Weight) axis, the valid coordinate range is 1-1000.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'wdth' (Width) axis coordinate must strictly greater than zero.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/wdth_valid_range>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_wdth_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the Open-Type spec's\n        registered design-variation tag 'wdth' available at\n        https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_wdth\n\n        On the 'wdth' (Width) axis, the valid numeric range is strictly greater than\n        zero.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'slnt' (Slant) axis coordinate specifies positive values in its range?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/slnt_range>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_slnt_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The OpenType spec says at\n        https://docs.microsoft.com/en-us/typography/opentype/spec/dvaraxistag_slnt that:\n\n        [...] the scale for the Slant axis is interpreted as the angle of slant\n        in counter-clockwise degrees from upright. This means that a typical,\n        right-leaning oblique design will have a negative slant value. This matches\n        the scale used for the italicAngle field in the post table.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validates that the value of axisNameID used by each VariationAxisRecord is greater than 255 and less than 32768.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.adobe.fonts/check/varfont/valid_axis_nameid>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the 'fvar' documentation in OpenType spec v1.9\n        https://docs.microsoft.com/en-us/typography/opentype/spec/fvar\n\n        The axisNameID field provides a name ID that can be used to obtain strings\n        from the 'name' table that can be used to refer to the axis in application\n        user interfaces. The name ID must be greater than 255 and less than 32768.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validates that the value of subfamilyNameID used by each InstanceRecord is 2, 17, or greater than 255 and less than 32768.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.adobe.fonts/check/varfont/valid_subfamily_nameid>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the 'fvar' documentation in OpenType spec v1.9\n        https://docs.microsoft.com/en-us/typography/opentype/spec/fvar\n\n        The subfamilyNameID field provides a name ID that can be used to obtain\n        strings from the 'name' table that can be treated as equivalent to name\n        ID 17 (typographic subfamily) strings for the given instance. Values of\n        2 or 17 can be used; otherwise, values must be greater than 255 and less\n        than 32768.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validates that the value of postScriptNameID used by each InstanceRecord is 6, 0xFFFF, or greater than 255 and less than 32768.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.adobe.fonts/check/varfont/valid_postscript_nameid>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the 'fvar' documentation in OpenType spec v1.9\n        https://docs.microsoft.com/en-us/typography/opentype/spec/fvar\n\n        The postScriptNameID field provides a name ID that can be used to obtain\n        strings from the 'name' table that can be treated as equivalent to name\n        ID 6 (PostScript name) strings for the given instance. Values of 6 and\n        0xFFFF can be used; otherwise, values must be greater than 255 and less\n        than 32768.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validates that when an instance record is included for the default instance, its subfamilyNameID value is set to a name ID whose string is equal to the string of either name ID 2 or 17, and its postScriptNameID value is set to a name ID whose string is equal to the string of name ID 6.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.adobe.fonts/check/varfont/valid_default_instance_nameids>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the 'fvar' documentation in OpenType spec v1.9.1\n        https://docs.microsoft.com/en-us/typography/opentype/spec/fvar\n\n        The default instance of a font is that instance for which the coordinate\n        value of each axis is the defaultValue specified in the corresponding\n        variation axis record. An instance record is not required for the default\n        instance, though an instance record can be provided. When enumerating named\n        instances, the default instance should be enumerated even if there is no\n        corresponding instance record. If an instance record is included for the\n        default instance (that is, an instance record has coordinates set to default\n        values), then the nameID value should be set to either 2 or 17 or to a\n        name ID with the same value as name ID 2 or 17. Also, if a postScriptNameID is\n        included in instance records, and the postScriptNameID value should be set\n        to 6 or to a name ID with the same value as name ID 6.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validates that all of the instance records in a given font have the same size.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.adobe.fonts/check/varfont/same_size_instance_records>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the 'fvar' documentation in OpenType spec v1.9\n        https://docs.microsoft.com/en-us/typography/opentype/spec/fvar\n\n        All of the instance records in a given font must be the same size, with\n        all either including or omitting the postScriptNameID field. [...]\n        If the value is 0xFFFF, then the value is ignored, and no PostScript name\n        equivalent is provided for the instance.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validates that all of the instance records in a given font have distinct data.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.adobe.fonts/check/varfont/distinct_instance_records>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the 'fvar' documentation in OpenType spec v1.9\n        https://docs.microsoft.com/en-us/typography/opentype/spec/fvar\n\n        All of the instance records in a font should have distinct coordinates\n        and distinct subfamilyNameID and postScriptName ID values. If two or more\n        records share the same coordinates, the same nameID values or the same\n        postScriptNameID values, then all but the first can be ignored.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validate foundry-defined design-variation axis tag names.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.adobe.fonts/check/varfont/foundry_defined_tag_name>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the Open-Type spec's syntactic requirements for\n        foundry-defined design-variation axis tags available at\n        https://learn.microsoft.com/en-us/typography/opentype/spec/dvaraxisreg\n\n        Foundry-defined tags must begin with an uppercase letter\n        and must use only uppercase letters or digits.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'wght' (Weight) axis coordinate must be 400 on the 'Regular' instance.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/regular_wght_coord>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_wght_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the Open-Type spec's\n        registered design-variation tag 'wght' available at\n        https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_wght\n\n        If a variable font has a 'wght' (Weight) axis, then the coordinate of\n        its 'Regular' instance is required to be 400.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'wdth' (Width) axis coordinate must be 100 on the 'Regular' instance.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/regular_wdth_coord>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_wdth_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the Open-Type spec's\n        registered design-variation tag 'wdth' available at\n        https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_wdth\n\n        If a variable font has a 'wdth' (Width) axis, then the coordinate of\n        its 'Regular' instance is required to be 100.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'slnt' (Slant) axis coordinate must be zero on the 'Regular' instance.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/regular_slnt_coord>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_slnt_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the Open-Type spec's\n        registered design-variation tag 'slnt' available at\n        https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_slnt\n\n        If a variable font has a 'slnt' (Slant) axis, then the coordinate of\n        its 'Regular' instance is required to be zero.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'ital' (Italic) axis coordinate must be zero on the 'Regular' instance.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/regular_ital_coord>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_ital_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the Open-Type spec's\n        registered design-variation tag 'ital' available at\n        https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_ital\n\n        If a variable font has a 'ital' (Italic) axis, then the coordinate of\n        its 'Regular' instance is required to be zero.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'opsz' (Optical Size) axis coordinate should be between 10 and 16 on the 'Regular' instance.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/regular_opsz_coord>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_opsz_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the Open-Type spec's\n        registered design-variation tag 'opsz' available at\n        https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_opsz\n\n        If a variable font has an 'opsz' (Optical Size) axis, then\n        the coordinate of its 'Regular' instance is recommended to be\n        a value in the range 10 to 16.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'wght' (Weight) axis coordinate must be 700 on the 'Bold' instance.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/bold_wght_coord>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_wght_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The Open-Type spec's registered\n        design-variation tag 'wght' available at\n        https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_wght\n        does not specify a required value for the 'Bold' instance of a variable font.\n\n        But Dave Crossland suggested that we should enforce\n        a required value of 700 in this case (NOTE: a distinction\n        is made between \"no bold instance present\" vs \"bold instance is present\n        but its wght coordinate is not == 700\").\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'wght' (Weight) axis coordinate must be within spec range of 1 to 1000 on all instances.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/wght_valid_range>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_wght_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the Open-Type spec's\n        registered design-variation tag 'wght' available at\n        https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_wght\n\n        On the 'wght' (Weight) axis, the valid coordinate range is 1-1000.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'wdth' (Width) axis coordinate must strictly greater than zero.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/wdth_valid_range>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_wdth_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the Open-Type spec's\n        registered design-variation tag 'wdth' available at\n        https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_wdth\n\n        On the 'wdth' (Width) axis, the valid numeric range is strictly greater than\n        zero.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'slnt' (Slant) axis coordinate specifies positive values in its range?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/slnt_range>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_slnt_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The OpenType spec says at\n        https://docs.microsoft.com/en-us/typography/opentype/spec/dvaraxistag_slnt that:\n\n        [...] the scale for the Slant axis is interpreted as the angle of slant\n        in counter-clockwise degrees from upright. This means that a typical,\n        right-leaning oblique design will have a negative slant value. This matches\n        the scale used for the italicAngle field in the post table.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validates that the value of axisNameID used by each VariationAxisRecord is greater than 255 and less than 32768.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.adobe.fonts/check/varfont/valid_axis_nameid>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the 'fvar' documentation in OpenType spec v1.9\n        https://docs.microsoft.com/en-us/typography/opentype/spec/fvar\n\n        The axisNameID field provides a name ID that can be used to obtain strings\n        from the 'name' table that can be used to refer to the axis in application\n        user interfaces. The name ID must be greater than 255 and less than 32768.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validates that the value of subfamilyNameID used by each InstanceRecord is 2, 17, or greater than 255 and less than 32768.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.adobe.fonts/check/varfont/valid_subfamily_nameid>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the 'fvar' documentation in OpenType spec v1.9\n        https://docs.microsoft.com/en-us/typography/opentype/spec/fvar\n\n        The subfamilyNameID field provides a name ID that can be used to obtain\n        strings from the 'name' table that can be treated as equivalent to name\n        ID 17 (typographic subfamily) strings for the given instance. Values of\n        2 or 17 can be used; otherwise, values must be greater than 255 and less\n        than 32768.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validates that the value of postScriptNameID used by each InstanceRecord is 6, 0xFFFF, or greater than 255 and less than 32768.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.adobe.fonts/check/varfont/valid_postscript_nameid>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the 'fvar' documentation in OpenType spec v1.9\n        https://docs.microsoft.com/en-us/typography/opentype/spec/fvar\n\n        The postScriptNameID field provides a name ID that can be used to obtain\n        strings from the 'name' table that can be treated as equivalent to name\n        ID 6 (PostScript name) strings for the given instance. Values of 6 and\n        0xFFFF can be used; otherwise, values must be greater than 255 and less\n        than 32768.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validates that when an instance record is included for the default instance, its subfamilyNameID value is set to a name ID whose string is equal to the string of either name ID 2 or 17, and its postScriptNameID value is set to a name ID whose string is equal to the string of name ID 6.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.adobe.fonts/check/varfont/valid_default_instance_nameids>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the 'fvar' documentation in OpenType spec v1.9.1\n        https://docs.microsoft.com/en-us/typography/opentype/spec/fvar\n\n        The default instance of a font is that instance for which the coordinate\n        value of each axis is the defaultValue specified in the corresponding\n        variation axis record. An instance record is not required for the default\n        instance, though an instance record can be provided. When enumerating named\n        instances, the default instance should be enumerated even if there is no\n        corresponding instance record. If an instance record is included for the\n        default instance (that is, an instance record has coordinates set to default\n        values), then the nameID value should be set to either 2 or 17 or to a\n        name ID with the same value as name ID 2 or 17. Also, if a postScriptNameID is\n        included in instance records, and the postScriptNameID value should be set\n        to 6 or to a name ID with the same value as name ID 6.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validates that all of the instance records in a given font have the same size.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.adobe.fonts/check/varfont/same_size_instance_records>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the 'fvar' documentation in OpenType spec v1.9\n        https://docs.microsoft.com/en-us/typography/opentype/spec/fvar\n\n        All of the instance records in a given font must be the same size, with\n        all either including or omitting the postScriptNameID field. [...]\n        If the value is 0xFFFF, then the value is ignored, and no PostScript name\n        equivalent is provided for the instance.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validates that all of the instance records in a given font have distinct data.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.adobe.fonts/check/varfont/distinct_instance_records>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the 'fvar' documentation in OpenType spec v1.9\n        https://docs.microsoft.com/en-us/typography/opentype/spec/fvar\n\n        All of the instance records in a font should have distinct coordinates\n        and distinct subfamilyNameID and postScriptName ID values. If two or more\n        records share the same coordinates, the same nameID values or the same\n        postScriptNameID values, then all but the first can be ignored.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validate foundry-defined design-variation axis tag names.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.adobe.fonts/check/varfont/foundry_defined_tag_name>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the Open-Type spec's syntactic requirements for\n        foundry-defined design-variation axis tags available at\n        https://learn.microsoft.com/en-us/typography/opentype/spec/dvaraxisreg\n\n        Foundry-defined tags must begin with an uppercase letter\n        and must use only uppercase letters or digits.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'wght' (Weight) axis coordinate must be 400 on the 'Regular' instance.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/regular_wght_coord>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_wght_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the Open-Type spec's\n        registered design-variation tag 'wght' available at\n        https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_wght\n\n        If a variable font has a 'wght' (Weight) axis, then the coordinate of\n        its 'Regular' instance is required to be 400.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'wdth' (Width) axis coordinate must be 100 on the 'Regular' instance.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/regular_wdth_coord>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_wdth_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the Open-Type spec's\n        registered design-variation tag 'wdth' available at\n        https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_wdth\n\n        If a variable font has a 'wdth' (Width) axis, then the coordinate of\n        its 'Regular' instance is required to be 100.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'slnt' (Slant) axis coordinate must be zero on the 'Regular' instance.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/regular_slnt_coord>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_slnt_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the Open-Type spec's\n        registered design-variation tag 'slnt' available at\n        https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_slnt\n\n        If a variable font has a 'slnt' (Slant) axis, then the coordinate of\n        its 'Regular' instance is required to be zero.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'ital' (Italic) axis coordinate must be zero on the 'Regular' instance.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/regular_ital_coord>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_ital_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the Open-Type spec's\n        registered design-variation tag 'ital' available at\n        https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_ital\n\n        If a variable font has a 'ital' (Italic) axis, then the coordinate of\n        its 'Regular' instance is required to be zero.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'opsz' (Optical Size) axis coordinate should be between 10 and 16 on the 'Regular' instance.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/regular_opsz_coord>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_opsz_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the Open-Type spec's\n        registered design-variation tag 'opsz' available at\n        https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_opsz\n\n        If a variable font has an 'opsz' (Optical Size) axis, then\n        the coordinate of its 'Regular' instance is recommended to be\n        a value in the range 10 to 16.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'wght' (Weight) axis coordinate must be 700 on the 'Bold' instance.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/bold_wght_coord>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_wght_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The Open-Type spec's registered\n        design-variation tag 'wght' available at\n        https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_wght\n        does not specify a required value for the 'Bold' instance of a variable font.\n\n        But Dave Crossland suggested that we should enforce\n        a required value of 700 in this case (NOTE: a distinction\n        is made between \"no bold instance present\" vs \"bold instance is present\n        but its wght coordinate is not == 700\").\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'wght' (Weight) axis coordinate must be within spec range of 1 to 1000 on all instances.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/wght_valid_range>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_wght_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the Open-Type spec's\n        registered design-variation tag 'wght' available at\n        https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_wght\n\n        On the 'wght' (Weight) axis, the valid coordinate range is 1-1000.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'wdth' (Width) axis coordinate must strictly greater than zero.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/wdth_valid_range>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_wdth_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the Open-Type spec's\n        registered design-variation tag 'wdth' available at\n        https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_wdth\n\n        On the 'wdth' (Width) axis, the valid numeric range is strictly greater than\n        zero.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'slnt' (Slant) axis coordinate specifies positive values in its range?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/slnt_range>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_slnt_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The OpenType spec says at\n        https://docs.microsoft.com/en-us/typography/opentype/spec/dvaraxistag_slnt that:\n\n        [...] the scale for the Slant axis is interpreted as the angle of slant\n        in counter-clockwise degrees from upright. This means that a typical,\n        right-leaning oblique design will have a negative slant value. This matches\n        the scale used for the italicAngle field in the post table.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validates that the value of axisNameID used by each VariationAxisRecord is greater than 255 and less than 32768.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.adobe.fonts/check/varfont/valid_axis_nameid>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the 'fvar' documentation in OpenType spec v1.9\n        https://docs.microsoft.com/en-us/typography/opentype/spec/fvar\n\n        The axisNameID field provides a name ID that can be used to obtain strings\n        from the 'name' table that can be used to refer to the axis in application\n        user interfaces. The name ID must be greater than 255 and less than 32768.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validates that the value of subfamilyNameID used by each InstanceRecord is 2, 17, or greater than 255 and less than 32768.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.adobe.fonts/check/varfont/valid_subfamily_nameid>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the 'fvar' documentation in OpenType spec v1.9\n        https://docs.microsoft.com/en-us/typography/opentype/spec/fvar\n\n        The subfamilyNameID field provides a name ID that can be used to obtain\n        strings from the 'name' table that can be treated as equivalent to name\n        ID 17 (typographic subfamily) strings for the given instance. Values of\n        2 or 17 can be used; otherwise, values must be greater than 255 and less\n        than 32768.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validates that the value of postScriptNameID used by each InstanceRecord is 6, 0xFFFF, or greater than 255 and less than 32768.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.adobe.fonts/check/varfont/valid_postscript_nameid>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the 'fvar' documentation in OpenType spec v1.9\n        https://docs.microsoft.com/en-us/typography/opentype/spec/fvar\n\n        The postScriptNameID field provides a name ID that can be used to obtain\n        strings from the 'name' table that can be treated as equivalent to name\n        ID 6 (PostScript name) strings for the given instance. Values of 6 and\n        0xFFFF can be used; otherwise, values must be greater than 255 and less\n        than 32768.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validates that when an instance record is included for the default instance, its subfamilyNameID value is set to a name ID whose string is equal to the string of either name ID 2 or 17, and its postScriptNameID value is set to a name ID whose string is equal to the string of name ID 6.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.adobe.fonts/check/varfont/valid_default_instance_nameids>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the 'fvar' documentation in OpenType spec v1.9.1\n        https://docs.microsoft.com/en-us/typography/opentype/spec/fvar\n\n        The default instance of a font is that instance for which the coordinate\n        value of each axis is the defaultValue specified in the corresponding\n        variation axis record. An instance record is not required for the default\n        instance, though an instance record can be provided. When enumerating named\n        instances, the default instance should be enumerated even if there is no\n        corresponding instance record. If an instance record is included for the\n        default instance (that is, an instance record has coordinates set to default\n        values), then the nameID value should be set to either 2 or 17 or to a\n        name ID with the same value as name ID 2 or 17. Also, if a postScriptNameID is\n        included in instance records, and the postScriptNameID value should be set\n        to 6 or to a name ID with the same value as name ID 6.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validates that all of the instance records in a given font have the same size.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.adobe.fonts/check/varfont/same_size_instance_records>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the 'fvar' documentation in OpenType spec v1.9\n        https://docs.microsoft.com/en-us/typography/opentype/spec/fvar\n\n        All of the instance records in a given font must be the same size, with\n        all either including or omitting the postScriptNameID field. [...]\n        If the value is 0xFFFF, then the value is ignored, and no PostScript name\n        equivalent is provided for the instance.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validates that all of the instance records in a given font have distinct data.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.adobe.fonts/check/varfont/distinct_instance_records>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the 'fvar' documentation in OpenType spec v1.9\n        https://docs.microsoft.com/en-us/typography/opentype/spec/fvar\n\n        All of the instance records in a font should have distinct coordinates\n        and distinct subfamilyNameID and postScriptName ID values. If two or more\n        records share the same coordinates, the same nameID values or the same\n        postScriptNameID values, then all but the first can be ignored.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validate foundry-defined design-variation axis tag names.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.adobe.fonts/check/varfont/foundry_defined_tag_name>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the Open-Type spec's syntactic requirements for\n        foundry-defined design-variation axis tags available at\n        https://learn.microsoft.com/en-us/typography/opentype/spec/dvaraxisreg\n\n        Foundry-defined tags must begin with an uppercase letter\n        and must use only uppercase letters or digits.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'wght' (Weight) axis coordinate must be 400 on the 'Regular' instance.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/regular_wght_coord>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_wght_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the Open-Type spec's\n        registered design-variation tag 'wght' available at\n        https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_wght\n\n        If a variable font has a 'wght' (Weight) axis, then the coordinate of\n        its 'Regular' instance is required to be 400.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'wdth' (Width) axis coordinate must be 100 on the 'Regular' instance.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/regular_wdth_coord>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_wdth_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the Open-Type spec's\n        registered design-variation tag 'wdth' available at\n        https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_wdth\n\n        If a variable font has a 'wdth' (Width) axis, then the coordinate of\n        its 'Regular' instance is required to be 100.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'slnt' (Slant) axis coordinate must be zero on the 'Regular' instance.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/regular_slnt_coord>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_slnt_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the Open-Type spec's\n        registered design-variation tag 'slnt' available at\n        https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_slnt\n\n        If a variable font has a 'slnt' (Slant) axis, then the coordinate of\n        its 'Regular' instance is required to be zero.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'ital' (Italic) axis coordinate must be zero on the 'Regular' instance.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/regular_ital_coord>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_ital_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the Open-Type spec's\n        registered design-variation tag 'ital' available at\n        https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_ital\n\n        If a variable font has a 'ital' (Italic) axis, then the coordinate of\n        its 'Regular' instance is required to be zero.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'opsz' (Optical Size) axis coordinate should be between 10 and 16 on the 'Regular' instance.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/regular_opsz_coord>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_opsz_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the Open-Type spec's\n        registered design-variation tag 'opsz' available at\n        https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_opsz\n\n        If a variable font has an 'opsz' (Optical Size) axis, then\n        the coordinate of its 'Regular' instance is recommended to be\n        a value in the range 10 to 16.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'wght' (Weight) axis coordinate must be 700 on the 'Bold' instance.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/bold_wght_coord>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_wght_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The Open-Type spec's registered\n        design-variation tag 'wght' available at\n        https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_wght\n        does not specify a required value for the 'Bold' instance of a variable font.\n\n        But Dave Crossland suggested that we should enforce\n        a required value of 700 in this case (NOTE: a distinction\n        is made between \"no bold instance present\" vs \"bold instance is present\n        but its wght coordinate is not == 700\").\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'wght' (Weight) axis coordinate must be within spec range of 1 to 1000 on all instances.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/wght_valid_range>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_wght_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the Open-Type spec's\n        registered design-variation tag 'wght' available at\n        https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_wght\n\n        On the 'wght' (Weight) axis, the valid coordinate range is 1-1000.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'wdth' (Width) axis coordinate must strictly greater than zero.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/wdth_valid_range>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_wdth_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the Open-Type spec's\n        registered design-variation tag 'wdth' available at\n        https://docs.microsoft.com/en-gb/typography/opentype/spec/dvaraxistag_wdth\n\n        On the 'wdth' (Width) axis, the valid numeric range is strictly greater than\n        zero.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "The variable font 'slnt' (Slant) axis coordinate specifies positive values in its range?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/slnt_range>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font, has_slnt_axis",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The OpenType spec says at\n        https://docs.microsoft.com/en-us/typography/opentype/spec/dvaraxistag_slnt that:\n\n        [...] the scale for the Slant axis is interpreted as the angle of slant\n        in counter-clockwise degrees from upright. This means that a typical,\n        right-leaning oblique design will have a negative slant value. This matches\n        the scale used for the italicAngle field in the post table.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validates that the value of axisNameID used by each VariationAxisRecord is greater than 255 and less than 32768.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.adobe.fonts/check/varfont/valid_axis_nameid>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the 'fvar' documentation in OpenType spec v1.9\n        https://docs.microsoft.com/en-us/typography/opentype/spec/fvar\n\n        The axisNameID field provides a name ID that can be used to obtain strings\n        from the 'name' table that can be used to refer to the axis in application\n        user interfaces. The name ID must be greater than 255 and less than 32768.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validates that the value of subfamilyNameID used by each InstanceRecord is 2, 17, or greater than 255 and less than 32768.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.adobe.fonts/check/varfont/valid_subfamily_nameid>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the 'fvar' documentation in OpenType spec v1.9\n        https://docs.microsoft.com/en-us/typography/opentype/spec/fvar\n\n        The subfamilyNameID field provides a name ID that can be used to obtain\n        strings from the 'name' table that can be treated as equivalent to name\n        ID 17 (typographic subfamily) strings for the given instance. Values of\n        2 or 17 can be used; otherwise, values must be greater than 255 and less\n        than 32768.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validates that the value of postScriptNameID used by each InstanceRecord is 6, 0xFFFF, or greater than 255 and less than 32768.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.adobe.fonts/check/varfont/valid_postscript_nameid>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the 'fvar' documentation in OpenType spec v1.9\n        https://docs.microsoft.com/en-us/typography/opentype/spec/fvar\n\n        The postScriptNameID field provides a name ID that can be used to obtain\n        strings from the 'name' table that can be treated as equivalent to name\n        ID 6 (PostScript name) strings for the given instance. Values of 6 and\n        0xFFFF can be used; otherwise, values must be greater than 255 and less\n        than 32768.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validates that when an instance record is included for the default instance, its subfamilyNameID value is set to a name ID whose string is equal to the string of either name ID 2 or 17, and its postScriptNameID value is set to a name ID whose string is equal to the string of name ID 6.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.adobe.fonts/check/varfont/valid_default_instance_nameids>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the 'fvar' documentation in OpenType spec v1.9.1\n        https://docs.microsoft.com/en-us/typography/opentype/spec/fvar\n\n        The default instance of a font is that instance for which the coordinate\n        value of each axis is the defaultValue specified in the corresponding\n        variation axis record. An instance record is not required for the default\n        instance, though an instance record can be provided. When enumerating named\n        instances, the default instance should be enumerated even if there is no\n        corresponding instance record. If an instance record is included for the\n        default instance (that is, an instance record has coordinates set to default\n        values), then the nameID value should be set to either 2 or 17 or to a\n        name ID with the same value as name ID 2 or 17. Also, if a postScriptNameID is\n        included in instance records, and the postScriptNameID value should be set\n        to 6 or to a name ID with the same value as name ID 6.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validates that all of the instance records in a given font have the same size.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.adobe.fonts/check/varfont/same_size_instance_records>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the 'fvar' documentation in OpenType spec v1.9\n        https://docs.microsoft.com/en-us/typography/opentype/spec/fvar\n\n        All of the instance records in a given font must be the same size, with\n        all either including or omitting the postScriptNameID field. [...]\n        If the value is 0xFFFF, then the value is ignored, and no PostScript name\n        equivalent is provided for the instance.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validates that all of the instance records in a given font have distinct data.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.adobe.fonts/check/varfont/distinct_instance_records>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the 'fvar' documentation in OpenType spec v1.9\n        https://docs.microsoft.com/en-us/typography/opentype/spec/fvar\n\n        All of the instance records in a font should have distinct coordinates\n        and distinct subfamilyNameID and postScriptName ID values. If two or more\n        records share the same coordinates, the same nameID values or the same\n        postScriptNameID values, then all but the first can be ignored.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Validate foundry-defined design-variation axis tag names.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.fvar>",
                        "<FontBakeryCheck:com.adobe.fonts/check/varfont/foundry_defined_tag_name>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the Open-Type spec's syntactic requirements for\n        foundry-defined design-variation axis tags available at\n        https://learn.microsoft.com/en-us/typography/opentype/spec/dvaraxisreg\n\n        Foundry-defined tags must begin with an uppercase letter\n        and must use only uppercase letters or digits.\n    ",
                    "result": "SKIP"
                }
            ],
            "key": [
                "<Section: fontbakery.profiles.fvar>",
                null,
                null
            ],
            "result": {
                "SKIP": 64
            }
        },
        {
            "checks": [
                {
                    "description": "Ensure VFs have 'ital' STAT axis.",
                    "key": [
                        "<Section: fontbakery.profiles.stat>",
                        "<FontBakeryCheck:com.google.fonts/check/italic_axis_in_stat>",
                        []
                    ],
                    "logs": [
                        {
                            "message": "OK",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check that related Upright and Italic VFs have a\n        'ital' axis in STAT table.\n    ",
                    "result": "PASS"
                },
                {
                    "description": "All fvar axes have a correspondent Axis Record on STAT table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.stat>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/stat_axis_record_for_each_axis>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the OpenType spec, there must be an Axis Record\n        for every axis defined in the fvar table.\n\n        https://docs.microsoft.com/en-us/typography/opentype/spec/stat#axis-records\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "STAT table has Axis Value tables?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.stat>",
                        "<FontBakeryCheck:com.adobe.fonts/check/stat_has_axis_value_tables>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: has_STAT_table",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the OpenType spec, in a variable font, it is strongly recommended\n        that axis value tables be included for every element of typographic subfamily\n        names for all of the named instances defined in the 'fvar' table.\n\n        Axis value tables are particularly important for variable fonts, but can also\n        be used in non-variable fonts. When used in non-variable fonts, axis value\n        tables for particular values should be implemented consistently across fonts\n        in the family.\n\n        If present, Format 4 Axis Value tables are checked to ensure they have more than\n        one AxisValueRecord (a strong recommendation from the OpenType spec).\n\n        https://docs.microsoft.com/en-us/typography/opentype/spec/stat#axis-value-tables\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Ensure 'ital' STAT axis is boolean value (derived from com.google.fonts/check/italic_axis_in_stat_is_boolean)",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.stat>",
                        "<FontBakeryCheck:com.google.fonts/check/italic_axis_in_stat_is_boolean:googlefonts>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: has_STAT_table",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check that the value of the 'ital' STAT axis is boolean (either 0 or 1),\n        and elided for the Upright and not elided for the Italic,\n        and that the Upright is linked to the Italic.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Ensure 'ital' STAT axis is last. (derived from com.google.fonts/check/italic_axis_last)",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.stat>",
                        "<FontBakeryCheck:com.google.fonts/check/italic_axis_last:googlefonts>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: has_STAT_table",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check that the 'ital' STAT axis is last in axis order.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "All fvar axes have a correspondent Axis Record on STAT table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.stat>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/stat_axis_record_for_each_axis>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the OpenType spec, there must be an Axis Record\n        for every axis defined in the fvar table.\n\n        https://docs.microsoft.com/en-us/typography/opentype/spec/stat#axis-records\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "STAT table has Axis Value tables?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.stat>",
                        "<FontBakeryCheck:com.adobe.fonts/check/stat_has_axis_value_tables>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: has_STAT_table",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the OpenType spec, in a variable font, it is strongly recommended\n        that axis value tables be included for every element of typographic subfamily\n        names for all of the named instances defined in the 'fvar' table.\n\n        Axis value tables are particularly important for variable fonts, but can also\n        be used in non-variable fonts. When used in non-variable fonts, axis value\n        tables for particular values should be implemented consistently across fonts\n        in the family.\n\n        If present, Format 4 Axis Value tables are checked to ensure they have more than\n        one AxisValueRecord (a strong recommendation from the OpenType spec).\n\n        https://docs.microsoft.com/en-us/typography/opentype/spec/stat#axis-value-tables\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Ensure 'ital' STAT axis is boolean value (derived from com.google.fonts/check/italic_axis_in_stat_is_boolean)",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.stat>",
                        "<FontBakeryCheck:com.google.fonts/check/italic_axis_in_stat_is_boolean:googlefonts>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: has_STAT_table",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check that the value of the 'ital' STAT axis is boolean (either 0 or 1),\n        and elided for the Upright and not elided for the Italic,\n        and that the Upright is linked to the Italic.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Ensure 'ital' STAT axis is last. (derived from com.google.fonts/check/italic_axis_last)",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.stat>",
                        "<FontBakeryCheck:com.google.fonts/check/italic_axis_last:googlefonts>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: has_STAT_table",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check that the 'ital' STAT axis is last in axis order.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "All fvar axes have a correspondent Axis Record on STAT table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.stat>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/stat_axis_record_for_each_axis>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the OpenType spec, there must be an Axis Record\n        for every axis defined in the fvar table.\n\n        https://docs.microsoft.com/en-us/typography/opentype/spec/stat#axis-records\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "STAT table has Axis Value tables?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.stat>",
                        "<FontBakeryCheck:com.adobe.fonts/check/stat_has_axis_value_tables>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: has_STAT_table",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the OpenType spec, in a variable font, it is strongly recommended\n        that axis value tables be included for every element of typographic subfamily\n        names for all of the named instances defined in the 'fvar' table.\n\n        Axis value tables are particularly important for variable fonts, but can also\n        be used in non-variable fonts. When used in non-variable fonts, axis value\n        tables for particular values should be implemented consistently across fonts\n        in the family.\n\n        If present, Format 4 Axis Value tables are checked to ensure they have more than\n        one AxisValueRecord (a strong recommendation from the OpenType spec).\n\n        https://docs.microsoft.com/en-us/typography/opentype/spec/stat#axis-value-tables\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Ensure 'ital' STAT axis is boolean value (derived from com.google.fonts/check/italic_axis_in_stat_is_boolean)",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.stat>",
                        "<FontBakeryCheck:com.google.fonts/check/italic_axis_in_stat_is_boolean:googlefonts>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: has_STAT_table",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check that the value of the 'ital' STAT axis is boolean (either 0 or 1),\n        and elided for the Upright and not elided for the Italic,\n        and that the Upright is linked to the Italic.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Ensure 'ital' STAT axis is last. (derived from com.google.fonts/check/italic_axis_last)",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.stat>",
                        "<FontBakeryCheck:com.google.fonts/check/italic_axis_last:googlefonts>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: has_STAT_table",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check that the 'ital' STAT axis is last in axis order.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "All fvar axes have a correspondent Axis Record on STAT table?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.stat>",
                        "<FontBakeryCheck:com.google.fonts/check/varfont/stat_axis_record_for_each_axis>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: is_variable_font",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the OpenType spec, there must be an Axis Record\n        for every axis defined in the fvar table.\n\n        https://docs.microsoft.com/en-us/typography/opentype/spec/stat#axis-records\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "STAT table has Axis Value tables?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.stat>",
                        "<FontBakeryCheck:com.adobe.fonts/check/stat_has_axis_value_tables>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: has_STAT_table",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        According to the OpenType spec, in a variable font, it is strongly recommended\n        that axis value tables be included for every element of typographic subfamily\n        names for all of the named instances defined in the 'fvar' table.\n\n        Axis value tables are particularly important for variable fonts, but can also\n        be used in non-variable fonts. When used in non-variable fonts, axis value\n        tables for particular values should be implemented consistently across fonts\n        in the family.\n\n        If present, Format 4 Axis Value tables are checked to ensure they have more than\n        one AxisValueRecord (a strong recommendation from the OpenType spec).\n\n        https://docs.microsoft.com/en-us/typography/opentype/spec/stat#axis-value-tables\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Ensure 'ital' STAT axis is boolean value (derived from com.google.fonts/check/italic_axis_in_stat_is_boolean)",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.stat>",
                        "<FontBakeryCheck:com.google.fonts/check/italic_axis_in_stat_is_boolean:googlefonts>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: has_STAT_table",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check that the value of the 'ital' STAT axis is boolean (either 0 or 1),\n        and elided for the Upright and not elided for the Italic,\n        and that the Upright is linked to the Italic.\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Ensure 'ital' STAT axis is last. (derived from com.google.fonts/check/italic_axis_last)",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.stat>",
                        "<FontBakeryCheck:com.google.fonts/check/italic_axis_last:googlefonts>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Unfulfilled Conditions: has_STAT_table",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Check that the 'ital' STAT axis is last in axis order.\n    ",
                    "result": "SKIP"
                }
            ],
            "key": [
                "<Section: fontbakery.profiles.stat>",
                null,
                null
            ],
            "result": {
                "PASS": 1,
                "SKIP": 16
            }
        },
        {
            "checks": [
                {
                    "description": "Does the font have any invalid feature tags?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.layout>",
                        "<FontBakeryCheck:com.google.fonts/check/layout_valid_feature_tags>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "No invalid feature tags were found",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Incorrect tags can be indications of typos, leftover debugging code or\n        questionable approaches, or user error in the font editor. Such typos can\n        cause features and language support to fail to work as intended.\n    ",
                    "result": "PASS",
                    "severity": 8
                },
                {
                    "description": "Does the font have any invalid script tags?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.layout>",
                        "<FontBakeryCheck:com.google.fonts/check/layout_valid_script_tags>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "No invalid script tags were found",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Incorrect script tags can be indications of typos, leftover debugging code\n        or questionable approaches, or user error in the font editor. Such typos can\n        cause features and language support to fail to work as intended.\n    ",
                    "result": "PASS",
                    "severity": 8
                },
                {
                    "description": "Does the font have any invalid language tags?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.layout>",
                        "<FontBakeryCheck:com.google.fonts/check/layout_valid_language_tags>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "No invalid language tags were found",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Incorrect language tags can be indications of typos, leftover debugging code\n        or questionable approaches, or user error in the font editor. Such typos can\n        cause features and language support to fail to work as intended.\n    ",
                    "result": "PASS",
                    "severity": 8
                },
                {
                    "description": "Does the font have any invalid feature tags?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.layout>",
                        "<FontBakeryCheck:com.google.fonts/check/layout_valid_feature_tags>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "No invalid feature tags were found",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Incorrect tags can be indications of typos, leftover debugging code or\n        questionable approaches, or user error in the font editor. Such typos can\n        cause features and language support to fail to work as intended.\n    ",
                    "result": "PASS",
                    "severity": 8
                },
                {
                    "description": "Does the font have any invalid script tags?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.layout>",
                        "<FontBakeryCheck:com.google.fonts/check/layout_valid_script_tags>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "No invalid script tags were found",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Incorrect script tags can be indications of typos, leftover debugging code\n        or questionable approaches, or user error in the font editor. Such typos can\n        cause features and language support to fail to work as intended.\n    ",
                    "result": "PASS",
                    "severity": 8
                },
                {
                    "description": "Does the font have any invalid language tags?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.layout>",
                        "<FontBakeryCheck:com.google.fonts/check/layout_valid_language_tags>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "No invalid language tags were found",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Incorrect language tags can be indications of typos, leftover debugging code\n        or questionable approaches, or user error in the font editor. Such typos can\n        cause features and language support to fail to work as intended.\n    ",
                    "result": "PASS",
                    "severity": 8
                },
                {
                    "description": "Does the font have any invalid feature tags?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.layout>",
                        "<FontBakeryCheck:com.google.fonts/check/layout_valid_feature_tags>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "No invalid feature tags were found",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Incorrect tags can be indications of typos, leftover debugging code or\n        questionable approaches, or user error in the font editor. Such typos can\n        cause features and language support to fail to work as intended.\n    ",
                    "result": "PASS",
                    "severity": 8
                },
                {
                    "description": "Does the font have any invalid script tags?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.layout>",
                        "<FontBakeryCheck:com.google.fonts/check/layout_valid_script_tags>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "No invalid script tags were found",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Incorrect script tags can be indications of typos, leftover debugging code\n        or questionable approaches, or user error in the font editor. Such typos can\n        cause features and language support to fail to work as intended.\n    ",
                    "result": "PASS",
                    "severity": 8
                },
                {
                    "description": "Does the font have any invalid language tags?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.layout>",
                        "<FontBakeryCheck:com.google.fonts/check/layout_valid_language_tags>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "No invalid language tags were found",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Incorrect language tags can be indications of typos, leftover debugging code\n        or questionable approaches, or user error in the font editor. Such typos can\n        cause features and language support to fail to work as intended.\n    ",
                    "result": "PASS",
                    "severity": 8
                },
                {
                    "description": "Does the font have any invalid feature tags?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.layout>",
                        "<FontBakeryCheck:com.google.fonts/check/layout_valid_feature_tags>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "No invalid feature tags were found",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Incorrect tags can be indications of typos, leftover debugging code or\n        questionable approaches, or user error in the font editor. Such typos can\n        cause features and language support to fail to work as intended.\n    ",
                    "result": "PASS",
                    "severity": 8
                },
                {
                    "description": "Does the font have any invalid script tags?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.layout>",
                        "<FontBakeryCheck:com.google.fonts/check/layout_valid_script_tags>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "No invalid script tags were found",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Incorrect script tags can be indications of typos, leftover debugging code\n        or questionable approaches, or user error in the font editor. Such typos can\n        cause features and language support to fail to work as intended.\n    ",
                    "result": "PASS",
                    "severity": 8
                },
                {
                    "description": "Does the font have any invalid language tags?",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: fontbakery.profiles.layout>",
                        "<FontBakeryCheck:com.google.fonts/check/layout_valid_language_tags>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "No invalid language tags were found",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Incorrect language tags can be indications of typos, leftover debugging code\n        or questionable approaches, or user error in the font editor. Such typos can\n        cause features and language support to fail to work as intended.\n    ",
                    "result": "PASS",
                    "severity": 8
                }
            ],
            "key": [
                "<Section: fontbakery.profiles.layout>",
                null,
                null
            ],
            "result": {
                "PASS": 12
            }
        },
        {
            "checks": [
                {
                    "description": "Check that texts shape as per expectation",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Shaping Checks>",
                        "<FontBakeryCheck:com.google.fonts/check/shaping/regression>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Shaping test directory not defined in configuration file",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Fonts with complex layout rules can benefit from regression tests to ensure\n        that the rules are behaving as designed. This checks runs a shaping test\n        suite and compares expected shaping against actual shaping, reporting\n        any differences.\n\n        Shaping test suites should be written by the font engineer and referenced\n        in the FontBakery configuration file. For more information about write\n        shaping test files and how to configure FontBakery to read the shaping\n        test suites, see https://simoncozens.github.io/tdd-for-otl/\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check that no forbidden glyphs are found while shaping",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Shaping Checks>",
                        "<FontBakeryCheck:com.google.fonts/check/shaping/forbidden>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Shaping test directory not defined in configuration file",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Fonts with complex layout rules can benefit from regression tests to ensure\n        that the rules are behaving as designed. This checks runs a shaping test\n        suite and reports if any glyphs are generated in the shaping which should\n        not be produced. (For example, .notdef glyphs, visible viramas, etc.)\n\n        Shaping test suites should be written by the font engineer and referenced in\n        the FontBakery configuration file. For more information about write shaping\n        test files and how to configure FontBakery to read the shaping test suites,\n        see https://simoncozens.github.io/tdd-for-otl/\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check that no collisions are found while shaping",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Shaping Checks>",
                        "<FontBakeryCheck:com.google.fonts/check/shaping/collides>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Shaping test directory not defined in configuration file",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Fonts with complex layout rules can benefit from regression tests to ensure\n        that the rules are behaving as designed. This checks runs a shaping test\n        suite and reports instances where the glyphs collide in unexpected ways.\n\n        Shaping test suites should be written by the font engineer and referenced\n        in the FontBakery configuration file. For more information about write\n        shaping test files and how to configure FontBakery to read the shaping\n        test suites, see https://simoncozens.github.io/tdd-for-otl/\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Ensure dotted circle glyph is present and can attach marks.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Shaping Checks>",
                        "<FontBakeryCheck:com.google.fonts/check/dotted_circle>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "All marks were anchored to dotted circle",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The dotted circle character (U+25CC) is inserted by shaping engines before\n        mark glyphs which do not have an associated base, especially in the context\n        of broken syllabic clusters.\n\n        For fonts containing combining marks, it is recommended that the dotted circle\n        character be included so that these isolated marks can be displayed properly;\n        for fonts supporting complex scripts, this should be considered mandatory.\n\n        Additionally, when a dotted circle glyph is present, it should be able to\n        display all marks correctly, meaning that it should contain anchors for all\n        attaching marks.\n    ",
                    "result": "PASS",
                    "severity": 3
                },
                {
                    "description": "Ensure soft_dotted characters lose their dot when combined with marks that replace the dot.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Bold.ttf",
                    "key": [
                        "<Section: Shaping Checks>",
                        "<FontBakeryCheck:com.google.fonts/check/soft_dotted>",
                        [
                            [
                                "font",
                                0
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The dot of soft dotted characters used in orthographies _must_ disappear in the following strings: i\u030a j\u0300 j\u0301 j\u0303 j\u0304 j\u0308 \u012f\u0300 \u012f\u0301 \u012f\u0302 \u012f\u0303 \u012f\u0304 \u012f\u030c\n\nThe dot of soft dotted characters _should_ disappear in other cases, for example: i\u0305 i\u0307 i\u030c i\u0312 i\u0323\u0305 i\u0323\u0307 i\u0323\u030a i\u0323\u030c i\u0323\u0312 i\u0326\u0305 i\u0326\u0307 i\u0326\u030a i\u0326\u030c i\u0326\u0312 i\u0327\u0305 i\u0327\u0307 i\u0327\u030a i\u0327\u030c i\u0327\u0312 j\u0305\n\nYour font does *not* cover the following languages that require the soft-dotted feature: Dutch (Latn, 31,709,104 speakers), Navajo (Latn, 166,319 speakers), Lithuanian (Latn, 2,357,094 speakers), Aghem (Latn, 38,843 speakers), Ukrainian (Cyrl, 29,273,587 speakers), Basaa (Latn, 332,940 speakers), Belarusian (Cyrl, 10,064,517 speakers), Igbo (Latn, 27,823,640 speakers). [code: soft-dotted]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        An accent placed on characters with a \"soft dot\", like i or j, causes\n        the dot to disappear.\n        An explicit dot above can be added where required.\n        See \"Diacritics on i and j\" in Section 7.1, \"Latin\" in The Unicode Standard.\n\n        Characters with the Soft_Dotted property are listed in\n        https://www.unicode.org/Public/UCD/latest/ucd/PropList.txt\n\n        See also:\n        https://googlefonts.github.io/gf-guide/diacritics.html#soft-dotted-glyphs\n    ",
                    "result": "WARN",
                    "severity": 3
                },
                {
                    "description": "Check that texts shape as per expectation",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Shaping Checks>",
                        "<FontBakeryCheck:com.google.fonts/check/shaping/regression>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Shaping test directory not defined in configuration file",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Fonts with complex layout rules can benefit from regression tests to ensure\n        that the rules are behaving as designed. This checks runs a shaping test\n        suite and compares expected shaping against actual shaping, reporting\n        any differences.\n\n        Shaping test suites should be written by the font engineer and referenced\n        in the FontBakery configuration file. For more information about write\n        shaping test files and how to configure FontBakery to read the shaping\n        test suites, see https://simoncozens.github.io/tdd-for-otl/\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check that no forbidden glyphs are found while shaping",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Shaping Checks>",
                        "<FontBakeryCheck:com.google.fonts/check/shaping/forbidden>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Shaping test directory not defined in configuration file",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Fonts with complex layout rules can benefit from regression tests to ensure\n        that the rules are behaving as designed. This checks runs a shaping test\n        suite and reports if any glyphs are generated in the shaping which should\n        not be produced. (For example, .notdef glyphs, visible viramas, etc.)\n\n        Shaping test suites should be written by the font engineer and referenced in\n        the FontBakery configuration file. For more information about write shaping\n        test files and how to configure FontBakery to read the shaping test suites,\n        see https://simoncozens.github.io/tdd-for-otl/\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check that no collisions are found while shaping",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Shaping Checks>",
                        "<FontBakeryCheck:com.google.fonts/check/shaping/collides>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Shaping test directory not defined in configuration file",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Fonts with complex layout rules can benefit from regression tests to ensure\n        that the rules are behaving as designed. This checks runs a shaping test\n        suite and reports instances where the glyphs collide in unexpected ways.\n\n        Shaping test suites should be written by the font engineer and referenced\n        in the FontBakery configuration file. For more information about write\n        shaping test files and how to configure FontBakery to read the shaping\n        test suites, see https://simoncozens.github.io/tdd-for-otl/\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Ensure dotted circle glyph is present and can attach marks.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Shaping Checks>",
                        "<FontBakeryCheck:com.google.fonts/check/dotted_circle>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "All marks were anchored to dotted circle",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The dotted circle character (U+25CC) is inserted by shaping engines before\n        mark glyphs which do not have an associated base, especially in the context\n        of broken syllabic clusters.\n\n        For fonts containing combining marks, it is recommended that the dotted circle\n        character be included so that these isolated marks can be displayed properly;\n        for fonts supporting complex scripts, this should be considered mandatory.\n\n        Additionally, when a dotted circle glyph is present, it should be able to\n        display all marks correctly, meaning that it should contain anchors for all\n        attaching marks.\n    ",
                    "result": "PASS",
                    "severity": 3
                },
                {
                    "description": "Ensure soft_dotted characters lose their dot when combined with marks that replace the dot.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-BoldItalic.ttf",
                    "key": [
                        "<Section: Shaping Checks>",
                        "<FontBakeryCheck:com.google.fonts/check/soft_dotted>",
                        [
                            [
                                "font",
                                1
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The dot of soft dotted characters used in orthographies _must_ disappear in the following strings: i\u030a j\u0300 j\u0301 j\u0303 j\u0304 j\u0308 \u012f\u0300 \u012f\u0301 \u012f\u0302 \u012f\u0303 \u012f\u0304 \u012f\u030c\n\nThe dot of soft dotted characters _should_ disappear in other cases, for example: i\u0305 i\u0307 i\u030c i\u0312 i\u0326\u0305 i\u0326\u0307 i\u0326\u030a i\u0326\u030c i\u0326\u0312 i\u0327\u0305 i\u0327\u0307 i\u0327\u030a i\u0327\u030c i\u0327\u0312 j\u0305 j\u0306 j\u0307 j\u030a j\u030c j\u0312\n\nYour font does *not* cover the following languages that require the soft-dotted feature: Navajo (Latn, 166,319 speakers), Lithuanian (Latn, 2,357,094 speakers), Basaa (Latn, 332,940 speakers), Dutch (Latn, 31,709,104 speakers), Ukrainian (Cyrl, 29,273,587 speakers), Belarusian (Cyrl, 10,064,517 speakers), Igbo (Latn, 27,823,640 speakers), Aghem (Latn, 38,843 speakers). [code: soft-dotted]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        An accent placed on characters with a \"soft dot\", like i or j, causes\n        the dot to disappear.\n        An explicit dot above can be added where required.\n        See \"Diacritics on i and j\" in Section 7.1, \"Latin\" in The Unicode Standard.\n\n        Characters with the Soft_Dotted property are listed in\n        https://www.unicode.org/Public/UCD/latest/ucd/PropList.txt\n\n        See also:\n        https://googlefonts.github.io/gf-guide/diacritics.html#soft-dotted-glyphs\n    ",
                    "result": "WARN",
                    "severity": 3
                },
                {
                    "description": "Check that texts shape as per expectation",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Shaping Checks>",
                        "<FontBakeryCheck:com.google.fonts/check/shaping/regression>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Shaping test directory not defined in configuration file",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Fonts with complex layout rules can benefit from regression tests to ensure\n        that the rules are behaving as designed. This checks runs a shaping test\n        suite and compares expected shaping against actual shaping, reporting\n        any differences.\n\n        Shaping test suites should be written by the font engineer and referenced\n        in the FontBakery configuration file. For more information about write\n        shaping test files and how to configure FontBakery to read the shaping\n        test suites, see https://simoncozens.github.io/tdd-for-otl/\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check that no forbidden glyphs are found while shaping",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Shaping Checks>",
                        "<FontBakeryCheck:com.google.fonts/check/shaping/forbidden>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Shaping test directory not defined in configuration file",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Fonts with complex layout rules can benefit from regression tests to ensure\n        that the rules are behaving as designed. This checks runs a shaping test\n        suite and reports if any glyphs are generated in the shaping which should\n        not be produced. (For example, .notdef glyphs, visible viramas, etc.)\n\n        Shaping test suites should be written by the font engineer and referenced in\n        the FontBakery configuration file. For more information about write shaping\n        test files and how to configure FontBakery to read the shaping test suites,\n        see https://simoncozens.github.io/tdd-for-otl/\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check that no collisions are found while shaping",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Shaping Checks>",
                        "<FontBakeryCheck:com.google.fonts/check/shaping/collides>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Shaping test directory not defined in configuration file",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Fonts with complex layout rules can benefit from regression tests to ensure\n        that the rules are behaving as designed. This checks runs a shaping test\n        suite and reports instances where the glyphs collide in unexpected ways.\n\n        Shaping test suites should be written by the font engineer and referenced\n        in the FontBakery configuration file. For more information about write\n        shaping test files and how to configure FontBakery to read the shaping\n        test suites, see https://simoncozens.github.io/tdd-for-otl/\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Ensure dotted circle glyph is present and can attach marks.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Shaping Checks>",
                        "<FontBakeryCheck:com.google.fonts/check/dotted_circle>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "All marks were anchored to dotted circle",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The dotted circle character (U+25CC) is inserted by shaping engines before\n        mark glyphs which do not have an associated base, especially in the context\n        of broken syllabic clusters.\n\n        For fonts containing combining marks, it is recommended that the dotted circle\n        character be included so that these isolated marks can be displayed properly;\n        for fonts supporting complex scripts, this should be considered mandatory.\n\n        Additionally, when a dotted circle glyph is present, it should be able to\n        display all marks correctly, meaning that it should contain anchors for all\n        attaching marks.\n    ",
                    "result": "PASS",
                    "severity": 3
                },
                {
                    "description": "Ensure soft_dotted characters lose their dot when combined with marks that replace the dot.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Italic.ttf",
                    "key": [
                        "<Section: Shaping Checks>",
                        "<FontBakeryCheck:com.google.fonts/check/soft_dotted>",
                        [
                            [
                                "font",
                                2
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The dot of soft dotted characters used in orthographies _must_ disappear in the following strings: i\u030a j\u0300 j\u0301 j\u0303 j\u0304 j\u0308 \u012f\u0300 \u012f\u0301 \u012f\u0302 \u012f\u0303 \u012f\u0304 \u012f\u030c\n\nThe dot of soft dotted characters _should_ disappear in other cases, for example: i\u0305 i\u0307 i\u030c i\u0312 i\u0323\u0305 i\u0323\u0307 i\u0323\u030a i\u0323\u030c i\u0323\u0312 i\u0326\u0305 i\u0326\u0307 i\u0326\u030a i\u0326\u030c i\u0326\u0312 i\u0327\u0305 i\u0327\u0307 i\u0327\u030a i\u0327\u030c i\u0327\u0312 j\u0305\n\nYour font does *not* cover the following languages that require the soft-dotted feature: Aghem (Latn, 38,843 speakers), Basaa (Latn, 332,940 speakers), Ukrainian (Cyrl, 29,273,587 speakers), Dutch (Latn, 31,709,104 speakers), Navajo (Latn, 166,319 speakers), Igbo (Latn, 27,823,640 speakers), Lithuanian (Latn, 2,357,094 speakers), Belarusian (Cyrl, 10,064,517 speakers). [code: soft-dotted]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        An accent placed on characters with a \"soft dot\", like i or j, causes\n        the dot to disappear.\n        An explicit dot above can be added where required.\n        See \"Diacritics on i and j\" in Section 7.1, \"Latin\" in The Unicode Standard.\n\n        Characters with the Soft_Dotted property are listed in\n        https://www.unicode.org/Public/UCD/latest/ucd/PropList.txt\n\n        See also:\n        https://googlefonts.github.io/gf-guide/diacritics.html#soft-dotted-glyphs\n    ",
                    "result": "WARN",
                    "severity": 3
                },
                {
                    "description": "Check that texts shape as per expectation",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Shaping Checks>",
                        "<FontBakeryCheck:com.google.fonts/check/shaping/regression>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Shaping test directory not defined in configuration file",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Fonts with complex layout rules can benefit from regression tests to ensure\n        that the rules are behaving as designed. This checks runs a shaping test\n        suite and compares expected shaping against actual shaping, reporting\n        any differences.\n\n        Shaping test suites should be written by the font engineer and referenced\n        in the FontBakery configuration file. For more information about write\n        shaping test files and how to configure FontBakery to read the shaping\n        test suites, see https://simoncozens.github.io/tdd-for-otl/\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check that no forbidden glyphs are found while shaping",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Shaping Checks>",
                        "<FontBakeryCheck:com.google.fonts/check/shaping/forbidden>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Shaping test directory not defined in configuration file",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Fonts with complex layout rules can benefit from regression tests to ensure\n        that the rules are behaving as designed. This checks runs a shaping test\n        suite and reports if any glyphs are generated in the shaping which should\n        not be produced. (For example, .notdef glyphs, visible viramas, etc.)\n\n        Shaping test suites should be written by the font engineer and referenced in\n        the FontBakery configuration file. For more information about write shaping\n        test files and how to configure FontBakery to read the shaping test suites,\n        see https://simoncozens.github.io/tdd-for-otl/\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Check that no collisions are found while shaping",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Shaping Checks>",
                        "<FontBakeryCheck:com.google.fonts/check/shaping/collides>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "Shaping test directory not defined in configuration file",
                            "status": "SKIP",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        Fonts with complex layout rules can benefit from regression tests to ensure\n        that the rules are behaving as designed. This checks runs a shaping test\n        suite and reports instances where the glyphs collide in unexpected ways.\n\n        Shaping test suites should be written by the font engineer and referenced\n        in the FontBakery configuration file. For more information about write\n        shaping test files and how to configure FontBakery to read the shaping\n        test suites, see https://simoncozens.github.io/tdd-for-otl/\n    ",
                    "result": "SKIP"
                },
                {
                    "description": "Ensure dotted circle glyph is present and can attach marks.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Shaping Checks>",
                        "<FontBakeryCheck:com.google.fonts/check/dotted_circle>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "All marks were anchored to dotted circle",
                            "status": "PASS",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        The dotted circle character (U+25CC) is inserted by shaping engines before\n        mark glyphs which do not have an associated base, especially in the context\n        of broken syllabic clusters.\n\n        For fonts containing combining marks, it is recommended that the dotted circle\n        character be included so that these isolated marks can be displayed properly;\n        for fonts supporting complex scripts, this should be considered mandatory.\n\n        Additionally, when a dotted circle glyph is present, it should be able to\n        display all marks correctly, meaning that it should contain anchors for all\n        attaching marks.\n    ",
                    "result": "PASS",
                    "severity": 3
                },
                {
                    "description": "Ensure soft_dotted characters lose their dot when combined with marks that replace the dot.",
                    "filename": "/Users/simon/others-repos/fonts/ofl/amiri/Amiri-Regular.ttf",
                    "key": [
                        "<Section: Shaping Checks>",
                        "<FontBakeryCheck:com.google.fonts/check/soft_dotted>",
                        [
                            [
                                "font",
                                3
                            ]
                        ]
                    ],
                    "logs": [
                        {
                            "message": "The dot of soft dotted characters used in orthographies _must_ disappear in the following strings: i\u030a j\u0300 j\u0301 j\u0303 j\u0304 j\u0308 \u012f\u0300 \u012f\u0301 \u012f\u0302 \u012f\u0303 \u012f\u0304 \u012f\u030c\n\nThe dot of soft dotted characters _should_ disappear in other cases, for example: i\u0305 i\u0307 i\u030c i\u0312 i\u0325\u0305 i\u0325\u0307 i\u0325\u030a i\u0325\u030c i\u0325\u0312 i\u0326\u0305 i\u0326\u0307 i\u0326\u030a i\u0326\u030c i\u0326\u0312 i\u0327\u0305 i\u0327\u0307 i\u0327\u030a i\u0327\u030c i\u0327\u0312 j\u0305\n\nYour font does *not* cover the following languages that require the soft-dotted feature: Belarusian (Cyrl, 10,064,517 speakers), Navajo (Latn, 166,319 speakers), Ukrainian (Cyrl, 29,273,587 speakers), Basaa (Latn, 332,940 speakers), Aghem (Latn, 38,843 speakers), Igbo (Latn, 27,823,640 speakers), Dutch (Latn, 31,709,104 speakers), Lithuanian (Latn, 2,357,094 speakers). [code: soft-dotted]",
                            "status": "WARN",
                            "traceback": null
                        }
                    ],
                    "rationale": "\n        An accent placed on characters with a \"soft dot\", like i or j, causes\n        the dot to disappear.\n        An explicit dot above can be added where required.\n        See \"Diacritics on i and j\" in Section 7.1, \"Latin\" in The Unicode Standard.\n\n        Characters with the Soft_Dotted property are listed in\n        https://www.unicode.org/Public/UCD/latest/ucd/PropList.txt\n\n        See also:\n        https://googlefonts.github.io/gf-guide/diacritics.html#soft-dotted-glyphs\n    ",
                    "result": "WARN",
                    "severity": 3
                }
            ],
            "key": [
                "<Section: Shaping Checks>",
                null,
                null
            ],
            "result": {
                "PASS": 4,
                "SKIP": 12,
                "WARN": 4
            }
        }
    ]
}